
MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013720  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e38  080138b0  080138b0  000148b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156e8  080156e8  00017248  2**0
                  CONTENTS
  4 .ARM          00000008  080156e8  080156e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156f0  080156f0  00017248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156f0  080156f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080156f4  080156f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  080156f8  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017248  2**0
                  CONTENTS
 10 .bss          00001848  20000248  20000248  00017248  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a90  20001a90  00017248  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00017248  2**0
                  CONTENTS, READONLY
 13 .debug_info   000282ce  00000000  00000000  0001727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000508a  00000000  00000000  0003f54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  000445d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d5  00000000  00000000  00045990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263c6  00000000  00000000  00046e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002799d  00000000  00000000  0006d22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2376  00000000  00000000  00094bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000011f7  00000000  00000000  00166f3e  2**0
                  CONTENTS, READONLY
 21 .iar.rtmodel  0000015a  00000000  00000000  00168135  2**0
                  CONTENTS, READONLY
 22 .iar_vfe_header 0000001c  00000000  00000000  00168290  2**2
                  CONTENTS, READONLY
 23 .debug_frame  00007ddc  00000000  00000000  001682ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0000b7be  00000000  00000000  00170088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000005e  00000000  00000000  0017b846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00004a0c  00000000  00000000  0017b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000551  00000000  00000000  001802b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_pubnames 00001a8a  00000000  00000000  00180801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013898 	.word	0x08013898

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08013898 	.word	0x08013898

080001d0 <inv_vector_compass_cal_sensitivity>:
 80001d0:	f8df 1e14 	ldr.w	r1, [pc, #3604]	@ 8000fe8 <??DataTable6>
 80001d4:	f8c1 00e8 	str.w	r0, [r1, #232]	@ 0xe8
 80001d8:	4770      	bx	lr

080001da <inv_check_peaks>:
 80001da:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001de:	b085      	sub	sp, #20
 80001e0:	4614      	mov	r4, r2
 80001e2:	461d      	mov	r5, r3
 80001e4:	f04f 0800 	mov.w	r8, #0
 80001e8:	4647      	mov	r7, r8
 80001ea:	463e      	mov	r6, r7
 80001ec:	f8df 9df8 	ldr.w	r9, [pc, #3576]	@ 8000fe8 <??DataTable6>
 80001f0:	f8d9 00ac 	ldr.w	r0, [r9, #172]	@ 0xac
 80001f4:	f005 fcbe 	bl	8005b74 <__aeabi_i2d>
 80001f8:	4622      	mov	r2, r4
 80001fa:	462b      	mov	r3, r5
 80001fc:	f005 ff84 	bl	8006108 <__aeabi_cdcmpeq>
 8000200:	d30a      	bcc.n	8000218 <??inv_check_peaks_0>
 8000202:	f8d9 00b0 	ldr.w	r0, [r9, #176]	@ 0xb0
 8000206:	f005 fcb5 	bl	8005b74 <__aeabi_i2d>
 800020a:	4602      	mov	r2, r0
 800020c:	460b      	mov	r3, r1
 800020e:	4620      	mov	r0, r4
 8000210:	4629      	mov	r1, r5
 8000212:	f005 ff79 	bl	8006108 <__aeabi_cdcmpeq>
 8000216:	d201      	bcs.n	800021c <??inv_check_peaks_1>

08000218 <??inv_check_peaks_0>:
 8000218:	2001      	movs	r0, #1
 800021a:	e0ca      	b.n	80003b2 <??inv_check_peaks_2>

0800021c <??inv_check_peaks_1>:
 800021c:	9805      	ldr	r0, [sp, #20]
 800021e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000222:	9905      	ldr	r1, [sp, #20]
 8000224:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8000228:	1a40      	subs	r0, r0, r1
 800022a:	f005 fca3 	bl	8005b74 <__aeabi_i2d>
 800022e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000232:	4622      	mov	r2, r4
 8000234:	462b      	mov	r3, r5
 8000236:	f005 ff67 	bl	8006108 <__aeabi_cdcmpeq>
 800023a:	d201      	bcs.n	8000240 <??inv_check_peaks_3>
 800023c:	f04f 0801 	mov.w	r8, #1

08000240 <??inv_check_peaks_3>:
 8000240:	9805      	ldr	r0, [sp, #20]
 8000242:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8000246:	9905      	ldr	r1, [sp, #20]
 8000248:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 800024c:	1a40      	subs	r0, r0, r1
 800024e:	f005 fc91 	bl	8005b74 <__aeabi_i2d>
 8000252:	e9cd 0100 	strd	r0, r1, [sp]
 8000256:	4622      	mov	r2, r4
 8000258:	462b      	mov	r3, r5
 800025a:	f005 ff55 	bl	8006108 <__aeabi_cdcmpeq>
 800025e:	d201      	bcs.n	8000264 <??inv_check_peaks_4>
 8000260:	f108 0801 	add.w	r8, r8, #1

08000264 <??inv_check_peaks_4>:
 8000264:	9805      	ldr	r0, [sp, #20]
 8000266:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 800026a:	9905      	ldr	r1, [sp, #20]
 800026c:	f9b1 1022 	ldrsh.w	r1, [r1, #34]	@ 0x22
 8000270:	1a40      	subs	r0, r0, r1
 8000272:	f005 fc7f 	bl	8005b74 <__aeabi_i2d>
 8000276:	4682      	mov	sl, r0
 8000278:	468b      	mov	fp, r1
 800027a:	4622      	mov	r2, r4
 800027c:	462b      	mov	r3, r5
 800027e:	f005 ff43 	bl	8006108 <__aeabi_cdcmpeq>
 8000282:	d201      	bcs.n	8000288 <??inv_check_peaks_5>
 8000284:	f108 0801 	add.w	r8, r8, #1

08000288 <??inv_check_peaks_5>:
 8000288:	f1b8 0f02 	cmp.w	r8, #2
 800028c:	db01      	blt.n	8000292 <??inv_check_peaks_6>
 800028e:	2001      	movs	r0, #1
 8000290:	e08f      	b.n	80003b2 <??inv_check_peaks_2>

08000292 <??inv_check_peaks_6>:
 8000292:	4632      	mov	r2, r6
 8000294:	f8df 3d54 	ldr.w	r3, [pc, #3412]	@ 8000fec <??DataTable6_1>
 8000298:	4620      	mov	r0, r4
 800029a:	4629      	mov	r1, r5
 800029c:	f005 fcd4 	bl	8005c48 <__aeabi_dmul>
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	f005 ff30 	bl	8006108 <__aeabi_cdcmpeq>
 80002a8:	d200      	bcs.n	80002ac <??inv_check_peaks_7>
 80002aa:	2701      	movs	r7, #1

080002ac <??inv_check_peaks_7>:
 80002ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80002b0:	f005 ff2a 	bl	8006108 <__aeabi_cdcmpeq>
 80002b4:	d200      	bcs.n	80002b8 <??inv_check_peaks_8>
 80002b6:	1c7f      	adds	r7, r7, #1

080002b8 <??inv_check_peaks_8>:
 80002b8:	4652      	mov	r2, sl
 80002ba:	465b      	mov	r3, fp
 80002bc:	f005 ff24 	bl	8006108 <__aeabi_cdcmpeq>
 80002c0:	d200      	bcs.n	80002c4 <??inv_check_peaks_9>
 80002c2:	1c7f      	adds	r7, r7, #1

080002c4 <??inv_check_peaks_9>:
 80002c4:	2f01      	cmp	r7, #1
 80002c6:	db01      	blt.n	80002cc <??inv_check_peaks_10>
 80002c8:	2002      	movs	r0, #2
 80002ca:	e072      	b.n	80003b2 <??inv_check_peaks_2>

080002cc <??inv_check_peaks_10>:
 80002cc:	4637      	mov	r7, r6
 80002ce:	e069      	b.n	80003a4 <??inv_check_peaks_11>

080002d0 <??inv_check_peaks_12>:
 80002d0:	9806      	ldr	r0, [sp, #24]
 80002d2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80002d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80002da:	9806      	ldr	r0, [sp, #24]
 80002dc:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
 80002e0:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80002e4:	0080      	lsls	r0, r0, #2
 80002e6:	9905      	ldr	r1, [sp, #20]
 80002e8:	eb00 0801 	add.w	r8, r0, r1
 80002ec:	9906      	ldr	r1, [sp, #24]
 80002ee:	e9d1 4500 	ldrd	r4, r5, [r1]
 80002f2:	9905      	ldr	r1, [sp, #20]
 80002f4:	5e40      	ldrsh	r0, [r0, r1]
 80002f6:	f005 fc3d 	bl	8005b74 <__aeabi_i2d>
 80002fa:	4622      	mov	r2, r4
 80002fc:	462b      	mov	r3, r5
 80002fe:	f005 faeb 	bl	80058d8 <__aeabi_dsub>
 8000302:	e9cd 0100 	strd	r0, r1, [sp]
 8000306:	f9b8 0006 	ldrsh.w	r0, [r8, #6]
 800030a:	f005 fc33 	bl	8005b74 <__aeabi_i2d>
 800030e:	4622      	mov	r2, r4
 8000310:	462b      	mov	r3, r5
 8000312:	f005 fae1 	bl	80058d8 <__aeabi_dsub>
 8000316:	4602      	mov	r2, r0
 8000318:	460b      	mov	r3, r1
 800031a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800031e:	f005 fc93 	bl	8005c48 <__aeabi_dmul>
 8000322:	e9cd 0100 	strd	r0, r1, [sp]
 8000326:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 800032a:	f005 fc23 	bl	8005b74 <__aeabi_i2d>
 800032e:	4652      	mov	r2, sl
 8000330:	465b      	mov	r3, fp
 8000332:	f005 fad1 	bl	80058d8 <__aeabi_dsub>
 8000336:	4604      	mov	r4, r0
 8000338:	460d      	mov	r5, r1
 800033a:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
 800033e:	f005 fc19 	bl	8005b74 <__aeabi_i2d>
 8000342:	4652      	mov	r2, sl
 8000344:	465b      	mov	r3, fp
 8000346:	f005 fac7 	bl	80058d8 <__aeabi_dsub>
 800034a:	4602      	mov	r2, r0
 800034c:	460b      	mov	r3, r1
 800034e:	4620      	mov	r0, r4
 8000350:	4629      	mov	r1, r5
 8000352:	f005 fc79 	bl	8005c48 <__aeabi_dmul>
 8000356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800035a:	f005 fabf 	bl	80058dc <__adddf3>
 800035e:	4682      	mov	sl, r0
 8000360:	468b      	mov	fp, r1
 8000362:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
 8000366:	f005 fc05 	bl	8005b74 <__aeabi_i2d>
 800036a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036e:	f005 fab3 	bl	80058d8 <__aeabi_dsub>
 8000372:	4604      	mov	r4, r0
 8000374:	460d      	mov	r5, r1
 8000376:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
 800037a:	f005 fbfb 	bl	8005b74 <__aeabi_i2d>
 800037e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000382:	f005 faa9 	bl	80058d8 <__aeabi_dsub>
 8000386:	4622      	mov	r2, r4
 8000388:	462b      	mov	r3, r5
 800038a:	f005 fc5d 	bl	8005c48 <__aeabi_dmul>
 800038e:	4652      	mov	r2, sl
 8000390:	465b      	mov	r3, fp
 8000392:	f005 faa3 	bl	80058dc <__adddf3>
 8000396:	2200      	movs	r2, #0
 8000398:	4613      	mov	r3, r2
 800039a:	f005 feb5 	bl	8006108 <__aeabi_cdcmpeq>
 800039e:	d200      	bcs.n	80003a2 <??inv_check_peaks_13>
 80003a0:	1c76      	adds	r6, r6, #1

080003a2 <??inv_check_peaks_13>:
 80003a2:	1c7f      	adds	r7, r7, #1

080003a4 <??inv_check_peaks_11>:
 80003a4:	2f03      	cmp	r7, #3
 80003a6:	db93      	blt.n	80002d0 <??inv_check_peaks_12>
 80003a8:	2e02      	cmp	r6, #2
 80003aa:	da01      	bge.n	80003b0 <??inv_check_peaks_14>
 80003ac:	2001      	movs	r0, #1
 80003ae:	e000      	b.n	80003b2 <??inv_check_peaks_2>

080003b0 <??inv_check_peaks_14>:
 80003b0:	2000      	movs	r0, #0

080003b2 <??inv_check_peaks_2>:
 80003b2:	b007      	add	sp, #28
 80003b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003b8 <inv_set_peaks>:
 80003b8:	b410      	push	{r4}
 80003ba:	2200      	movs	r2, #0
 80003bc:	e02b      	b.n	8000416 <??inv_set_peaks_0>

080003be <??inv_set_peaks_1>:
 80003be:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	5e1b      	ldrsh	r3, [r3, r0]
 80003c6:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	da0d      	bge.n	80003ea <??inv_set_peaks_2>
 80003ce:	880b      	ldrh	r3, [r1, #0]
 80003d0:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80003d4:	00a4      	lsls	r4, r4, #2
 80003d6:	5223      	strh	r3, [r4, r0]
 80003d8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80003e2:	884c      	ldrh	r4, [r1, #2]
 80003e4:	805c      	strh	r4, [r3, #2]
 80003e6:	888c      	ldrh	r4, [r1, #4]
 80003e8:	809c      	strh	r4, [r3, #4]

080003ea <??inv_set_peaks_2>:
 80003ea:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
 80003ee:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80003f2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80003f6:	f9b4 4006 	ldrsh.w	r4, [r4, #6]
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	da0a      	bge.n	8000414 <??inv_set_peaks_3>
 80003fe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000408:	880c      	ldrh	r4, [r1, #0]
 800040a:	80dc      	strh	r4, [r3, #6]
 800040c:	884c      	ldrh	r4, [r1, #2]
 800040e:	811c      	strh	r4, [r3, #8]
 8000410:	888c      	ldrh	r4, [r1, #4]
 8000412:	815c      	strh	r4, [r3, #10]

08000414 <??inv_set_peaks_3>:
 8000414:	1c52      	adds	r2, r2, #1

08000416 <??inv_set_peaks_0>:
 8000416:	2a03      	cmp	r2, #3
 8000418:	dbd1      	blt.n	80003be <??inv_set_peaks_1>
 800041a:	bc10      	pop	{r4}
 800041c:	4770      	bx	lr

0800041e <inv_init_peaks>:
 800041e:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8000ff0 <??DataTable6_2>
 8000422:	8001      	strh	r1, [r0, #0]
 8000424:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000428:	80c2      	strh	r2, [r0, #6]
 800042a:	81c1      	strh	r1, [r0, #14]
 800042c:	8282      	strh	r2, [r0, #20]
 800042e:	8381      	strh	r1, [r0, #28]
 8000430:	8442      	strh	r2, [r0, #34]	@ 0x22
 8000432:	4770      	bx	lr

08000434 <inv_cheap_rand>:
 8000434:	f8df 1bbc 	ldr.w	r1, [pc, #3004]	@ 8000ff4 <??DataTable6_3>
 8000438:	6808      	ldr	r0, [r1, #0]
 800043a:	08c2      	lsrs	r2, r0, #3
 800043c:	ea82 12c0 	eor.w	r2, r2, r0, lsl #7
 8000440:	684b      	ldr	r3, [r1, #4]
 8000442:	ea82 1203 	eor.w	r2, r2, r3, lsl #4
 8000446:	604a      	str	r2, [r1, #4]
 8000448:	688b      	ldr	r3, [r1, #8]
 800044a:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 800044e:	608b      	str	r3, [r1, #8]
 8000450:	095b      	lsrs	r3, r3, #5
 8000452:	ea83 3040 	eor.w	r0, r3, r0, lsl #13
 8000456:	60c8      	str	r0, [r1, #12]
 8000458:	0ad2      	lsrs	r2, r2, #11
 800045a:	ea82 2040 	eor.w	r0, r2, r0, lsl #9
 800045e:	6008      	str	r0, [r1, #0]
 8000460:	4770      	bx	lr

08000462 <inv_cheap_gaussian>:
 8000462:	b570      	push	{r4, r5, r6, lr}
 8000464:	4604      	mov	r4, r0
 8000466:	f7ff ffe5 	bl	8000434 <inv_cheap_rand>
 800046a:	f04f 553e 	mov.w	r5, #796917760	@ 0x2f800000
 800046e:	f005 ffe9 	bl	8006444 <__aeabi_ui2f>
 8000472:	f8df 1b84 	ldr.w	r1, [pc, #2948]	@ 8000ff8 <??DataTable6_4>
 8000476:	f006 f83d 	bl	80064f4 <__aeabi_fmul>
 800047a:	4629      	mov	r1, r5
 800047c:	f006 f83a 	bl	80064f4 <__aeabi_fmul>
 8000480:	f010 fcea 	bl	8010e58 <cosf>
 8000484:	4606      	mov	r6, r0
 8000486:	f7ff ffd5 	bl	8000434 <inv_cheap_rand>
 800048a:	f005 ffdb 	bl	8006444 <__aeabi_ui2f>
 800048e:	4629      	mov	r1, r5
 8000490:	f006 f830 	bl	80064f4 <__aeabi_fmul>
 8000494:	4602      	mov	r2, r0
 8000496:	2100      	movs	r1, #0
 8000498:	f006 f9b8 	bl	800680c <__aeabi_cfcmpeq>
 800049c:	d101      	bne.n	80004a2 <??inv_cheap_gaussian_0>
 800049e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000

080004a2 <??inv_cheap_gaussian_0>:
 80004a2:	4610      	mov	r0, r2
 80004a4:	f005 fb78 	bl	8005b98 <__aeabi_f2d>
 80004a8:	f010 fa2a 	bl	8010900 <log>
 80004ac:	2200      	movs	r2, #0
 80004ae:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80004b2:	f005 fbc9 	bl	8005c48 <__aeabi_dmul>
 80004b6:	f005 febf 	bl	8006238 <__aeabi_d2f>
 80004ba:	f010 fcaf 	bl	8010e1c <sqrtf>
 80004be:	4621      	mov	r1, r4
 80004c0:	f006 f818 	bl	80064f4 <__aeabi_fmul>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80004ca:	f006 b813 	b.w	80064f4 <__aeabi_fmul>

080004ce <inv_combine_compass_data>:
 80004ce:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004d2:	b081      	sub	sp, #4
 80004d4:	4616      	mov	r6, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 fb5e 	bl	8005b98 <__aeabi_f2d>
 80004dc:	4604      	mov	r4, r0
 80004de:	460d      	mov	r5, r1
 80004e0:	4630      	mov	r0, r6
 80004e2:	f005 fb59 	bl	8005b98 <__aeabi_f2d>
 80004e6:	4680      	mov	r8, r0
 80004e8:	4689      	mov	r9, r1
 80004ea:	9a01      	ldr	r2, [sp, #4]
 80004ec:	e9d2 0130 	ldrd	r0, r1, [r2, #192]	@ 0xc0
 80004f0:	4642      	mov	r2, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	f005 fba8 	bl	8005c48 <__aeabi_dmul>
 80004f8:	4606      	mov	r6, r0
 80004fa:	460f      	mov	r7, r1
 80004fc:	9a02      	ldr	r2, [sp, #8]
 80004fe:	e9d2 0130 	ldrd	r0, r1, [r2, #192]	@ 0xc0
 8000502:	4622      	mov	r2, r4
 8000504:	462b      	mov	r3, r5
 8000506:	f005 fb9f 	bl	8005c48 <__aeabi_dmul>
 800050a:	4632      	mov	r2, r6
 800050c:	463b      	mov	r3, r7
 800050e:	f005 f9e5 	bl	80058dc <__adddf3>
 8000512:	9a01      	ldr	r2, [sp, #4]
 8000514:	e9c2 0130 	strd	r0, r1, [r2, #192]	@ 0xc0
 8000518:	f04f 0a00 	mov.w	sl, #0
 800051c:	e038      	b.n	8000590 <??inv_combine_compass_data_0>

0800051e <??inv_combine_compass_data_1>:
 800051e:	9801      	ldr	r0, [sp, #4]
 8000520:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 8000524:	e9d2 0100 	ldrd	r0, r1, [r2]
 8000528:	4642      	mov	r2, r8
 800052a:	464b      	mov	r3, r9
 800052c:	f005 fb8c 	bl	8005c48 <__aeabi_dmul>
 8000530:	4606      	mov	r6, r0
 8000532:	460f      	mov	r7, r1
 8000534:	9802      	ldr	r0, [sp, #8]
 8000536:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 800053a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800053e:	4622      	mov	r2, r4
 8000540:	462b      	mov	r3, r5
 8000542:	f005 fb81 	bl	8005c48 <__aeabi_dmul>
 8000546:	4632      	mov	r2, r6
 8000548:	463b      	mov	r3, r7
 800054a:	f005 f9c7 	bl	80058dc <__adddf3>
 800054e:	9a01      	ldr	r2, [sp, #4]
 8000550:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8000554:	e9c2 0100 	strd	r0, r1, [r2]
 8000558:	9801      	ldr	r0, [sp, #4]
 800055a:	eb00 0bca 	add.w	fp, r0, sl, lsl #3
 800055e:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8000562:	4642      	mov	r2, r8
 8000564:	464b      	mov	r3, r9
 8000566:	f005 fb6f 	bl	8005c48 <__aeabi_dmul>
 800056a:	4606      	mov	r6, r0
 800056c:	460f      	mov	r7, r1
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 8000574:	e9d2 0124 	ldrd	r0, r1, [r2, #144]	@ 0x90
 8000578:	4622      	mov	r2, r4
 800057a:	462b      	mov	r3, r5
 800057c:	f005 fb64 	bl	8005c48 <__aeabi_dmul>
 8000580:	4632      	mov	r2, r6
 8000582:	463b      	mov	r3, r7
 8000584:	f005 f9aa 	bl	80058dc <__adddf3>
 8000588:	e9cb 0124 	strd	r0, r1, [fp, #144]	@ 0x90
 800058c:	f10a 0a01 	add.w	sl, sl, #1

08000590 <??inv_combine_compass_data_0>:
 8000590:	f1ba 0f06 	cmp.w	sl, #6
 8000594:	dbc3      	blt.n	800051e <??inv_combine_compass_data_1>
 8000596:	f04f 0a00 	mov.w	sl, #0
 800059a:	e01b      	b.n	80005d4 <??inv_combine_compass_data_2>

0800059c <??inv_combine_compass_data_3>:
 800059c:	9801      	ldr	r0, [sp, #4]
 800059e:	eb00 0bca 	add.w	fp, r0, sl, lsl #3
 80005a2:	e9db 0112 	ldrd	r0, r1, [fp, #72]	@ 0x48
 80005a6:	4642      	mov	r2, r8
 80005a8:	464b      	mov	r3, r9
 80005aa:	f005 fb4d 	bl	8005c48 <__aeabi_dmul>
 80005ae:	4606      	mov	r6, r0
 80005b0:	460f      	mov	r7, r1
 80005b2:	9802      	ldr	r0, [sp, #8]
 80005b4:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 80005b8:	e9d2 0112 	ldrd	r0, r1, [r2, #72]	@ 0x48
 80005bc:	4622      	mov	r2, r4
 80005be:	462b      	mov	r3, r5
 80005c0:	f005 fb42 	bl	8005c48 <__aeabi_dmul>
 80005c4:	4632      	mov	r2, r6
 80005c6:	463b      	mov	r3, r7
 80005c8:	f005 f988 	bl	80058dc <__adddf3>
 80005cc:	e9cb 0112 	strd	r0, r1, [fp, #72]	@ 0x48
 80005d0:	f10a 0a01 	add.w	sl, sl, #1

080005d4 <??inv_combine_compass_data_2>:
 80005d4:	f1ba 0f09 	cmp.w	sl, #9
 80005d8:	dbe0      	blt.n	800059c <??inv_combine_compass_data_3>
 80005da:	f04f 0a00 	mov.w	sl, #0
 80005de:	e01b      	b.n	8000618 <??inv_combine_compass_data_4>

080005e0 <??inv_combine_compass_data_5>:
 80005e0:	9801      	ldr	r0, [sp, #4]
 80005e2:	eb00 0bca 	add.w	fp, r0, sl, lsl #3
 80005e6:	e9db 010c 	ldrd	r0, r1, [fp, #48]	@ 0x30
 80005ea:	4642      	mov	r2, r8
 80005ec:	464b      	mov	r3, r9
 80005ee:	f005 fb2b 	bl	8005c48 <__aeabi_dmul>
 80005f2:	4606      	mov	r6, r0
 80005f4:	460f      	mov	r7, r1
 80005f6:	9802      	ldr	r0, [sp, #8]
 80005f8:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 80005fc:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	@ 0x30
 8000600:	4622      	mov	r2, r4
 8000602:	462b      	mov	r3, r5
 8000604:	f005 fb20 	bl	8005c48 <__aeabi_dmul>
 8000608:	4632      	mov	r2, r6
 800060a:	463b      	mov	r3, r7
 800060c:	f005 f966 	bl	80058dc <__adddf3>
 8000610:	e9cb 010c 	strd	r0, r1, [fp, #48]	@ 0x30
 8000614:	f10a 0a01 	add.w	sl, sl, #1

08000618 <??inv_combine_compass_data_4>:
 8000618:	f1ba 0f03 	cmp.w	sl, #3
 800061c:	dbe0      	blt.n	80005e0 <??inv_combine_compass_data_5>
 800061e:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000622 <inv_set_terms>:
 8000622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000626:	b08d      	sub	sp, #52	@ 0x34
 8000628:	4605      	mov	r5, r0
 800062a:	460c      	mov	r4, r1
 800062c:	6820      	ldr	r0, [r4, #0]
 800062e:	f005 faa1 	bl	8005b74 <__aeabi_i2d>
 8000632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000636:	6860      	ldr	r0, [r4, #4]
 8000638:	f005 fa9c 	bl	8005b74 <__aeabi_i2d>
 800063c:	e9cd 0100 	strd	r0, r1, [sp]
 8000640:	68a0      	ldr	r0, [r4, #8]
 8000642:	f005 fa97 	bl	8005b74 <__aeabi_i2d>
 8000646:	4606      	mov	r6, r0
 8000648:	460f      	mov	r7, r1
 800064a:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	@ 0xc0
 800064e:	2000      	movs	r0, #0
 8000650:	f8df 19a8 	ldr.w	r1, [pc, #2472]	@ 8000ffc <??DataTable6_5>
 8000654:	f005 f942 	bl	80058dc <__adddf3>
 8000658:	e9c5 0130 	strd	r0, r1, [r5, #192]	@ 0xc0
 800065c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8000660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000664:	f005 f93a 	bl	80058dc <__adddf3>
 8000668:	e9c5 010c 	strd	r0, r1, [r5, #48]	@ 0x30
 800066c:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8000670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000674:	f005 f932 	bl	80058dc <__adddf3>
 8000678:	e9c5 010e 	strd	r0, r1, [r5, #56]	@ 0x38
 800067c:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	@ 0x40
 8000680:	4632      	mov	r2, r6
 8000682:	463b      	mov	r3, r7
 8000684:	f005 f92a 	bl	80058dc <__adddf3>
 8000688:	e9c5 0110 	strd	r0, r1, [r5, #64]	@ 0x40
 800068c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000694:	f005 fad8 	bl	8005c48 <__aeabi_dmul>
 8000698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800069c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80006a0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80006a4:	f005 f91a 	bl	80058dc <__adddf3>
 80006a8:	e9c5 0100 	strd	r0, r1, [r5]
 80006ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80006b4:	f005 fac8 	bl	8005c48 <__aeabi_dmul>
 80006b8:	4680      	mov	r8, r0
 80006ba:	4689      	mov	r9, r1
 80006bc:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80006c0:	4642      	mov	r2, r8
 80006c2:	464b      	mov	r3, r9
 80006c4:	f005 f90a 	bl	80058dc <__adddf3>
 80006c8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80006cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80006d0:	4632      	mov	r2, r6
 80006d2:	463b      	mov	r3, r7
 80006d4:	f005 fab8 	bl	8005c48 <__aeabi_dmul>
 80006d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80006dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80006e0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80006e4:	f005 f8fa 	bl	80058dc <__adddf3>
 80006e8:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80006ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80006f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80006f4:	f005 faa8 	bl	8005c48 <__aeabi_dmul>
 80006f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80006fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000700:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8000704:	f005 f8ea 	bl	80058dc <__adddf3>
 8000708:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800070c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000710:	4632      	mov	r2, r6
 8000712:	463b      	mov	r3, r7
 8000714:	f005 fa98 	bl	8005c48 <__aeabi_dmul>
 8000718:	4682      	mov	sl, r0
 800071a:	468b      	mov	fp, r1
 800071c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8000720:	4652      	mov	r2, sl
 8000722:	465b      	mov	r3, fp
 8000724:	f005 f8da 	bl	80058dc <__adddf3>
 8000728:	e9c5 0108 	strd	r0, r1, [r5, #32]
 800072c:	4632      	mov	r2, r6
 800072e:	463b      	mov	r3, r7
 8000730:	4630      	mov	r0, r6
 8000732:	4639      	mov	r1, r7
 8000734:	f005 fa88 	bl	8005c48 <__aeabi_dmul>
 8000738:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	@ 0x28
 800073c:	f005 f8ce 	bl	80058dc <__adddf3>
 8000740:	e9c5 010a 	strd	r0, r1, [r5, #40]	@ 0x28
 8000744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800074c:	f005 fa7c 	bl	8005c48 <__aeabi_dmul>
 8000750:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8000754:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8000758:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800075c:	f005 f8be 	bl	80058dc <__adddf3>
 8000760:	e9c5 0112 	strd	r0, r1, [r5, #72]	@ 0x48
 8000764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000768:	4642      	mov	r2, r8
 800076a:	464b      	mov	r3, r9
 800076c:	f005 fa6c 	bl	8005c48 <__aeabi_dmul>
 8000770:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	@ 0x50
 8000774:	f005 f8b2 	bl	80058dc <__adddf3>
 8000778:	e9c5 0114 	strd	r0, r1, [r5, #80]	@ 0x50
 800077c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000780:	4632      	mov	r2, r6
 8000782:	463b      	mov	r3, r7
 8000784:	f005 fa60 	bl	8005c48 <__aeabi_dmul>
 8000788:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	@ 0x58
 800078c:	f005 f8a6 	bl	80058dc <__adddf3>
 8000790:	e9c5 0116 	strd	r0, r1, [r5, #88]	@ 0x58
 8000794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000798:	4642      	mov	r2, r8
 800079a:	464b      	mov	r3, r9
 800079c:	f005 fa54 	bl	8005c48 <__aeabi_dmul>
 80007a0:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	@ 0x60
 80007a4:	f005 f89a 	bl	80058dc <__adddf3>
 80007a8:	e9c5 0118 	strd	r0, r1, [r5, #96]	@ 0x60
 80007ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80007b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80007b4:	f005 fa48 	bl	8005c48 <__aeabi_dmul>
 80007b8:	4680      	mov	r8, r0
 80007ba:	4689      	mov	r9, r1
 80007bc:	e9d5 011a 	ldrd	r0, r1, [r5, #104]	@ 0x68
 80007c0:	4642      	mov	r2, r8
 80007c2:	464b      	mov	r3, r9
 80007c4:	f005 f88a 	bl	80058dc <__adddf3>
 80007c8:	e9c5 011a 	strd	r0, r1, [r5, #104]	@ 0x68
 80007cc:	4632      	mov	r2, r6
 80007ce:	463b      	mov	r3, r7
 80007d0:	4650      	mov	r0, sl
 80007d2:	4659      	mov	r1, fp
 80007d4:	f005 fa38 	bl	8005c48 <__aeabi_dmul>
 80007d8:	e9d5 231c 	ldrd	r2, r3, [r5, #112]	@ 0x70
 80007dc:	f005 f87e 	bl	80058dc <__adddf3>
 80007e0:	e9c5 011c 	strd	r0, r1, [r5, #112]	@ 0x70
 80007e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80007e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80007ec:	f005 fa2c 	bl	8005c48 <__aeabi_dmul>
 80007f0:	e9d5 231e 	ldrd	r2, r3, [r5, #120]	@ 0x78
 80007f4:	f005 f872 	bl	80058dc <__adddf3>
 80007f8:	e9c5 011e 	strd	r0, r1, [r5, #120]	@ 0x78
 80007fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000800:	4652      	mov	r2, sl
 8000802:	465b      	mov	r3, fp
 8000804:	f005 fa20 	bl	8005c48 <__aeabi_dmul>
 8000808:	e9d5 2320 	ldrd	r2, r3, [r5, #128]	@ 0x80
 800080c:	f005 f866 	bl	80058dc <__adddf3>
 8000810:	e9c5 0120 	strd	r0, r1, [r5, #128]	@ 0x80
 8000814:	4632      	mov	r2, r6
 8000816:	463b      	mov	r3, r7
 8000818:	4630      	mov	r0, r6
 800081a:	4639      	mov	r1, r7
 800081c:	f005 fa14 	bl	8005c48 <__aeabi_dmul>
 8000820:	4632      	mov	r2, r6
 8000822:	463b      	mov	r3, r7
 8000824:	f005 fa10 	bl	8005c48 <__aeabi_dmul>
 8000828:	4682      	mov	sl, r0
 800082a:	468b      	mov	fp, r1
 800082c:	e9d5 0122 	ldrd	r0, r1, [r5, #136]	@ 0x88
 8000830:	4652      	mov	r2, sl
 8000832:	465b      	mov	r3, fp
 8000834:	f005 f852 	bl	80058dc <__adddf3>
 8000838:	e9c5 0122 	strd	r0, r1, [r5, #136]	@ 0x88
 800083c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8000840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000844:	f005 fa00 	bl	8005c48 <__aeabi_dmul>
 8000848:	e9d5 2324 	ldrd	r2, r3, [r5, #144]	@ 0x90
 800084c:	f005 f846 	bl	80058dc <__adddf3>
 8000850:	e9c5 0124 	strd	r0, r1, [r5, #144]	@ 0x90
 8000854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000858:	4642      	mov	r2, r8
 800085a:	464b      	mov	r3, r9
 800085c:	f005 f9f4 	bl	8005c48 <__aeabi_dmul>
 8000860:	e9d5 2326 	ldrd	r2, r3, [r5, #152]	@ 0x98
 8000864:	f005 f83a 	bl	80058dc <__adddf3>
 8000868:	e9c5 0126 	strd	r0, r1, [r5, #152]	@ 0x98
 800086c:	4632      	mov	r2, r6
 800086e:	463b      	mov	r3, r7
 8000870:	4650      	mov	r0, sl
 8000872:	4659      	mov	r1, fp
 8000874:	f005 f9e8 	bl	8005c48 <__aeabi_dmul>
 8000878:	e9d5 2328 	ldrd	r2, r3, [r5, #160]	@ 0xa0
 800087c:	f005 f82e 	bl	80058dc <__adddf3>
 8000880:	e9c5 0128 	strd	r0, r1, [r5, #160]	@ 0xa0
 8000884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800088c:	f005 f9dc 	bl	8005c48 <__aeabi_dmul>
 8000890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000894:	f005 f9d8 	bl	8005c48 <__aeabi_dmul>
 8000898:	e9d5 232a 	ldrd	r2, r3, [r5, #168]	@ 0xa8
 800089c:	f005 f81e 	bl	80058dc <__adddf3>
 80008a0:	e9c5 012a 	strd	r0, r1, [r5, #168]	@ 0xa8
 80008a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80008a8:	4632      	mov	r2, r6
 80008aa:	463b      	mov	r3, r7
 80008ac:	f005 f9cc 	bl	8005c48 <__aeabi_dmul>
 80008b0:	4632      	mov	r2, r6
 80008b2:	463b      	mov	r3, r7
 80008b4:	f005 f9c8 	bl	8005c48 <__aeabi_dmul>
 80008b8:	e9d5 232c 	ldrd	r2, r3, [r5, #176]	@ 0xb0
 80008bc:	f005 f80e 	bl	80058dc <__adddf3>
 80008c0:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
 80008c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80008c8:	4632      	mov	r2, r6
 80008ca:	463b      	mov	r3, r7
 80008cc:	f005 f9bc 	bl	8005c48 <__aeabi_dmul>
 80008d0:	4632      	mov	r2, r6
 80008d2:	463b      	mov	r3, r7
 80008d4:	f005 f9b8 	bl	8005c48 <__aeabi_dmul>
 80008d8:	e9d5 232e 	ldrd	r2, r3, [r5, #184]	@ 0xb8
 80008dc:	f004 fffe 	bl	80058dc <__adddf3>
 80008e0:	e9c5 012e 	strd	r0, r1, [r5, #184]	@ 0xb8
 80008e4:	b00d      	add	sp, #52	@ 0x34
 80008e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008ea <inv_compute_bias>:
 80008ea:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ee:	b098      	sub	sp, #96	@ 0x60
 80008f0:	4604      	mov	r4, r0
 80008f2:	460d      	mov	r5, r1
 80008f4:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 80008f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80008fc:	e9d4 6730 	ldrd	r6, r7, [r4, #192]	@ 0xc0
 8000900:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000904:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8000908:	4632      	mov	r2, r6
 800090a:	463b      	mov	r3, r7
 800090c:	f005 f99c 	bl	8005c48 <__aeabi_dmul>
 8000910:	4680      	mov	r8, r0
 8000912:	4689      	mov	r9, r1
 8000914:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800091c:	f005 f994 	bl	8005c48 <__aeabi_dmul>
 8000920:	4602      	mov	r2, r0
 8000922:	460b      	mov	r3, r1
 8000924:	4640      	mov	r0, r8
 8000926:	4649      	mov	r1, r9
 8000928:	f004 ffd6 	bl	80058d8 <__aeabi_dsub>
 800092c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8000930:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	@ 0x38
 8000934:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8000938:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800093c:	4632      	mov	r2, r6
 800093e:	463b      	mov	r3, r7
 8000940:	f005 f982 	bl	8005c48 <__aeabi_dmul>
 8000944:	4682      	mov	sl, r0
 8000946:	468b      	mov	fp, r1
 8000948:	4642      	mov	r2, r8
 800094a:	464b      	mov	r3, r9
 800094c:	4640      	mov	r0, r8
 800094e:	4649      	mov	r1, r9
 8000950:	f005 f97a 	bl	8005c48 <__aeabi_dmul>
 8000954:	4602      	mov	r2, r0
 8000956:	460b      	mov	r3, r1
 8000958:	4650      	mov	r0, sl
 800095a:	4659      	mov	r1, fp
 800095c:	f004 ffbc 	bl	80058d8 <__aeabi_dsub>
 8000960:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8000964:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	@ 0x40
 8000968:	e9cd 0100 	strd	r0, r1, [sp]
 800096c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8000970:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8000974:	4632      	mov	r2, r6
 8000976:	463b      	mov	r3, r7
 8000978:	f005 f966 	bl	8005c48 <__aeabi_dmul>
 800097c:	4682      	mov	sl, r0
 800097e:	468b      	mov	fp, r1
 8000980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000988:	f005 f95e 	bl	8005c48 <__aeabi_dmul>
 800098c:	4602      	mov	r2, r0
 800098e:	460b      	mov	r3, r1
 8000990:	4650      	mov	r0, sl
 8000992:	4659      	mov	r1, fp
 8000994:	f004 ffa0 	bl	80058d8 <__aeabi_dsub>
 8000998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800099c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80009a0:	4632      	mov	r2, r6
 80009a2:	463b      	mov	r3, r7
 80009a4:	f005 f950 	bl	8005c48 <__aeabi_dmul>
 80009a8:	4682      	mov	sl, r0
 80009aa:	468b      	mov	fp, r1
 80009ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80009b0:	4642      	mov	r2, r8
 80009b2:	464b      	mov	r3, r9
 80009b4:	f005 f948 	bl	8005c48 <__aeabi_dmul>
 80009b8:	4602      	mov	r2, r0
 80009ba:	460b      	mov	r3, r1
 80009bc:	4650      	mov	r0, sl
 80009be:	4659      	mov	r1, fp
 80009c0:	f004 ff8a 	bl	80058d8 <__aeabi_dsub>
 80009c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80009c8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80009cc:	4632      	mov	r2, r6
 80009ce:	463b      	mov	r3, r7
 80009d0:	f005 f93a 	bl	8005c48 <__aeabi_dmul>
 80009d4:	4682      	mov	sl, r0
 80009d6:	468b      	mov	fp, r1
 80009d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80009dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80009e0:	f005 f932 	bl	8005c48 <__aeabi_dmul>
 80009e4:	4602      	mov	r2, r0
 80009e6:	460b      	mov	r3, r1
 80009e8:	4650      	mov	r0, sl
 80009ea:	4659      	mov	r1, fp
 80009ec:	f004 ff74 	bl	80058d8 <__aeabi_dsub>
 80009f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80009f4:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80009f8:	4632      	mov	r2, r6
 80009fa:	463b      	mov	r3, r7
 80009fc:	f005 f924 	bl	8005c48 <__aeabi_dmul>
 8000a00:	4682      	mov	sl, r0
 8000a02:	468b      	mov	fp, r1
 8000a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000a08:	4642      	mov	r2, r8
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	f005 f91c 	bl	8005c48 <__aeabi_dmul>
 8000a10:	4602      	mov	r2, r0
 8000a12:	460b      	mov	r3, r1
 8000a14:	4650      	mov	r0, sl
 8000a16:	4659      	mov	r1, fp
 8000a18:	f004 ff5e 	bl	80058d8 <__aeabi_dsub>
 8000a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8000a24:	4632      	mov	r2, r6
 8000a26:	463b      	mov	r3, r7
 8000a28:	f005 f90e 	bl	8005c48 <__aeabi_dmul>
 8000a2c:	4682      	mov	sl, r0
 8000a2e:	468b      	mov	fp, r1
 8000a30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000a34:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
 8000a38:	f005 f906 	bl	8005c48 <__aeabi_dmul>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	460b      	mov	r3, r1
 8000a40:	4650      	mov	r0, sl
 8000a42:	4659      	mov	r1, fp
 8000a44:	f004 ff48 	bl	80058d8 <__aeabi_dsub>
 8000a48:	4682      	mov	sl, r0
 8000a4a:	468b      	mov	fp, r1
 8000a4c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
 8000a50:	4632      	mov	r2, r6
 8000a52:	463b      	mov	r3, r7
 8000a54:	f005 f8f8 	bl	8005c48 <__aeabi_dmul>
 8000a58:	4652      	mov	r2, sl
 8000a5a:	465b      	mov	r3, fp
 8000a5c:	f004 ff3e 	bl	80058dc <__adddf3>
 8000a60:	4682      	mov	sl, r0
 8000a62:	468b      	mov	fp, r1
 8000a64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000a68:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8000a6c:	f005 f8ec 	bl	8005c48 <__aeabi_dmul>
 8000a70:	4602      	mov	r2, r0
 8000a72:	460b      	mov	r3, r1
 8000a74:	4650      	mov	r0, sl
 8000a76:	4659      	mov	r1, fp
 8000a78:	f004 ff2e 	bl	80058d8 <__aeabi_dsub>
 8000a7c:	4682      	mov	sl, r0
 8000a7e:	468b      	mov	fp, r1
 8000a80:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8000a84:	4632      	mov	r2, r6
 8000a86:	463b      	mov	r3, r7
 8000a88:	f005 f8de 	bl	8005c48 <__aeabi_dmul>
 8000a8c:	4652      	mov	r2, sl
 8000a8e:	465b      	mov	r3, fp
 8000a90:	f004 ff24 	bl	80058dc <__adddf3>
 8000a94:	4682      	mov	sl, r0
 8000a96:	468b      	mov	fp, r1
 8000a98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000a9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8000aa0:	f005 f8d2 	bl	8005c48 <__aeabi_dmul>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	4650      	mov	r0, sl
 8000aaa:	4659      	mov	r1, fp
 8000aac:	f004 ff14 	bl	80058d8 <__aeabi_dsub>
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f8df 3e78 	ldr.w	r3, [pc, #3704]	@ 800192c <??DataTable9>
 8000ab6:	f005 f8c7 	bl	8005c48 <__aeabi_dmul>
 8000aba:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8000abe:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	@ 0x60
 8000ac2:	4632      	mov	r2, r6
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	f005 f8bf 	bl	8005c48 <__aeabi_dmul>
 8000aca:	4682      	mov	sl, r0
 8000acc:	468b      	mov	fp, r1
 8000ace:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	f005 f8b7 	bl	8005c48 <__aeabi_dmul>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4650      	mov	r0, sl
 8000ae0:	4659      	mov	r1, fp
 8000ae2:	f004 fef9 	bl	80058d8 <__aeabi_dsub>
 8000ae6:	4682      	mov	sl, r0
 8000ae8:	468b      	mov	fp, r1
 8000aea:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	@ 0x68
 8000aee:	4632      	mov	r2, r6
 8000af0:	463b      	mov	r3, r7
 8000af2:	f005 f8a9 	bl	8005c48 <__aeabi_dmul>
 8000af6:	4652      	mov	r2, sl
 8000af8:	465b      	mov	r3, fp
 8000afa:	f004 feef 	bl	80058dc <__adddf3>
 8000afe:	4682      	mov	sl, r0
 8000b00:	468b      	mov	fp, r1
 8000b02:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8000b06:	4642      	mov	r2, r8
 8000b08:	464b      	mov	r3, r9
 8000b0a:	f005 f89d 	bl	8005c48 <__aeabi_dmul>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4650      	mov	r0, sl
 8000b14:	4659      	mov	r1, fp
 8000b16:	f004 fedf 	bl	80058d8 <__aeabi_dsub>
 8000b1a:	4682      	mov	sl, r0
 8000b1c:	468b      	mov	fp, r1
 8000b1e:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	@ 0x70
 8000b22:	4632      	mov	r2, r6
 8000b24:	463b      	mov	r3, r7
 8000b26:	f005 f88f 	bl	8005c48 <__aeabi_dmul>
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	465b      	mov	r3, fp
 8000b2e:	f004 fed5 	bl	80058dc <__adddf3>
 8000b32:	4682      	mov	sl, r0
 8000b34:	468b      	mov	fp, r1
 8000b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	f005 f883 	bl	8005c48 <__aeabi_dmul>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	4650      	mov	r0, sl
 8000b48:	4659      	mov	r1, fp
 8000b4a:	f004 fec5 	bl	80058d8 <__aeabi_dsub>
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f8df 3dd8 	ldr.w	r3, [pc, #3544]	@ 800192c <??DataTable9>
 8000b54:	f005 f878 	bl	8005c48 <__aeabi_dmul>
 8000b58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000b5c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	@ 0x78
 8000b60:	4632      	mov	r2, r6
 8000b62:	463b      	mov	r3, r7
 8000b64:	f005 f870 	bl	8005c48 <__aeabi_dmul>
 8000b68:	4680      	mov	r8, r0
 8000b6a:	4689      	mov	r9, r1
 8000b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000b70:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
 8000b74:	f005 f868 	bl	8005c48 <__aeabi_dmul>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	4649      	mov	r1, r9
 8000b80:	f004 feaa 	bl	80058d8 <__aeabi_dsub>
 8000b84:	4680      	mov	r8, r0
 8000b86:	4689      	mov	r9, r1
 8000b88:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	@ 0x80
 8000b8c:	4632      	mov	r2, r6
 8000b8e:	463b      	mov	r3, r7
 8000b90:	f005 f85a 	bl	8005c48 <__aeabi_dmul>
 8000b94:	4642      	mov	r2, r8
 8000b96:	464b      	mov	r3, r9
 8000b98:	f004 fea0 	bl	80058dc <__adddf3>
 8000b9c:	4680      	mov	r8, r0
 8000b9e:	4689      	mov	r9, r1
 8000ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000ba4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8000ba8:	f005 f84e 	bl	8005c48 <__aeabi_dmul>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4640      	mov	r0, r8
 8000bb2:	4649      	mov	r1, r9
 8000bb4:	f004 fe90 	bl	80058d8 <__aeabi_dsub>
 8000bb8:	4680      	mov	r8, r0
 8000bba:	4689      	mov	r9, r1
 8000bbc:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	@ 0x88
 8000bc0:	4632      	mov	r2, r6
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	f005 f840 	bl	8005c48 <__aeabi_dmul>
 8000bc8:	4642      	mov	r2, r8
 8000bca:	464b      	mov	r3, r9
 8000bcc:	f004 fe86 	bl	80058dc <__adddf3>
 8000bd0:	4606      	mov	r6, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000bd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8000bdc:	f005 f834 	bl	8005c48 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f004 fe76 	bl	80058d8 <__aeabi_dsub>
 8000bec:	2200      	movs	r2, #0
 8000bee:	f8df 3d3c 	ldr.w	r3, [pc, #3388]	@ 800192c <??DataTable9>
 8000bf2:	f005 f829 	bl	8005c48 <__aeabi_dmul>
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8000bfe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 8000c02:	f005 f821 	bl	8005c48 <__aeabi_dmul>
 8000c06:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8000c0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8000c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000c12:	f005 f819 	bl	8005c48 <__aeabi_dmul>
 8000c16:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8000c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8000c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000c22:	f005 f811 	bl	8005c48 <__aeabi_dmul>
 8000c26:	4680      	mov	r8, r0
 8000c28:	4689      	mov	r9, r1
 8000c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000c2e:	4642      	mov	r2, r8
 8000c30:	464b      	mov	r3, r9
 8000c32:	f005 f809 	bl	8005c48 <__aeabi_dmul>
 8000c36:	4682      	mov	sl, r0
 8000c38:	468b      	mov	fp, r1
 8000c3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000c44:	f005 f800 	bl	8005c48 <__aeabi_dmul>
 8000c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000c4c:	f004 fffc 	bl	8005c48 <__aeabi_dmul>
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	f004 fff8 	bl	8005c48 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4650      	mov	r0, sl
 8000c5e:	4659      	mov	r1, fp
 8000c60:	f004 fe3a 	bl	80058d8 <__aeabi_dsub>
 8000c64:	4682      	mov	sl, r0
 8000c66:	468b      	mov	fp, r1
 8000c68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8000c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000c70:	f004 ffea 	bl	8005c48 <__aeabi_dmul>
 8000c74:	4652      	mov	r2, sl
 8000c76:	465b      	mov	r3, fp
 8000c78:	f004 fe30 	bl	80058dc <__adddf3>
 8000c7c:	4682      	mov	sl, r0
 8000c7e:	468b      	mov	fp, r1
 8000c80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8000c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000c88:	f004 ffde 	bl	8005c48 <__aeabi_dmul>
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	f004 ffda 	bl	8005c48 <__aeabi_dmul>
 8000c94:	4652      	mov	r2, sl
 8000c96:	465b      	mov	r3, fp
 8000c98:	f004 fe20 	bl	80058dc <__adddf3>
 8000c9c:	4682      	mov	sl, r0
 8000c9e:	468b      	mov	fp, r1
 8000ca0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
 8000ca4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8000ca8:	f004 ffce 	bl	8005c48 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	4659      	mov	r1, fp
 8000cb4:	f004 fe10 	bl	80058d8 <__aeabi_dsub>
 8000cb8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8000cbc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	f005 fa20 	bl	8006108 <__aeabi_cdcmpeq>
 8000cc8:	f000 818b 	beq.w	8000fe2 <??inv_compute_bias_0>
 8000ccc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 8000cd0:	4632      	mov	r2, r6
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	f004 ffb8 	bl	8005c48 <__aeabi_dmul>
 8000cd8:	4682      	mov	sl, r0
 8000cda:	468b      	mov	fp, r1
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000ce4:	f004 ffb0 	bl	8005c48 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4650      	mov	r0, sl
 8000cee:	4659      	mov	r1, fp
 8000cf0:	f004 fdf2 	bl	80058d8 <__aeabi_dsub>
 8000cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000cf8:	f004 ffa6 	bl	8005c48 <__aeabi_dmul>
 8000cfc:	4682      	mov	sl, r0
 8000cfe:	468b      	mov	fp, r1
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d08:	f004 ff9e 	bl	8005c48 <__aeabi_dmul>
 8000d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8000d10:	f004 ff9a 	bl	8005c48 <__aeabi_dmul>
 8000d14:	4652      	mov	r2, sl
 8000d16:	465b      	mov	r3, fp
 8000d18:	f004 fde0 	bl	80058dc <__adddf3>
 8000d1c:	4682      	mov	sl, r0
 8000d1e:	468b      	mov	fp, r1
 8000d20:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8000d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8000d28:	f004 ff8e 	bl	8005c48 <__aeabi_dmul>
 8000d2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8000d30:	f004 ff8a 	bl	8005c48 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4650      	mov	r0, sl
 8000d3a:	4659      	mov	r1, fp
 8000d3c:	f004 fdcc 	bl	80058d8 <__aeabi_dsub>
 8000d40:	4682      	mov	sl, r0
 8000d42:	468b      	mov	fp, r1
 8000d44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000d48:	4642      	mov	r2, r8
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	f004 ff7c 	bl	8005c48 <__aeabi_dmul>
 8000d50:	4652      	mov	r2, sl
 8000d52:	465b      	mov	r3, fp
 8000d54:	f004 fdc2 	bl	80058dc <__adddf3>
 8000d58:	4682      	mov	sl, r0
 8000d5a:	468b      	mov	fp, r1
 8000d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d64:	f004 ff70 	bl	8005c48 <__aeabi_dmul>
 8000d68:	4632      	mov	r2, r6
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	f004 ff6c 	bl	8005c48 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4650      	mov	r0, sl
 8000d76:	4659      	mov	r1, fp
 8000d78:	f004 fdae 	bl	80058d8 <__aeabi_dsub>
 8000d7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000d88:	f004 ff5e 	bl	8005c48 <__aeabi_dmul>
 8000d8c:	4682      	mov	sl, r0
 8000d8e:	468b      	mov	fp, r1
 8000d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000d94:	4632      	mov	r2, r6
 8000d96:	463b      	mov	r3, r7
 8000d98:	f004 ff56 	bl	8005c48 <__aeabi_dmul>
 8000d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8000da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000da8:	f004 ff4e 	bl	8005c48 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000db4:	f004 fd90 	bl	80058d8 <__aeabi_dsub>
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	f004 ff44 	bl	8005c48 <__aeabi_dmul>
 8000dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8000dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000dcc:	f004 ff3c 	bl	8005c48 <__aeabi_dmul>
 8000dd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000dd4:	f004 ff38 	bl	8005c48 <__aeabi_dmul>
 8000dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000ddc:	f004 fd7e 	bl	80058dc <__adddf3>
 8000de0:	e9cd 0100 	strd	r0, r1, [sp]
 8000de4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8000de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8000dec:	f004 ff2c 	bl	8005c48 <__aeabi_dmul>
 8000df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000df4:	f004 ff28 	bl	8005c48 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000e00:	f004 fd6a 	bl	80058d8 <__aeabi_dsub>
 8000e04:	e9cd 0100 	strd	r0, r1, [sp]
 8000e08:	4640      	mov	r0, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8000e10:	f004 ff1a 	bl	8005c48 <__aeabi_dmul>
 8000e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000e18:	f004 fd60 	bl	80058dc <__adddf3>
 8000e1c:	4680      	mov	r8, r0
 8000e1e:	4689      	mov	r9, r1
 8000e20:	4632      	mov	r2, r6
 8000e22:	463b      	mov	r3, r7
 8000e24:	4650      	mov	r0, sl
 8000e26:	4659      	mov	r1, fp
 8000e28:	f004 ff0e 	bl	8005c48 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4640      	mov	r0, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	f004 fd50 	bl	80058d8 <__aeabi_dsub>
 8000e38:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8000e3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8000e40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000e44:	f004 ff00 	bl	8005c48 <__aeabi_dmul>
 8000e48:	4680      	mov	r8, r0
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000e54:	f004 fef8 	bl	8005c48 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4649      	mov	r1, r9
 8000e60:	f004 fd3a 	bl	80058d8 <__aeabi_dsub>
 8000e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e68:	f004 feee 	bl	8005c48 <__aeabi_dmul>
 8000e6c:	4680      	mov	r8, r0
 8000e6e:	4689      	mov	r9, r1
 8000e70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000e78:	f004 fee6 	bl	8005c48 <__aeabi_dmul>
 8000e7c:	4632      	mov	r2, r6
 8000e7e:	463b      	mov	r3, r7
 8000e80:	f004 fee2 	bl	8005c48 <__aeabi_dmul>
 8000e84:	4642      	mov	r2, r8
 8000e86:	464b      	mov	r3, r9
 8000e88:	f004 fd28 	bl	80058dc <__adddf3>
 8000e8c:	4680      	mov	r8, r0
 8000e8e:	4689      	mov	r9, r1
 8000e90:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
 8000e94:	4632      	mov	r2, r6
 8000e96:	463b      	mov	r3, r7
 8000e98:	f004 fed6 	bl	8005c48 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	f004 fd18 	bl	80058d8 <__aeabi_dsub>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	460f      	mov	r7, r1
 8000eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8000eb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000eb4:	f004 fec8 	bl	8005c48 <__aeabi_dmul>
 8000eb8:	4632      	mov	r2, r6
 8000eba:	463b      	mov	r3, r7
 8000ebc:	f004 fd0e 	bl	80058dc <__adddf3>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	460f      	mov	r7, r1
 8000ec4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000ec8:	4652      	mov	r2, sl
 8000eca:	465b      	mov	r3, fp
 8000ecc:	f004 febc 	bl	8005c48 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	f004 fcfe 	bl	80058d8 <__aeabi_dsub>
 8000edc:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8000ee0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000ee4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8000ee8:	f004 ffd8 	bl	8005e9c <__aeabi_ddiv>
 8000eec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef0:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8000ef4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8000ef8:	f004 ffd0 	bl	8005e9c <__aeabi_ddiv>
 8000efc:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8000f00:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8000f04:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8000f08:	f004 ffc8 	bl	8005e9c <__aeabi_ddiv>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	460f      	mov	r7, r1
 8000f10:	e9c5 6704 	strd	r6, r7, [r5, #16]
 8000f14:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
 8000f18:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8000f1c:	4652      	mov	r2, sl
 8000f1e:	465b      	mov	r3, fp
 8000f20:	4650      	mov	r0, sl
 8000f22:	4659      	mov	r1, fp
 8000f24:	f004 fe90 	bl	8005c48 <__aeabi_dmul>
 8000f28:	e9cd 0100 	strd	r0, r1, [sp]
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	464b      	mov	r3, r9
 8000f30:	4640      	mov	r0, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	f004 fe88 	bl	8005c48 <__aeabi_dmul>
 8000f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000f3c:	f004 fcce 	bl	80058dc <__adddf3>
 8000f40:	e9cd 0100 	strd	r0, r1, [sp]
 8000f44:	4632      	mov	r2, r6
 8000f46:	463b      	mov	r3, r7
 8000f48:	4630      	mov	r0, r6
 8000f4a:	4639      	mov	r1, r7
 8000f4c:	f004 fe7c 	bl	8005c48 <__aeabi_dmul>
 8000f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000f54:	f004 fcc2 	bl	80058dc <__adddf3>
 8000f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000f60:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8000f64:	f004 fcba 	bl	80058dc <__adddf3>
 8000f68:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8000f6c:	f004 fcb6 	bl	80058dc <__adddf3>
 8000f70:	e9cd 0100 	strd	r0, r1, [sp]
 8000f74:	4650      	mov	r0, sl
 8000f76:	4659      	mov	r1, fp
 8000f78:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8000f7c:	f004 fe64 	bl	8005c48 <__aeabi_dmul>
 8000f80:	4682      	mov	sl, r0
 8000f82:	468b      	mov	fp, r1
 8000f84:	4640      	mov	r0, r8
 8000f86:	4649      	mov	r1, r9
 8000f88:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000f8c:	f004 fe5c 	bl	8005c48 <__aeabi_dmul>
 8000f90:	4652      	mov	r2, sl
 8000f92:	465b      	mov	r3, fp
 8000f94:	f004 fca2 	bl	80058dc <__adddf3>
 8000f98:	4680      	mov	r8, r0
 8000f9a:	4689      	mov	r9, r1
 8000f9c:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	@ 0x40
 8000fa0:	4632      	mov	r2, r6
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	f004 fe50 	bl	8005c48 <__aeabi_dmul>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	464b      	mov	r3, r9
 8000fac:	f004 fc96 	bl	80058dc <__adddf3>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb6:	f004 fe47 	bl	8005c48 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000fc2:	f004 fc89 	bl	80058d8 <__aeabi_dsub>
 8000fc6:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
 8000fca:	f004 ff67 	bl	8005e9c <__aeabi_ddiv>
 8000fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd2:	f004 fc83 	bl	80058dc <__adddf3>
 8000fd6:	f00f fcd1 	bl	801097c <sqrt>
 8000fda:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8000fdc:	e9c2 0100 	strd	r0, r1, [r2]
 8000fe0:	2001      	movs	r0, #1

08000fe2 <??inv_compute_bias_0>:
 8000fe2:	b019      	add	sp, #100	@ 0x64
 8000fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fe8 <??DataTable6>:
 8000fe8:	0268 2000                                   h.. 

08000fec <??DataTable6_1>:
 8000fec:	0000 4004                                   ...@

08000ff0 <??DataTable6_2>:
 8000ff0:	8000 ffff                                   ....

08000ff4 <??DataTable6_3>:
 8000ff4:	0000 2000                                   ... 

08000ff8 <??DataTable6_4>:
 8000ff8:	0fdb 40c9                                   ...@

08000ffc <??DataTable6_5>:
 8000ffc:	0000 3ff0                                   ...?

08001000 <inv_center_sum>:
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b0a3      	sub	sp, #140	@ 0x8c
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	@ 0xc0
 800100e:	e9cd 0100 	strd	r0, r1, [sp]
 8001012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001016:	2000      	movs	r0, #0
 8001018:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800101c:	f004 fe14 	bl	8005c48 <__aeabi_dmul>
 8001020:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8001024:	e9d5 6700 	ldrd	r6, r7, [r5]
 8001028:	4632      	mov	r2, r6
 800102a:	463b      	mov	r3, r7
 800102c:	f004 fe0c 	bl	8005c48 <__aeabi_dmul>
 8001030:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 8001034:	e9d5 8904 	ldrd	r8, r9, [r5, #16]
 8001038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800103c:	4642      	mov	r2, r8
 800103e:	464b      	mov	r3, r9
 8001040:	f004 fe02 	bl	8005c48 <__aeabi_dmul>
 8001044:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8001048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800104c:	2000      	movs	r0, #0
 800104e:	f8df 18dc 	ldr.w	r1, [pc, #2268]	@ 800192c <??DataTable9>
 8001052:	f004 fdf9 	bl	8005c48 <__aeabi_dmul>
 8001056:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800105a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800105e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001066:	f004 fdef 	bl	8005c48 <__aeabi_dmul>
 800106a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800106e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001072:	2000      	movs	r0, #0
 8001074:	f8df 1a2c 	ldr.w	r1, [pc, #2604]	@ 8001aa4 <??DataTable11>
 8001078:	f004 fde6 	bl	8005c48 <__aeabi_dmul>
 800107c:	4682      	mov	sl, r0
 800107e:	468b      	mov	fp, r1
 8001080:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 8001084:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8001088:	4632      	mov	r2, r6
 800108a:	463b      	mov	r3, r7
 800108c:	f004 fddc 	bl	8005c48 <__aeabi_dmul>
 8001090:	e9cd 011c 	strd	r0, r1, [sp, #112]	@ 0x70
 8001094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001098:	4632      	mov	r2, r6
 800109a:	463b      	mov	r3, r7
 800109c:	f004 fdd4 	bl	8005c48 <__aeabi_dmul>
 80010a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80010a4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80010a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80010ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80010b0:	2000      	movs	r0, #0
 80010b2:	f8df 1878 	ldr.w	r1, [pc, #2168]	@ 800192c <??DataTable9>
 80010b6:	f004 fdc7 	bl	8005c48 <__aeabi_dmul>
 80010ba:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 80010be:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 80010c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80010c6:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	@ 0x40
 80010ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80010ce:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80010d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010d6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80010da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80010de:	2000      	movs	r0, #0
 80010e0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010e4:	4632      	mov	r2, r6
 80010e6:	463b      	mov	r3, r7
 80010e8:	f004 fdae 	bl	8005c48 <__aeabi_dmul>
 80010ec:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80010f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80010f4:	4632      	mov	r2, r6
 80010f6:	463b      	mov	r3, r7
 80010f8:	f004 fda6 	bl	8005c48 <__aeabi_dmul>
 80010fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8001100:	f004 fda2 	bl	8005c48 <__aeabi_dmul>
 8001104:	e9cd 0100 	strd	r0, r1, [sp]
 8001108:	4632      	mov	r2, r6
 800110a:	463b      	mov	r3, r7
 800110c:	4630      	mov	r0, r6
 800110e:	4639      	mov	r1, r7
 8001110:	f004 fd9a 	bl	8005c48 <__aeabi_dmul>
 8001114:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8001118:	f004 fd96 	bl	8005c48 <__aeabi_dmul>
 800111c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8001120:	f004 fd92 	bl	8005c48 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800112c:	f004 fbd4 	bl	80058d8 <__aeabi_dsub>
 8001130:	e9cd 0100 	strd	r0, r1, [sp]
 8001134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8001138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800113c:	f004 fd84 	bl	8005c48 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001148:	f004 fbc6 	bl	80058d8 <__aeabi_dsub>
 800114c:	e9cd 0100 	strd	r0, r1, [sp]
 8001150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8001154:	4632      	mov	r2, r6
 8001156:	463b      	mov	r3, r7
 8001158:	f004 fd76 	bl	8005c48 <__aeabi_dmul>
 800115c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8001160:	f004 fd72 	bl	8005c48 <__aeabi_dmul>
 8001164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001168:	f004 fbb8 	bl	80058dc <__adddf3>
 800116c:	4606      	mov	r6, r0
 800116e:	460f      	mov	r7, r1
 8001170:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 8001174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001178:	f004 fd66 	bl	8005c48 <__aeabi_dmul>
 800117c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001180:	f004 fd62 	bl	8005c48 <__aeabi_dmul>
 8001184:	4632      	mov	r2, r6
 8001186:	463b      	mov	r3, r7
 8001188:	f004 fba8 	bl	80058dc <__adddf3>
 800118c:	4606      	mov	r6, r0
 800118e:	460f      	mov	r7, r1
 8001190:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8001194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001198:	f004 fd56 	bl	8005c48 <__aeabi_dmul>
 800119c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80011a0:	f004 fd52 	bl	8005c48 <__aeabi_dmul>
 80011a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80011a8:	f004 fd4e 	bl	8005c48 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f004 fb90 	bl	80058d8 <__aeabi_dsub>
 80011b8:	4606      	mov	r6, r0
 80011ba:	460f      	mov	r7, r1
 80011bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80011c0:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
 80011c4:	f004 fd40 	bl	8005c48 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f004 fb82 	bl	80058d8 <__aeabi_dsub>
 80011d4:	4606      	mov	r6, r0
 80011d6:	460f      	mov	r7, r1
 80011d8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	@ 0x70
 80011dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011e0:	f004 fd32 	bl	8005c48 <__aeabi_dmul>
 80011e4:	4632      	mov	r2, r6
 80011e6:	463b      	mov	r3, r7
 80011e8:	f004 fb78 	bl	80058dc <__adddf3>
 80011ec:	4606      	mov	r6, r0
 80011ee:	460f      	mov	r7, r1
 80011f0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
 80011f4:	4642      	mov	r2, r8
 80011f6:	464b      	mov	r3, r9
 80011f8:	f004 fd26 	bl	8005c48 <__aeabi_dmul>
 80011fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001200:	f004 fd22 	bl	8005c48 <__aeabi_dmul>
 8001204:	4632      	mov	r2, r6
 8001206:	463b      	mov	r3, r7
 8001208:	f004 fb68 	bl	80058dc <__adddf3>
 800120c:	4606      	mov	r6, r0
 800120e:	460f      	mov	r7, r1
 8001210:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8001214:	4642      	mov	r2, r8
 8001216:	464b      	mov	r3, r9
 8001218:	f004 fd16 	bl	8005c48 <__aeabi_dmul>
 800121c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8001220:	f004 fd12 	bl	8005c48 <__aeabi_dmul>
 8001224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001228:	f004 fd0e 	bl	8005c48 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4630      	mov	r0, r6
 8001232:	4639      	mov	r1, r7
 8001234:	f004 fb50 	bl	80058d8 <__aeabi_dsub>
 8001238:	4606      	mov	r6, r0
 800123a:	460f      	mov	r7, r1
 800123c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8001240:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8001244:	f004 fd00 	bl	8005c48 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4630      	mov	r0, r6
 800124e:	4639      	mov	r1, r7
 8001250:	f004 fb42 	bl	80058d8 <__aeabi_dsub>
 8001254:	4606      	mov	r6, r0
 8001256:	460f      	mov	r7, r1
 8001258:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	@ 0x70
 800125c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001260:	f004 fcf2 	bl	8005c48 <__aeabi_dmul>
 8001264:	4632      	mov	r2, r6
 8001266:	463b      	mov	r3, r7
 8001268:	f004 fb38 	bl	80058dc <__adddf3>
 800126c:	4606      	mov	r6, r0
 800126e:	460f      	mov	r7, r1
 8001270:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8001274:	4652      	mov	r2, sl
 8001276:	465b      	mov	r3, fp
 8001278:	f004 fce6 	bl	8005c48 <__aeabi_dmul>
 800127c:	4632      	mov	r2, r6
 800127e:	463b      	mov	r3, r7
 8001280:	f004 fb2c 	bl	80058dc <__adddf3>
 8001284:	4606      	mov	r6, r0
 8001286:	460f      	mov	r7, r1
 8001288:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800128c:	2000      	movs	r0, #0
 800128e:	f8df 1814 	ldr.w	r1, [pc, #2068]	@ 8001aa4 <??DataTable11>
 8001292:	f004 fcd9 	bl	8005c48 <__aeabi_dmul>
 8001296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800129a:	f004 fcd5 	bl	8005c48 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4630      	mov	r0, r6
 80012a4:	4639      	mov	r1, r7
 80012a6:	f004 fb17 	bl	80058d8 <__aeabi_dsub>
 80012aa:	4606      	mov	r6, r0
 80012ac:	460f      	mov	r7, r1
 80012ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 80012b2:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	@ 0x60
 80012b6:	f004 fcc7 	bl	8005c48 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4630      	mov	r0, r6
 80012c0:	4639      	mov	r1, r7
 80012c2:	f004 fb09 	bl	80058d8 <__aeabi_dsub>
 80012c6:	4606      	mov	r6, r0
 80012c8:	460f      	mov	r7, r1
 80012ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80012d2:	f004 fcb9 	bl	8005c48 <__aeabi_dmul>
 80012d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80012da:	f004 fcb5 	bl	8005c48 <__aeabi_dmul>
 80012de:	4632      	mov	r2, r6
 80012e0:	463b      	mov	r3, r7
 80012e2:	f004 fafb 	bl	80058dc <__adddf3>
 80012e6:	4606      	mov	r6, r0
 80012e8:	460f      	mov	r7, r1
 80012ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
 80012ee:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	@ 0xa8
 80012f2:	f004 fca9 	bl	8005c48 <__aeabi_dmul>
 80012f6:	4632      	mov	r2, r6
 80012f8:	463b      	mov	r3, r7
 80012fa:	f004 faef 	bl	80058dc <__adddf3>
 80012fe:	4606      	mov	r6, r0
 8001300:	460f      	mov	r7, r1
 8001302:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 8001306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800130a:	f004 fc9d 	bl	8005c48 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4630      	mov	r0, r6
 8001314:	4639      	mov	r1, r7
 8001316:	f004 fadf 	bl	80058d8 <__aeabi_dsub>
 800131a:	4606      	mov	r6, r0
 800131c:	460f      	mov	r7, r1
 800131e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8001322:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	@ 0x78
 8001326:	f004 fc8f 	bl	8005c48 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4630      	mov	r0, r6
 8001330:	4639      	mov	r1, r7
 8001332:	f004 fad1 	bl	80058d8 <__aeabi_dsub>
 8001336:	4606      	mov	r6, r0
 8001338:	460f      	mov	r7, r1
 800133a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800133e:	4642      	mov	r2, r8
 8001340:	464b      	mov	r3, r9
 8001342:	f004 fc81 	bl	8005c48 <__aeabi_dmul>
 8001346:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800134a:	f004 fc7d 	bl	8005c48 <__aeabi_dmul>
 800134e:	4632      	mov	r2, r6
 8001350:	463b      	mov	r3, r7
 8001352:	f004 fac3 	bl	80058dc <__adddf3>
 8001356:	4606      	mov	r6, r0
 8001358:	460f      	mov	r7, r1
 800135a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
 800135e:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	@ 0xb0
 8001362:	f004 fc71 	bl	8005c48 <__aeabi_dmul>
 8001366:	4632      	mov	r2, r6
 8001368:	463b      	mov	r3, r7
 800136a:	f004 fab7 	bl	80058dc <__adddf3>
 800136e:	4606      	mov	r6, r0
 8001370:	460f      	mov	r7, r1
 8001372:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 8001376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800137a:	f004 fc65 	bl	8005c48 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4630      	mov	r0, r6
 8001384:	4639      	mov	r1, r7
 8001386:	f004 faa7 	bl	80058d8 <__aeabi_dsub>
 800138a:	4606      	mov	r6, r0
 800138c:	460f      	mov	r7, r1
 800138e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8001392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001396:	f004 fc57 	bl	8005c48 <__aeabi_dmul>
 800139a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800139e:	f004 fc53 	bl	8005c48 <__aeabi_dmul>
 80013a2:	4632      	mov	r2, r6
 80013a4:	463b      	mov	r3, r7
 80013a6:	f004 fa99 	bl	80058dc <__adddf3>
 80013aa:	4606      	mov	r6, r0
 80013ac:	460f      	mov	r7, r1
 80013ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80013b6:	f004 fc47 	bl	8005c48 <__aeabi_dmul>
 80013ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80013be:	f004 fc43 	bl	8005c48 <__aeabi_dmul>
 80013c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80013c6:	f004 fc3f 	bl	8005c48 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4630      	mov	r0, r6
 80013d0:	4639      	mov	r1, r7
 80013d2:	f004 fa81 	bl	80058d8 <__aeabi_dsub>
 80013d6:	4606      	mov	r6, r0
 80013d8:	460f      	mov	r7, r1
 80013da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 80013de:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	@ 0x68
 80013e2:	f004 fc31 	bl	8005c48 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4630      	mov	r0, r6
 80013ec:	4639      	mov	r1, r7
 80013ee:	f004 fa73 	bl	80058d8 <__aeabi_dsub>
 80013f2:	4606      	mov	r6, r0
 80013f4:	460f      	mov	r7, r1
 80013f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013fe:	f004 fc23 	bl	8005c48 <__aeabi_dmul>
 8001402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001406:	f004 fc1f 	bl	8005c48 <__aeabi_dmul>
 800140a:	4632      	mov	r2, r6
 800140c:	463b      	mov	r3, r7
 800140e:	f004 fa65 	bl	80058dc <__adddf3>
 8001412:	4606      	mov	r6, r0
 8001414:	460f      	mov	r7, r1
 8001416:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	@ 0x80
 800141a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800141e:	f004 fc13 	bl	8005c48 <__aeabi_dmul>
 8001422:	4642      	mov	r2, r8
 8001424:	464b      	mov	r3, r9
 8001426:	f004 fc0f 	bl	8005c48 <__aeabi_dmul>
 800142a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800142e:	f004 fc0b 	bl	8005c48 <__aeabi_dmul>
 8001432:	4632      	mov	r2, r6
 8001434:	463b      	mov	r3, r7
 8001436:	f004 fa51 	bl	80058dc <__adddf3>
 800143a:	4606      	mov	r6, r0
 800143c:	460f      	mov	r7, r1
 800143e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001442:	2000      	movs	r0, #0
 8001444:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001448:	f004 fbfe 	bl	8005c48 <__aeabi_dmul>
 800144c:	4642      	mov	r2, r8
 800144e:	464b      	mov	r3, r9
 8001450:	f004 fbfa 	bl	8005c48 <__aeabi_dmul>
 8001454:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001458:	f004 fbf6 	bl	8005c48 <__aeabi_dmul>
 800145c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001460:	f004 fbf2 	bl	8005c48 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4630      	mov	r0, r6
 800146a:	4639      	mov	r1, r7
 800146c:	f004 fa34 	bl	80058d8 <__aeabi_dsub>
 8001470:	4606      	mov	r6, r0
 8001472:	460f      	mov	r7, r1
 8001474:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8001478:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	@ 0x70
 800147c:	f004 fbe4 	bl	8005c48 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4630      	mov	r0, r6
 8001486:	4639      	mov	r1, r7
 8001488:	f004 fa26 	bl	80058d8 <__aeabi_dsub>
 800148c:	4606      	mov	r6, r0
 800148e:	460f      	mov	r7, r1
 8001490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001498:	f004 fbd6 	bl	8005c48 <__aeabi_dmul>
 800149c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014a0:	f004 fbd2 	bl	8005c48 <__aeabi_dmul>
 80014a4:	4632      	mov	r2, r6
 80014a6:	463b      	mov	r3, r7
 80014a8:	f004 fa18 	bl	80058dc <__adddf3>
 80014ac:	4606      	mov	r6, r0
 80014ae:	460f      	mov	r7, r1
 80014b0:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	@ 0x98
 80014b4:	4652      	mov	r2, sl
 80014b6:	465b      	mov	r3, fp
 80014b8:	f004 fbc6 	bl	8005c48 <__aeabi_dmul>
 80014bc:	4632      	mov	r2, r6
 80014be:	463b      	mov	r3, r7
 80014c0:	f004 fa0c 	bl	80058dc <__adddf3>
 80014c4:	4606      	mov	r6, r0
 80014c6:	460f      	mov	r7, r1
 80014c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014cc:	2000      	movs	r0, #0
 80014ce:	f8df 15d4 	ldr.w	r1, [pc, #1492]	@ 8001aa4 <??DataTable11>
 80014d2:	f004 fbb9 	bl	8005c48 <__aeabi_dmul>
 80014d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014da:	f004 fbb5 	bl	8005c48 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4630      	mov	r0, r6
 80014e4:	4639      	mov	r1, r7
 80014e6:	f004 f9f7 	bl	80058d8 <__aeabi_dsub>
 80014ea:	4606      	mov	r6, r0
 80014ec:	460f      	mov	r7, r1
 80014ee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80014f2:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	@ 0x80
 80014f6:	f004 fba7 	bl	8005c48 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4630      	mov	r0, r6
 8001500:	4639      	mov	r1, r7
 8001502:	f004 f9e9 	bl	80058d8 <__aeabi_dsub>
 8001506:	4606      	mov	r6, r0
 8001508:	460f      	mov	r7, r1
 800150a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800150e:	4642      	mov	r2, r8
 8001510:	464b      	mov	r3, r9
 8001512:	f004 fb99 	bl	8005c48 <__aeabi_dmul>
 8001516:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800151a:	f004 fb95 	bl	8005c48 <__aeabi_dmul>
 800151e:	4632      	mov	r2, r6
 8001520:	463b      	mov	r3, r7
 8001522:	f004 f9db 	bl	80058dc <__adddf3>
 8001526:	4606      	mov	r6, r0
 8001528:	460f      	mov	r7, r1
 800152a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
 800152e:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	@ 0xb8
 8001532:	f004 fb89 	bl	8005c48 <__aeabi_dmul>
 8001536:	4632      	mov	r2, r6
 8001538:	463b      	mov	r3, r7
 800153a:	f004 f9cf 	bl	80058dc <__adddf3>
 800153e:	4606      	mov	r6, r0
 8001540:	460f      	mov	r7, r1
 8001542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001546:	2000      	movs	r0, #0
 8001548:	f8df 13e0 	ldr.w	r1, [pc, #992]	@ 800192c <??DataTable9>
 800154c:	f004 fb7c 	bl	8005c48 <__aeabi_dmul>
 8001550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001554:	f004 fb78 	bl	8005c48 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4630      	mov	r0, r6
 800155e:	4639      	mov	r1, r7
 8001560:	f004 f9ba 	bl	80058d8 <__aeabi_dsub>
 8001564:	4606      	mov	r6, r0
 8001566:	460f      	mov	r7, r1
 8001568:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800156c:	4642      	mov	r2, r8
 800156e:	464b      	mov	r3, r9
 8001570:	f004 fb6a 	bl	8005c48 <__aeabi_dmul>
 8001574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001578:	f004 fb66 	bl	8005c48 <__aeabi_dmul>
 800157c:	4632      	mov	r2, r6
 800157e:	463b      	mov	r3, r7
 8001580:	f004 f9ac 	bl	80058dc <__adddf3>
 8001584:	4606      	mov	r6, r0
 8001586:	460f      	mov	r7, r1
 8001588:	4642      	mov	r2, r8
 800158a:	464b      	mov	r3, r9
 800158c:	4640      	mov	r0, r8
 800158e:	4649      	mov	r1, r9
 8001590:	f004 fb5a 	bl	8005c48 <__aeabi_dmul>
 8001594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001598:	f004 fb56 	bl	8005c48 <__aeabi_dmul>
 800159c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80015a0:	f004 fb52 	bl	8005c48 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4630      	mov	r0, r6
 80015aa:	4639      	mov	r1, r7
 80015ac:	f004 f994 	bl	80058d8 <__aeabi_dsub>
 80015b0:	4606      	mov	r6, r0
 80015b2:	460f      	mov	r7, r1
 80015b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80015b8:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	@ 0x88
 80015bc:	f004 fb44 	bl	8005c48 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4630      	mov	r0, r6
 80015c6:	4639      	mov	r1, r7
 80015c8:	f004 f986 	bl	80058d8 <__aeabi_dsub>
 80015cc:	4606      	mov	r6, r0
 80015ce:	460f      	mov	r7, r1
 80015d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80015d4:	4642      	mov	r2, r8
 80015d6:	464b      	mov	r3, r9
 80015d8:	f004 fb36 	bl	8005c48 <__aeabi_dmul>
 80015dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80015e0:	f004 fb32 	bl	8005c48 <__aeabi_dmul>
 80015e4:	4632      	mov	r2, r6
 80015e6:	463b      	mov	r3, r7
 80015e8:	f004 f978 	bl	80058dc <__adddf3>
 80015ec:	4606      	mov	r6, r0
 80015ee:	460f      	mov	r7, r1
 80015f0:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	@ 0xa0
 80015f4:	4652      	mov	r2, sl
 80015f6:	465b      	mov	r3, fp
 80015f8:	f004 fb26 	bl	8005c48 <__aeabi_dmul>
 80015fc:	4632      	mov	r2, r6
 80015fe:	463b      	mov	r3, r7
 8001600:	f004 f96c 	bl	80058dc <__adddf3>
 8001604:	4604      	mov	r4, r0
 8001606:	460d      	mov	r5, r1
 8001608:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800160c:	2000      	movs	r0, #0
 800160e:	f8df 1494 	ldr.w	r1, [pc, #1172]	@ 8001aa4 <??DataTable11>
 8001612:	f004 fb19 	bl	8005c48 <__aeabi_dmul>
 8001616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800161a:	f004 fb15 	bl	8005c48 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	b023      	add	sp, #140	@ 0x8c
 8001628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800162c:	f004 b954 	b.w	80058d8 <__aeabi_dsub>

08001630 <inv_get_current_calibrated_compass>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	4604      	mov	r4, r0
 8001636:	460d      	mov	r5, r1
 8001638:	f104 0688 	add.w	r6, r4, #136	@ 0x88
 800163c:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8001640:	0400      	lsls	r0, r0, #16
 8001642:	9000      	str	r0, [sp, #0]
 8001644:	af00      	add	r7, sp, #0
 8001646:	f9b6 0006 	ldrsh.w	r0, [r6, #6]
 800164a:	0400      	lsls	r0, r0, #16
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8001652:	0400      	lsls	r0, r0, #16
 8001654:	60b8      	str	r0, [r7, #8]
 8001656:	a803      	add	r0, sp, #12
 8001658:	f008 f930 	bl	80098bc <inv_get_compass_bias>
 800165c:	9800      	ldr	r0, [sp, #0]
 800165e:	9903      	ldr	r1, [sp, #12]
 8001660:	1a40      	subs	r0, r0, r1
 8001662:	9000      	str	r0, [sp, #0]
 8001664:	a803      	add	r0, sp, #12
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	6842      	ldr	r2, [r0, #4]
 800166a:	1a89      	subs	r1, r1, r2
 800166c:	6079      	str	r1, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6880      	ldr	r0, [r0, #8]
 8001672:	1a08      	subs	r0, r1, r0
 8001674:	60b8      	str	r0, [r7, #8]
 8001676:	462b      	mov	r3, r5
 8001678:	aa00      	add	r2, sp, #0
 800167a:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800167c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8001680:	b280      	uxth	r0, r0
 8001682:	f008 fe48 	bl	800a316 <inv_convert_to_body_with_scale>
 8001686:	b007      	add	sp, #28
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800168a <inv_add_compass_block_data>:
 800168a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168c:	b087      	sub	sp, #28
 800168e:	460e      	mov	r6, r1
 8001690:	a903      	add	r1, sp, #12
 8001692:	f7ff ffcd 	bl	8001630 <inv_get_current_calibrated_compass>
 8001696:	2400      	movs	r4, #0
 8001698:	4625      	mov	r5, r4
 800169a:	4627      	mov	r7, r4
 800169c:	e017      	b.n	80016ce <??inv_add_compass_block_data_0>

0800169e <??inv_add_compass_block_data_1>:
 800169e:	a803      	add	r0, sp, #12
 80016a0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 80016a4:	f004 fed2 	bl	800644c <__aeabi_i2f>
 80016a8:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 80016ac:	f004 ff22 	bl	80064f4 <__aeabi_fmul>
 80016b0:	a900      	add	r1, sp, #0
 80016b2:	f841 0027 	str.w	r0, [r1, r7, lsl #2]
 80016b6:	4601      	mov	r1, r0
 80016b8:	f004 ff1c 	bl	80064f4 <__aeabi_fmul>
 80016bc:	f004 fa6c 	bl	8005b98 <__aeabi_f2d>
 80016c0:	4622      	mov	r2, r4
 80016c2:	462b      	mov	r3, r5
 80016c4:	f004 f90a 	bl	80058dc <__adddf3>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	1c7f      	adds	r7, r7, #1

080016ce <??inv_add_compass_block_data_0>:
 80016ce:	2f03      	cmp	r7, #3
 80016d0:	dbe5      	blt.n	800169e <??inv_add_compass_block_data_1>
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f00f f951 	bl	801097c <sqrt>
 80016da:	4604      	mov	r4, r0
 80016dc:	460d      	mov	r5, r1
 80016de:	2700      	movs	r7, #0
 80016e0:	e011      	b.n	8001706 <??inv_add_compass_block_data_2>

080016e2 <??inv_add_compass_block_data_3>:
 80016e2:	a800      	add	r0, sp, #0
 80016e4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 80016e8:	f004 fa56 	bl	8005b98 <__aeabi_f2d>
 80016ec:	4622      	mov	r2, r4
 80016ee:	462b      	mov	r3, r5
 80016f0:	f004 fbd4 	bl	8005e9c <__aeabi_ddiv>
 80016f4:	f004 fda0 	bl	8006238 <__aeabi_d2f>
 80016f8:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 80016fc:	f004 fdf2 	bl	80062e4 <__addsf3>
 8001700:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 8001704:	1c7f      	adds	r7, r7, #1

08001706 <??inv_add_compass_block_data_2>:
 8001706:	2f03      	cmp	r7, #3
 8001708:	dbeb      	blt.n	80016e2 <??inv_add_compass_block_data_3>
 800170a:	6d70      	ldr	r0, [r6, #84]	@ 0x54
 800170c:	1c40      	adds	r0, r0, #1
 800170e:	6570      	str	r0, [r6, #84]	@ 0x54
 8001710:	f008 ffe0 	bl	800a6d4 <inv_got_compass_bias>
 8001714:	67f0      	str	r0, [r6, #124]	@ 0x7c
 8001716:	b007      	add	sp, #28
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800171a <inv_ignore_compass_data>:
 800171a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171c:	4605      	mov	r5, r0
 800171e:	f008 fedd 	bl	800a4dc <inv_get_large_mag_field>
 8001722:	2800      	cmp	r0, #0
 8001724:	d103      	bne.n	800172e <??inv_ignore_compass_data_0>
 8001726:	f008 ffe7 	bl	800a6f8 <inv_get_compass_state>
 800172a:	2804      	cmp	r0, #4
 800172c:	d101      	bne.n	8001732 <??inv_ignore_compass_data_1>

0800172e <??inv_ignore_compass_data_0>:
 800172e:	2001      	movs	r0, #1
 8001730:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001732 <??inv_ignore_compass_data_1>:
 8001732:	f8df 4ad0 	ldr.w	r4, [pc, #2768]	@ 8002204 <??DataTable19>
 8001736:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 800173a:	4631      	mov	r1, r6
 800173c:	4628      	mov	r0, r5
 800173e:	f7ff ffa4 	bl	800168a <inv_add_compass_block_data>
 8001742:	f504 77b8 	add.w	r7, r4, #368	@ 0x170
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f8d4 1170 	ldr.w	r1, [r4, #368]	@ 0x170
 800174c:	4288      	cmp	r0, r1
 800174e:	db04      	blt.n	800175a <??inv_ignore_compass_data_2>
 8001750:	4630      	mov	r0, r6
 8001752:	f003 fcb9 	bl	80050c8 <inv_check_sample_balance>
 8001756:	2000      	movs	r0, #0
 8001758:	6078      	str	r0, [r7, #4]

0800175a <??inv_ignore_compass_data_2>:
 800175a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800175c:	05c0      	lsls	r0, r0, #23
 800175e:	d50b      	bpl.n	8001778 <??inv_ignore_compass_data_3>
 8001760:	f105 0018 	add.w	r0, r5, #24
 8001764:	f008 fac9 	bl	8009cfa <inv_get_gyro_sum_of_sqr>
 8001768:	0980      	lsrs	r0, r0, #6
 800176a:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 800176e:	d336      	bcc.n	80017de <??inv_ignore_compass_data_4>
 8001770:	2004      	movs	r0, #4
 8001772:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 8001776:	e046      	b.n	8001806 <??inv_ignore_compass_data_5>

08001778 <??inv_ignore_compass_data_3>:
 8001778:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800177c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8001780:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8001782:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	001e      	movs	r6, r3
 8001788:	d500      	bpl.n	800178c <??inv_ignore_compass_data_6>
 800178a:	4276      	negs	r6, r6

0800178c <??inv_ignore_compass_data_6>:
 800178c:	f8df 2a78 	ldr.w	r2, [pc, #2680]	@ 8002208 <??DataTable19_1>
 8001790:	4296      	cmp	r6, r2
 8001792:	da0a      	bge.n	80017aa <??inv_ignore_compass_data_7>
 8001794:	121b      	asrs	r3, r3, #8
 8001796:	fb03 f603 	mul.w	r6, r3, r3
 800179a:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
 800179c:	6e07      	ldr	r7, [r0, #96]	@ 0x60
 800179e:	1bdb      	subs	r3, r3, r7
 80017a0:	001f      	movs	r7, r3
 80017a2:	d500      	bpl.n	80017a6 <??inv_ignore_compass_data_8>
 80017a4:	427f      	negs	r7, r7

080017a6 <??inv_ignore_compass_data_8>:
 80017a6:	4297      	cmp	r7, r2
 80017a8:	db08      	blt.n	80017bc <??inv_ignore_compass_data_9>

080017aa <??inv_ignore_compass_data_7>:
 80017aa:	220c      	movs	r2, #12
 80017ac:	f105 01a0 	add.w	r1, r5, #160	@ 0xa0
 80017b0:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80017b4:	f00b fdc2 	bl	800d33c <memcpy>
 80017b8:	2000      	movs	r0, #0
 80017ba:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080017bc <??inv_ignore_compass_data_9>:
 80017bc:	121b      	asrs	r3, r3, #8
 80017be:	fb03 6603 	mla	r6, r3, r3, r6
 80017c2:	6f89      	ldr	r1, [r1, #120]	@ 0x78
 80017c4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80017c6:	1a0b      	subs	r3, r1, r0
 80017c8:	0018      	movs	r0, r3
 80017ca:	d500      	bpl.n	80017ce <??inv_ignore_compass_data_10>
 80017cc:	4240      	negs	r0, r0

080017ce <??inv_ignore_compass_data_10>:
 80017ce:	4290      	cmp	r0, r2
 80017d0:	da19      	bge.n	8001806 <??inv_ignore_compass_data_5>
 80017d2:	121b      	asrs	r3, r3, #8
 80017d4:	fb03 6003 	mla	r0, r3, r3, r6
 80017d8:	f5b0 3f40 	cmp.w	r0, #196608	@ 0x30000
 80017dc:	da09      	bge.n	80017f2 <??inv_ignore_compass_data_11>

080017de <??inv_ignore_compass_data_4>:
 80017de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 80017e2:	2801      	cmp	r0, #1
 80017e4:	db03      	blt.n	80017ee <??inv_ignore_compass_data_12>
 80017e6:	1e40      	subs	r0, r0, #1
 80017e8:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 80017ec:	e00b      	b.n	8001806 <??inv_ignore_compass_data_5>

080017ee <??inv_ignore_compass_data_12>:
 80017ee:	2002      	movs	r0, #2
 80017f0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080017f2 <??inv_ignore_compass_data_11>:
 80017f2:	2004      	movs	r0, #4
 80017f4:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 80017f8:	220c      	movs	r2, #12
 80017fa:	f105 01a0 	add.w	r1, r5, #160	@ 0xa0
 80017fe:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8001802:	f00b fd9b 	bl	800d33c <memcpy>

08001806 <??inv_ignore_compass_data_5>:
 8001806:	2000      	movs	r0, #0
 8001808:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800180a <inv_bias_stability>:
 800180a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800180e:	b08c      	sub	sp, #48	@ 0x30
 8001810:	f8df 49f0 	ldr.w	r4, [pc, #2544]	@ 8002204 <??DataTable19>
 8001814:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001818:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800181c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
 8001824:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8001828:	1c49      	adds	r1, r1, #1
 800182a:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 800182e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8001832:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001836:	e9c1 2300 	strd	r2, r3, [r1]
 800183a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800183e:	1c49      	adds	r1, r1, #1
 8001840:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 8001844:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001848:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800184c:	e9c0 2300 	strd	r2, r3, [r0]
 8001850:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8001854:	1c40      	adds	r0, r0, #1
 8001856:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800185a:	2815      	cmp	r0, #21
 800185c:	db02      	blt.n	8001864 <??inv_bias_stability_0>
 800185e:	2000      	movs	r0, #0
 8001860:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8

08001864 <??inv_bias_stability_0>:
 8001864:	2218      	movs	r2, #24
 8001866:	4621      	mov	r1, r4
 8001868:	a806      	add	r0, sp, #24
 800186a:	f00b fd67 	bl	800d33c <memcpy>
 800186e:	2218      	movs	r2, #24
 8001870:	4621      	mov	r1, r4
 8001872:	a800      	add	r0, sp, #0
 8001874:	f00b fd62 	bl	800d33c <memcpy>
 8001878:	2501      	movs	r5, #1
 800187a:	f10d 0918 	add.w	r9, sp, #24
 800187e:	f10d 0a00 	add.w	sl, sp, #0
 8001882:	e026      	b.n	80018d2 <??inv_bias_stability_1>

08001884 <??inv_bias_stability_2>:
 8001884:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001888:	4440      	add	r0, r8
 800188a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800188e:	e9d0 6700 	ldrd	r6, r7, [r0]
 8001892:	4630      	mov	r0, r6
 8001894:	4639      	mov	r1, r7
 8001896:	eb09 0cc8 	add.w	ip, r9, r8, lsl #3
 800189a:	e9dc 2300 	ldrd	r2, r3, [ip]
 800189e:	f004 fc33 	bl	8006108 <__aeabi_cdcmpeq>
 80018a2:	d203      	bcs.n	80018ac <??inv_bias_stability_3>
 80018a4:	eb09 00c8 	add.w	r0, r9, r8, lsl #3
 80018a8:	e9c0 6700 	strd	r6, r7, [r0]

080018ac <??inv_bias_stability_3>:
 80018ac:	eb0a 02c8 	add.w	r2, sl, r8, lsl #3
 80018b0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80018b4:	4632      	mov	r2, r6
 80018b6:	463b      	mov	r3, r7
 80018b8:	f004 fc26 	bl	8006108 <__aeabi_cdcmpeq>
 80018bc:	d203      	bcs.n	80018c6 <??inv_bias_stability_4>
 80018be:	eb0a 00c8 	add.w	r0, sl, r8, lsl #3
 80018c2:	e9c0 6700 	strd	r6, r7, [r0]

080018c6 <??inv_bias_stability_4>:
 80018c6:	f108 0801 	add.w	r8, r8, #1

080018ca <??inv_bias_stability_5>:
 80018ca:	f1b8 0f03 	cmp.w	r8, #3
 80018ce:	dbd9      	blt.n	8001884 <??inv_bias_stability_2>
 80018d0:	1c6d      	adds	r5, r5, #1

080018d2 <??inv_bias_stability_1>:
 80018d2:	2d07      	cmp	r5, #7
 80018d4:	da02      	bge.n	80018dc <??inv_bias_stability_6>
 80018d6:	f04f 0800 	mov.w	r8, #0
 80018da:	e7f6      	b.n	80018ca <??inv_bias_stability_5>

080018dc <??inv_bias_stability_6>:
 80018dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80018e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80018e4:	f003 fff8 	bl	80058d8 <__aeabi_dsub>
 80018e8:	4604      	mov	r4, r0
 80018ea:	460d      	mov	r5, r1
 80018ec:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 80018f0:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 80018f4:	f003 fff0 	bl	80058d8 <__aeabi_dsub>
 80018f8:	4622      	mov	r2, r4
 80018fa:	462b      	mov	r3, r5
 80018fc:	f004 fc04 	bl	8006108 <__aeabi_cdcmpeq>
 8001900:	d301      	bcc.n	8001906 <??inv_bias_stability_7>
 8001902:	4604      	mov	r4, r0
 8001904:	460d      	mov	r5, r1

08001906 <??inv_bias_stability_7>:
 8001906:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800190a:	e9d9 2304 	ldrd	r2, r3, [r9, #16]
 800190e:	f003 ffe3 	bl	80058d8 <__aeabi_dsub>
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f004 fbf7 	bl	8006108 <__aeabi_cdcmpeq>
 800191a:	d301      	bcc.n	8001920 <??inv_bias_stability_8>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1

08001920 <??inv_bias_stability_8>:
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	b00c      	add	sp, #48	@ 0x30
 8001926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800192c <??DataTable9>:
 800192c:	0000 3fe0                                   ...?

08001930 <inv_check_sim>:
 8001930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	b09d      	sub	sp, #116	@ 0x74
 8001936:	4606      	mov	r6, r0
 8001938:	2400      	movs	r4, #0
 800193a:	f8df 58d0 	ldr.w	r5, [pc, #2256]	@ 800220c <??DataTable19_2>
 800193e:	4620      	mov	r0, r4
 8001940:	900a      	str	r0, [sp, #40]	@ 0x28
 8001942:	a80a      	add	r0, sp, #40	@ 0x28
 8001944:	4621      	mov	r1, r4
 8001946:	6041      	str	r1, [r0, #4]
 8001948:	2155      	movs	r1, #85	@ 0x55
 800194a:	6081      	str	r1, [r0, #8]
 800194c:	60c1      	str	r1, [r0, #12]
 800194e:	a806      	add	r0, sp, #24
 8001950:	f008 fe44 	bl	800a5dc <inv_get_6axis_quaternion>
 8001954:	a918      	add	r1, sp, #96	@ 0x60
 8001956:	a806      	add	r0, sp, #24
 8001958:	f008 fa7b 	bl	8009e52 <inv_q_invert>
 800195c:	aa14      	add	r2, sp, #80	@ 0x50
 800195e:	a90a      	add	r1, sp, #40	@ 0x28
 8001960:	a818      	add	r0, sp, #96	@ 0x60
 8001962:	f008 f9e2 	bl	8009d2a <inv_q_mult>
 8001966:	aa02      	add	r2, sp, #8
 8001968:	a906      	add	r1, sp, #24
 800196a:	a814      	add	r0, sp, #80	@ 0x50
 800196c:	f008 f9dd 	bl	8009d2a <inv_q_mult>
 8001970:	af02      	add	r7, sp, #8
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f500 7096 	add.w	r0, r0, #300	@ 0x12c
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	68b8      	ldr	r0, [r7, #8]
 800197c:	f500 7096 	add.w	r0, r0, #300	@ 0x12c
 8001980:	60b8      	str	r0, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f500 7096 	add.w	r0, r0, #300	@ 0x12c
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	f8df 8884 	ldr.w	r8, [pc, #2180]	@ 8002210 <??DataTable19_3>
 800198e:	4640      	mov	r0, r8
 8001990:	f7fe fd67 	bl	8000462 <inv_cheap_gaussian>
 8001994:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8001998:	f004 ff72 	bl	8006880 <__aeabi_f2iz>
 800199c:	4448      	add	r0, r9
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4640      	mov	r0, r8
 80019a2:	f7fe fd5e 	bl	8000462 <inv_cheap_gaussian>
 80019a6:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80019aa:	f004 ff69 	bl	8006880 <__aeabi_f2iz>
 80019ae:	4448      	add	r0, r9
 80019b0:	60b8      	str	r0, [r7, #8]
 80019b2:	4640      	mov	r0, r8
 80019b4:	f7fe fd55 	bl	8000462 <inv_cheap_gaussian>
 80019b8:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80019bc:	f004 ff60 	bl	8006880 <__aeabi_f2iz>
 80019c0:	4440      	add	r0, r8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	a903      	add	r1, sp, #12
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7fe fe2b 	bl	8000622 <inv_set_terms>
 80019cc:	e9d6 0130 	ldrd	r0, r1, [r6, #192]	@ 0xc0
 80019d0:	2201      	movs	r2, #1
 80019d2:	f8df 3840 	ldr.w	r3, [pc, #2112]	@ 8002214 <??DataTable19_4>
 80019d6:	f004 fb8f 	bl	80060f8 <__aeabi_cdrcmple>
 80019da:	d841      	bhi.n	8001a60 <??inv_check_sim_0>
 80019dc:	aa00      	add	r2, sp, #0
 80019de:	a90e      	add	r1, sp, #56	@ 0x38
 80019e0:	4630      	mov	r0, r6
 80019e2:	f7fe ff82 	bl	80008ea <inv_compute_bias>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d03a      	beq.n	8001a60 <??inv_check_sim_0>
 80019ea:	4626      	mov	r6, r4
 80019ec:	f8df 7828 	ldr.w	r7, [pc, #2088]	@ 8002218 <??DataTable19_5>
 80019f0:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80019f4:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 80019f8:	4632      	mov	r2, r6
 80019fa:	463b      	mov	r3, r7
 80019fc:	f003 ff6e 	bl	80058dc <__adddf3>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
 8001a08:	4632      	mov	r2, r6
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	f003 ff66 	bl	80058dc <__adddf3>
 8001a10:	4680      	mov	r8, r0
 8001a12:	4689      	mov	r9, r1
 8001a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8001a18:	4632      	mov	r2, r6
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	f003 ff5e 	bl	80058dc <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	f004 f910 	bl	8005c48 <__aeabi_dmul>
 8001a28:	4606      	mov	r6, r0
 8001a2a:	460f      	mov	r7, r1
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	4649      	mov	r1, r9
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f004 f908 	bl	8005c48 <__aeabi_dmul>
 8001a38:	4632      	mov	r2, r6
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	f003 ff4e 	bl	80058dc <__adddf3>
 8001a40:	4606      	mov	r6, r0
 8001a42:	460f      	mov	r7, r1
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	4622      	mov	r2, r4
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	f004 f8fc 	bl	8005c48 <__aeabi_dmul>
 8001a50:	4632      	mov	r2, r6
 8001a52:	463b      	mov	r3, r7
 8001a54:	f003 ff42 	bl	80058dc <__adddf3>
 8001a58:	f00e ff90 	bl	801097c <sqrt>
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	460d      	mov	r5, r1

08001a60 <??inv_check_sim_0>:
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	2200      	movs	r2, #0
 8001a66:	f8df 37b4 	ldr.w	r3, [pc, #1972]	@ 800221c <??DataTable19_6>
 8001a6a:	f004 fa17 	bl	8005e9c <__aeabi_ddiv>
 8001a6e:	b01d      	add	sp, #116	@ 0x74
 8001a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a74 <inv_reset_data_collection>:
 8001a74:	b510      	push	{r4, lr}
 8001a76:	f8df 478c 	ldr.w	r4, [pc, #1932]	@ 8002204 <??DataTable19>
 8001a7a:	22e8      	movs	r2, #232	@ 0xe8
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f504 7024 	add.w	r0, r4, #656	@ 0x290
 8001a82:	f00b fbd7 	bl	800d234 <memset>
 8001a86:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8001a8a:	f7fe fcc8 	bl	800041e <inv_init_peaks>
 8001a8e:	22e8      	movs	r2, #232	@ 0xe8
 8001a90:	2100      	movs	r1, #0
 8001a92:	f504 705e 	add.w	r0, r4, #888	@ 0x378
 8001a96:	f00b fbcd 	bl	800d234 <memset>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
 8001aa0:	bd10      	pop	{r4, pc}
	...

08001aa4 <??DataTable11>:
 8001aa4:	0000 3fd0                                   ...?

08001aa8 <inv_process_compass_only_cal>:
 8001aa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ca      	sub	sp, #296	@ 0x128
 8001aae:	f8df 8754 	ldr.w	r8, [pc, #1876]	@ 8002204 <??DataTable19>
 8001ab2:	f508 70ca 	add.w	r0, r8, #404	@ 0x194
 8001ab6:	9006      	str	r0, [sp, #24]
 8001ab8:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001aba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001abc:	9906      	ldr	r1, [sp, #24]
 8001abe:	60c8      	str	r0, [r1, #12]
 8001ac0:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001ac2:	f7ff fe2a 	bl	800171a <inv_ignore_compass_data>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	f040 8300 	bne.w	80020cc <??inv_process_compass_only_cal_0>
 8001acc:	f8d8 0194 	ldr.w	r0, [r8, #404]	@ 0x194
 8001ad0:	2801      	cmp	r0, #1
 8001ad2:	d11a      	bne.n	8001b0a <??inv_process_compass_only_cal_1>
 8001ad4:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001ad6:	3030      	adds	r0, #48	@ 0x30
 8001ad8:	9004      	str	r0, [sp, #16]
 8001ada:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8001ade:	900c      	str	r0, [sp, #48]	@ 0x30
 8001ae0:	a80c      	add	r0, sp, #48	@ 0x30
 8001ae2:	9904      	ldr	r1, [sp, #16]
 8001ae4:	f9b1 105e 	ldrsh.w	r1, [r1, #94]	@ 0x5e
 8001ae8:	6041      	str	r1, [r0, #4]
 8001aea:	9904      	ldr	r1, [sp, #16]
 8001aec:	f9b1 1060 	ldrsh.w	r1, [r1, #96]	@ 0x60
 8001af0:	6081      	str	r1, [r0, #8]
 8001af2:	a90c      	add	r1, sp, #48	@ 0x30
 8001af4:	f508 7024 	add.w	r0, r8, #656	@ 0x290
 8001af8:	f7fe fd93 	bl	8000622 <inv_set_terms>
 8001afc:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001afe:	f100 018c 	add.w	r1, r0, #140	@ 0x8c
 8001b02:	f108 00bc 	add.w	r0, r8, #188	@ 0xbc
 8001b06:	f7fe fc57 	bl	80003b8 <inv_set_peaks>

08001b0a <??inv_process_compass_only_cal_1>:
 8001b0a:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8001b0e:	9002      	str	r0, [sp, #8]
 8001b10:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001b12:	2801      	cmp	r0, #1
 8001b14:	db02      	blt.n	8001b1c <??inv_process_compass_only_cal_2>
 8001b16:	1e40      	subs	r0, r0, #1
 8001b18:	9902      	ldr	r1, [sp, #8]
 8001b1a:	6288      	str	r0, [r1, #40]	@ 0x28

08001b1c <??inv_process_compass_only_cal_2>:
 8001b1c:	e9d8 019a 	ldrd	r0, r1, [r8, #616]	@ 0x268
 8001b20:	2200      	movs	r2, #0
 8001b22:	4613      	mov	r3, r2
 8001b24:	f004 fae8 	bl	80060f8 <__aeabi_cdrcmple>
 8001b28:	f080 80d5 	bcs.w	8001cd6 <??inv_process_compass_only_cal_3>
 8001b2c:	a810      	add	r0, sp, #64	@ 0x40
 8001b2e:	f508 71d4 	add.w	r1, r8, #424	@ 0x1a8
 8001b32:	22e8      	movs	r2, #232	@ 0xe8
 8001b34:	f00b fbfd 	bl	800d332 <__aeabi_memcpy>
 8001b38:	f508 70d4 	add.w	r0, r8, #424	@ 0x1a8
 8001b3c:	9003      	str	r0, [sp, #12]
 8001b3e:	a90c      	add	r1, sp, #48	@ 0x30
 8001b40:	f7fe fd6f 	bl	8000622 <inv_set_terms>
 8001b44:	f508 701c 	add.w	r0, r8, #624	@ 0x270
 8001b48:	9004      	str	r0, [sp, #16]
 8001b4a:	aa0a      	add	r2, sp, #40	@ 0x28
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	9803      	ldr	r0, [sp, #12]
 8001b50:	f7fe fecb 	bl	80008ea <inv_compute_bias>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d106      	bne.n	8001b66 <??inv_process_compass_only_cal_4>
 8001b58:	f508 70d4 	add.w	r0, r8, #424	@ 0x1a8
 8001b5c:	a910      	add	r1, sp, #64	@ 0x40
 8001b5e:	22e8      	movs	r2, #232	@ 0xe8
 8001b60:	f00b fbe7 	bl	800d332 <__aeabi_memcpy>
 8001b64:	e0b7      	b.n	8001cd6 <??inv_process_compass_only_cal_3>

08001b66 <??inv_process_compass_only_cal_4>:
 8001b66:	9904      	ldr	r1, [sp, #16]
 8001b68:	9803      	ldr	r0, [sp, #12]
 8001b6a:	f7ff fa49 	bl	8001000 <inv_center_sum>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	f04f 0a00 	mov.w	sl, #0
 8001b76:	f8df b6a8 	ldr.w	fp, [pc, #1704]	@ 8002220 <??DataTable19_7>
 8001b7a:	9e02      	ldr	r6, [sp, #8]
 8001b7c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8001b80:	f003 feaa 	bl	80058d8 <__aeabi_dsub>
 8001b84:	4606      	mov	r6, r0
 8001b86:	460f      	mov	r7, r1
 8001b88:	e9d8 019a 	ldrd	r0, r1, [r8, #616]	@ 0x268
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	465b      	mov	r3, fp
 8001b90:	f003 fea4 	bl	80058dc <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4630      	mov	r0, r6
 8001b9a:	4639      	mov	r1, r7
 8001b9c:	f004 f97e 	bl	8005e9c <__aeabi_ddiv>
 8001ba0:	f00e feec 	bl	801097c <sqrt>
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	460f      	mov	r7, r1
 8001ba8:	4650      	mov	r0, sl
 8001baa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bae:	4622      	mov	r2, r4
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	f004 f849 	bl	8005c48 <__aeabi_dmul>
 8001bb6:	e9cd 0100 	strd	r0, r1, [sp]
 8001bba:	e9d8 019a 	ldrd	r0, r1, [r8, #616]	@ 0x268
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	f003 fe8b 	bl	80058dc <__adddf3>
 8001bc6:	e9d8 239a 	ldrd	r2, r3, [r8, #616]	@ 0x268
 8001bca:	f004 f83d 	bl	8005c48 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bd6:	f004 f961 	bl	8005e9c <__aeabi_ddiv>
 8001bda:	f00e fecf 	bl	801097c <sqrt>
 8001bde:	9802      	ldr	r0, [sp, #8]
 8001be0:	6880      	ldr	r0, [r0, #8]
 8001be2:	f003 ffd9 	bl	8005b98 <__aeabi_f2d>
 8001be6:	e9d8 2338 	ldrd	r2, r3, [r8, #224]	@ 0xe0
 8001bea:	f004 f82d 	bl	8005c48 <__aeabi_dmul>
 8001bee:	4632      	mov	r2, r6
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	f004 fa89 	bl	8006108 <__aeabi_cdcmpeq>
 8001bf6:	d303      	bcc.n	8001c00 <??inv_process_compass_only_cal_5>
 8001bf8:	9802      	ldr	r0, [sp, #8]
 8001bfa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001bfc:	2801      	cmp	r0, #1
 8001bfe:	db1a      	blt.n	8001c36 <??inv_process_compass_only_cal_6>

08001c00 <??inv_process_compass_only_cal_5>:
 8001c00:	f508 70d4 	add.w	r0, r8, #424	@ 0x1a8
 8001c04:	a910      	add	r1, sp, #64	@ 0x40
 8001c06:	22e8      	movs	r2, #232	@ 0xe8
 8001c08:	f00b fb93 	bl	800d332 <__aeabi_memcpy>
 8001c0c:	9802      	ldr	r0, [sp, #8]
 8001c0e:	6880      	ldr	r0, [r0, #8]
 8001c10:	f003 ffc2 	bl	8005b98 <__aeabi_f2d>
 8001c14:	e9d8 2338 	ldrd	r2, r3, [r8, #224]	@ 0xe0
 8001c18:	f004 f816 	bl	8005c48 <__aeabi_dmul>
 8001c1c:	4632      	mov	r2, r6
 8001c1e:	463b      	mov	r3, r7
 8001c20:	f004 fa72 	bl	8006108 <__aeabi_cdcmpeq>
 8001c24:	d257      	bcs.n	8001cd6 <??inv_process_compass_only_cal_3>
 8001c26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c2a:	f001 ff13 	bl	8003a54 <inv_set_magnetic_disturbance>
 8001c2e:	200a      	movs	r0, #10
 8001c30:	9902      	ldr	r1, [sp, #8]
 8001c32:	6288      	str	r0, [r1, #40]	@ 0x28
 8001c34:	e04f      	b.n	8001cd6 <??inv_process_compass_only_cal_3>

08001c36 <??inv_process_compass_only_cal_6>:
 8001c36:	9806      	ldr	r0, [sp, #24]
 8001c38:	6840      	ldr	r0, [r0, #4]
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	d14b      	bne.n	8001cd6 <??inv_process_compass_only_cal_3>
 8001c3e:	f8d8 00b4 	ldr.w	r0, [r8, #180]	@ 0xb4
 8001c42:	1c40      	adds	r0, r0, #1
 8001c44:	f8c8 00b4 	str.w	r0, [r8, #180]	@ 0xb4
 8001c48:	4650      	mov	r0, sl
 8001c4a:	f008 fd4f 	bl	800a6ec <inv_set_compass_state>
 8001c4e:	f508 701a 	add.w	r0, r8, #616	@ 0x268
 8001c52:	9000      	str	r0, [sp, #0]
 8001c54:	4656      	mov	r6, sl
 8001c56:	f8df 75cc 	ldr.w	r7, [pc, #1484]	@ 8002224 <??DataTable19_8>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001c60:	4632      	mov	r2, r6
 8001c62:	463b      	mov	r3, r7
 8001c64:	f003 fff0 	bl	8005c48 <__aeabi_dmul>
 8001c68:	f004 fa9e 	bl	80061a8 <__aeabi_d2iz>
 8001c6c:	9007      	str	r0, [sp, #28]
 8001c6e:	f10d 091c 	add.w	r9, sp, #28
 8001c72:	9a00      	ldr	r2, [sp, #0]
 8001c74:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8001c78:	4632      	mov	r2, r6
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	f003 ffe4 	bl	8005c48 <__aeabi_dmul>
 8001c80:	f004 fa92 	bl	80061a8 <__aeabi_d2iz>
 8001c84:	f8c9 0004 	str.w	r0, [r9, #4]
 8001c88:	9a00      	ldr	r2, [sp, #0]
 8001c8a:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 8001c8e:	4632      	mov	r2, r6
 8001c90:	463b      	mov	r3, r7
 8001c92:	f003 ffd9 	bl	8005c48 <__aeabi_dmul>
 8001c96:	f004 fa87 	bl	80061a8 <__aeabi_d2iz>
 8001c9a:	f8c9 0008 	str.w	r0, [r9, #8]
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	a807      	add	r0, sp, #28
 8001ca2:	f007 fe17 	bl	80098d4 <inv_set_compass_bias>
 8001ca6:	e9d8 019a 	ldrd	r0, r1, [r8, #616]	@ 0x268
 8001caa:	2201      	movs	r2, #1
 8001cac:	f8df 3578 	ldr.w	r3, [pc, #1400]	@ 8002228 <??DataTable19_9>
 8001cb0:	f004 fa22 	bl	80060f8 <__aeabi_cdrcmple>
 8001cb4:	d80c      	bhi.n	8001cd0 <??inv_process_compass_only_cal_7>
 8001cb6:	f8df 2574 	ldr.w	r2, [pc, #1396]	@ 800222c <??DataTable19_10>
 8001cba:	4613      	mov	r3, r2
 8001cbc:	9903      	ldr	r1, [sp, #12]
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	f7fe fc05 	bl	80004ce <inv_combine_compass_data>
 8001cc4:	9904      	ldr	r1, [sp, #16]
 8001cc6:	9803      	ldr	r0, [sp, #12]
 8001cc8:	f7ff f99a 	bl	8001000 <inv_center_sum>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1

08001cd0 <??inv_process_compass_only_cal_7>:
 8001cd0:	9802      	ldr	r0, [sp, #8]
 8001cd2:	e9c0 4508 	strd	r4, r5, [r0, #32]

08001cd6 <??inv_process_compass_only_cal_3>:
 8001cd6:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001cd8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001cda:	05c0      	lsls	r0, r0, #23
 8001cdc:	d50b      	bpl.n	8001cf6 <??inv_process_compass_only_cal_8>
 8001cde:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001ce0:	3030      	adds	r0, #48	@ 0x30
 8001ce2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001ce4:	05c0      	lsls	r0, r0, #23
 8001ce6:	d506      	bpl.n	8001cf6 <??inv_process_compass_only_cal_8>
 8001ce8:	f508 705e 	add.w	r0, r8, #888	@ 0x378
 8001cec:	f7ff fe20 	bl	8001930 <inv_check_sim>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	e002      	b.n	8001cfc <??inv_process_compass_only_cal_9>

08001cf6 <??inv_process_compass_only_cal_8>:
 8001cf6:	2400      	movs	r4, #0
 8001cf8:	f8df 5520 	ldr.w	r5, [pc, #1312]	@ 800221c <??DataTable19_6>

08001cfc <??inv_process_compass_only_cal_9>:
 8001cfc:	e9d8 01d4 	ldrd	r0, r1, [r8, #848]	@ 0x350
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8df 3510 	ldr.w	r3, [pc, #1296]	@ 8002214 <??DataTable19_4>
 8001d06:	f004 f9ff 	bl	8006108 <__aeabi_cdcmpeq>
 8001d0a:	f0c0 81df 	bcc.w	80020cc <??inv_process_compass_only_cal_0>
 8001d0e:	f508 7956 	add.w	r9, r8, #856	@ 0x358
 8001d12:	f508 7024 	add.w	r0, r8, #656	@ 0x290
 8001d16:	9005      	str	r0, [sp, #20]
 8001d18:	aa0a      	add	r2, sp, #40	@ 0x28
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	f7fe fde5 	bl	80008ea <inv_compute_bias>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	f000 81d3 	beq.w	80020cc <??inv_process_compass_only_cal_0>
 8001d26:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8001d28:	3030      	adds	r0, #48	@ 0x30
 8001d2a:	9004      	str	r0, [sp, #16]
 8001d2c:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8001d2e:	f003 ff21 	bl	8005b74 <__aeabi_i2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	f8df 04f8 	ldr.w	r0, [pc, #1272]	@ 8002230 <??DataTable19_11>
 8001d3a:	f8df 14f8 	ldr.w	r1, [pc, #1272]	@ 8002234 <??DataTable19_12>
 8001d3e:	f004 f8ad 	bl	8005e9c <__aeabi_ddiv>
 8001d42:	4606      	mov	r6, r0
 8001d44:	460f      	mov	r7, r1
 8001d46:	4648      	mov	r0, r9
 8001d48:	f7ff fd5f 	bl	800180a <inv_bias_stability>
 8001d4c:	4682      	mov	sl, r0
 8001d4e:	468b      	mov	fp, r1
 8001d50:	4630      	mov	r0, r6
 8001d52:	4639      	mov	r1, r7
 8001d54:	4652      	mov	r2, sl
 8001d56:	465b      	mov	r3, fp
 8001d58:	f004 f9d6 	bl	8006108 <__aeabi_cdcmpeq>
 8001d5c:	d208      	bcs.n	8001d70 <??inv_process_compass_only_cal_10>
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8df 34d0 	ldr.w	r3, [pc, #1232]	@ 8002238 <??DataTable19_13>
 8001d68:	f004 f9ce 	bl	8006108 <__aeabi_cdcmpeq>
 8001d6c:	f0c0 81a1 	bcc.w	80020b2 <??inv_process_compass_only_cal_11>

08001d70 <??inv_process_compass_only_cal_10>:
 8001d70:	4650      	mov	r0, sl
 8001d72:	4659      	mov	r1, fp
 8001d74:	4632      	mov	r2, r6
 8001d76:	463b      	mov	r3, r7
 8001d78:	f004 f9c6 	bl	8006108 <__aeabi_cdcmpeq>
 8001d7c:	f080 819d 	bcs.w	80020ba <??inv_process_compass_only_cal_12>
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8df 34b4 	ldr.w	r3, [pc, #1204]	@ 800223c <??DataTable19_14>
 8001d8a:	f004 f9bd 	bl	8006108 <__aeabi_cdcmpeq>
 8001d8e:	f080 8194 	bcs.w	80020ba <??inv_process_compass_only_cal_12>
 8001d92:	e9d8 45d4 	ldrd	r4, r5, [r8, #848]	@ 0x350
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f8df 34a0 	ldr.w	r3, [pc, #1184]	@ 8002240 <??DataTable19_15>
 8001da0:	f004 f9aa 	bl	80060f8 <__aeabi_cdrcmple>
 8001da4:	f200 8189 	bhi.w	80020ba <??inv_process_compass_only_cal_12>
 8001da8:	e9d8 239a 	ldrd	r2, r3, [r8, #616]	@ 0x268
 8001dac:	2000      	movs	r0, #0
 8001dae:	4601      	mov	r1, r0
 8001db0:	f004 f9aa 	bl	8006108 <__aeabi_cdcmpeq>
 8001db4:	f040 808f 	bne.w	8001ed6 <??inv_process_compass_only_cal_13>
 8001db8:	4649      	mov	r1, r9
 8001dba:	9805      	ldr	r0, [sp, #20]
 8001dbc:	f7ff f920 	bl	8001000 <inv_center_sum>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	460d      	mov	r5, r1
 8001dc4:	9802      	ldr	r0, [sp, #8]
 8001dc6:	e9c0 4508 	strd	r4, r5, [r0, #32]
 8001dca:	e9d8 67d4 	ldrd	r6, r7, [r8, #848]	@ 0x350
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	462b      	mov	r3, r5
 8001dd8:	f003 ff36 	bl	8005c48 <__aeabi_dmul>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460d      	mov	r5, r1
 8001de0:	2000      	movs	r0, #0
 8001de2:	f8df 143c 	ldr.w	r1, [pc, #1084]	@ 8002220 <??DataTable19_7>
 8001de6:	4632      	mov	r2, r6
 8001de8:	463b      	mov	r3, r7
 8001dea:	f003 fd77 	bl	80058dc <__adddf3>
 8001dee:	4632      	mov	r2, r6
 8001df0:	463b      	mov	r3, r7
 8001df2:	f003 ff29 	bl	8005c48 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f004 f84d 	bl	8005e9c <__aeabi_ddiv>
 8001e02:	f00e fdbb 	bl	801097c <sqrt>
 8001e06:	4606      	mov	r6, r0
 8001e08:	460f      	mov	r7, r1
 8001e0a:	9802      	ldr	r0, [sp, #8]
 8001e0c:	6880      	ldr	r0, [r0, #8]
 8001e0e:	f003 fec3 	bl	8005b98 <__aeabi_f2d>
 8001e12:	e9d8 2338 	ldrd	r2, r3, [r8, #224]	@ 0xe0
 8001e16:	f003 ff17 	bl	8005c48 <__aeabi_dmul>
 8001e1a:	4632      	mov	r2, r6
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	f004 f973 	bl	8006108 <__aeabi_cdcmpeq>
 8001e22:	f0c0 8146 	bcc.w	80020b2 <??inv_process_compass_only_cal_11>
 8001e26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	f108 00bc 	add.w	r0, r8, #188	@ 0xbc
 8001e30:	f7fe f9d3 	bl	80001da <inv_check_peaks>
 8001e34:	2802      	cmp	r0, #2
 8001e36:	f000 813c 	beq.w	80020b2 <??inv_process_compass_only_cal_11>
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	f040 8146 	bne.w	80020cc <??inv_process_compass_only_cal_0>
 8001e40:	9806      	ldr	r0, [sp, #24]
 8001e42:	6840      	ldr	r0, [r0, #4]
 8001e44:	2801      	cmp	r0, #1
 8001e46:	f040 8141 	bne.w	80020cc <??inv_process_compass_only_cal_0>
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f008 fc4e 	bl	800a6ec <inv_set_compass_state>
 8001e50:	f508 7054 	add.w	r0, r8, #848	@ 0x350
 8001e54:	9003      	str	r0, [sp, #12]
 8001e56:	2600      	movs	r6, #0
 8001e58:	f8df 73c8 	ldr.w	r7, [pc, #968]	@ 8002224 <??DataTable19_8>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001e62:	4632      	mov	r2, r6
 8001e64:	463b      	mov	r3, r7
 8001e66:	f003 feef 	bl	8005c48 <__aeabi_dmul>
 8001e6a:	f004 f99d 	bl	80061a8 <__aeabi_d2iz>
 8001e6e:	9007      	str	r0, [sp, #28]
 8001e70:	f10d 091c 	add.w	r9, sp, #28
 8001e74:	9a03      	ldr	r2, [sp, #12]
 8001e76:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8001e7a:	4632      	mov	r2, r6
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	f003 fee3 	bl	8005c48 <__aeabi_dmul>
 8001e82:	f004 f991 	bl	80061a8 <__aeabi_d2iz>
 8001e86:	f8c9 0004 	str.w	r0, [r9, #4]
 8001e8a:	9a03      	ldr	r2, [sp, #12]
 8001e8c:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 8001e90:	4632      	mov	r2, r6
 8001e92:	463b      	mov	r3, r7
 8001e94:	f003 fed8 	bl	8005c48 <__aeabi_dmul>
 8001e98:	f004 f986 	bl	80061a8 <__aeabi_d2iz>
 8001e9c:	f8c9 0008 	str.w	r0, [r9, #8]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	a807      	add	r0, sp, #28
 8001ea4:	f007 fd16 	bl	80098d4 <inv_set_compass_bias>
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fc19 	bl	800a6e0 <inv_set_compass_bias_found>
 8001eae:	2019      	movs	r0, #25
 8001eb0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8001eb2:	a80f      	add	r0, sp, #60	@ 0x3c
 8001eb4:	2119      	movs	r1, #25
 8001eb6:	6041      	str	r1, [r0, #4]
 8001eb8:	6081      	str	r1, [r0, #8]
 8001eba:	f008 fc23 	bl	800a704 <inv_set_compass_bias_error>
 8001ebe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ec2:	4632      	mov	r2, r6
 8001ec4:	9905      	ldr	r1, [sp, #20]
 8001ec6:	f508 70d4 	add.w	r0, r8, #424	@ 0x1a8
 8001eca:	f7fe fb00 	bl	80004ce <inv_combine_compass_data>
 8001ece:	f7ff fdd1 	bl	8001a74 <inv_reset_data_collection>
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	e0fb      	b.n	80020ce <??inv_process_compass_only_cal_14>

08001ed6 <??inv_process_compass_only_cal_13>:
 8001ed6:	f8d8 00b4 	ldr.w	r0, [r8, #180]	@ 0xb4
 8001eda:	f003 fe4b 	bl	8005b74 <__aeabi_i2d>
 8001ede:	4622      	mov	r2, r4
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	f003 ffdb 	bl	8005e9c <__aeabi_ddiv>
 8001ee6:	4ad7      	ldr	r2, [pc, #860]	@ (8002244 <??DataTable19_16>)
 8001ee8:	4bd7      	ldr	r3, [pc, #860]	@ (8002248 <??DataTable19_17>)
 8001eea:	f004 f905 	bl	80060f8 <__aeabi_cdrcmple>
 8001eee:	d802      	bhi.n	8001ef6 <??inv_process_compass_only_cal_15>
 8001ef0:	f7ff fdc0 	bl	8001a74 <inv_reset_data_collection>
 8001ef4:	e0ea      	b.n	80020cc <??inv_process_compass_only_cal_0>

08001ef6 <??inv_process_compass_only_cal_15>:
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	9805      	ldr	r0, [sp, #20]
 8001efa:	f7ff f881 	bl	8001000 <inv_center_sum>
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
 8001f02:	e9d8 67d4 	ldrd	r6, r7, [r8, #848]	@ 0x350
 8001f06:	2000      	movs	r0, #0
 8001f08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	462b      	mov	r3, r5
 8001f10:	f003 fe9a 	bl	8005c48 <__aeabi_dmul>
 8001f14:	4682      	mov	sl, r0
 8001f16:	468b      	mov	fp, r1
 8001f18:	2000      	movs	r0, #0
 8001f1a:	49c1      	ldr	r1, [pc, #772]	@ (8002220 <??DataTable19_7>)
 8001f1c:	4632      	mov	r2, r6
 8001f1e:	463b      	mov	r3, r7
 8001f20:	f003 fcdc 	bl	80058dc <__adddf3>
 8001f24:	4632      	mov	r2, r6
 8001f26:	463b      	mov	r3, r7
 8001f28:	f003 fe8e 	bl	8005c48 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4650      	mov	r0, sl
 8001f32:	4659      	mov	r1, fp
 8001f34:	f003 ffb2 	bl	8005e9c <__aeabi_ddiv>
 8001f38:	f00e fd20 	bl	801097c <sqrt>
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	460f      	mov	r7, r1
 8001f40:	9802      	ldr	r0, [sp, #8]
 8001f42:	6880      	ldr	r0, [r0, #8]
 8001f44:	f003 fe28 	bl	8005b98 <__aeabi_f2d>
 8001f48:	e9d8 2338 	ldrd	r2, r3, [r8, #224]	@ 0xe0
 8001f4c:	f003 fe7c 	bl	8005c48 <__aeabi_dmul>
 8001f50:	4632      	mov	r2, r6
 8001f52:	463b      	mov	r3, r7
 8001f54:	f004 f8d8 	bl	8006108 <__aeabi_cdcmpeq>
 8001f58:	f0c0 80ab 	bcc.w	80020b2 <??inv_process_compass_only_cal_11>
 8001f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001f60:	4649      	mov	r1, r9
 8001f62:	f108 00bc 	add.w	r0, r8, #188	@ 0xbc
 8001f66:	f7fe f938 	bl	80001da <inv_check_peaks>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	f040 80ae 	bne.w	80020cc <??inv_process_compass_only_cal_0>
 8001f70:	f508 7054 	add.w	r0, r8, #848	@ 0x350
 8001f74:	9003      	str	r0, [sp, #12]
 8001f76:	f508 701a 	add.w	r0, r8, #616	@ 0x268
 8001f7a:	9000      	str	r0, [sp, #0]
 8001f7c:	9a03      	ldr	r2, [sp, #12]
 8001f7e:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 8001f82:	9e00      	ldr	r6, [sp, #0]
 8001f84:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8001f88:	f003 fca6 	bl	80058d8 <__aeabi_dsub>
 8001f8c:	4606      	mov	r6, r0
 8001f8e:	460f      	mov	r7, r1
 8001f90:	9a03      	ldr	r2, [sp, #12]
 8001f92:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8001f96:	f8dd c000 	ldr.w	ip, [sp]
 8001f9a:	e9dc 2304 	ldrd	r2, r3, [ip, #16]
 8001f9e:	f003 fc9b 	bl	80058d8 <__aeabi_dsub>
 8001fa2:	4682      	mov	sl, r0
 8001fa4:	468b      	mov	fp, r1
 8001fa6:	9a03      	ldr	r2, [sp, #12]
 8001fa8:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001fac:	f8dd c000 	ldr.w	ip, [sp]
 8001fb0:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
 8001fb4:	f003 fc90 	bl	80058d8 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	f003 fe44 	bl	8005c48 <__aeabi_dmul>
 8001fc0:	e9cd 0100 	strd	r0, r1, [sp]
 8001fc4:	4650      	mov	r0, sl
 8001fc6:	4659      	mov	r1, fp
 8001fc8:	4652      	mov	r2, sl
 8001fca:	465b      	mov	r3, fp
 8001fcc:	f003 fe3c 	bl	8005c48 <__aeabi_dmul>
 8001fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001fd4:	f003 fc82 	bl	80058dc <__adddf3>
 8001fd8:	4682      	mov	sl, r0
 8001fda:	468b      	mov	fp, r1
 8001fdc:	4630      	mov	r0, r6
 8001fde:	4639      	mov	r1, r7
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	f003 fe30 	bl	8005c48 <__aeabi_dmul>
 8001fe8:	4652      	mov	r2, sl
 8001fea:	465b      	mov	r3, fp
 8001fec:	f003 fc76 	bl	80058dc <__adddf3>
 8001ff0:	f00e fcc4 	bl	801097c <sqrt>
 8001ff4:	4606      	mov	r6, r0
 8001ff6:	460f      	mov	r7, r1
 8001ff8:	9804      	ldr	r0, [sp, #16]
 8001ffa:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8001ffc:	f003 fdba 	bl	8005b74 <__aeabi_i2d>
 8002000:	4632      	mov	r2, r6
 8002002:	463b      	mov	r3, r7
 8002004:	f003 fe20 	bl	8005c48 <__aeabi_dmul>
 8002008:	2200      	movs	r2, #0
 800200a:	4b90      	ldr	r3, [pc, #576]	@ (800224c <??DataTable19_18>)
 800200c:	f003 fe1c 	bl	8005c48 <__aeabi_dmul>
 8002010:	2201      	movs	r2, #1
 8002012:	4b8a      	ldr	r3, [pc, #552]	@ (800223c <??DataTable19_14>)
 8002014:	f004 f870 	bl	80060f8 <__aeabi_cdrcmple>
 8002018:	d911      	bls.n	800203e <??inv_process_compass_only_cal_16>
 800201a:	4b8d      	ldr	r3, [pc, #564]	@ (8002250 <??DataTable19_19>)
 800201c:	f004 f86c 	bl	80060f8 <__aeabi_cdrcmple>
 8002020:	d847      	bhi.n	80020b2 <??inv_process_compass_only_cal_11>
 8002022:	f8d8 00b4 	ldr.w	r0, [r8, #180]	@ 0xb4
 8002026:	f003 fda5 	bl	8005b74 <__aeabi_i2d>
 800202a:	e9d8 23d4 	ldrd	r2, r3, [r8, #848]	@ 0x350
 800202e:	f003 ff35 	bl	8005e9c <__aeabi_ddiv>
 8002032:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002036:	4b87      	ldr	r3, [pc, #540]	@ (8002254 <??DataTable19_20>)
 8002038:	f004 f866 	bl	8006108 <__aeabi_cdcmpeq>
 800203c:	d239      	bcs.n	80020b2 <??inv_process_compass_only_cal_11>

0800203e <??inv_process_compass_only_cal_16>:
 800203e:	9806      	ldr	r0, [sp, #24]
 8002040:	6840      	ldr	r0, [r0, #4]
 8002042:	2801      	cmp	r0, #1
 8002044:	d135      	bne.n	80020b2 <??inv_process_compass_only_cal_11>
 8002046:	2000      	movs	r0, #0
 8002048:	f008 fb50 	bl	800a6ec <inv_set_compass_state>
 800204c:	9802      	ldr	r0, [sp, #8]
 800204e:	e9c0 4508 	strd	r4, r5, [r0, #32]
 8002052:	2600      	movs	r6, #0
 8002054:	4f73      	ldr	r7, [pc, #460]	@ (8002224 <??DataTable19_8>)
 8002056:	9a03      	ldr	r2, [sp, #12]
 8002058:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 800205c:	4632      	mov	r2, r6
 800205e:	463b      	mov	r3, r7
 8002060:	f003 fdf2 	bl	8005c48 <__aeabi_dmul>
 8002064:	f004 f8a0 	bl	80061a8 <__aeabi_d2iz>
 8002068:	9007      	str	r0, [sp, #28]
 800206a:	f10d 091c 	add.w	r9, sp, #28
 800206e:	9a03      	ldr	r2, [sp, #12]
 8002070:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8002074:	4632      	mov	r2, r6
 8002076:	463b      	mov	r3, r7
 8002078:	f003 fde6 	bl	8005c48 <__aeabi_dmul>
 800207c:	f004 f894 	bl	80061a8 <__aeabi_d2iz>
 8002080:	f8c9 0004 	str.w	r0, [r9, #4]
 8002084:	9a03      	ldr	r2, [sp, #12]
 8002086:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 800208a:	4632      	mov	r2, r6
 800208c:	463b      	mov	r3, r7
 800208e:	f003 fddb 	bl	8005c48 <__aeabi_dmul>
 8002092:	f004 f889 	bl	80061a8 <__aeabi_d2iz>
 8002096:	f8c9 0008 	str.w	r0, [r9, #8]
 800209a:	2103      	movs	r1, #3
 800209c:	a807      	add	r0, sp, #28
 800209e:	f007 fc19 	bl	80098d4 <inv_set_compass_bias>
 80020a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020a6:	4632      	mov	r2, r6
 80020a8:	9905      	ldr	r1, [sp, #20]
 80020aa:	f508 70d4 	add.w	r0, r8, #424	@ 0x1a8
 80020ae:	f7fe fa0e 	bl	80004ce <inv_combine_compass_data>

080020b2 <??inv_process_compass_only_cal_11>:
 80020b2:	f7ff fcdf 	bl	8001a74 <inv_reset_data_collection>
 80020b6:	2000      	movs	r0, #0
 80020b8:	e009      	b.n	80020ce <??inv_process_compass_only_cal_14>

080020ba <??inv_process_compass_only_cal_12>:
 80020ba:	e9d8 01d4 	ldrd	r0, r1, [r8, #848]	@ 0x350
 80020be:	2201      	movs	r2, #1
 80020c0:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <??DataTable19_9>)
 80020c2:	f004 f819 	bl	80060f8 <__aeabi_cdrcmple>
 80020c6:	d801      	bhi.n	80020cc <??inv_process_compass_only_cal_0>
 80020c8:	f7ff fcd4 	bl	8001a74 <inv_reset_data_collection>

080020cc <??inv_process_compass_only_cal_0>:
 80020cc:	2000      	movs	r0, #0

080020ce <??inv_process_compass_only_cal_14>:
 80020ce:	b04b      	add	sp, #300	@ 0x12c
 80020d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020d4 <inv_init_sensitivity_const>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4604      	mov	r4, r0
 80020d8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 80020dc:	4d49      	ldr	r5, [pc, #292]	@ (8002204 <??DataTable19>)
 80020de:	f105 06ac 	add.w	r6, r5, #172	@ 0xac
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d109      	bne.n	80020fa <??inv_init_sensitivity_const_0>
 80020e6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80020ea:	f8c5 00ac 	str.w	r0, [r5, #172]	@ 0xac
 80020ee:	6070      	str	r0, [r6, #4]
 80020f0:	4859      	ldr	r0, [pc, #356]	@ (8002258 <??DataTable19_21>)
 80020f2:	495a      	ldr	r1, [pc, #360]	@ (800225c <??DataTable19_22>)
 80020f4:	e9c5 0138 	strd	r0, r1, [r5, #224]	@ 0xe0
 80020f8:	e019      	b.n	800212e <??inv_init_sensitivity_const_1>

080020fa <??inv_init_sensitivity_const_0>:
 80020fa:	2000      	movs	r0, #0
 80020fc:	2119      	movs	r1, #25
 80020fe:	17d3      	asrs	r3, r2, #31
 8002100:	f004 fbe4 	bl	80068cc <__aeabi_ldivmod>
 8002104:	f8c5 00ac 	str.w	r0, [r5, #172]	@ 0xac
 8002108:	2000      	movs	r0, #0
 800210a:	2105      	movs	r1, #5
 800210c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8002110:	17d3      	asrs	r3, r2, #31
 8002112:	f004 fbdb 	bl	80068cc <__aeabi_ldivmod>
 8002116:	6070      	str	r0, [r6, #4]
 8002118:	2000      	movs	r0, #0
 800211a:	2196      	movs	r1, #150	@ 0x96
 800211c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8002120:	17d3      	asrs	r3, r2, #31
 8002122:	f004 fbd3 	bl	80068cc <__aeabi_ldivmod>
 8002126:	f003 fd25 	bl	8005b74 <__aeabi_i2d>
 800212a:	e9c5 0138 	strd	r0, r1, [r5, #224]	@ 0xe0

0800212e <??inv_init_sensitivity_const_1>:
 800212e:	2001      	movs	r0, #1
 8002130:	f8c5 010c 	str.w	r0, [r5, #268]	@ 0x10c
 8002134:	bd70      	pop	{r4, r5, r6, pc}

08002136 <inv_generate_vector_compass_cal>:
 8002136:	b538      	push	{r3, r4, r5, lr}
 8002138:	4604      	mov	r4, r0
 800213a:	4d32      	ldr	r5, [pc, #200]	@ (8002204 <??DataTable19>)
 800213c:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
 8002140:	2800      	cmp	r0, #0
 8002142:	d102      	bne.n	800214a <??inv_generate_vector_compass_cal_0>
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ffc5 	bl	80020d4 <inv_init_sensitivity_const>

0800214a <??inv_generate_vector_compass_cal_0>:
 800214a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800214e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8002152:	4288      	cmp	r0, r1
 8002154:	da0a      	bge.n	800216c <??inv_generate_vector_compass_cal_1>
 8002156:	f505 7286 	add.w	r2, r5, #268	@ 0x10c
 800215a:	6853      	ldr	r3, [r2, #4]
 800215c:	18c0      	adds	r0, r0, r3
 800215e:	6050      	str	r0, [r2, #4]
 8002160:	4288      	cmp	r0, r1
 8002162:	da01      	bge.n	8002168 <??inv_generate_vector_compass_cal_2>
 8002164:	2000      	movs	r0, #0
 8002166:	bd32      	pop	{r1, r4, r5, pc}

08002168 <??inv_generate_vector_compass_cal_2>:
 8002168:	2000      	movs	r0, #0
 800216a:	6050      	str	r0, [r2, #4]

0800216c <??inv_generate_vector_compass_cal_1>:
 800216c:	4620      	mov	r0, r4
 800216e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8002172:	e499      	b.n	8001aa8 <inv_process_compass_only_cal>

08002174 <inv_start_vector_compass_cal>:
 8002174:	2204      	movs	r2, #4
 8002176:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800217a:	4839      	ldr	r0, [pc, #228]	@ (8002260 <??DataTable19_23>)
 800217c:	f007 bc66 	b.w	8009a4c <inv_register_data_cb>

08002180 <inv_stop_vector_compass_cal>:
 8002180:	4837      	ldr	r0, [pc, #220]	@ (8002260 <??DataTable19_23>)
 8002182:	f007 bcbf 	b.w	8009b04 <inv_unregister_data_cb>

08002186 <inv_init_vector_compass_cal>:
 8002186:	b510      	push	{r4, lr}
 8002188:	4c1e      	ldr	r4, [pc, #120]	@ (8002204 <??DataTable19>)
 800218a:	22e8      	movs	r2, #232	@ 0xe8
 800218c:	2100      	movs	r1, #0
 800218e:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 8002192:	f00b f84f 	bl	800d234 <memset>
 8002196:	f7ff fc6d 	bl	8001a74 <inv_reset_data_collection>
 800219a:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 800219e:	2100      	movs	r1, #0
 80021a0:	4620      	mov	r0, r4
 80021a2:	f00b f847 	bl	800d234 <memset>
 80021a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80021aa:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
 80021ae:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80021b2:	f002 feec 	bl	8004f8e <inv_init_check_sample_balance_parameter>
 80021b6:	200a      	movs	r0, #10
 80021b8:	f8c4 0170 	str.w	r0, [r4, #368]	@ 0x170
 80021bc:	f04f 4082 	mov.w	r0, #1090519040	@ 0x41000000
 80021c0:	f8c4 015c 	str.w	r0, [r4, #348]	@ 0x15c
 80021c4:	f504 70b8 	add.w	r0, r4, #368	@ 0x170
 80021c8:	211e      	movs	r1, #30
 80021ca:	60c1      	str	r1, [r0, #12]
 80021cc:	4925      	ldr	r1, [pc, #148]	@ (8002264 <??DataTable19_24>)
 80021ce:	6181      	str	r1, [r0, #24]
 80021d0:	4925      	ldr	r1, [pc, #148]	@ (8002268 <??DataTable19_25>)
 80021d2:	6141      	str	r1, [r0, #20]
 80021d4:	4925      	ldr	r1, [pc, #148]	@ (800226c <??DataTable19_26>)
 80021d6:	61c1      	str	r1, [r0, #28]
 80021d8:	2000      	movs	r0, #0
 80021da:	bd10      	pop	{r4, pc}

080021dc <inv_enable_vector_compass_cal>:
 80021dc:	b580      	push	{r7, lr}
 80021de:	f7ff ffd2 	bl	8002186 <inv_init_vector_compass_cal>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d104      	bne.n	80021f0 <??inv_enable_vector_compass_cal_0>
 80021e6:	4822      	ldr	r0, [pc, #136]	@ (8002270 <??DataTable19_27>)
 80021e8:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 80021ec:	f008 baf0 	b.w	800a7d0 <inv_register_mpl_start_notification>

080021f0 <??inv_enable_vector_compass_cal_0>:
 80021f0:	bd02      	pop	{r1, pc}

080021f2 <inv_disable_vector_compass_cal>:
 80021f2:	b580      	push	{r7, lr}
 80021f4:	f7ff ffc4 	bl	8002180 <inv_stop_vector_compass_cal>
 80021f8:	481d      	ldr	r0, [pc, #116]	@ (8002270 <??DataTable19_27>)
 80021fa:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 80021fe:	f008 bac3 	b.w	800a788 <inv_unregister_mpl_start_notification>
	...

08002204 <??DataTable19>:
 8002204:	0268 2000                                   h.. 

08002208 <??DataTable19_1>:
 8002208:	0001 0005                                   ....

0800220c <??DataTable19_2>:
 800220c:	4000 408f                                   .@.@

08002210 <??DataTable19_3>:
 8002210:	0000 4128                                   ..(A

08002214 <??DataTable19_4>:
 8002214:	0000 4034                                   ..4@

08002218 <??DataTable19_5>:
 8002218:	c000 c072                                   ..r.

0800221c <??DataTable19_6>:
 800221c:	0000 4008                                   ...@

08002220 <??DataTable19_7>:
 8002220:	0000 bff0                                   ....

08002224 <??DataTable19_8>:
 8002224:	0000 40f0                                   ...@

08002228 <??DataTable19_9>:
 8002228:	4000 409f                                   .@.@

0800222c <??DataTable19_10>:
 800222c:	6666 3ee6                                   ff.>

08002230 <??DataTable19_11>:
 8002230:	999a 9999                                   ....

08002234 <??DataTable19_12>:
 8002234:	9999 41a9                                   ...A

08002238 <??DataTable19_13>:
 8002238:	0000 3ff8                                   ...?

0800223c <??DataTable19_14>:
 800223c:	0000 4010                                   ...@

08002240 <??DataTable19_15>:
 8002240:	0000 403e                                   ..>@

08002244 <??DataTable19_16>:
 8002244:	d70b 70a3                                   ...p

08002248 <??DataTable19_17>:
 8002248:	0a3d 3fe7                                   =..?

0800224c <??DataTable19_18>:
 800224c:	0000 3e10                                   ...>

08002250 <??DataTable19_19>:
 8002250:	0000 4004                                   ...@

08002254 <??DataTable19_20>:
 8002254:	3333 3fc3                                   33.?

08002258 <??DataTable19_21>:
 8002258:	0000 ffc0                                   ....

0800225c <??DataTable19_22>:
 800225c:	ffff 41df                                   ...A

08002260 <??DataTable19_23>:
 8002260:	2137 0800                                   7!..

08002264 <??DataTable19_24>:
 8002264:	cccd 3ecc                                   ...>

08002268 <??DataTable19_25>:
 8002268:	3333 3f33                                   333?

0800226c <??DataTable19_26>:
 800226c:	999a 3f19                                   ...?

08002270 <??DataTable19_27>:
 8002270:	2175 0800                                   u!..

08002274 <__print_result_location>:
 8002274:	4770      	bx	lr

08002276 <inv_init_maxmin>:
 8002276:	07c1      	lsls	r1, r0, #31
 8002278:	d50c      	bpl.n	8002294 <??inv_init_maxmin_0>
 800227a:	f8df 1b8c 	ldr.w	r1, [pc, #2956]	@ 8002e08 <??DataTable27>
 800227e:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8002282:	668a      	str	r2, [r1, #104]	@ 0x68
 8002284:	3168      	adds	r1, #104	@ 0x68
 8002286:	604a      	str	r2, [r1, #4]
 8002288:	608a      	str	r2, [r1, #8]
 800228a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800228e:	60ca      	str	r2, [r1, #12]
 8002290:	610a      	str	r2, [r1, #16]
 8002292:	614a      	str	r2, [r1, #20]

08002294 <??inv_init_maxmin_0>:
 8002294:	0781      	lsls	r1, r0, #30
 8002296:	d50e      	bpl.n	80022b6 <??inv_init_maxmin_1>
 8002298:	f8df 1b6c 	ldr.w	r1, [pc, #2924]	@ 8002e08 <??DataTable27>
 800229c:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80022a0:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 80022a4:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80022a8:	604a      	str	r2, [r1, #4]
 80022aa:	608a      	str	r2, [r1, #8]
 80022ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022b0:	60ca      	str	r2, [r1, #12]
 80022b2:	610a      	str	r2, [r1, #16]
 80022b4:	614a      	str	r2, [r1, #20]

080022b6 <??inv_init_maxmin_1>:
 80022b6:	0740      	lsls	r0, r0, #29
 80022b8:	d50e      	bpl.n	80022d8 <??inv_init_maxmin_2>
 80022ba:	f8df 1b4c 	ldr.w	r1, [pc, #2892]	@ 8002e08 <??DataTable27>
 80022be:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80022c2:	f8c1 2198 	str.w	r2, [r1, #408]	@ 0x198
 80022c6:	f501 70cc 	add.w	r0, r1, #408	@ 0x198
 80022ca:	6042      	str	r2, [r0, #4]
 80022cc:	6082      	str	r2, [r0, #8]
 80022ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022d2:	60c2      	str	r2, [r0, #12]
 80022d4:	6102      	str	r2, [r0, #16]
 80022d6:	6142      	str	r2, [r0, #20]

080022d8 <??inv_init_maxmin_2>:
 80022d8:	4770      	bx	lr

080022da <inv_fast_nomot_parameter>:
 80022da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022de:	b087      	sub	sp, #28
 80022e0:	4686      	mov	lr, r0
 80022e2:	2200      	movs	r2, #0
 80022e4:	4613      	mov	r3, r2
 80022e6:	f8de 0078 	ldr.w	r0, [lr, #120]	@ 0x78
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d102      	bne.n	80022f4 <??inv_fast_nomot_parameter_0>
 80022ee:	4610      	mov	r0, r2
 80022f0:	4601      	mov	r1, r0
 80022f2:	e0ac      	b.n	800244e <??inv_fast_nomot_parameter_1>

080022f4 <??inv_fast_nomot_parameter_0>:
 80022f4:	4694      	mov	ip, r2
 80022f6:	e090      	b.n	800241a <??inv_fast_nomot_parameter_2>

080022f8 <??inv_fast_nomot_parameter_3>:
 80022f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80022fc:	eb0e 04c0 	add.w	r4, lr, r0, lsl #3
 8002300:	eb04 06cc 	add.w	r6, r4, ip, lsl #3
 8002304:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002308:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800230c:	e9c4 0100 	strd	r0, r1, [r4]
 8002310:	1c6d      	adds	r5, r5, #1

08002312 <??inv_fast_nomot_parameter_4>:
 8002312:	2d04      	cmp	r5, #4
 8002314:	dbf0      	blt.n	80022f8 <??inv_fast_nomot_parameter_3>
 8002316:	eb0e 00cc 	add.w	r0, lr, ip, lsl #3
 800231a:	e9d0 4500 	ldrd	r4, r5, [r0]
 800231e:	eb0e 01cc 	add.w	r1, lr, ip, lsl #3
 8002322:	9102      	str	r1, [sp, #8]
 8002324:	e9d0 ab06 	ldrd	sl, fp, [r0, #24]
 8002328:	fba4 0104 	umull	r0, r1, r4, r4
 800232c:	fb04 1105 	mla	r1, r4, r5, r1
 8002330:	fb05 1104 	mla	r1, r5, r4, r1
 8002334:	fba4 6700 	umull	r6, r7, r4, r0
 8002338:	fb04 7701 	mla	r7, r4, r1, r7
 800233c:	fb05 7700 	mla	r7, r5, r0, r7
 8002340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002344:	2603      	movs	r6, #3
 8002346:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800234a:	e9d8 0112 	ldrd	r0, r1, [r8, #72]	@ 0x48
 800234e:	e9cd 0100 	strd	r0, r1, [sp]
 8002352:	fbaa 890a 	umull	r8, r9, sl, sl
 8002356:	fb0a 990b 	mla	r9, sl, fp, r9
 800235a:	fb0b 990a 	mla	r9, fp, sl, r9
 800235e:	fba6 0108 	umull	r0, r1, r6, r8
 8002362:	fb06 1109 	mla	r1, r6, r9, r1
 8002366:	e9dd 8900 	ldrd	r8, r9, [sp]
 800236a:	ebb8 0000 	subs.w	r0, r8, r0
 800236e:	eb69 0101 	sbc.w	r1, r9, r1
 8002372:	e9cd 0100 	strd	r0, r1, [sp]
 8002376:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800237a:	fba4 0108 	umull	r0, r1, r4, r8
 800237e:	fb04 1109 	mla	r1, r4, r9, r1
 8002382:	fb05 1108 	mla	r1, r5, r8, r1
 8002386:	0049      	lsls	r1, r1, #1
 8002388:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800238c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002390:	eb18 0040 	adds.w	r0, r8, r0, lsl #1
 8002394:	eb49 0101 	adc.w	r1, r9, r1
 8002398:	e9cd 0100 	strd	r0, r1, [sp]
 800239c:	fba4 0104 	umull	r0, r1, r4, r4
 80023a0:	fb04 1105 	mla	r1, r4, r5, r1
 80023a4:	fb05 1104 	mla	r1, r5, r4, r1
 80023a8:	ebba 0800 	subs.w	r8, sl, r0
 80023ac:	eb6b 0901 	sbc.w	r9, fp, r1
 80023b0:	fba4 0108 	umull	r0, r1, r4, r8
 80023b4:	fb04 1109 	mla	r1, r4, r9, r1
 80023b8:	fb05 1108 	mla	r1, r5, r8, r1
 80023bc:	fba6 8900 	umull	r8, r9, r6, r0
 80023c0:	fb06 9901 	mla	r9, r6, r1, r9
 80023c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80023c8:	eb18 0600 	adds.w	r6, r8, r0
 80023cc:	eb49 0701 	adc.w	r7, r9, r1
 80023d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80023d4:	e9d8 010c 	ldrd	r0, r1, [r8, #48]	@ 0x30
 80023d8:	1a30      	subs	r0, r6, r0
 80023da:	eb67 0101 	sbc.w	r1, r7, r1
 80023de:	fba4 6700 	umull	r6, r7, r4, r0
 80023e2:	fb04 7701 	mla	r7, r4, r1, r7
 80023e6:	fb05 7700 	mla	r7, r5, r0, r7
 80023ea:	00bf      	lsls	r7, r7, #2
 80023ec:	ea47 7796 	orr.w	r7, r7, r6, lsr #30
 80023f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80023f4:	ebb0 0086 	subs.w	r0, r0, r6, lsl #2
 80023f8:	41b9      	sbcs	r1, r7
 80023fa:	2900      	cmp	r1, #0
 80023fc:	dc04      	bgt.n	8002408 <??inv_fast_nomot_parameter_5>
 80023fe:	db00      	blt.n	8002402 <??inv_fast_nomot_parameter_6>
 8002400:	d202      	bcs.n	8002408 <??inv_fast_nomot_parameter_5>

08002402 <??inv_fast_nomot_parameter_6>:
 8002402:	4240      	negs	r0, r0
 8002404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1

08002408 <??inv_fast_nomot_parameter_5>:
 8002408:	428b      	cmp	r3, r1
 800240a:	dc04      	bgt.n	8002416 <??inv_fast_nomot_parameter_7>
 800240c:	db01      	blt.n	8002412 <??inv_fast_nomot_parameter_8>
 800240e:	4282      	cmp	r2, r0
 8002410:	d201      	bcs.n	8002416 <??inv_fast_nomot_parameter_7>

08002412 <??inv_fast_nomot_parameter_8>:
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1

08002416 <??inv_fast_nomot_parameter_7>:
 8002416:	f10c 0c01 	add.w	ip, ip, #1

0800241a <??inv_fast_nomot_parameter_2>:
 800241a:	f1bc 0f03 	cmp.w	ip, #3
 800241e:	da01      	bge.n	8002424 <??inv_fast_nomot_parameter_9>
 8002420:	2500      	movs	r5, #0
 8002422:	e776      	b.n	8002312 <??inv_fast_nomot_parameter_4>

08002424 <??inv_fast_nomot_parameter_9>:
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f004 f826 	bl	8006478 <__aeabi_l2f>
 800242c:	f8df 19dc 	ldr.w	r1, [pc, #2524]	@ 8002e0c <??DataTable27_1>
 8002430:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8002432:	f004 f913 	bl	800665c <__aeabi_fdiv>
 8002436:	f004 fab1 	bl	800699c <__aeabi_f2lz>
 800243a:	f8df 29cc 	ldr.w	r2, [pc, #2508]	@ 8002e08 <??DataTable27>
 800243e:	f8d2 220c 	ldr.w	r2, [r2, #524]	@ 0x20c
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	b007      	add	sp, #28
 8002446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244a:	f003 ba27 	b.w	800589c <__aeabi_lasr>

0800244e <??inv_fast_nomot_parameter_1>:
 800244e:	b007      	add	sp, #28
 8002450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002454 <inv_fast_nomot_parameter_3rd>:
 8002454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002458:	4684      	mov	ip, r0
 800245a:	2200      	movs	r2, #0
 800245c:	4613      	mov	r3, r2
 800245e:	f8dc 0078 	ldr.w	r0, [ip, #120]	@ 0x78
 8002462:	2800      	cmp	r0, #0
 8002464:	d102      	bne.n	800246c <??inv_fast_nomot_parameter_3rd_0>
 8002466:	4610      	mov	r0, r2
 8002468:	4601      	mov	r1, r0
 800246a:	e069      	b.n	8002540 <??inv_fast_nomot_parameter_3rd_1>

0800246c <??inv_fast_nomot_parameter_3rd_0>:
 800246c:	4696      	mov	lr, r2
 800246e:	e04c      	b.n	800250a <??inv_fast_nomot_parameter_3rd_2>

08002470 <??inv_fast_nomot_parameter_3rd_3>:
 8002470:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002474:	eb0c 04c0 	add.w	r4, ip, r0, lsl #3
 8002478:	eb04 06ce 	add.w	r6, r4, lr, lsl #3
 800247c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002480:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 8002484:	e9c4 0100 	strd	r0, r1, [r4]
 8002488:	1c6d      	adds	r5, r5, #1

0800248a <??inv_fast_nomot_parameter_3rd_4>:
 800248a:	2d04      	cmp	r5, #4
 800248c:	dbf0      	blt.n	8002470 <??inv_fast_nomot_parameter_3rd_3>
 800248e:	eb0c 00ce 	add.w	r0, ip, lr, lsl #3
 8002492:	e9d0 4500 	ldrd	r4, r5, [r0]
 8002496:	eb0c 01ce 	add.w	r1, ip, lr, lsl #3
 800249a:	9100      	str	r1, [sp, #0]
 800249c:	fba4 ab04 	umull	sl, fp, r4, r4
 80024a0:	fb04 bb05 	mla	fp, r4, r5, fp
 80024a4:	fb05 bb04 	mla	fp, r5, r4, fp
 80024a8:	4606      	mov	r6, r0
 80024aa:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 80024ae:	ebb0 060a 	subs.w	r6, r0, sl
 80024b2:	eb61 070b 	sbc.w	r7, r1, fp
 80024b6:	fba4 0106 	umull	r0, r1, r4, r6
 80024ba:	fb04 1107 	mla	r1, r4, r7, r1
 80024be:	fb05 1106 	mla	r1, r5, r6, r1
 80024c2:	2603      	movs	r6, #3
 80024c4:	fba6 8900 	umull	r8, r9, r6, r0
 80024c8:	fb06 9901 	mla	r9, r6, r1, r9
 80024cc:	fba4 010a 	umull	r0, r1, r4, sl
 80024d0:	fb04 110b 	mla	r1, r4, fp, r1
 80024d4:	fb05 110a 	mla	r1, r5, sl, r1
 80024d8:	eb18 0000 	adds.w	r0, r8, r0
 80024dc:	eb49 0101 	adc.w	r1, r9, r1
 80024e0:	9c00      	ldr	r4, [sp, #0]
 80024e2:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	@ 0x30
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	41b9      	sbcs	r1, r7
 80024ea:	2900      	cmp	r1, #0
 80024ec:	dc04      	bgt.n	80024f8 <??inv_fast_nomot_parameter_3rd_5>
 80024ee:	db00      	blt.n	80024f2 <??inv_fast_nomot_parameter_3rd_6>
 80024f0:	d202      	bcs.n	80024f8 <??inv_fast_nomot_parameter_3rd_5>

080024f2 <??inv_fast_nomot_parameter_3rd_6>:
 80024f2:	4240      	negs	r0, r0
 80024f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1

080024f8 <??inv_fast_nomot_parameter_3rd_5>:
 80024f8:	428b      	cmp	r3, r1
 80024fa:	dc04      	bgt.n	8002506 <??inv_fast_nomot_parameter_3rd_7>
 80024fc:	db01      	blt.n	8002502 <??inv_fast_nomot_parameter_3rd_8>
 80024fe:	4282      	cmp	r2, r0
 8002500:	d201      	bcs.n	8002506 <??inv_fast_nomot_parameter_3rd_7>

08002502 <??inv_fast_nomot_parameter_3rd_8>:
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1

08002506 <??inv_fast_nomot_parameter_3rd_7>:
 8002506:	f10e 0e01 	add.w	lr, lr, #1

0800250a <??inv_fast_nomot_parameter_3rd_2>:
 800250a:	f1be 0f03 	cmp.w	lr, #3
 800250e:	da01      	bge.n	8002514 <??inv_fast_nomot_parameter_3rd_9>
 8002510:	2500      	movs	r5, #0
 8002512:	e7ba      	b.n	800248a <??inv_fast_nomot_parameter_3rd_4>

08002514 <??inv_fast_nomot_parameter_3rd_9>:
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f003 ffae 	bl	8006478 <__aeabi_l2f>
 800251c:	f8df 18ec 	ldr.w	r1, [pc, #2284]	@ 8002e0c <??DataTable27_1>
 8002520:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8002522:	f004 f89b 	bl	800665c <__aeabi_fdiv>
 8002526:	f004 fa39 	bl	800699c <__aeabi_f2lz>
 800252a:	f8df 28dc 	ldr.w	r2, [pc, #2268]	@ 8002e08 <??DataTable27>
 800252e:	f8d2 220c 	ldr.w	r2, [r2, #524]	@ 0x20c
 8002532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002536:	b001      	add	sp, #4
 8002538:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	f003 b9ae 	b.w	800589c <__aeabi_lasr>

08002540 <??inv_fast_nomot_parameter_3rd_1>:
 8002540:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002544 <inv_if_enough_data>:
 8002544:	b410      	push	{r4}
 8002546:	2101      	movs	r1, #1
 8002548:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800254a:	05d2      	lsls	r2, r2, #23
 800254c:	d511      	bpl.n	8002572 <??inv_if_enough_data_0>
 800254e:	f8df 28b8 	ldr.w	r2, [pc, #2232]	@ 8002e08 <??DataTable27>
 8002552:	6813      	ldr	r3, [r2, #0]
 8002554:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
 8002558:	429c      	cmp	r4, r3
 800255a:	db0a      	blt.n	8002572 <??inv_if_enough_data_0>
 800255c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800255e:	05c0      	lsls	r0, r0, #23
 8002560:	d504      	bpl.n	800256c <??inv_if_enough_data_1>
 8002562:	f8d2 01b0 	ldr.w	r0, [r2, #432]	@ 0x1b0
 8002566:	4298      	cmp	r0, r3
 8002568:	db03      	blt.n	8002572 <??inv_if_enough_data_0>
 800256a:	2105      	movs	r1, #5

0800256c <??inv_if_enough_data_1>:
 800256c:	4608      	mov	r0, r1

0800256e <??inv_if_enough_data_2>:
 800256e:	bc10      	pop	{r4}
 8002570:	4770      	bx	lr

08002572 <??inv_if_enough_data_0>:
 8002572:	2000      	movs	r0, #0
 8002574:	e7fb      	b.n	800256e <??inv_if_enough_data_2>

08002576 <inv_fast_nomot_set_gyro_bias>:
 8002576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	4604      	mov	r4, r0
 800257e:	2600      	movs	r6, #0
 8002580:	ad00      	add	r5, sp, #0
 8002582:	f8df 7884 	ldr.w	r7, [pc, #2180]	@ 8002e08 <??DataTable27>
 8002586:	e012      	b.n	80025ae <??inv_fast_nomot_set_gyro_bias_0>

08002588 <??inv_fast_nomot_set_gyro_bias_1>:
 8002588:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
 800258c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8002590:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8002594:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002596:	f003 f98f 	bl	80058b8 <__aeabi_llsl>
 800259a:	eb07 0286 	add.w	r2, r7, r6, lsl #2
 800259e:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80025a2:	0412      	lsls	r2, r2, #16
 80025a4:	17d3      	asrs	r3, r2, #31
 80025a6:	1880      	adds	r0, r0, r2
 80025a8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 80025ac:	1c76      	adds	r6, r6, #1

080025ae <??inv_fast_nomot_set_gyro_bias_0>:
 80025ae:	2e03      	cmp	r6, #3
 80025b0:	dbea      	blt.n	8002588 <??inv_fast_nomot_set_gyro_bias_1>
 80025b2:	2298      	movs	r2, #152	@ 0x98
 80025b4:	2100      	movs	r1, #0
 80025b6:	f107 0008 	add.w	r0, r7, #8
 80025ba:	f00a fe3b 	bl	800d234 <memset>
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff fe59 	bl	8002276 <inv_init_maxmin>
 80025c4:	f897 01e8 	ldrb.w	r0, [r7, #488]	@ 0x1e8
 80025c8:	2804      	cmp	r0, #4
 80025ca:	d108      	bne.n	80025de <??inv_fast_nomot_set_gyro_bias_2>
 80025cc:	f507 70f4 	add.w	r0, r7, #488	@ 0x1e8
 80025d0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80025d2:	f5b0 1f20 	cmp.w	r0, #2621440	@ 0x280000
 80025d6:	dd02      	ble.n	80025de <??inv_fast_nomot_set_gyro_bias_2>
 80025d8:	2005      	movs	r0, #5
 80025da:	f887 01e8 	strb.w	r0, [r7, #488]	@ 0x1e8

080025de <??inv_fast_nomot_set_gyro_bias_2>:
 80025de:	f8df 682c 	ldr.w	r6, [pc, #2092]	@ 8002e0c <??DataTable27_1>
 80025e2:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80025e4:	686a      	ldr	r2, [r5, #4]
 80025e6:	1a50      	subs	r0, r2, r1
 80025e8:	d401      	bmi.n	80025ee <??inv_fast_nomot_set_gyro_bias_3>
 80025ea:	4603      	mov	r3, r0
 80025ec:	e000      	b.n	80025f0 <??inv_fast_nomot_set_gyro_bias_4>

080025ee <??inv_fast_nomot_set_gyro_bias_3>:
 80025ee:	1a8b      	subs	r3, r1, r2

080025f0 <??inv_fast_nomot_set_gyro_bias_4>:
 80025f0:	f8d6 c024 	ldr.w	ip, [r6, #36]	@ 0x24
 80025f4:	f8dd e000 	ldr.w	lr, [sp]
 80025f8:	ebbe 0e0c 	subs.w	lr, lr, ip
 80025fc:	d401      	bmi.n	8002602 <??inv_fast_nomot_set_gyro_bias_5>
 80025fe:	46f0      	mov	r8, lr
 8002600:	e003      	b.n	800260a <??inv_fast_nomot_set_gyro_bias_6>

08002602 <??inv_fast_nomot_set_gyro_bias_5>:
 8002602:	f8dd 8000 	ldr.w	r8, [sp]
 8002606:	ebac 0808 	sub.w	r8, ip, r8

0800260a <??inv_fast_nomot_set_gyro_bias_6>:
 800260a:	4543      	cmp	r3, r8
 800260c:	da08      	bge.n	8002620 <??inv_fast_nomot_set_gyro_bias_7>
 800260e:	f1be 0f00 	cmp.w	lr, #0
 8002612:	d401      	bmi.n	8002618 <??inv_fast_nomot_set_gyro_bias_8>
 8002614:	4670      	mov	r0, lr
 8002616:	e006      	b.n	8002626 <??inv_fast_nomot_set_gyro_bias_9>

08002618 <??inv_fast_nomot_set_gyro_bias_8>:
 8002618:	9800      	ldr	r0, [sp, #0]
 800261a:	ebac 0000 	sub.w	r0, ip, r0
 800261e:	e002      	b.n	8002626 <??inv_fast_nomot_set_gyro_bias_9>

08002620 <??inv_fast_nomot_set_gyro_bias_7>:
 8002620:	2800      	cmp	r0, #0
 8002622:	d500      	bpl.n	8002626 <??inv_fast_nomot_set_gyro_bias_9>
 8002624:	1a88      	subs	r0, r1, r2

08002626 <??inv_fast_nomot_set_gyro_bias_9>:
 8002626:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
 8002628:	68aa      	ldr	r2, [r5, #8]
 800262a:	1a53      	subs	r3, r2, r1
 800262c:	d401      	bmi.n	8002632 <??inv_fast_nomot_set_gyro_bias_10>
 800262e:	469c      	mov	ip, r3
 8002630:	e001      	b.n	8002636 <??inv_fast_nomot_set_gyro_bias_11>

08002632 <??inv_fast_nomot_set_gyro_bias_10>:
 8002632:	eba1 0c02 	sub.w	ip, r1, r2

08002636 <??inv_fast_nomot_set_gyro_bias_11>:
 8002636:	4584      	cmp	ip, r0
 8002638:	db04      	blt.n	8002644 <??inv_fast_nomot_set_gyro_bias_12>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d401      	bmi.n	8002642 <??inv_fast_nomot_set_gyro_bias_13>
 800263e:	4618      	mov	r0, r3
 8002640:	e000      	b.n	8002644 <??inv_fast_nomot_set_gyro_bias_12>

08002642 <??inv_fast_nomot_set_gyro_bias_13>:
 8002642:	1a88      	subs	r0, r1, r2

08002644 <??inv_fast_nomot_set_gyro_bias_12>:
 8002644:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002646:	f007 fb6a 	bl	8009d1e <inv_q30_mult>
 800264a:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 800264e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8002650:	4288      	cmp	r0, r1
 8002652:	da06      	bge.n	8002662 <??inv_fast_nomot_set_gyro_bias_14>
 8002654:	2103      	movs	r1, #3
 8002656:	a800      	add	r0, sp, #0
 8002658:	f007 f9a6 	bl	80099a8 <inv_set_gyro_bias>
 800265c:	2002      	movs	r0, #2
 800265e:	f007 ff51 	bl	800a504 <inv_set_motion_state>

08002662 <??inv_fast_nomot_set_gyro_bias_14>:
 8002662:	9800      	ldr	r0, [sp, #0]
 8002664:	6270      	str	r0, [r6, #36]	@ 0x24
 8002666:	6868      	ldr	r0, [r5, #4]
 8002668:	62b0      	str	r0, [r6, #40]	@ 0x28
 800266a:	68a8      	ldr	r0, [r5, #8]
 800266c:	62f0      	str	r0, [r6, #44]	@ 0x2c
 800266e:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08002672 <inv_set_fast_nomot_compass_threshold>:
 8002672:	f8df 2798 	ldr.w	r2, [pc, #1944]	@ 8002e0c <??DataTable27_1>
 8002676:	e9c2 0102 	strd	r0, r1, [r2, #8]
 800267a:	4770      	bx	lr

0800267c <int_set_fast_nomot_gyro_threshold>:
 800267c:	f8df 278c 	ldr.w	r2, [pc, #1932]	@ 8002e0c <??DataTable27_1>
 8002680:	e9c2 0106 	strd	r0, r1, [r2, #24]
 8002684:	4770      	bx	lr

08002686 <inv_set_fast_nomot_accel_threshold>:
 8002686:	f8df 2784 	ldr.w	r2, [pc, #1924]	@ 8002e0c <??DataTable27_1>
 800268a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800268e:	4770      	bx	lr

08002690 <inv_get_fast_nomot_compass_param>:
 8002690:	b430      	push	{r4, r5}
 8002692:	f8df 2774 	ldr.w	r2, [pc, #1908]	@ 8002e08 <??DataTable27>
 8002696:	f8d2 31e0 	ldr.w	r3, [r2, #480]	@ 0x1e0
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	e9d2 4574 	ldrd	r4, r5, [r2, #464]	@ 0x1d0
 80026a0:	e9c1 4500 	strd	r4, r5, [r1]
 80026a4:	bc30      	pop	{r4, r5}
 80026a6:	4770      	bx	lr

080026a8 <inv_get_fast_nomot_accel_param>:
 80026a8:	b430      	push	{r4, r5}
 80026aa:	f8df 275c 	ldr.w	r2, [pc, #1884]	@ 8002e08 <??DataTable27>
 80026ae:	f8d2 31e0 	ldr.w	r3, [r2, #480]	@ 0x1e0
 80026b2:	6003      	str	r3, [r0, #0]
 80026b4:	e9d2 4576 	ldrd	r4, r5, [r2, #472]	@ 0x1d8
 80026b8:	e9c1 4500 	strd	r4, r5, [r1]
 80026bc:	bc30      	pop	{r4, r5}
 80026be:	4770      	bx	lr

080026c0 <inv_fast_nomot_store_data>:
 80026c0:	e92d 41fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80026c4:	4686      	mov	lr, r0
 80026c6:	460e      	mov	r6, r1
 80026c8:	2700      	movs	r7, #0
 80026ca:	e01c      	b.n	8002706 <??inv_fast_nomot_store_data_0>

080026cc <??inv_fast_nomot_store_data_1>:
 80026cc:	17d3      	asrs	r3, r2, #31
 80026ce:	fba2 4500 	umull	r4, r5, r2, r0
 80026d2:	fb02 5501 	mla	r5, r2, r1, r5
 80026d6:	fb03 5500 	mla	r5, r3, r0, r5
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 80026e2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80026e6:	eb03 08c7 	add.w	r8, r3, r7, lsl #3
 80026ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 80026ee:	1824      	adds	r4, r4, r0
 80026f0:	414d      	adcs	r5, r1
 80026f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80026f6:	e9c3 4500 	strd	r4, r5, [r3]
 80026fa:	f10c 0c01 	add.w	ip, ip, #1

080026fe <??inv_fast_nomot_store_data_2>:
 80026fe:	f1bc 0f04 	cmp.w	ip, #4
 8002702:	dbe3      	blt.n	80026cc <??inv_fast_nomot_store_data_1>
 8002704:	1c7f      	adds	r7, r7, #1

08002706 <??inv_fast_nomot_store_data_0>:
 8002706:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8002708:	2f03      	cmp	r7, #3
 800270a:	da19      	bge.n	8002740 <??inv_fast_nomot_store_data_3>
 800270c:	eb06 0187 	add.w	r1, r6, r7, lsl #2
 8002710:	2800      	cmp	r0, #0
 8002712:	d102      	bne.n	800271a <??inv_fast_nomot_store_data_4>
 8002714:	f93e 0017 	ldrsh.w	r0, [lr, r7, lsl #1]
 8002718:	67c8      	str	r0, [r1, #124]	@ 0x7c

0800271a <??inv_fast_nomot_store_data_4>:
 800271a:	f93e 0017 	ldrsh.w	r0, [lr, r7, lsl #1]
 800271e:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 8002720:	1a82      	subs	r2, r0, r2
 8002722:	a800      	add	r0, sp, #0
 8002724:	f840 2027 	str.w	r2, [r0, r7, lsl #2]
 8002728:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800272a:	4290      	cmp	r0, r2
 800272c:	da00      	bge.n	8002730 <??inv_fast_nomot_store_data_5>
 800272e:	660a      	str	r2, [r1, #96]	@ 0x60

08002730 <??inv_fast_nomot_store_data_5>:
 8002730:	6ec8      	ldr	r0, [r1, #108]	@ 0x6c
 8002732:	4282      	cmp	r2, r0
 8002734:	da00      	bge.n	8002738 <??inv_fast_nomot_store_data_6>
 8002736:	66ca      	str	r2, [r1, #108]	@ 0x6c

08002738 <??inv_fast_nomot_store_data_6>:
 8002738:	2001      	movs	r0, #1
 800273a:	2100      	movs	r1, #0
 800273c:	468c      	mov	ip, r1
 800273e:	e7de      	b.n	80026fe <??inv_fast_nomot_store_data_2>

08002740 <??inv_fast_nomot_store_data_3>:
 8002740:	1c40      	adds	r0, r0, #1
 8002742:	67b0      	str	r0, [r6, #120]	@ 0x78
 8002744:	2001      	movs	r0, #1
 8002746:	f8c6 0090 	str.w	r0, [r6, #144]	@ 0x90
 800274a:	e8bd 81f7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, pc}

0800274e <inv_fast_nomot_store_data_compass>:
 800274e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	4615      	mov	r5, r2
 8002756:	2600      	movs	r6, #0
 8002758:	e005      	b.n	8002766 <??inv_fast_nomot_store_data_compass_0>

0800275a <??inv_fast_nomot_store_data_compass_1>:
 800275a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800275e:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8002762:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8002764:	1c76      	adds	r6, r6, #1

08002766 <??inv_fast_nomot_store_data_compass_0>:
 8002766:	2e03      	cmp	r6, #3
 8002768:	dbf7      	blt.n	800275a <??inv_fast_nomot_store_data_compass_1>
 800276a:	f105 0778 	add.w	r7, r5, #120	@ 0x78
 800276e:	6139      	str	r1, [r7, #16]
 8002770:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 8002772:	2800      	cmp	r0, #0
 8002774:	d014      	beq.n	80027a0 <??inv_fast_nomot_store_data_compass_2>
 8002776:	2600      	movs	r6, #0
 8002778:	e010      	b.n	800279c <??inv_fast_nomot_store_data_compass_3>

0800277a <??inv_fast_nomot_store_data_compass_4>:
 800277a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800277e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8002782:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
 8002786:	1a40      	subs	r0, r0, r1
 8002788:	f009 fc70 	bl	800c06c <abs>
 800278c:	f8d8 1060 	ldr.w	r1, [r8, #96]	@ 0x60
 8002790:	4281      	cmp	r1, r0
 8002792:	da00      	bge.n	8002796 <??inv_fast_nomot_store_data_compass_5>
 8002794:	4601      	mov	r1, r0

08002796 <??inv_fast_nomot_store_data_compass_5>:
 8002796:	f8c8 1060 	str.w	r1, [r8, #96]	@ 0x60
 800279a:	1c76      	adds	r6, r6, #1

0800279c <??inv_fast_nomot_store_data_compass_3>:
 800279c:	2e03      	cmp	r6, #3
 800279e:	dbec      	blt.n	800277a <??inv_fast_nomot_store_data_compass_4>

080027a0 <??inv_fast_nomot_store_data_compass_2>:
 80027a0:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 80027a2:	1c40      	adds	r0, r0, #1
 80027a4:	67a8      	str	r0, [r5, #120]	@ 0x78
 80027a6:	2001      	movs	r0, #1
 80027a8:	61b8      	str	r0, [r7, #24]
 80027aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027ae <inv_fast_nomot_reset_data_compass>:
 80027ae:	2100      	movs	r1, #0
 80027b0:	e006      	b.n	80027c0 <??inv_fast_nomot_reset_data_compass_0>

080027b2 <??inv_fast_nomot_reset_data_compass_1>:
 80027b2:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80027b6:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80027b8:	67d3      	str	r3, [r2, #124]	@ 0x7c
 80027ba:	2300      	movs	r3, #0
 80027bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027be:	1c49      	adds	r1, r1, #1

080027c0 <??inv_fast_nomot_reset_data_compass_0>:
 80027c0:	2903      	cmp	r1, #3
 80027c2:	dbf6      	blt.n	80027b2 <??inv_fast_nomot_reset_data_compass_1>
 80027c4:	f100 0178 	add.w	r1, r0, #120	@ 0x78
 80027c8:	690a      	ldr	r2, [r1, #16]
 80027ca:	614a      	str	r2, [r1, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	6782      	str	r2, [r0, #120]	@ 0x78
 80027d0:	4610      	mov	r0, r2
 80027d2:	6188      	str	r0, [r1, #24]
 80027d4:	4770      	bx	lr

080027d6 <inv_fast_nomot_get_time_elaps>:
 80027d6:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80027da:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 80027de:	1a08      	subs	r0, r1, r0
 80027e0:	4770      	bx	lr

080027e2 <inv_fast_nomot_parameter_compass>:
 80027e2:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80027e4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80027e6:	428a      	cmp	r2, r1
 80027e8:	da00      	bge.n	80027ec <??inv_fast_nomot_parameter_compass_0>
 80027ea:	460a      	mov	r2, r1

080027ec <??inv_fast_nomot_parameter_compass_0>:
 80027ec:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80027ee:	4291      	cmp	r1, r2
 80027f0:	da00      	bge.n	80027f4 <??inv_fast_nomot_parameter_compass_1>
 80027f2:	4611      	mov	r1, r2

080027f4 <??inv_fast_nomot_parameter_compass_1>:
 80027f4:	4608      	mov	r0, r1
 80027f6:	4770      	bx	lr

080027f8 <inv_max_change>:
 80027f8:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80027fa:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80027fc:	1a89      	subs	r1, r1, r2
 80027fe:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002800:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002802:	1ad2      	subs	r2, r2, r3
 8002804:	428a      	cmp	r2, r1
 8002806:	db00      	blt.n	800280a <??inv_max_change_0>
 8002808:	4611      	mov	r1, r2

0800280a <??inv_max_change_0>:
 800280a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800280c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800280e:	1a10      	subs	r0, r2, r0
 8002810:	4288      	cmp	r0, r1
 8002812:	db00      	blt.n	8002816 <??inv_max_change_1>
 8002814:	4601      	mov	r1, r0

08002816 <??inv_max_change_1>:
 8002816:	4608      	mov	r0, r1
 8002818:	4770      	bx	lr

0800281a <inv_get_right_shift_by_rounding>:
 800281a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800281e:	4606      	mov	r6, r0
 8002820:	460f      	mov	r7, r1
 8002822:	f1c2 0820 	rsb	r8, r2, #32
 8002826:	2001      	movs	r0, #1
 8002828:	4611      	mov	r1, r2
 800282a:	1e49      	subs	r1, r1, #1
 800282c:	fa00 f901 	lsl.w	r9, r0, r1
 8002830:	4630      	mov	r0, r6
 8002832:	4639      	mov	r1, r7
 8002834:	f003 f832 	bl	800589c <__aeabi_lasr>
 8002838:	4604      	mov	r4, r0
 800283a:	460d      	mov	r5, r1
 800283c:	4630      	mov	r0, r6
 800283e:	4639      	mov	r1, r7
 8002840:	4642      	mov	r2, r8
 8002842:	f003 f839 	bl	80058b8 <__aeabi_llsl>
 8002846:	4642      	mov	r2, r8
 8002848:	f003 f828 	bl	800589c <__aeabi_lasr>
 800284c:	4581      	cmp	r9, r0
 800284e:	da03      	bge.n	8002858 <??inv_get_right_shift_by_rounding_0>
 8002850:	1c64      	adds	r4, r4, #1
 8002852:	f145 0500 	adc.w	r5, r5, #0
 8002856:	e005      	b.n	8002864 <??inv_get_right_shift_by_rounding_1>

08002858 <??inv_get_right_shift_by_rounding_0>:
 8002858:	eb10 0f09 	cmn.w	r0, r9
 800285c:	da02      	bge.n	8002864 <??inv_get_right_shift_by_rounding_1>
 800285e:	1e64      	subs	r4, r4, #1
 8002860:	f165 0500 	sbc.w	r5, r5, #0

08002864 <??inv_get_right_shift_by_rounding_1>:
 8002864:	4620      	mov	r0, r4
 8002866:	4629      	mov	r1, r5
 8002868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800286c <inv_reset_min_max_gyro_accel_statistics>:
 800286c:	b510      	push	{r4, lr}
 800286e:	f8df 4598 	ldr.w	r4, [pc, #1432]	@ 8002e08 <??DataTable27>
 8002872:	2210      	movs	r2, #16
 8002874:	2100      	movs	r1, #0
 8002876:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800287a:	f00a fcdb 	bl	800d234 <memset>
 800287e:	2210      	movs	r2, #16
 8002880:	2100      	movs	r1, #0
 8002882:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 8002886:	f00a fcd5 	bl	800d234 <memset>
 800288a:	2210      	movs	r2, #16
 800288c:	2100      	movs	r1, #0
 800288e:	f504 700c 	add.w	r0, r4, #560	@ 0x230
 8002892:	f00a fccf 	bl	800d234 <memset>
 8002896:	2210      	movs	r2, #16
 8002898:	2100      	movs	r1, #0
 800289a:	f504 7014 	add.w	r0, r4, #592	@ 0x250
 800289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028a2:	f00a bcc7 	b.w	800d234 <memset>

080028a6 <inv_reset_packet>:
 80028a6:	b510      	push	{r4, lr}
 80028a8:	f8df 455c 	ldr.w	r4, [pc, #1372]	@ 8002e08 <??DataTable27>
 80028ac:	2298      	movs	r2, #152	@ 0x98
 80028ae:	2100      	movs	r1, #0
 80028b0:	f104 0008 	add.w	r0, r4, #8
 80028b4:	f00a fcbe 	bl	800d234 <memset>
 80028b8:	2298      	movs	r2, #152	@ 0x98
 80028ba:	2100      	movs	r1, #0
 80028bc:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 80028c0:	f00a fcb8 	bl	800d234 <memset>
 80028c4:	2005      	movs	r0, #5
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ca:	e4d4      	b.n	8002276 <inv_init_maxmin>

080028cc <inv_record_max_moment_in_no_motion_gyro>:
 80028cc:	b4d0      	push	{r4, r6, r7}
 80028ce:	f8df 2538 	ldr.w	r2, [pc, #1336]	@ 8002e08 <??DataTable27>
 80028d2:	f502 7310 	add.w	r3, r2, #576	@ 0x240
 80028d6:	689c      	ldr	r4, [r3, #8]
 80028d8:	2c00      	cmp	r4, #0
 80028da:	d102      	bne.n	80028e2 <??inv_record_max_moment_in_no_motion_gyro_0>
 80028dc:	e9c2 0190 	strd	r0, r1, [r2, #576]	@ 0x240
 80028e0:	e008      	b.n	80028f4 <??inv_record_max_moment_in_no_motion_gyro_1>

080028e2 <??inv_record_max_moment_in_no_motion_gyro_0>:
 80028e2:	e9d2 6790 	ldrd	r6, r7, [r2, #576]	@ 0x240
 80028e6:	428f      	cmp	r7, r1
 80028e8:	dc04      	bgt.n	80028f4 <??inv_record_max_moment_in_no_motion_gyro_1>
 80028ea:	db01      	blt.n	80028f0 <??inv_record_max_moment_in_no_motion_gyro_2>
 80028ec:	4286      	cmp	r6, r0
 80028ee:	d201      	bcs.n	80028f4 <??inv_record_max_moment_in_no_motion_gyro_1>

080028f0 <??inv_record_max_moment_in_no_motion_gyro_2>:
 80028f0:	e9c2 0190 	strd	r0, r1, [r2, #576]	@ 0x240

080028f4 <??inv_record_max_moment_in_no_motion_gyro_1>:
 80028f4:	1c60      	adds	r0, r4, #1
 80028f6:	6098      	str	r0, [r3, #8]
 80028f8:	bcd0      	pop	{r4, r6, r7}
 80028fa:	4770      	bx	lr

080028fc <inv_record_max_moment_in_no_motion_accel>:
 80028fc:	b4d0      	push	{r4, r6, r7}
 80028fe:	f8df 2508 	ldr.w	r2, [pc, #1288]	@ 8002e08 <??DataTable27>
 8002902:	f502 7314 	add.w	r3, r2, #592	@ 0x250
 8002906:	689c      	ldr	r4, [r3, #8]
 8002908:	2c00      	cmp	r4, #0
 800290a:	d102      	bne.n	8002912 <??inv_record_max_moment_in_no_motion_accel_0>
 800290c:	e9c2 0194 	strd	r0, r1, [r2, #592]	@ 0x250
 8002910:	e008      	b.n	8002924 <??inv_record_max_moment_in_no_motion_accel_1>

08002912 <??inv_record_max_moment_in_no_motion_accel_0>:
 8002912:	e9d2 6794 	ldrd	r6, r7, [r2, #592]	@ 0x250
 8002916:	428f      	cmp	r7, r1
 8002918:	dc04      	bgt.n	8002924 <??inv_record_max_moment_in_no_motion_accel_1>
 800291a:	db01      	blt.n	8002920 <??inv_record_max_moment_in_no_motion_accel_2>
 800291c:	4286      	cmp	r6, r0
 800291e:	d201      	bcs.n	8002924 <??inv_record_max_moment_in_no_motion_accel_1>

08002920 <??inv_record_max_moment_in_no_motion_accel_2>:
 8002920:	e9c2 0194 	strd	r0, r1, [r2, #592]	@ 0x250

08002924 <??inv_record_max_moment_in_no_motion_accel_1>:
 8002924:	1c60      	adds	r0, r4, #1
 8002926:	6098      	str	r0, [r3, #8]
 8002928:	bcd0      	pop	{r4, r6, r7}
 800292a:	4770      	bx	lr

0800292c <inv_record_min_moment_in_motion_gyro>:
 800292c:	b4d0      	push	{r4, r6, r7}
 800292e:	f8df 24d8 	ldr.w	r2, [pc, #1240]	@ 8002e08 <??DataTable27>
 8002932:	f502 7308 	add.w	r3, r2, #544	@ 0x220
 8002936:	689c      	ldr	r4, [r3, #8]
 8002938:	2c00      	cmp	r4, #0
 800293a:	d102      	bne.n	8002942 <??inv_record_min_moment_in_motion_gyro_0>
 800293c:	e9c2 0188 	strd	r0, r1, [r2, #544]	@ 0x220
 8002940:	e008      	b.n	8002954 <??inv_record_min_moment_in_motion_gyro_1>

08002942 <??inv_record_min_moment_in_motion_gyro_0>:
 8002942:	e9d2 6788 	ldrd	r6, r7, [r2, #544]	@ 0x220
 8002946:	42b9      	cmp	r1, r7
 8002948:	dc04      	bgt.n	8002954 <??inv_record_min_moment_in_motion_gyro_1>
 800294a:	db01      	blt.n	8002950 <??inv_record_min_moment_in_motion_gyro_2>
 800294c:	42b0      	cmp	r0, r6
 800294e:	d201      	bcs.n	8002954 <??inv_record_min_moment_in_motion_gyro_1>

08002950 <??inv_record_min_moment_in_motion_gyro_2>:
 8002950:	e9c2 0188 	strd	r0, r1, [r2, #544]	@ 0x220

08002954 <??inv_record_min_moment_in_motion_gyro_1>:
 8002954:	1c60      	adds	r0, r4, #1
 8002956:	6098      	str	r0, [r3, #8]
 8002958:	bcd0      	pop	{r4, r6, r7}
 800295a:	4770      	bx	lr

0800295c <inv_record_min_moment_in_motion_accel>:
 800295c:	b4d0      	push	{r4, r6, r7}
 800295e:	f8df 24a8 	ldr.w	r2, [pc, #1192]	@ 8002e08 <??DataTable27>
 8002962:	f502 730c 	add.w	r3, r2, #560	@ 0x230
 8002966:	689c      	ldr	r4, [r3, #8]
 8002968:	2c00      	cmp	r4, #0
 800296a:	d102      	bne.n	8002972 <??inv_record_min_moment_in_motion_accel_0>
 800296c:	e9c2 018c 	strd	r0, r1, [r2, #560]	@ 0x230
 8002970:	e008      	b.n	8002984 <??inv_record_min_moment_in_motion_accel_1>

08002972 <??inv_record_min_moment_in_motion_accel_0>:
 8002972:	e9d2 678c 	ldrd	r6, r7, [r2, #560]	@ 0x230
 8002976:	42b9      	cmp	r1, r7
 8002978:	dc04      	bgt.n	8002984 <??inv_record_min_moment_in_motion_accel_1>
 800297a:	db01      	blt.n	8002980 <??inv_record_min_moment_in_motion_accel_2>
 800297c:	42b0      	cmp	r0, r6
 800297e:	d201      	bcs.n	8002984 <??inv_record_min_moment_in_motion_accel_1>

08002980 <??inv_record_min_moment_in_motion_accel_2>:
 8002980:	e9c2 018c 	strd	r0, r1, [r2, #560]	@ 0x230

08002984 <??inv_record_min_moment_in_motion_accel_1>:
 8002984:	1c60      	adds	r0, r4, #1
 8002986:	6098      	str	r0, [r3, #8]
 8002988:	bcd0      	pop	{r4, r6, r7}
 800298a:	4770      	bx	lr

0800298c <inv_detect_motion_by_gyro_accel>:
 800298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002990:	4607      	mov	r7, r0
 8002992:	2401      	movs	r4, #1
 8002994:	f8df 5470 	ldr.w	r5, [pc, #1136]	@ 8002e08 <??DataTable27>
 8002998:	f105 0008 	add.w	r0, r5, #8
 800299c:	f7ff ff2c 	bl	80027f8 <inv_max_change>
 80029a0:	f8df 6468 	ldr.w	r6, [pc, #1128]	@ 8002e0c <??DataTable27_1>
 80029a4:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80029a6:	4281      	cmp	r1, r0
 80029a8:	da03      	bge.n	80029b2 <??inv_detect_motion_by_gyro_accel_0>
 80029aa:	f7ff ff7c 	bl	80028a6 <inv_reset_packet>
 80029ae:	2000      	movs	r0, #0
 80029b0:	e03c      	b.n	8002a2c <??inv_detect_motion_by_gyro_accel_1>

080029b2 <??inv_detect_motion_by_gyro_accel_0>:
 80029b2:	4638      	mov	r0, r7
 80029b4:	f7ff fdc6 	bl	8002544 <inv_if_enough_data>
 80029b8:	0007      	movs	r7, r0
 80029ba:	d101      	bne.n	80029c0 <??inv_detect_motion_by_gyro_accel_2>
 80029bc:	2002      	movs	r0, #2
 80029be:	e035      	b.n	8002a2c <??inv_detect_motion_by_gyro_accel_1>

080029c0 <??inv_detect_motion_by_gyro_accel_2>:
 80029c0:	0778      	lsls	r0, r7, #29
 80029c2:	d51e      	bpl.n	8002a02 <??inv_detect_motion_by_gyro_accel_3>
 80029c4:	f505 789c 	add.w	r8, r5, #312	@ 0x138
 80029c8:	4640      	mov	r0, r8
 80029ca:	f7ff fc86 	bl	80022da <inv_fast_nomot_parameter>
 80029ce:	0d00      	lsrs	r0, r0, #20
 80029d0:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 80029d4:	1509      	asrs	r1, r1, #20
 80029d6:	e9c5 0176 	strd	r0, r1, [r5, #472]	@ 0x1d8
 80029da:	e9d5 0176 	ldrd	r0, r1, [r5, #472]	@ 0x1d8
 80029de:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80029e2:	428b      	cmp	r3, r1
 80029e4:	dc05      	bgt.n	80029f2 <??inv_detect_motion_by_gyro_accel_4>
 80029e6:	db01      	blt.n	80029ec <??inv_detect_motion_by_gyro_accel_5>
 80029e8:	4282      	cmp	r2, r0
 80029ea:	d202      	bcs.n	80029f2 <??inv_detect_motion_by_gyro_accel_4>

080029ec <??inv_detect_motion_by_gyro_accel_5>:
 80029ec:	2400      	movs	r4, #0
 80029ee:	f7ff ffb5 	bl	800295c <inv_record_min_moment_in_motion_accel>

080029f2 <??inv_detect_motion_by_gyro_accel_4>:
 80029f2:	2298      	movs	r2, #152	@ 0x98
 80029f4:	2100      	movs	r1, #0
 80029f6:	4640      	mov	r0, r8
 80029f8:	f00a fc1c 	bl	800d234 <memset>
 80029fc:	2004      	movs	r0, #4
 80029fe:	f7ff fc3a 	bl	8002276 <inv_init_maxmin>

08002a02 <??inv_detect_motion_by_gyro_accel_3>:
 8002a02:	07f8      	lsls	r0, r7, #31
 8002a04:	d511      	bpl.n	8002a2a <??inv_detect_motion_by_gyro_accel_6>
 8002a06:	f105 0008 	add.w	r0, r5, #8
 8002a0a:	f7ff fc66 	bl	80022da <inv_fast_nomot_parameter>
 8002a0e:	f505 72ec 	add.w	r2, r5, #472	@ 0x1d8
 8002a12:	e9c2 0106 	strd	r0, r1, [r2, #24]
 8002a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8002a1a:	428b      	cmp	r3, r1
 8002a1c:	dc05      	bgt.n	8002a2a <??inv_detect_motion_by_gyro_accel_6>
 8002a1e:	db01      	blt.n	8002a24 <??inv_detect_motion_by_gyro_accel_7>
 8002a20:	4282      	cmp	r2, r0
 8002a22:	d202      	bcs.n	8002a2a <??inv_detect_motion_by_gyro_accel_6>

08002a24 <??inv_detect_motion_by_gyro_accel_7>:
 8002a24:	2400      	movs	r4, #0
 8002a26:	f7ff ff81 	bl	800292c <inv_record_min_moment_in_motion_gyro>

08002a2a <??inv_detect_motion_by_gyro_accel_6>:
 8002a2a:	4620      	mov	r0, r4

08002a2c <??inv_detect_motion_by_gyro_accel_1>:
 8002a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a30 <inv_sensor_data_preprocess>:
 8002a30:	b510      	push	{r4, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	4604      	mov	r4, r0
 8002a36:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8002a3a:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8002a3e:	28c0      	cmp	r0, #192	@ 0xc0
 8002a40:	d104      	bne.n	8002a4c <??inv_sensor_data_preprocess_0>
 8002a42:	f8df 13cc 	ldr.w	r1, [pc, #972]	@ 8002e10 <??DataTable27_2>
 8002a46:	1d20      	adds	r0, r4, #4
 8002a48:	f7ff fe3a 	bl	80026c0 <inv_fast_nomot_store_data>

08002a4c <??inv_sensor_data_preprocess_0>:
 8002a4c:	f894 0074 	ldrb.w	r0, [r4, #116]	@ 0x74
 8002a50:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8002a54:	28c0      	cmp	r0, #192	@ 0xc0
 8002a56:	d105      	bne.n	8002a64 <??inv_sensor_data_preprocess_1>
 8002a58:	f8df 13b8 	ldr.w	r1, [pc, #952]	@ 8002e14 <??DataTable27_3>
 8002a5c:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8002a60:	f7ff fe2e 	bl	80026c0 <inv_fast_nomot_store_data>

08002a64 <??inv_sensor_data_preprocess_1>:
 8002a64:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8002a68:	f000 01c0 	and.w	r1, r0, #192	@ 0xc0
 8002a6c:	29c0      	cmp	r1, #192	@ 0xc0
 8002a6e:	d10b      	bne.n	8002a88 <??inv_sensor_data_preprocess_2>
 8002a70:	2000      	movs	r0, #0
 8002a72:	aa00      	add	r2, sp, #0

08002a74 <??inv_sensor_data_preprocess_3>:
 8002a74:	2803      	cmp	r0, #3
 8002a76:	da18      	bge.n	8002aaa <??inv_sensor_data_preprocess_4>
 8002a78:	eb04 0140 	add.w	r1, r4, r0, lsl #1
 8002a7c:	f9b1 108c 	ldrsh.w	r1, [r1, #140]	@ 0x8c
 8002a80:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002a84:	1c40      	adds	r0, r0, #1
 8002a86:	e7f5      	b.n	8002a74 <??inv_sensor_data_preprocess_3>

08002a88 <??inv_sensor_data_preprocess_2>:
 8002a88:	f000 0060 	and.w	r0, r0, #96	@ 0x60
 8002a8c:	2860      	cmp	r0, #96	@ 0x60
 8002a8e:	d113      	bne.n	8002ab8 <??inv_sensor_data_preprocess_5>
 8002a90:	2000      	movs	r0, #0
 8002a92:	aa00      	add	r2, sp, #0
 8002a94:	e007      	b.n	8002aa6 <??inv_sensor_data_preprocess_6>

08002a96 <??inv_sensor_data_preprocess_7>:
 8002a96:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8002a9a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	@ 0xa0
 8002a9e:	1389      	asrs	r1, r1, #14
 8002aa0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002aa4:	1c40      	adds	r0, r0, #1

08002aa6 <??inv_sensor_data_preprocess_6>:
 8002aa6:	2803      	cmp	r0, #3
 8002aa8:	dbf5      	blt.n	8002a96 <??inv_sensor_data_preprocess_7>

08002aaa <??inv_sensor_data_preprocess_4>:
 8002aaa:	f8df 236c 	ldr.w	r2, [pc, #876]	@ 8002e18 <??DataTable27_4>
 8002aae:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8002ab2:	a800      	add	r0, sp, #0
 8002ab4:	f7ff fe4b 	bl	800274e <inv_fast_nomot_store_data_compass>

08002ab8 <??inv_sensor_data_preprocess_5>:
 8002ab8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

08002abc <inv_generate_fast_nomot>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	4605      	mov	r5, r0
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f105 012c 	add.w	r1, r5, #44	@ 0x2c
 8002ac6:	684a      	ldr	r2, [r1, #4]
 8002ac8:	05d3      	lsls	r3, r2, #23
 8002aca:	f140 8109 	bpl.w	8002ce0 <??inv_generate_fast_nomot_1>
 8002ace:	f002 0250 	and.w	r2, r2, #80	@ 0x50
 8002ad2:	2a40      	cmp	r2, #64	@ 0x40
 8002ad4:	d100      	bne.n	8002ad8 <??inv_generate_fast_nomot_2>
 8002ad6:	2001      	movs	r0, #1

08002ad8 <??inv_generate_fast_nomot_2>:
 8002ad8:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8002adc:	f001 0150 	and.w	r1, r1, #80	@ 0x50
 8002ae0:	2940      	cmp	r1, #64	@ 0x40
 8002ae2:	d100      	bne.n	8002ae6 <??inv_generate_fast_nomot_3>
 8002ae4:	2001      	movs	r0, #1

08002ae6 <??inv_generate_fast_nomot_3>:
 8002ae6:	f895 10b8 	ldrb.w	r1, [r5, #184]	@ 0xb8
 8002aea:	f001 0150 	and.w	r1, r1, #80	@ 0x50
 8002aee:	2940      	cmp	r1, #64	@ 0x40
 8002af0:	d100      	bne.n	8002af4 <??inv_generate_fast_nomot_4>
 8002af2:	2001      	movs	r0, #1

08002af4 <??inv_generate_fast_nomot_4>:
 8002af4:	4cc4      	ldr	r4, [pc, #784]	@ (8002e08 <??DataTable27>)
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d006      	beq.n	8002b08 <??inv_generate_fast_nomot_5>
 8002afa:	f7ff fed4 	bl	80028a6 <inv_reset_packet>
 8002afe:	2000      	movs	r0, #0
 8002b00:	f8c4 01e0 	str.w	r0, [r4, #480]	@ 0x1e0
 8002b04:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8

08002b08 <??inv_generate_fast_nomot_5>:
 8002b08:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002b0a:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
 8002b0e:	4281      	cmp	r1, r0
 8002b10:	d027      	beq.n	8002b62 <??inv_generate_fast_nomot_6>
 8002b12:	f8c4 0208 	str.w	r0, [r4, #520]	@ 0x208
 8002b16:	4ebd      	ldr	r6, [pc, #756]	@ (8002e0c <??DataTable27_1>)
 8002b18:	6b31      	ldr	r1, [r6, #48]	@ 0x30
 8002b1a:	280a      	cmp	r0, #10
 8002b1c:	da0c      	bge.n	8002b38 <??inv_generate_fast_nomot_7>
 8002b1e:	0048      	lsls	r0, r1, #1
 8002b20:	6020      	str	r0, [r4, #0]
 8002b22:	6b71      	ldr	r1, [r6, #52]	@ 0x34
 8002b24:	1c49      	adds	r1, r1, #1
 8002b26:	f8c4 120c 	str.w	r1, [r4, #524]	@ 0x20c
 8002b2a:	f003 fc8f 	bl	800644c <__aeabi_i2f>
 8002b2e:	f00e f975 	bl	8010e1c <sqrtf>
 8002b32:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
 8002b36:	e006      	b.n	8002b46 <??inv_generate_fast_nomot_8>

08002b38 <??inv_generate_fast_nomot_7>:
 8002b38:	6021      	str	r1, [r4, #0]
 8002b3a:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002b3c:	f8c4 020c 	str.w	r0, [r4, #524]	@ 0x20c
 8002b40:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8002b42:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214

08002b46 <??inv_generate_fast_nomot_8>:
 8002b46:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 8002b4a:	f1c0 0010 	rsb	r0, r0, #16
 8002b4e:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
 8002b52:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b56:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
 8002b5a:	2019      	movs	r0, #25
 8002b5c:	6b71      	ldr	r1, [r6, #52]	@ 0x34
 8002b5e:	4088      	lsls	r0, r1
 8002b60:	63f0      	str	r0, [r6, #60]	@ 0x3c

08002b62 <??inv_generate_fast_nomot_6>:
 8002b62:	4628      	mov	r0, r5
 8002b64:	f7ff ff64 	bl	8002a30 <inv_sensor_data_preprocess>
 8002b68:	f894 01e8 	ldrb.w	r0, [r4, #488]	@ 0x1e8
 8002b6c:	2806      	cmp	r0, #6
 8002b6e:	f200 80b7 	bhi.w	8002ce0 <??inv_generate_fast_nomot_1>
 8002b72:	e8df f000 	tbb	[pc, r0]

08002b76 <??inv_generate_fast_nomot_0>:
 8002b76:	1204 352c 976b 00a4                         ..,5k...

08002b7e <??inv_generate_fast_nomot_9>:
 8002b7e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	@ 0x1e0
 8002b82:	1c41      	adds	r1, r0, #1
 8002b84:	f8c4 11e0 	str.w	r1, [r4, #480]	@ 0x1e0
 8002b88:	280a      	cmp	r0, #10
 8002b8a:	f2c0 80a9 	blt.w	8002ce0 <??inv_generate_fast_nomot_1>
 8002b8e:	f7ff fe8a 	bl	80028a6 <inv_reset_packet>
 8002b92:	2001      	movs	r0, #1
 8002b94:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002b98:	e0a2      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002b9a <??inv_generate_fast_nomot_10>:
 8002b9a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8002b9e:	2801      	cmp	r0, #1
 8002ba0:	f040 809e 	bne.w	8002ce0 <??inv_generate_fast_nomot_1>
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f7ff fef1 	bl	800298c <inv_detect_motion_by_gyro_accel>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d103      	bne.n	8002bb6 <??inv_generate_fast_nomot_11>
 8002bae:	2005      	movs	r0, #5
 8002bb0:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002bb4:	e004      	b.n	8002bc0 <??inv_generate_fast_nomot_12>

08002bb6 <??inv_generate_fast_nomot_11>:
 8002bb6:	2801      	cmp	r0, #1
 8002bb8:	d102      	bne.n	8002bc0 <??inv_generate_fast_nomot_12>
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8

08002bc0 <??inv_generate_fast_nomot_12>:
 8002bc0:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8002bc4:	f7ff fdf3 	bl	80027ae <inv_fast_nomot_reset_data_compass>
 8002bc8:	f7ff fe50 	bl	800286c <inv_reset_min_max_gyro_accel_statistics>
 8002bcc:	e088      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002bce <??inv_generate_fast_nomot_13>:
 8002bce:	2003      	movs	r0, #3
 8002bd0:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f7ff fcce 	bl	8002576 <inv_fast_nomot_set_gyro_bias>
 8002bda:	f7ff fe64 	bl	80028a6 <inv_reset_packet>
 8002bde:	e07f      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002be0 <??inv_generate_fast_nomot_14>:
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff fed3 	bl	800298c <inv_detect_motion_by_gyro_accel>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d04a      	beq.n	8002c80 <??inv_generate_fast_nomot_15>
 8002bea:	2801      	cmp	r0, #1
 8002bec:	d178      	bne.n	8002ce0 <??inv_generate_fast_nomot_1>
 8002bee:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 8002bf2:	05c0      	lsls	r0, r0, #23
 8002bf4:	d51b      	bpl.n	8002c2e <??inv_generate_fast_nomot_16>
 8002bf6:	f104 07a0 	add.w	r7, r4, #160	@ 0xa0
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f7ff fdf1 	bl	80027e2 <inv_fast_nomot_parameter_compass>
 8002c00:	17c1      	asrs	r1, r0, #31
 8002c02:	e9c4 0174 	strd	r0, r1, [r4, #464]	@ 0x1d0
 8002c06:	4e81      	ldr	r6, [pc, #516]	@ (8002e0c <??DataTable27_1>)
 8002c08:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8002c0c:	e9d4 2374 	ldrd	r2, r3, [r4, #464]	@ 0x1d0
 8002c10:	4299      	cmp	r1, r3
 8002c12:	dc06      	bgt.n	8002c22 <??inv_generate_fast_nomot_17>
 8002c14:	db01      	blt.n	8002c1a <??inv_generate_fast_nomot_18>
 8002c16:	4290      	cmp	r0, r2
 8002c18:	d203      	bcs.n	8002c22 <??inv_generate_fast_nomot_17>

08002c1a <??inv_generate_fast_nomot_18>:
 8002c1a:	2005      	movs	r0, #5
 8002c1c:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002c20:	e00b      	b.n	8002c3a <??inv_generate_fast_nomot_19>

08002c22 <??inv_generate_fast_nomot_17>:
 8002c22:	4638      	mov	r0, r7
 8002c24:	f7ff fdd7 	bl	80027d6 <inv_fast_nomot_get_time_elaps>
 8002c28:	6a31      	ldr	r1, [r6, #32]
 8002c2a:	4288      	cmp	r0, r1
 8002c2c:	d305      	bcc.n	8002c3a <??inv_generate_fast_nomot_19>

08002c2e <??inv_generate_fast_nomot_16>:
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002c34:	4628      	mov	r0, r5
 8002c36:	f7ff fc9e 	bl	8002576 <inv_fast_nomot_set_gyro_bias>

08002c3a <??inv_generate_fast_nomot_19>:
 8002c3a:	e9d4 0176 	ldrd	r0, r1, [r4, #472]	@ 0x1d8
 8002c3e:	f7ff fe5d 	bl	80028fc <inv_record_max_moment_in_no_motion_accel>
 8002c42:	e9d4 017c 	ldrd	r0, r1, [r4, #496]	@ 0x1f0
 8002c46:	f7ff fe41 	bl	80028cc <inv_record_max_moment_in_no_motion_gyro>
 8002c4a:	e049      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002c4c <??inv_generate_fast_nomot_20>:
 8002c4c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 8002c50:	05c0      	lsls	r0, r0, #23
 8002c52:	d510      	bpl.n	8002c76 <??inv_generate_fast_nomot_21>
 8002c54:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8002c58:	f7ff fdc3 	bl	80027e2 <inv_fast_nomot_parameter_compass>
 8002c5c:	17c1      	asrs	r1, r0, #31
 8002c5e:	e9c4 0174 	strd	r0, r1, [r4, #464]	@ 0x1d0
 8002c62:	486a      	ldr	r0, [pc, #424]	@ (8002e0c <??DataTable27_1>)
 8002c64:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8002c68:	e9d4 0174 	ldrd	r0, r1, [r4, #464]	@ 0x1d0
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	db07      	blt.n	8002c80 <??inv_generate_fast_nomot_15>
 8002c70:	dc01      	bgt.n	8002c76 <??inv_generate_fast_nomot_21>
 8002c72:	4282      	cmp	r2, r0
 8002c74:	d304      	bcc.n	8002c80 <??inv_generate_fast_nomot_15>

08002c76 <??inv_generate_fast_nomot_21>:
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7ff fe88 	bl	800298c <inv_detect_motion_by_gyro_accel>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d103      	bne.n	8002c88 <??inv_generate_fast_nomot_22>

08002c80 <??inv_generate_fast_nomot_15>:
 8002c80:	2005      	movs	r0, #5
 8002c82:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002c86:	e02b      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002c88 <??inv_generate_fast_nomot_22>:
 8002c88:	2801      	cmp	r0, #1
 8002c8a:	d129      	bne.n	8002ce0 <??inv_generate_fast_nomot_1>
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7ff fc72 	bl	8002576 <inv_fast_nomot_set_gyro_bias>
 8002c92:	e9d4 0176 	ldrd	r0, r1, [r4, #472]	@ 0x1d8
 8002c96:	f7ff fe31 	bl	80028fc <inv_record_max_moment_in_no_motion_accel>
 8002c9a:	e9d4 017c 	ldrd	r0, r1, [r4, #496]	@ 0x1f0
 8002c9e:	f7ff fe15 	bl	80028cc <inv_record_max_moment_in_no_motion_gyro>
 8002ca2:	e01d      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002ca4 <??inv_generate_fast_nomot_23>:
 8002ca4:	2006      	movs	r0, #6
 8002ca6:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002caa:	2001      	movs	r0, #1
 8002cac:	f007 fc2a 	bl	800a504 <inv_set_motion_state>
 8002cb0:	f7ff fdf9 	bl	80028a6 <inv_reset_packet>
 8002cb4:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8002cb8:	f7ff fd79 	bl	80027ae <inv_fast_nomot_reset_data_compass>
 8002cbc:	e010      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002cbe <??inv_generate_fast_nomot_24>:
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f7ff fe64 	bl	800298c <inv_detect_motion_by_gyro_accel>
 8002cc4:	2801      	cmp	r0, #1
 8002cc6:	d103      	bne.n	8002cd0 <??inv_generate_fast_nomot_25>
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002cce:	e007      	b.n	8002ce0 <??inv_generate_fast_nomot_1>

08002cd0 <??inv_generate_fast_nomot_25>:
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d105      	bne.n	8002ce0 <??inv_generate_fast_nomot_1>
 8002cd4:	f7ff fde7 	bl	80028a6 <inv_reset_packet>
 8002cd8:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8002cdc:	f7ff fd67 	bl	80027ae <inv_fast_nomot_reset_data_compass>

08002ce0 <??inv_generate_fast_nomot_1>:
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002ce4 <inv_set_default_number_of_samples>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	2100      	movs	r1, #0

08002ce8 <??inv_set_default_number_of_samples_0>:
 8002ce8:	1040      	asrs	r0, r0, #1
 8002cea:	d000      	beq.n	8002cee <??inv_set_default_number_of_samples_1>
 8002cec:	1c49      	adds	r1, r1, #1

08002cee <??inv_set_default_number_of_samples_1>:
 8002cee:	2801      	cmp	r0, #1
 8002cf0:	dafa      	bge.n	8002ce8 <??inv_set_default_number_of_samples_0>
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	1c4a      	adds	r2, r1, #1
 8002cf6:	4090      	lsls	r0, r2
 8002cf8:	4c44      	ldr	r4, [pc, #272]	@ (8002e0c <??DataTable27_1>)
 8002cfa:	6320      	str	r0, [r4, #48]	@ 0x30
 8002cfc:	1c49      	adds	r1, r1, #1
 8002cfe:	6361      	str	r1, [r4, #52]	@ 0x34
 8002d00:	f003 fba4 	bl	800644c <__aeabi_i2f>
 8002d04:	f00e f88a 	bl	8010e1c <sqrtf>
 8002d08:	63a0      	str	r0, [r4, #56]	@ 0x38
 8002d0a:	2019      	movs	r0, #25
 8002d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d0e:	4088      	lsls	r0, r1
 8002d10:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8002d12:	bd10      	pop	{r4, pc}

08002d14 <inv_init_fast_nomot>:
 8002d14:	b538      	push	{r3, r4, r5, lr}
 8002d16:	4c3c      	ldr	r4, [pc, #240]	@ (8002e08 <??DataTable27>)
 8002d18:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f00a fa88 	bl	800d234 <memset>
 8002d24:	4d39      	ldr	r5, [pc, #228]	@ (8002e0c <??DataTable27_1>)
 8002d26:	2240      	movs	r2, #64	@ 0x40
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f00a fa82 	bl	800d234 <memset>
 8002d30:	2007      	movs	r0, #7
 8002d32:	f7ff faa0 	bl	8002276 <inv_init_maxmin>
 8002d36:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	e9c5 0106 	strd	r0, r1, [r5, #24]
 8002d40:	2014      	movs	r0, #20
 8002d42:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002d46:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002d4a:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8002d4e:	4833      	ldr	r0, [pc, #204]	@ (8002e1c <??DataTable27_5>)
 8002d50:	6228      	str	r0, [r5, #32]
 8002d52:	2001      	movs	r0, #1
 8002d54:	f8c4 01e4 	str.w	r0, [r4, #484]	@ 0x1e4
 8002d58:	2019      	movs	r0, #25
 8002d5a:	f7ff ffc3 	bl	8002ce4 <inv_set_default_number_of_samples>
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f8c4 0208 	str.w	r0, [r4, #520]	@ 0x208
 8002d64:	bd32      	pop	{r1, r4, r5, pc}

08002d66 <inv_start_fast_nomot>:
 8002d66:	b510      	push	{r4, lr}
 8002d68:	4c27      	ldr	r4, [pc, #156]	@ (8002e08 <??DataTable27>)
 8002d6a:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4620      	mov	r0, r4
 8002d72:	f00a fa5f 	bl	800d234 <memset>
 8002d76:	2007      	movs	r0, #7
 8002d78:	f7ff fa7d 	bl	8002276 <inv_init_maxmin>
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f8c4 01e4 	str.w	r0, [r4, #484]	@ 0x1e4
 8002d82:	f884 01e8 	strb.w	r0, [r4, #488]	@ 0x1e8
 8002d86:	2200      	movs	r2, #0
 8002d88:	2103      	movs	r1, #3
 8002d8a:	f006 ff8f 	bl	8009cac <inv_set_message>
 8002d8e:	2207      	movs	r2, #7
 8002d90:	2164      	movs	r1, #100	@ 0x64
 8002d92:	4823      	ldr	r0, [pc, #140]	@ (8002e20 <??DataTable27_6>)
 8002d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d98:	f006 be58 	b.w	8009a4c <inv_register_data_cb>

08002d9c <inv_stop_fast_nomot>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f007 fbb0 	bl	800a504 <inv_set_motion_state>
 8002da4:	481e      	ldr	r0, [pc, #120]	@ (8002e20 <??DataTable27_6>)
 8002da6:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8002daa:	f006 beab 	b.w	8009b04 <inv_unregister_data_cb>

08002dae <inv_enable_fast_nomot>:
 8002dae:	b510      	push	{r4, lr}
 8002db0:	f7ff ffb0 	bl	8002d14 <inv_init_fast_nomot>
 8002db4:	0004      	movs	r4, r0
 8002db6:	d009      	beq.n	8002dcc <??inv_enable_fast_nomot_0>
 8002db8:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8002dbc:	f20f 026c 	addw	r2, pc, #108	@ 0x6c
 8002dc0:	f20f 0180 	addw	r1, pc, #128	@ 0x80
 8002dc4:	f7ff fa56 	bl	8002274 <__print_result_location>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <??inv_enable_fast_nomot_0>:
 8002dcc:	4815      	ldr	r0, [pc, #84]	@ (8002e24 <??DataTable27_7>)
 8002dce:	f007 fcff 	bl	800a7d0 <inv_register_mpl_start_notification>
 8002dd2:	0004      	movs	r4, r0
 8002dd4:	d009      	beq.n	8002dea <??inv_enable_fast_nomot_1>
 8002dd6:	f240 23db 	movw	r3, #731	@ 0x2db
 8002dda:	f20f 0250 	addw	r2, pc, #80	@ 0x50
 8002dde:	f20f 0164 	addw	r1, pc, #100	@ 0x64
 8002de2:	f7ff fa47 	bl	8002274 <__print_result_location>
 8002de6:	4620      	mov	r0, r4
 8002de8:	bd10      	pop	{r4, pc}

08002dea <??inv_enable_fast_nomot_1>:
 8002dea:	2000      	movs	r0, #0
 8002dec:	bd10      	pop	{r4, pc}

08002dee <inv_disable_fast_nomot>:
 8002dee:	b580      	push	{r7, lr}
 8002df0:	f7ff ffd4 	bl	8002d9c <inv_stop_fast_nomot>
 8002df4:	480b      	ldr	r0, [pc, #44]	@ (8002e24 <??DataTable27_7>)
 8002df6:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8002dfa:	f007 bcc5 	b.w	800a788 <inv_unregister_mpl_start_notification>

08002dfe <inv_get_fnm_gyro_no_motion_param>:
 8002dfe:	4a02      	ldr	r2, [pc, #8]	@ (8002e08 <??DataTable27>)
 8002e00:	e9d2 017c 	ldrd	r0, r1, [r2, #496]	@ 0x1f0
 8002e04:	4770      	bx	lr
	...

08002e08 <??DataTable27>:
 8002e08:	06c8 2000                                   ... 

08002e0c <??DataTable27_1>:
 8002e0c:	0928 2000                                   (.. 

08002e10 <??DataTable27_2>:
 8002e10:	06d0 2000                                   ... 

08002e14 <??DataTable27_3>:
 8002e14:	0800 2000                                   ... 

08002e18 <??DataTable27_4>:
 8002e18:	0768 2000                                   h.. 

08002e1c <??DataTable27_5>:
 8002e1c:	0800 2faf                                   .../

08002e20 <??DataTable27_6>:
 8002e20:	2abd 0800                                   .*..

08002e24 <??DataTable27_7>:
 8002e24:	2d67 0800                                   g-..

08002e28 <inv_fnm_debug_print>:
 8002e28:	4770      	bx	lr
	...

08002e2c <??__func__>:
 8002e2c:	6e69 5f76 6e65 6261 656c 665f 7361 5f74     inv_enable_fast_
 8002e3c:	6f6e 6f6d 0074 0000                         nomot...

08002e44 <?<Constant "C:\\STM32_EWARM\\STM32L...">>:
 8002e44:	3a43 535c 4d54 3233 455f 4157 4d52 535c     C:\STM32_EWARM\S
 8002e54:	4d54 3233 5f4c 504d 4c4c 4249 6d5c 6c70     TM32L_MPLLIB\mpl
 8002e64:	665c 7361 5f74 6f6e 6d5f 746f 6f69 2e6e     \fast_no_motion.
 8002e74:	0063 0000                                   c...

08002e78 <inv_find_synchronized_compass_angle>:
 8002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	4683      	mov	fp, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	4615      	mov	r5, r2
 8002e84:	469a      	mov	sl, r3
 8002e86:	f8df 8664 	ldr.w	r8, [pc, #1636]	@ 80034ec <??DataTable12>
 8002e8a:	223c      	movs	r2, #60	@ 0x3c
 8002e8c:	f108 010c 	add.w	r1, r8, #12
 8002e90:	4640      	mov	r0, r8
 8002e92:	f00a f9b5 	bl	800d200 <memmove>
 8002e96:	2250      	movs	r2, #80	@ 0x50
 8002e98:	f108 0158 	add.w	r1, r8, #88	@ 0x58
 8002e9c:	f108 0048 	add.w	r0, r8, #72	@ 0x48
 8002ea0:	f00a f9ae 	bl	800d200 <memmove>
 8002ea4:	220c      	movs	r2, #12
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	f108 003c 	add.w	r0, r8, #60	@ 0x3c
 8002eac:	f00a fa46 	bl	800d33c <memcpy>
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	f108 0098 	add.w	r0, r8, #152	@ 0x98
 8002eb8:	f00a fa40 	bl	800d33c <memcpy>
 8002ebc:	f8df 6630 	ldr.w	r6, [pc, #1584]	@ 80034f0 <??DataTable12_1>
 8002ec0:	f8d8 0124 	ldr.w	r0, [r8, #292]	@ 0x124
 8002ec4:	1c40      	adds	r0, r0, #1
 8002ec6:	f8c8 0124 	str.w	r0, [r8, #292]	@ 0x124
 8002eca:	2807      	cmp	r0, #7
 8002ecc:	db02      	blt.n	8002ed4 <??inv_find_synchronized_compass_angle_0>
 8002ece:	2006      	movs	r0, #6
 8002ed0:	f8c8 0124 	str.w	r0, [r8, #292]	@ 0x124

08002ed4 <??inv_find_synchronized_compass_angle_0>:
 8002ed4:	f8d8 0124 	ldr.w	r0, [r8, #292]	@ 0x124
 8002ed8:	f1c0 0706 	rsb	r7, r0, #6
 8002edc:	e025      	b.n	8002f2a <??inv_find_synchronized_compass_angle_1>

08002ede <??inv_find_synchronized_compass_angle_2>:
 8002ede:	aa00      	add	r2, sp, #0
 8002ee0:	eb08 1007 	add.w	r0, r8, r7, lsl #4
 8002ee4:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8002ee8:	4650      	mov	r0, sl
 8002eea:	f006 ff1e 	bl	8009d2a <inv_q_mult>
 8002eee:	aa00      	add	r2, sp, #0
 8002ef0:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8002ef4:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 8002ef8:	f10b 00a0 	add.w	r0, fp, #160	@ 0xa0
 8002efc:	f006 ffb6 	bl	8009e6c <inv_compass_angle>
 8002f00:	4681      	mov	r9, r0
 8002f02:	f002 fe49 	bl	8005b98 <__aeabi_f2d>
 8002f06:	4604      	mov	r4, r0
 8002f08:	460d      	mov	r5, r1
 8002f0a:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f002 fe42 	bl	8005b98 <__aeabi_f2d>
 8002f14:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f003 f8f2 	bl	8006108 <__aeabi_cdcmpeq>
 8002f24:	d200      	bcs.n	8002f28 <??inv_find_synchronized_compass_angle_3>
 8002f26:	464e      	mov	r6, r9

08002f28 <??inv_find_synchronized_compass_angle_3>:
 8002f28:	1c7f      	adds	r7, r7, #1

08002f2a <??inv_find_synchronized_compass_angle_1>:
 8002f2a:	2f06      	cmp	r7, #6
 8002f2c:	dbd7      	blt.n	8002ede <??inv_find_synchronized_compass_angle_2>
 8002f2e:	4630      	mov	r0, r6
 8002f30:	b005      	add	sp, #20
 8002f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f36 <inv_filter_correction_angle>:
 8002f36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4692      	mov	sl, r2
 8002f3e:	4699      	mov	r9, r3
 8002f40:	2500      	movs	r5, #0
 8002f42:	462f      	mov	r7, r5
 8002f44:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002f46:	2900      	cmp	r1, #0
 8002f48:	d404      	bmi.n	8002f54 <??inv_filter_correction_angle_0>
 8002f4a:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d100      	bne.n	8002f54 <??inv_filter_correction_angle_0>
 8002f52:	2501      	movs	r5, #1

08002f54 <??inv_filter_correction_angle_0>:
 8002f54:	f8df 8594 	ldr.w	r8, [pc, #1428]	@ 80034ec <??DataTable12>
 8002f58:	2224      	movs	r2, #36	@ 0x24
 8002f5a:	f108 01c0 	add.w	r1, r8, #192	@ 0xc0
 8002f5e:	f108 00bc 	add.w	r0, r8, #188	@ 0xbc
 8002f62:	f00a f94d 	bl	800d200 <memmove>
 8002f66:	f108 06b8 	add.w	r6, r8, #184	@ 0xb8
 8002f6a:	62b4      	str	r4, [r6, #40]	@ 0x28
 8002f6c:	46bb      	mov	fp, r7
 8002f6e:	e009      	b.n	8002f84 <??inv_filter_correction_angle_1>

08002f70 <??inv_filter_correction_angle_2>:
 8002f70:	eb08 008b 	add.w	r0, r8, fp, lsl #2
 8002f74:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 8002f78:	4639      	mov	r1, r7
 8002f7a:	f003 f9b3 	bl	80062e4 <__addsf3>
 8002f7e:	4607      	mov	r7, r0
 8002f80:	f10b 0b01 	add.w	fp, fp, #1

08002f84 <??inv_filter_correction_angle_1>:
 8002f84:	f1bb 0f0a 	cmp.w	fp, #10
 8002f88:	dbf2      	blt.n	8002f70 <??inv_filter_correction_angle_2>
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	f8df 1564 	ldr.w	r1, [pc, #1380]	@ 80034f4 <??DataTable12_2>
 8002f90:	f003 fb64 	bl	800665c <__aeabi_fdiv>
 8002f94:	4683      	mov	fp, r0
 8002f96:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
 8002f9a:	f1ba 0f32 	cmp.w	sl, #50	@ 0x32
 8002f9e:	db23      	blt.n	8002fe8 <??inv_filter_correction_angle_3>
 8002fa0:	20c8      	movs	r0, #200	@ 0xc8
 8002fa2:	6670      	str	r0, [r6, #100]	@ 0x64
 8002fa4:	4648      	mov	r0, r9
 8002fa6:	f003 fa51 	bl	800644c <__aeabi_i2f>
 8002faa:	9000      	str	r0, [sp, #0]
 8002fac:	4620      	mov	r0, r4
 8002fae:	f8df 1548 	ldr.w	r1, [pc, #1352]	@ 80034f8 <??DataTable12_3>
 8002fb2:	f003 fb53 	bl	800665c <__aeabi_fdiv>
 8002fb6:	9900      	ldr	r1, [sp, #0]
 8002fb8:	f003 fa9c 	bl	80064f4 <__aeabi_fmul>
 8002fbc:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 80034fc <??DataTable12_4>
 8002fc0:	f003 fb4c 	bl	800665c <__aeabi_fdiv>
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	f5ba 7f7a 	cmp.w	sl, #1000	@ 0x3e8
 8002fca:	db31      	blt.n	8003030 <??inv_filter_correction_angle_4>
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f8df 1530 	ldr.w	r1, [pc, #1328]	@ 8003500 <??DataTable12_5>
 8002fd2:	f003 fb43 	bl	800665c <__aeabi_fdiv>
 8002fd6:	9900      	ldr	r1, [sp, #0]
 8002fd8:	f003 fa8c 	bl	80064f4 <__aeabi_fmul>
 8002fdc:	f8df 151c 	ldr.w	r1, [pc, #1308]	@ 80034fc <??DataTable12_4>
 8002fe0:	f003 fb3c 	bl	800665c <__aeabi_fdiv>
 8002fe4:	4607      	mov	r7, r0
 8002fe6:	e023      	b.n	8003030 <??inv_filter_correction_angle_4>

08002fe8 <??inv_filter_correction_angle_3>:
 8002fe8:	6e70      	ldr	r0, [r6, #100]	@ 0x64
 8002fea:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002fee:	fb99 f1f1 	sdiv	r1, r9, r1
 8002ff2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ff6:	1a40      	subs	r0, r0, r1
 8002ff8:	6670      	str	r0, [r6, #100]	@ 0x64
 8002ffa:	d501      	bpl.n	8003000 <??inv_filter_correction_angle_5>
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	6670      	str	r0, [r6, #100]	@ 0x64

08003000 <??inv_filter_correction_angle_5>:
 8003000:	4620      	mov	r0, r4
 8003002:	f8df 1500 	ldr.w	r1, [pc, #1280]	@ 8003504 <??DataTable12_6>
 8003006:	f003 fb29 	bl	800665c <__aeabi_fdiv>
 800300a:	4607      	mov	r7, r0
 800300c:	4648      	mov	r0, r9
 800300e:	f003 fa1d 	bl	800644c <__aeabi_i2f>
 8003012:	4639      	mov	r1, r7
 8003014:	f003 fa6e 	bl	80064f4 <__aeabi_fmul>
 8003018:	f8df 14e0 	ldr.w	r1, [pc, #1248]	@ 80034fc <??DataTable12_4>
 800301c:	f003 fb1e 	bl	800665c <__aeabi_fdiv>
 8003020:	4607      	mov	r7, r0
 8003022:	6e70      	ldr	r0, [r6, #100]	@ 0x64
 8003024:	2800      	cmp	r0, #0
 8003026:	d103      	bne.n	8003030 <??inv_filter_correction_angle_4>
 8003028:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800302a:	2801      	cmp	r0, #1
 800302c:	d100      	bne.n	8003030 <??inv_filter_correction_angle_4>
 800302e:	2700      	movs	r7, #0

08003030 <??inv_filter_correction_angle_4>:
 8003030:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8003032:	2800      	cmp	r0, #0
 8003034:	d000      	beq.n	8003038 <??inv_filter_correction_angle_6>
 8003036:	4627      	mov	r7, r4

08003038 <??inv_filter_correction_angle_6>:
 8003038:	f8df 04cc 	ldr.w	r0, [pc, #1228]	@ 8003508 <??DataTable12_7>
 800303c:	4581      	cmp	r9, r0
 800303e:	d100      	bne.n	8003042 <??inv_filter_correction_angle_7>
 8003040:	4627      	mov	r7, r4

08003042 <??inv_filter_correction_angle_7>:
 8003042:	4638      	mov	r0, r7
 8003044:	2100      	movs	r1, #0
 8003046:	f003 fbe1 	bl	800680c <__aeabi_cfcmpeq>
 800304a:	d001      	beq.n	8003050 <??inv_filter_correction_angle_8>
 800304c:	f8c6 b030 	str.w	fp, [r6, #48]	@ 0x30

08003050 <??inv_filter_correction_angle_8>:
 8003050:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8003052:	4659      	mov	r1, fp
 8003054:	f003 f944 	bl	80062e0 <__aeabi_fsub>
 8003058:	f002 fd9e 	bl	8005b98 <__aeabi_f2d>
 800305c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003060:	f8df 24a8 	ldr.w	r2, [pc, #1192]	@ 800350c <??DataTable12_8>
 8003064:	f8df 34a8 	ldr.w	r3, [pc, #1192]	@ 8003510 <??DataTable12_9>
 8003068:	f003 f846 	bl	80060f8 <__aeabi_cdrcmple>
 800306c:	d822      	bhi.n	80030b4 <??inv_filter_correction_angle_9>
 800306e:	f8d8 00b8 	ldr.w	r0, [r8, #184]	@ 0xb8
 8003072:	2100      	movs	r1, #0
 8003074:	f003 fbca 	bl	800680c <__aeabi_cfcmpeq>
 8003078:	d11c      	bne.n	80030b4 <??inv_filter_correction_angle_9>
 800307a:	2d01      	cmp	r5, #1
 800307c:	d11a      	bne.n	80030b4 <??inv_filter_correction_angle_9>
 800307e:	20c8      	movs	r0, #200	@ 0xc8
 8003080:	6670      	str	r0, [r6, #100]	@ 0x64
 8003082:	4620      	mov	r0, r4
 8003084:	f002 fd88 	bl	8005b98 <__aeabi_f2d>
 8003088:	2200      	movs	r2, #0
 800308a:	f8df 3488 	ldr.w	r3, [pc, #1160]	@ 8003514 <??DataTable12_10>
 800308e:	f002 ff05 	bl	8005e9c <__aeabi_ddiv>
 8003092:	4604      	mov	r4, r0
 8003094:	460d      	mov	r5, r1
 8003096:	4648      	mov	r0, r9
 8003098:	f002 fd6c 	bl	8005b74 <__aeabi_i2d>
 800309c:	4622      	mov	r2, r4
 800309e:	462b      	mov	r3, r5
 80030a0:	f002 fdd2 	bl	8005c48 <__aeabi_dmul>
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8df 3470 	ldr.w	r3, [pc, #1136]	@ 8003518 <??DataTable12_11>
 80030aa:	f002 fef7 	bl	8005e9c <__aeabi_ddiv>
 80030ae:	f003 f8c3 	bl	8006238 <__aeabi_d2f>
 80030b2:	4607      	mov	r7, r0

080030b4 <??inv_filter_correction_angle_9>:
 80030b4:	4638      	mov	r0, r7
 80030b6:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080030ba <inv_perform_9x_fusion>:
 80030ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030be:	b0a7      	sub	sp, #156	@ 0x9c
 80030c0:	4604      	mov	r4, r0
 80030c2:	a80b      	add	r0, sp, #44	@ 0x2c
 80030c4:	2100      	movs	r1, #0
 80030c6:	460a      	mov	r2, r1
 80030c8:	460b      	mov	r3, r1
 80030ca:	c00e      	stmia	r0!, {r1, r2, r3}
 80030cc:	f8df 541c 	ldr.w	r5, [pc, #1052]	@ 80034ec <??DataTable12>
 80030d0:	f105 06a8 	add.w	r6, r5, #168	@ 0xa8
 80030d4:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 80030d6:	2803      	cmp	r0, #3
 80030d8:	d102      	bne.n	80030e0 <??inv_perform_9x_fusion_0>
 80030da:	2002      	movs	r0, #2
 80030dc:	67b0      	str	r0, [r6, #120]	@ 0x78
 80030de:	e17f      	b.n	80033e0 <??inv_perform_9x_fusion_1>

080030e0 <??inv_perform_9x_fusion_0>:
 80030e0:	460f      	mov	r7, r1
 80030e2:	e00d      	b.n	8003100 <??inv_perform_9x_fusion_2>

080030e4 <??inv_perform_9x_fusion_3>:
 80030e4:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80030e8:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 80030ec:	f003 f9ae 	bl	800644c <__aeabi_i2f>
 80030f0:	f04f 5142 	mov.w	r1, #813694976	@ 0x30800000
 80030f4:	f003 f9fe 	bl	80064f4 <__aeabi_fmul>
 80030f8:	a91a      	add	r1, sp, #104	@ 0x68
 80030fa:	f841 0027 	str.w	r0, [r1, r7, lsl #2]
 80030fe:	1c7f      	adds	r7, r7, #1

08003100 <??inv_perform_9x_fusion_2>:
 8003100:	2f04      	cmp	r7, #4
 8003102:	dbef      	blt.n	80030e4 <??inv_perform_9x_fusion_3>
 8003104:	a80e      	add	r0, sp, #56	@ 0x38
 8003106:	f007 fa69 	bl	800a5dc <inv_get_6axis_quaternion>
 800310a:	a808      	add	r0, sp, #32
 800310c:	f007 fa20 	bl	800a550 <inv_get_gravity>
 8003110:	f105 07a8 	add.w	r7, r5, #168	@ 0xa8
 8003114:	463b      	mov	r3, r7
 8003116:	aa08      	add	r2, sp, #32
 8003118:	a90e      	add	r1, sp, #56	@ 0x38
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff feac 	bl	8002e78 <inv_find_synchronized_compass_angle>
 8003120:	4680      	mov	r8, r0
 8003122:	f104 0018 	add.w	r0, r4, #24
 8003126:	f006 fde8 	bl	8009cfa <inv_get_gyro_sum_of_sqr>
 800312a:	0982      	lsrs	r2, r0, #6
 800312c:	f8d5 3130 	ldr.w	r3, [r5, #304]	@ 0x130
 8003130:	f8df 03d4 	ldr.w	r0, [pc, #980]	@ 8003508 <??DataTable12_7>
 8003134:	4283      	cmp	r3, r0
 8003136:	db00      	blt.n	800313a <??inv_perform_9x_fusion_4>
 8003138:	4603      	mov	r3, r0

0800313a <??inv_perform_9x_fusion_4>:
 800313a:	4641      	mov	r1, r8
 800313c:	4620      	mov	r0, r4
 800313e:	f7ff fefa 	bl	8002f36 <inv_filter_correction_angle>
 8003142:	4601      	mov	r1, r0
 8003144:	6131      	str	r1, [r6, #16]
 8003146:	6c70      	ldr	r0, [r6, #68]	@ 0x44
 8003148:	f003 f9d4 	bl	80064f4 <__aeabi_fmul>
 800314c:	6130      	str	r0, [r6, #16]
 800314e:	a812      	add	r0, sp, #72	@ 0x48
 8003150:	f007 fa44 	bl	800a5dc <inv_get_6axis_quaternion>
 8003154:	a91e      	add	r1, sp, #120	@ 0x78
 8003156:	a812      	add	r0, sp, #72	@ 0x48
 8003158:	f007 f839 	bl	800a1ce <inv_quaternion_to_rotation>
 800315c:	f105 08fc 	add.w	r8, r5, #252	@ 0xfc
 8003160:	aa0e      	add	r2, sp, #56	@ 0x38
 8003162:	a912      	add	r1, sp, #72	@ 0x48
 8003164:	4640      	mov	r0, r8
 8003166:	f006 fde0 	bl	8009d2a <inv_q_mult>
 800316a:	4641      	mov	r1, r8
 800316c:	a812      	add	r0, sp, #72	@ 0x48
 800316e:	f006 fe70 	bl	8009e52 <inv_q_invert>
 8003172:	f04f 0800 	mov.w	r8, #0
 8003176:	e019      	b.n	80031ac <??inv_perform_9x_fusion_5>

08003178 <??inv_perform_9x_fusion_6>:
 8003178:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	f10d 0c78 	add.w	ip, sp, #120	@ 0x78
 8003182:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8003186:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800318a:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
 800318e:	f8dc c004 	ldr.w	ip, [ip, #4]
 8003192:	fbcc 0103 	smlal	r0, r1, ip, r3
 8003196:	1c52      	adds	r2, r2, #1

08003198 <??inv_perform_9x_fusion_7>:
 8003198:	2a03      	cmp	r2, #3
 800319a:	dbed      	blt.n	8003178 <??inv_perform_9x_fusion_6>
 800319c:	0f80      	lsrs	r0, r0, #30
 800319e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 80031a2:	a90b      	add	r1, sp, #44	@ 0x2c
 80031a4:	f841 0028 	str.w	r0, [r1, r8, lsl #2]
 80031a8:	f108 0801 	add.w	r8, r8, #1

080031ac <??inv_perform_9x_fusion_5>:
 80031ac:	f1b8 0f03 	cmp.w	r8, #3
 80031b0:	da03      	bge.n	80031ba <??inv_perform_9x_fusion_8>
 80031b2:	2000      	movs	r0, #0
 80031b4:	4601      	mov	r1, r0
 80031b6:	4602      	mov	r2, r0
 80031b8:	e7ee      	b.n	8003198 <??inv_perform_9x_fusion_7>

080031ba <??inv_perform_9x_fusion_8>:
 80031ba:	f10d 082c 	add.w	r8, sp, #44	@ 0x2c
 80031be:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d002      	beq.n	80031ca <??inv_perform_9x_fusion_9>
 80031c4:	2000      	movs	r0, #0
 80031c6:	f8c8 0008 	str.w	r0, [r8, #8]

080031ca <??inv_perform_9x_fusion_9>:
 80031ca:	f04f 5942 	mov.w	r9, #813694976	@ 0x30800000
 80031ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80031d2:	4240      	negs	r0, r0
 80031d4:	f003 f93a 	bl	800644c <__aeabi_i2f>
 80031d8:	4649      	mov	r1, r9
 80031da:	f003 f98b 	bl	80064f4 <__aeabi_fmul>
 80031de:	4683      	mov	fp, r0
 80031e0:	f00d fe3a 	bl	8010e58 <cosf>
 80031e4:	9004      	str	r0, [sp, #16]
 80031e6:	f10d 0a10 	add.w	sl, sp, #16
 80031ea:	2000      	movs	r0, #0
 80031ec:	f8ca 0004 	str.w	r0, [sl, #4]
 80031f0:	f8ca 0008 	str.w	r0, [sl, #8]
 80031f4:	4658      	mov	r0, fp
 80031f6:	f00d fe7b 	bl	8010ef0 <sinf>
 80031fa:	f8ca 000c 	str.w	r0, [sl, #12]
 80031fe:	f8d5 0130 	ldr.w	r0, [r5, #304]	@ 0x130
 8003202:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003206:	fb90 f0f1 	sdiv	r0, r0, r1
 800320a:	f003 f91f 	bl	800644c <__aeabi_i2f>
 800320e:	4683      	mov	fp, r0
 8003210:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003214:	f003 f91a 	bl	800644c <__aeabi_i2f>
 8003218:	49c0      	ldr	r1, [pc, #768]	@ (800351c <??DataTable12_12>)
 800321a:	f003 fa1f 	bl	800665c <__aeabi_fdiv>
 800321e:	4659      	mov	r1, fp
 8003220:	f003 fa1c 	bl	800665c <__aeabi_fdiv>
 8003224:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003228:	f003 fa18 	bl	800665c <__aeabi_fdiv>
 800322c:	f003 fb28 	bl	8006880 <__aeabi_f2iz>
 8003230:	0040      	lsls	r0, r0, #1
 8003232:	f003 f90b 	bl	800644c <__aeabi_i2f>
 8003236:	49b9      	ldr	r1, [pc, #740]	@ (800351c <??DataTable12_12>)
 8003238:	f003 f95c 	bl	80064f4 <__aeabi_fmul>
 800323c:	4659      	mov	r1, fp
 800323e:	f003 f959 	bl	80064f4 <__aeabi_fmul>
 8003242:	f003 fb1d 	bl	8006880 <__aeabi_f2iz>
 8003246:	f8c8 0008 	str.w	r0, [r8, #8]
 800324a:	f003 f8ff 	bl	800644c <__aeabi_i2f>
 800324e:	4649      	mov	r1, r9
 8003250:	f003 f950 	bl	80064f4 <__aeabi_fmul>
 8003254:	4680      	mov	r8, r0
 8003256:	f00d fdff 	bl	8010e58 <cosf>
 800325a:	9000      	str	r0, [sp, #0]
 800325c:	f10d 0b00 	add.w	fp, sp, #0
 8003260:	2000      	movs	r0, #0
 8003262:	f8cb 0004 	str.w	r0, [fp, #4]
 8003266:	f8cb 0008 	str.w	r0, [fp, #8]
 800326a:	4640      	mov	r0, r8
 800326c:	f00d fe40 	bl	8010ef0 <sinf>
 8003270:	f8cb 000c 	str.w	r0, [fp, #12]
 8003274:	aa16      	add	r2, sp, #88	@ 0x58
 8003276:	a904      	add	r1, sp, #16
 8003278:	a81a      	add	r0, sp, #104	@ 0x68
 800327a:	f006 fe77 	bl	8009f6c <inv_q_multf>
 800327e:	aa04      	add	r2, sp, #16
 8003280:	a900      	add	r1, sp, #0
 8003282:	a816      	add	r0, sp, #88	@ 0x58
 8003284:	f006 fe72 	bl	8009f6c <inv_q_multf>
 8003288:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 800328c:	2801      	cmp	r0, #1
 800328e:	db16      	blt.n	80032be <??inv_perform_9x_fusion_10>
 8003290:	f04f 0800 	mov.w	r8, #0
 8003294:	e010      	b.n	80032b8 <??inv_perform_9x_fusion_11>

08003296 <??inv_perform_9x_fusion_12>:
 8003296:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800329a:	a91a      	add	r1, sp, #104	@ 0x68
 800329c:	f841 0028 	str.w	r0, [r1, r8, lsl #2]
 80032a0:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 80032a4:	f003 f926 	bl	80064f4 <__aeabi_fmul>
 80032a8:	f003 faea 	bl	8006880 <__aeabi_f2iz>
 80032ac:	eb05 0188 	add.w	r1, r5, r8, lsl #2
 80032b0:	f8c1 00a8 	str.w	r0, [r1, #168]	@ 0xa8
 80032b4:	f108 0801 	add.w	r8, r8, #1

080032b8 <??inv_perform_9x_fusion_11>:
 80032b8:	f1b8 0f04 	cmp.w	r8, #4
 80032bc:	dbeb      	blt.n	8003296 <??inv_perform_9x_fusion_12>

080032be <??inv_perform_9x_fusion_10>:
 80032be:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80032c2:	2803      	cmp	r0, #3
 80032c4:	d103      	bne.n	80032ce <??inv_perform_9x_fusion_13>
 80032c6:	f000 feab 	bl	8004020 <inv_get_magnetic_disturbance_state>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d04b      	beq.n	8003366 <??inv_perform_9x_fusion_14>

080032ce <??inv_perform_9x_fusion_13>:
 80032ce:	f8d5 00a8 	ldr.w	r0, [r5, #168]	@ 0xa8
 80032d2:	f003 f8bb 	bl	800644c <__aeabi_i2f>
 80032d6:	4649      	mov	r1, r9
 80032d8:	f003 f90c 	bl	80064f4 <__aeabi_fmul>
 80032dc:	9016      	str	r0, [sp, #88]	@ 0x58
 80032de:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 80032e2:	6870      	ldr	r0, [r6, #4]
 80032e4:	f003 f8b2 	bl	800644c <__aeabi_i2f>
 80032e8:	4649      	mov	r1, r9
 80032ea:	f003 f903 	bl	80064f4 <__aeabi_fmul>
 80032ee:	f8c8 0004 	str.w	r0, [r8, #4]
 80032f2:	68b0      	ldr	r0, [r6, #8]
 80032f4:	f003 f8aa 	bl	800644c <__aeabi_i2f>
 80032f8:	4649      	mov	r1, r9
 80032fa:	f003 f8fb 	bl	80064f4 <__aeabi_fmul>
 80032fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8003302:	68f0      	ldr	r0, [r6, #12]
 8003304:	f003 f8a2 	bl	800644c <__aeabi_i2f>
 8003308:	4649      	mov	r1, r9
 800330a:	f003 f8f3 	bl	80064f4 <__aeabi_fmul>
 800330e:	f8c8 000c 	str.w	r0, [r8, #12]
 8003312:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8003314:	2800      	cmp	r0, #0
 8003316:	d05e      	beq.n	80033d6 <??inv_perform_9x_fusion_15>
 8003318:	f04f 587c 	mov.w	r8, #1056964608	@ 0x3f000000
 800331c:	f04f 499d 	mov.w	r9, #1317011456	@ 0x4e800000
 8003320:	6930      	ldr	r0, [r6, #16]
 8003322:	4641      	mov	r1, r8
 8003324:	f003 f8e6 	bl	80064f4 <__aeabi_fmul>
 8003328:	f00d fd96 	bl	8010e58 <cosf>
 800332c:	4649      	mov	r1, r9
 800332e:	f003 f8e1 	bl	80064f4 <__aeabi_fmul>
 8003332:	f003 faa5 	bl	8006880 <__aeabi_f2iz>
 8003336:	f8c5 00a8 	str.w	r0, [r5, #168]	@ 0xa8
 800333a:	2000      	movs	r0, #0
 800333c:	6070      	str	r0, [r6, #4]
 800333e:	60b0      	str	r0, [r6, #8]
 8003340:	6930      	ldr	r0, [r6, #16]
 8003342:	4641      	mov	r1, r8
 8003344:	f003 f8d6 	bl	80064f4 <__aeabi_fmul>
 8003348:	f00d fdd2 	bl	8010ef0 <sinf>
 800334c:	4649      	mov	r1, r9
 800334e:	f003 f8d1 	bl	80064f4 <__aeabi_fmul>
 8003352:	f003 fa95 	bl	8006880 <__aeabi_f2iz>
 8003356:	60f0      	str	r0, [r6, #12]
 8003358:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 800335c:	6841      	ldr	r1, [r0, #4]
 800335e:	4638      	mov	r0, r7
 8003360:	f007 f88c 	bl	800a47c <inv_set_compass_correction>
 8003364:	e037      	b.n	80033d6 <??inv_perform_9x_fusion_15>

08003366 <??inv_perform_9x_fusion_14>:
 8003366:	f04f 587c 	mov.w	r8, #1056964608	@ 0x3f000000
 800336a:	6930      	ldr	r0, [r6, #16]
 800336c:	4641      	mov	r1, r8
 800336e:	f003 f8c1 	bl	80064f4 <__aeabi_fmul>
 8003372:	f00d fd71 	bl	8010e58 <cosf>
 8003376:	9000      	str	r0, [sp, #0]
 8003378:	2000      	movs	r0, #0
 800337a:	f8cb 0004 	str.w	r0, [fp, #4]
 800337e:	f8cb 0008 	str.w	r0, [fp, #8]
 8003382:	6930      	ldr	r0, [r6, #16]
 8003384:	4641      	mov	r1, r8
 8003386:	f003 f8b5 	bl	80064f4 <__aeabi_fmul>
 800338a:	f00d fdb1 	bl	8010ef0 <sinf>
 800338e:	f8cb 000c 	str.w	r0, [fp, #12]
 8003392:	aa04      	add	r2, sp, #16
 8003394:	a900      	add	r1, sp, #0
 8003396:	a81a      	add	r0, sp, #104	@ 0x68
 8003398:	f006 fde8 	bl	8009f6c <inv_q_multf>
 800339c:	a804      	add	r0, sp, #16
 800339e:	f006 fe6f 	bl	800a080 <inv_q_normalizef>
 80033a2:	f04f 0800 	mov.w	r8, #0
 80033a6:	e00d      	b.n	80033c4 <??inv_perform_9x_fusion_16>

080033a8 <??inv_perform_9x_fusion_17>:
 80033a8:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80033ac:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 80033b0:	f003 f8a0 	bl	80064f4 <__aeabi_fmul>
 80033b4:	f003 fa64 	bl	8006880 <__aeabi_f2iz>
 80033b8:	eb05 0188 	add.w	r1, r5, r8, lsl #2
 80033bc:	f8c1 00a8 	str.w	r0, [r1, #168]	@ 0xa8
 80033c0:	f108 0801 	add.w	r8, r8, #1

080033c4 <??inv_perform_9x_fusion_16>:
 80033c4:	f1b8 0f04 	cmp.w	r8, #4
 80033c8:	dbee      	blt.n	80033a8 <??inv_perform_9x_fusion_17>
 80033ca:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80033ce:	6841      	ldr	r1, [r0, #4]
 80033d0:	4638      	mov	r0, r7
 80033d2:	f007 f853 	bl	800a47c <inv_set_compass_correction>

080033d6 <??inv_perform_9x_fusion_15>:
 80033d6:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 80033d8:	2800      	cmp	r0, #0
 80033da:	d001      	beq.n	80033e0 <??inv_perform_9x_fusion_1>
 80033dc:	1e40      	subs	r0, r0, #1
 80033de:	67b0      	str	r0, [r6, #120]	@ 0x78

080033e0 <??inv_perform_9x_fusion_1>:
 80033e0:	b027      	add	sp, #156	@ 0x9c
 80033e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033e6 <inv_process_9x_sensor_fusion_cb>:
 80033e6:	b510      	push	{r4, lr}
 80033e8:	f100 03b0 	add.w	r3, r0, #176	@ 0xb0
 80033ec:	4a3f      	ldr	r2, [pc, #252]	@ (80034ec <??DataTable12>)
 80033ee:	f502 7190 	add.w	r1, r2, #288	@ 0x120
 80033f2:	7a1c      	ldrb	r4, [r3, #8]
 80033f4:	06e4      	lsls	r4, r4, #27
 80033f6:	d404      	bmi.n	8003402 <??inv_process_9x_sensor_fusion_cb_0>
 80033f8:	2403      	movs	r4, #3
 80033fa:	f8c2 4120 	str.w	r4, [r2, #288]	@ 0x120
 80033fe:	2400      	movs	r4, #0
 8003400:	604c      	str	r4, [r1, #4]

08003402 <??inv_process_9x_sensor_fusion_cb_0>:
 8003402:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
 8003404:	05e4      	lsls	r4, r4, #23
 8003406:	d40b      	bmi.n	8003420 <??inv_process_9x_sensor_fusion_cb_1>
 8003408:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800340a:	05e4      	lsls	r4, r4, #23
 800340c:	d502      	bpl.n	8003414 <??inv_process_9x_sensor_fusion_cb_2>
 800340e:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8003410:	05e4      	lsls	r4, r4, #23
 8003412:	d405      	bmi.n	8003420 <??inv_process_9x_sensor_fusion_cb_1>

08003414 <??inv_process_9x_sensor_fusion_cb_2>:
 8003414:	2003      	movs	r0, #3
 8003416:	f8c2 0120 	str.w	r0, [r2, #288]	@ 0x120
 800341a:	2000      	movs	r0, #0
 800341c:	6048      	str	r0, [r1, #4]
 800341e:	bd10      	pop	{r4, pc}

08003420 <??inv_process_9x_sensor_fusion_cb_1>:
 8003420:	694a      	ldr	r2, [r1, #20]
 8003422:	2a00      	cmp	r2, #0
 8003424:	d008      	beq.n	8003438 <??inv_process_9x_sensor_fusion_cb_3>
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	610a      	str	r2, [r1, #16]
 8003436:	e011      	b.n	800345c <??inv_process_9x_sensor_fusion_cb_4>

08003438 <??inv_process_9x_sensor_fusion_cb_3>:
 8003438:	f8d0 20b0 	ldr.w	r2, [r0, #176]	@ 0xb0
 800343c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003440:	429a      	cmp	r2, r3
 8003442:	db01      	blt.n	8003448 <??inv_process_9x_sensor_fusion_cb_5>
 8003444:	610a      	str	r2, [r1, #16]
 8003446:	e009      	b.n	800345c <??inv_process_9x_sensor_fusion_cb_4>

08003448 <??inv_process_9x_sensor_fusion_cb_5>:
 8003448:	68cc      	ldr	r4, [r1, #12]
 800344a:	1912      	adds	r2, r2, r4
 800344c:	60ca      	str	r2, [r1, #12]
 800344e:	429a      	cmp	r2, r3
 8003450:	da01      	bge.n	8003456 <??inv_process_9x_sensor_fusion_cb_6>
 8003452:	2000      	movs	r0, #0
 8003454:	bd10      	pop	{r4, pc}

08003456 <??inv_process_9x_sensor_fusion_cb_6>:
 8003456:	610a      	str	r2, [r1, #16]
 8003458:	2200      	movs	r2, #0
 800345a:	60ca      	str	r2, [r1, #12]

0800345c <??inv_process_9x_sensor_fusion_cb_4>:
 800345c:	f7ff fe2d 	bl	80030ba <inv_perform_9x_fusion>
 8003460:	2000      	movs	r0, #0
 8003462:	bd10      	pop	{r4, pc}

08003464 <inv_init_9x_fusion>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4c21      	ldr	r4, [pc, #132]	@ (80034ec <??DataTable12>)
 8003468:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800346c:	2100      	movs	r1, #0
 800346e:	4620      	mov	r0, r4
 8003470:	f009 fee0 	bl	800d234 <memset>
 8003474:	f104 05a8 	add.w	r5, r4, #168	@ 0xa8
 8003478:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800347c:	6568      	str	r0, [r5, #84]	@ 0x54
 800347e:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 8003482:	2100      	movs	r1, #0
 8003484:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 8003488:	f006 fff8 	bl	800a47c <inv_set_compass_correction>
 800348c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003490:	6768      	str	r0, [r5, #116]	@ 0x74
 8003492:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003496:	6468      	str	r0, [r5, #68]	@ 0x44
 8003498:	bd31      	pop	{r0, r4, r5, pc}

0800349a <inv_9x_fusion_set_mag_fb>:
 800349a:	4914      	ldr	r1, [pc, #80]	@ (80034ec <??DataTable12>)
 800349c:	f8c1 00ec 	str.w	r0, [r1, #236]	@ 0xec
 80034a0:	2000      	movs	r0, #0
 80034a2:	4770      	bx	lr

080034a4 <inv_9x_fusion_enable_jitter_reduction>:
 80034a4:	4911      	ldr	r1, [pc, #68]	@ (80034ec <??DataTable12>)
 80034a6:	f8c1 0128 	str.w	r0, [r1, #296]	@ 0x128
 80034aa:	2000      	movs	r0, #0
 80034ac:	4770      	bx	lr

080034ae <inv_9x_fusion_use_timestamps>:
 80034ae:	490f      	ldr	r1, [pc, #60]	@ (80034ec <??DataTable12>)
 80034b0:	f8c1 0134 	str.w	r0, [r1, #308]	@ 0x134
 80034b4:	2000      	movs	r0, #0
 80034b6:	4770      	bx	lr

080034b8 <inv_start_9x_sensor_fusion>:
 80034b8:	2204      	movs	r2, #4
 80034ba:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80034be:	4818      	ldr	r0, [pc, #96]	@ (8003520 <??DataTable12_13>)
 80034c0:	f006 bac4 	b.w	8009a4c <inv_register_data_cb>

080034c4 <inv_stop_9x_sensor_fusion>:
 80034c4:	4816      	ldr	r0, [pc, #88]	@ (8003520 <??DataTable12_13>)
 80034c6:	f006 bb1d 	b.w	8009b04 <inv_unregister_data_cb>

080034ca <inv_enable_9x_sensor_fusion>:
 80034ca:	b580      	push	{r7, lr}
 80034cc:	f7ff ffca 	bl	8003464 <inv_init_9x_fusion>
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7ff ffe7 	bl	80034a4 <inv_9x_fusion_enable_jitter_reduction>
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7ff ffe9 	bl	80034ae <inv_9x_fusion_use_timestamps>
 80034dc:	4811      	ldr	r0, [pc, #68]	@ (8003524 <??DataTable12_14>)
 80034de:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 80034e2:	f007 b975 	b.w	800a7d0 <inv_register_mpl_start_notification>

080034e6 <inv_disable_9x_sensor_fusion>:
 80034e6:	480f      	ldr	r0, [pc, #60]	@ (8003524 <??DataTable12_14>)
 80034e8:	f007 b94e 	b.w	800a788 <inv_unregister_mpl_start_notification>

080034ec <??DataTable12>:
 80034ec:	0968 2000                                   h.. 

080034f0 <??DataTable12_1>:
 80034f0:	2400 4974                                   .$tI

080034f4 <??DataTable12_2>:
 80034f4:	0000 4120                                   .. A

080034f8 <??DataTable12_3>:
 80034f8:	0000 4348                                   ..HC

080034fc <??DataTable12_4>:
 80034fc:	4000 459c                                   .@.E

08003500 <??DataTable12_5>:
 8003500:	0000 4248                                   ..HB

08003504 <??DataTable12_6>:
 8003504:	0000 43c8                                   ...C

08003508 <??DataTable12_7>:
 8003508:	4240 000f                                   @B..

0800350c <??DataTable12_8>:
 800350c:	8313 cac0                                   ....

08003510 <??DataTable12_9>:
 8003510:	45a1 3fb6                                   .E.?

08003514 <??DataTable12_10>:
 8003514:	0000 4079                                   ..y@

08003518 <??DataTable12_11>:
 8003518:	8800 40b3                                   ...@

0800351c <??DataTable12_12>:
 800351c:	02e1 4737                                   ..7G

08003520 <??DataTable12_13>:
 8003520:	33e7 0800                                   .3..

08003524 <??DataTable12_14>:
 8003524:	34b9 0800                                   .4..

08003528 <inv_gtc_load>:
 8003528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800352a:	2210      	movs	r2, #16
 800352c:	4601      	mov	r1, r0
 800352e:	a800      	add	r0, sp, #0
 8003530:	f009 ff04 	bl	800d33c <memcpy>
 8003534:	f8df 44fc 	ldr.w	r4, [pc, #1276]	@ 8003a34 <??DataTable18>
 8003538:	220c      	movs	r2, #12
 800353a:	a900      	add	r1, sp, #0
 800353c:	f504 70d2 	add.w	r0, r4, #420	@ 0x1a4
 8003540:	f009 fefc 	bl	800d33c <memcpy>
 8003544:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003548:	f884 01b0 	strb.w	r0, [r4, #432]	@ 0x1b0
 800354c:	2000      	movs	r0, #0
 800354e:	b004      	add	sp, #16
 8003550:	bd10      	pop	{r4, pc}

08003552 <inv_gtc_store>:
 8003552:	b530      	push	{r4, r5, lr}
 8003554:	b085      	sub	sp, #20
 8003556:	4604      	mov	r4, r0
 8003558:	f8df 54d8 	ldr.w	r5, [pc, #1240]	@ 8003a34 <??DataTable18>
 800355c:	220c      	movs	r2, #12
 800355e:	f505 71d2 	add.w	r1, r5, #420	@ 0x1a4
 8003562:	a800      	add	r0, sp, #0
 8003564:	f009 feea 	bl	800d33c <memcpy>
 8003568:	f895 01b0 	ldrb.w	r0, [r5, #432]	@ 0x1b0
 800356c:	f88d 000c 	strb.w	r0, [sp, #12]
 8003570:	2210      	movs	r2, #16
 8003572:	a900      	add	r1, sp, #0
 8003574:	4620      	mov	r0, r4
 8003576:	f009 fee1 	bl	800d33c <memcpy>
 800357a:	2000      	movs	r0, #0
 800357c:	b005      	add	sp, #20
 800357e:	bd30      	pop	{r4, r5, pc}

08003580 <inv_gtc_data_cb>:
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	b085      	sub	sp, #20
 8003584:	4604      	mov	r4, r0
 8003586:	a900      	add	r1, sp, #0
 8003588:	a802      	add	r0, sp, #8
 800358a:	f006 fa4b 	bl	8009a24 <inv_get_gyro_bias>
 800358e:	a801      	add	r0, sp, #4
 8003590:	f006 ffb0 	bl	800a4f4 <inv_get_motion_state>
 8003594:	2802      	cmp	r0, #2
 8003596:	d041      	beq.n	800361c <??inv_gtc_data_cb_0>
 8003598:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 800359c:	9900      	ldr	r1, [sp, #0]
 800359e:	1a44      	subs	r4, r0, r1
 80035a0:	f8df 0490 	ldr.w	r0, [pc, #1168]	@ 8003a34 <??DataTable18>
 80035a4:	f500 76d2 	add.w	r6, r0, #420	@ 0x1a4
 80035a8:	7b31      	ldrb	r1, [r6, #12]
 80035aa:	2900      	cmp	r1, #0
 80035ac:	d045      	beq.n	800363a <??inv_gtc_data_cb_1>
 80035ae:	2c00      	cmp	r4, #0
 80035b0:	d043      	beq.n	800363a <??inv_gtc_data_cb_1>
 80035b2:	17e5      	asrs	r5, r4, #31
 80035b4:	9f02      	ldr	r7, [sp, #8]
 80035b6:	f8d0 21a4 	ldr.w	r2, [r0, #420]	@ 0x1a4
 80035ba:	17d3      	asrs	r3, r2, #31
 80035bc:	fba2 0104 	umull	r0, r1, r2, r4
 80035c0:	fb02 1105 	mla	r1, r2, r5, r1
 80035c4:	fb03 1104 	mla	r1, r3, r4, r1
 80035c8:	0c00      	lsrs	r0, r0, #16
 80035ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80035ce:	19c0      	adds	r0, r0, r7
 80035d0:	9002      	str	r0, [sp, #8]
 80035d2:	af02      	add	r7, sp, #8
 80035d4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80035d8:	6872      	ldr	r2, [r6, #4]
 80035da:	17d3      	asrs	r3, r2, #31
 80035dc:	fba2 0104 	umull	r0, r1, r2, r4
 80035e0:	fb02 1105 	mla	r1, r2, r5, r1
 80035e4:	fb03 1104 	mla	r1, r3, r4, r1
 80035e8:	0c00      	lsrs	r0, r0, #16
 80035ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80035ee:	4460      	add	r0, ip
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80035f6:	68b0      	ldr	r0, [r6, #8]
 80035f8:	17c1      	asrs	r1, r0, #31
 80035fa:	fba0 2304 	umull	r2, r3, r0, r4
 80035fe:	fb00 3305 	mla	r3, r0, r5, r3
 8003602:	fb01 3304 	mla	r3, r1, r4, r3
 8003606:	0c12      	lsrs	r2, r2, #16
 8003608:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800360c:	eb02 000c 	add.w	r0, r2, ip
 8003610:	60b8      	str	r0, [r7, #8]
 8003612:	2103      	movs	r1, #3
 8003614:	a802      	add	r0, sp, #8
 8003616:	f006 f9c7 	bl	80099a8 <inv_set_gyro_bias>
 800361a:	e00e      	b.n	800363a <??inv_gtc_data_cb_1>

0800361c <??inv_gtc_data_cb_0>:
 800361c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800361e:	2803      	cmp	r0, #3
 8003620:	d10b      	bne.n	800363a <??inv_gtc_data_cb_1>
 8003622:	f006 f9f3 	bl	8009a0c <inv_get_gyro_bias_tc_set>
 8003626:	2800      	cmp	r0, #0
 8003628:	d007      	beq.n	800363a <??inv_gtc_data_cb_1>
 800362a:	9900      	ldr	r1, [sp, #0]
 800362c:	a802      	add	r0, sp, #8
 800362e:	f000 f81e 	bl	800366e <inv_gtc_add_data>
 8003632:	2800      	cmp	r0, #0
 8003634:	d101      	bne.n	800363a <??inv_gtc_data_cb_1>
 8003636:	f000 f86f 	bl	8003718 <inv_gtc_compute_slope>

0800363a <??inv_gtc_data_cb_1>:
 800363a:	2000      	movs	r0, #0
 800363c:	b005      	add	sp, #20
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003640 <inv_gtc_get_bin>:
 8003640:	b410      	push	{r4}
 8003642:	f8df 23f0 	ldr.w	r2, [pc, #1008]	@ 8003a34 <??DataTable18>
 8003646:	f8d2 31b4 	ldr.w	r3, [r2, #436]	@ 0x1b4
 800364a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	2405      	movs	r4, #5
 8003652:	fb92 f2f4 	sdiv	r2, r2, r4
 8003656:	1ac0      	subs	r0, r0, r3
 8003658:	fb90 f0f2 	sdiv	r0, r0, r2
 800365c:	7008      	strb	r0, [r1, #0]
 800365e:	7808      	ldrb	r0, [r1, #0]
 8003660:	2805      	cmp	r0, #5
 8003662:	db01      	blt.n	8003668 <??inv_gtc_get_bin_0>
 8003664:	2020      	movs	r0, #32
 8003666:	e000      	b.n	800366a <??inv_gtc_get_bin_1>

08003668 <??inv_gtc_get_bin_0>:
 8003668:	2000      	movs	r0, #0

0800366a <??inv_gtc_get_bin_1>:
 800366a:	bc10      	pop	{r4}
 800366c:	4770      	bx	lr

0800366e <inv_gtc_add_data>:
 800366e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	4604      	mov	r4, r0
 8003676:	460d      	mov	r5, r1
 8003678:	a900      	add	r1, sp, #0
 800367a:	4628      	mov	r0, r5
 800367c:	f7ff ffe0 	bl	8003640 <inv_gtc_get_bin>
 8003680:	2800      	cmp	r0, #0
 8003682:	d001      	beq.n	8003688 <??inv_gtc_add_data_0>
 8003684:	2020      	movs	r0, #32
 8003686:	e045      	b.n	8003714 <??inv_gtc_add_data_1>

08003688 <??inv_gtc_add_data_0>:
 8003688:	2654      	movs	r6, #84	@ 0x54
 800368a:	f8df 73a8 	ldr.w	r7, [pc, #936]	@ 8003a34 <??DataTable18>
 800368e:	f89d 0000 	ldrb.w	r0, [sp]
 8003692:	fb16 7000 	smlabb	r0, r6, r0, r7
 8003696:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 800369a:	4688      	mov	r8, r1
 800369c:	f1b8 0f05 	cmp.w	r8, #5
 80036a0:	d126      	bne.n	80036f0 <??inv_gtc_add_data_2>
 80036a2:	2210      	movs	r2, #16
 80036a4:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80036a8:	303c      	adds	r0, #60	@ 0x3c
 80036aa:	f009 fda9 	bl	800d200 <memmove>
 80036ae:	f89d 0000 	ldrb.w	r0, [sp]
 80036b2:	fb16 7000 	smlabb	r0, r6, r0, r7
 80036b6:	2210      	movs	r2, #16
 80036b8:	1d01      	adds	r1, r0, #4
 80036ba:	f009 fda1 	bl	800d200 <memmove>
 80036be:	f89d 0000 	ldrb.w	r0, [sp]
 80036c2:	fb16 7000 	smlabb	r0, r6, r0, r7
 80036c6:	2210      	movs	r2, #16
 80036c8:	f100 0118 	add.w	r1, r0, #24
 80036cc:	3014      	adds	r0, #20
 80036ce:	f009 fd97 	bl	800d200 <memmove>
 80036d2:	f89d 0000 	ldrb.w	r0, [sp]
 80036d6:	fb16 7000 	smlabb	r0, r6, r0, r7
 80036da:	2210      	movs	r2, #16
 80036dc:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 80036e0:	3028      	adds	r0, #40	@ 0x28
 80036e2:	f009 fd8d 	bl	800d200 <memmove>
 80036e6:	f1a8 0801 	sub.w	r8, r8, #1
 80036ea:	fa5f f888 	uxtb.w	r8, r8
 80036ee:	e002      	b.n	80036f6 <??inv_gtc_add_data_3>

080036f0 <??inv_gtc_add_data_2>:
 80036f0:	1c49      	adds	r1, r1, #1
 80036f2:	f880 1050 	strb.w	r1, [r0, #80]	@ 0x50

080036f6 <??inv_gtc_add_data_3>:
 80036f6:	f89d 0000 	ldrb.w	r0, [sp]
 80036fa:	fb16 7000 	smlabb	r0, r6, r0, r7
 80036fe:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8003702:	63cd      	str	r5, [r1, #60]	@ 0x3c
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	f840 2028 	str.w	r2, [r0, r8, lsl #2]
 800370a:	6860      	ldr	r0, [r4, #4]
 800370c:	6148      	str	r0, [r1, #20]
 800370e:	68a0      	ldr	r0, [r4, #8]
 8003710:	6288      	str	r0, [r1, #40]	@ 0x28
 8003712:	2000      	movs	r0, #0

08003714 <??inv_gtc_add_data_1>:
 8003714:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08003718 <inv_gtc_compute_slope>:
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b093      	sub	sp, #76	@ 0x4c
 800371e:	2000      	movs	r0, #0
 8003720:	f88d 0010 	strb.w	r0, [sp, #16]
 8003724:	a80c      	add	r0, sp, #48	@ 0x30
 8003726:	2118      	movs	r1, #24
 8003728:	f009 fe05 	bl	800d336 <__aeabi_memclr>
 800372c:	2000      	movs	r0, #0
 800372e:	9001      	str	r0, [sp, #4]
 8003730:	a806      	add	r0, sp, #24
 8003732:	2118      	movs	r1, #24
 8003734:	f009 fdff 	bl	800d336 <__aeabi_memclr>
 8003738:	2000      	movs	r0, #0
 800373a:	4601      	mov	r1, r0
 800373c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003740:	48bd      	ldr	r0, [pc, #756]	@ (8003a38 <??DataTable18_1>)
 8003742:	9000      	str	r0, [sp, #0]
 8003744:	7c00      	ldrb	r0, [r0, #16]
 8003746:	2801      	cmp	r0, #1
 8003748:	f040 80df 	bne.w	800390a <??inv_gtc_compute_slope_0>
 800374c:	9800      	ldr	r0, [sp, #0]
 800374e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8003752:	6845      	ldr	r5, [r0, #4]
 8003754:	460c      	mov	r4, r1
 8003756:	e000      	b.n	800375a <??inv_gtc_compute_slope_1>

08003758 <??inv_gtc_compute_slope_2>:
 8003758:	1c64      	adds	r4, r4, #1

0800375a <??inv_gtc_compute_slope_1>:
 800375a:	2c05      	cmp	r4, #5
 800375c:	f280 8084 	bge.w	8003868 <??inv_gtc_compute_slope_3>
 8003760:	2054      	movs	r0, #84	@ 0x54
 8003762:	49b4      	ldr	r1, [pc, #720]	@ (8003a34 <??DataTable18>)
 8003764:	fb00 1904 	mla	r9, r0, r4, r1
 8003768:	f899 0050 	ldrb.w	r0, [r9, #80]	@ 0x50
 800376c:	2800      	cmp	r0, #0
 800376e:	d0f3      	beq.n	8003758 <??inv_gtc_compute_slope_2>
 8003770:	f04f 0c00 	mov.w	ip, #0
 8003774:	e004      	b.n	8003780 <??inv_gtc_compute_slope_4>

08003776 <??inv_gtc_compute_slope_5>:
 8003776:	4295      	cmp	r5, r2
 8003778:	da00      	bge.n	800377c <??inv_gtc_compute_slope_6>
 800377a:	4615      	mov	r5, r2

0800377c <??inv_gtc_compute_slope_6>:
 800377c:	f10c 0c01 	add.w	ip, ip, #1

08003780 <??inv_gtc_compute_slope_4>:
 8003780:	f899 0050 	ldrb.w	r0, [r9, #80]	@ 0x50
 8003784:	4584      	cmp	ip, r0
 8003786:	dae7      	bge.n	8003758 <??inv_gtc_compute_slope_2>
 8003788:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800378c:	1c41      	adds	r1, r0, #1
 800378e:	f88d 1010 	strb.w	r1, [sp, #16]
 8003792:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003796:	f859 002c 	ldr.w	r0, [r9, ip, lsl #2]
 800379a:	17c1      	asrs	r1, r0, #31
 800379c:	1810      	adds	r0, r2, r0
 800379e:	4159      	adcs	r1, r3
 80037a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80037a4:	eb09 068c 	add.w	r6, r9, ip, lsl #2
 80037a8:	af0c      	add	r7, sp, #48	@ 0x30
 80037aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ae:	6970      	ldr	r0, [r6, #20]
 80037b0:	17c1      	asrs	r1, r0, #31
 80037b2:	1810      	adds	r0, r2, r0
 80037b4:	4159      	adcs	r1, r3
 80037b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80037ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037be:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80037c0:	17c1      	asrs	r1, r0, #31
 80037c2:	1810      	adds	r0, r2, r0
 80037c4:	4159      	adcs	r1, r3
 80037c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80037ca:	9801      	ldr	r0, [sp, #4]
 80037cc:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80037ce:	1809      	adds	r1, r1, r0
 80037d0:	9101      	str	r1, [sp, #4]
 80037d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037d6:	f859 002c 	ldr.w	r0, [r9, ip, lsl #2]
 80037da:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80037dc:	fb81 0100 	smull	r0, r1, r1, r0
 80037e0:	0c00      	lsrs	r0, r0, #16
 80037e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80037e6:	1810      	adds	r0, r2, r0
 80037e8:	eb53 4121 	adcs.w	r1, r3, r1, asr #16
 80037ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80037f0:	f10d 0e18 	add.w	lr, sp, #24
 80037f4:	e9de 2302 	ldrd	r2, r3, [lr, #8]
 80037f8:	6970      	ldr	r0, [r6, #20]
 80037fa:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80037fc:	fb81 0100 	smull	r0, r1, r1, r0
 8003800:	0c00      	lsrs	r0, r0, #16
 8003802:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003806:	1810      	adds	r0, r2, r0
 8003808:	eb53 4121 	adcs.w	r1, r3, r1, asr #16
 800380c:	e9ce 0102 	strd	r0, r1, [lr, #8]
 8003810:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8003812:	17d3      	asrs	r3, r2, #31
 8003814:	e9de 0104 	ldrd	r0, r1, [lr, #16]
 8003818:	4682      	mov	sl, r0
 800381a:	468b      	mov	fp, r1
 800381c:	6ab6      	ldr	r6, [r6, #40]	@ 0x28
 800381e:	17f7      	asrs	r7, r6, #31
 8003820:	fba2 0106 	umull	r0, r1, r2, r6
 8003824:	fb02 1107 	mla	r1, r2, r7, r1
 8003828:	fb03 1106 	mla	r1, r3, r6, r1
 800382c:	0c00      	lsrs	r0, r0, #16
 800382e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003832:	4656      	mov	r6, sl
 8003834:	465f      	mov	r7, fp
 8003836:	1830      	adds	r0, r6, r0
 8003838:	eb57 4121 	adcs.w	r1, r7, r1, asr #16
 800383c:	e9ce 0104 	strd	r0, r1, [lr, #16]
 8003840:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003844:	fba2 0102 	umull	r0, r1, r2, r2
 8003848:	fb02 1103 	mla	r1, r2, r3, r1
 800384c:	fb03 1102 	mla	r1, r3, r2, r1
 8003850:	0c00      	lsrs	r0, r0, #16
 8003852:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003856:	1830      	adds	r0, r6, r0
 8003858:	eb57 4121 	adcs.w	r1, r7, r1, asr #16
 800385c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003860:	4542      	cmp	r2, r8
 8003862:	da88      	bge.n	8003776 <??inv_gtc_compute_slope_5>
 8003864:	4690      	mov	r8, r2
 8003866:	e789      	b.n	800377c <??inv_gtc_compute_slope_6>

08003868 <??inv_gtc_compute_slope_3>:
 8003868:	eba5 0008 	sub.w	r0, r5, r8
 800386c:	9900      	ldr	r1, [sp, #0]
 800386e:	68c9      	ldr	r1, [r1, #12]
 8003870:	4288      	cmp	r0, r1
 8003872:	db4a      	blt.n	800390a <??inv_gtc_compute_slope_0>
 8003874:	2400      	movs	r4, #0
 8003876:	e042      	b.n	80038fe <??inv_gtc_compute_slope_7>

08003878 <??inv_gtc_compute_slope_8>:
 8003878:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800387c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003880:	fba0 2306 	umull	r2, r3, r0, r6
 8003884:	fb01 3306 	mla	r3, r1, r6, r3
 8003888:	9801      	ldr	r0, [sp, #4]
 800388a:	17c1      	asrs	r1, r0, #31
 800388c:	fba0 8900 	umull	r8, r9, r0, r0
 8003890:	fb00 9901 	mla	r9, r0, r1, r9
 8003894:	fb01 9900 	mla	r9, r1, r0, r9
 8003898:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800389c:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
 80038a0:	ebb2 0208 	subs.w	r2, r2, r8
 80038a4:	eb73 4329 	sbcs.w	r3, r3, r9, asr #16
 80038a8:	d101      	bne.n	80038ae <??inv_gtc_compute_slope_9>
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d026      	beq.n	80038fc <??inv_gtc_compute_slope_10>

080038ae <??inv_gtc_compute_slope_9>:
 80038ae:	ad06      	add	r5, sp, #24
 80038b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80038b4:	e9d5 ab00 	ldrd	sl, fp, [r5]
 80038b8:	fbaa 8906 	umull	r8, r9, sl, r6
 80038bc:	fb0b 9906 	mla	r9, fp, r6, r9
 80038c0:	ad0c      	add	r5, sp, #48	@ 0x30
 80038c2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80038c6:	e9d5 6700 	ldrd	r6, r7, [r5]
 80038ca:	fba0 ab06 	umull	sl, fp, r0, r6
 80038ce:	fb00 bb07 	mla	fp, r0, r7, fp
 80038d2:	fb01 bb06 	mla	fp, r1, r6, fp
 80038d6:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 80038da:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80038de:	ebb8 000a 	subs.w	r0, r8, sl
 80038e2:	eb69 412b 	sbc.w	r1, r9, fp, asr #16
 80038e6:	0409      	lsls	r1, r1, #16
 80038e8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80038ec:	0400      	lsls	r0, r0, #16
 80038ee:	f002 ffed 	bl	80068cc <__aeabi_ldivmod>
 80038f2:	4950      	ldr	r1, [pc, #320]	@ (8003a34 <??DataTable18>)
 80038f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80038f8:	f8c1 01a4 	str.w	r0, [r1, #420]	@ 0x1a4

080038fc <??inv_gtc_compute_slope_10>:
 80038fc:	1c64      	adds	r4, r4, #1

080038fe <??inv_gtc_compute_slope_7>:
 80038fe:	2c03      	cmp	r4, #3
 8003900:	dbba      	blt.n	8003878 <??inv_gtc_compute_slope_8>
 8003902:	2001      	movs	r0, #1
 8003904:	494b      	ldr	r1, [pc, #300]	@ (8003a34 <??DataTable18>)
 8003906:	f881 01b0 	strb.w	r0, [r1, #432]	@ 0x1b0

0800390a <??inv_gtc_compute_slope_0>:
 800390a:	2000      	movs	r0, #0
 800390c:	b013      	add	sp, #76	@ 0x4c
 800390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003912 <inv_init_gyro_ts>:
 8003912:	b510      	push	{r4, lr}
 8003914:	4c47      	ldr	r4, [pc, #284]	@ (8003a34 <??DataTable18>)
 8003916:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800391a:	2100      	movs	r1, #0
 800391c:	4620      	mov	r0, r4
 800391e:	f009 fc89 	bl	800d234 <memset>
 8003922:	4846      	ldr	r0, [pc, #280]	@ (8003a3c <??DataTable18_2>)
 8003924:	f8c4 01b4 	str.w	r0, [r4, #436]	@ 0x1b4
 8003928:	f504 70da 	add.w	r0, r4, #436	@ 0x1b4
 800392c:	f44f 01aa 	mov.w	r1, #5570560	@ 0x550000
 8003930:	6041      	str	r1, [r0, #4]
 8003932:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8003936:	6081      	str	r1, [r0, #8]
 8003938:	2101      	movs	r1, #1
 800393a:	7301      	strb	r1, [r0, #12]
 800393c:	2000      	movs	r0, #0
 800393e:	bd10      	pop	{r4, pc}

08003940 <inv_set_gtc_max_temp>:
 8003940:	493c      	ldr	r1, [pc, #240]	@ (8003a34 <??DataTable18>)
 8003942:	f8c1 01b8 	str.w	r0, [r1, #440]	@ 0x1b8
 8003946:	2000      	movs	r0, #0
 8003948:	4770      	bx	lr

0800394a <inv_set_gtc_min_temp>:
 800394a:	493a      	ldr	r1, [pc, #232]	@ (8003a34 <??DataTable18>)
 800394c:	f8c1 01b4 	str.w	r0, [r1, #436]	@ 0x1b4
 8003950:	2000      	movs	r0, #0
 8003952:	4770      	bx	lr

08003954 <inv_set_gtc_min_diff>:
 8003954:	4937      	ldr	r1, [pc, #220]	@ (8003a34 <??DataTable18>)
 8003956:	f8c1 01bc 	str.w	r0, [r1, #444]	@ 0x1bc
 800395a:	2000      	movs	r0, #0
 800395c:	4770      	bx	lr

0800395e <inv_get_gyro_ts>:
 800395e:	2800      	cmp	r0, #0
 8003960:	d101      	bne.n	8003966 <??inv_get_gyro_ts_0>
 8003962:	2016      	movs	r0, #22
 8003964:	4770      	bx	lr

08003966 <??inv_get_gyro_ts_0>:
 8003966:	4933      	ldr	r1, [pc, #204]	@ (8003a34 <??DataTable18>)
 8003968:	f8d1 21a4 	ldr.w	r2, [r1, #420]	@ 0x1a4
 800396c:	6002      	str	r2, [r0, #0]
 800396e:	f501 71d2 	add.w	r1, r1, #420	@ 0x1a4
 8003972:	684a      	ldr	r2, [r1, #4]
 8003974:	6042      	str	r2, [r0, #4]
 8003976:	6889      	ldr	r1, [r1, #8]
 8003978:	6081      	str	r1, [r0, #8]
 800397a:	2000      	movs	r0, #0
 800397c:	4770      	bx	lr

0800397e <inv_set_gyro_ts>:
 800397e:	2024      	movs	r0, #36	@ 0x24
 8003980:	4770      	bx	lr

08003982 <inv_set_gtc_order>:
 8003982:	2800      	cmp	r0, #0
 8003984:	d101      	bne.n	800398a <??inv_set_gtc_order_0>
 8003986:	2024      	movs	r0, #36	@ 0x24
 8003988:	4770      	bx	lr

0800398a <??inv_set_gtc_order_0>:
 800398a:	492a      	ldr	r1, [pc, #168]	@ (8003a34 <??DataTable18>)
 800398c:	f881 01c0 	strb.w	r0, [r1, #448]	@ 0x1c0
 8003990:	2000      	movs	r0, #0
 8003992:	4770      	bx	lr

08003994 <inv_print_gtc_data>:
 8003994:	4827      	ldr	r0, [pc, #156]	@ (8003a34 <??DataTable18>)
 8003996:	f890 11b1 	ldrb.w	r1, [r0, #433]	@ 0x1b1
 800399a:	2900      	cmp	r1, #0
 800399c:	d010      	beq.n	80039c0 <??inv_print_gtc_data_0>
 800399e:	2100      	movs	r1, #0
 80039a0:	e003      	b.n	80039aa <??inv_print_gtc_data_1>

080039a2 <??inv_print_gtc_data_2>:
 80039a2:	1c52      	adds	r2, r2, #1

080039a4 <??inv_print_gtc_data_3>:
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dbfc      	blt.n	80039a2 <??inv_print_gtc_data_2>

080039a8 <??inv_print_gtc_data_4>:
 80039a8:	1c49      	adds	r1, r1, #1

080039aa <??inv_print_gtc_data_1>:
 80039aa:	2905      	cmp	r1, #5
 80039ac:	da08      	bge.n	80039c0 <??inv_print_gtc_data_0>
 80039ae:	2254      	movs	r2, #84	@ 0x54
 80039b0:	fb02 0201 	mla	r2, r2, r1, r0
 80039b4:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f5      	beq.n	80039a8 <??inv_print_gtc_data_4>
 80039bc:	2200      	movs	r2, #0
 80039be:	e7f1      	b.n	80039a4 <??inv_print_gtc_data_3>

080039c0 <??inv_print_gtc_data_0>:
 80039c0:	2000      	movs	r0, #0
 80039c2:	4770      	bx	lr

080039c4 <inv_start_gyro_tc>:
 80039c4:	2208      	movs	r2, #8
 80039c6:	2196      	movs	r1, #150	@ 0x96
 80039c8:	481d      	ldr	r0, [pc, #116]	@ (8003a40 <??DataTable18_3>)
 80039ca:	f006 b83f 	b.w	8009a4c <inv_register_data_cb>

080039ce <inv_stop_gyro_tc>:
 80039ce:	481c      	ldr	r0, [pc, #112]	@ (8003a40 <??DataTable18_3>)
 80039d0:	f006 b898 	b.w	8009b04 <inv_unregister_data_cb>

080039d4 <inv_enable_gyro_tc>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	f7ff ff9c 	bl	8003912 <inv_init_gyro_ts>
 80039da:	f44f 739a 	mov.w	r3, #308	@ 0x134
 80039de:	2210      	movs	r2, #16
 80039e0:	4918      	ldr	r1, [pc, #96]	@ (8003a44 <??DataTable18_4>)
 80039e2:	4819      	ldr	r0, [pc, #100]	@ (8003a48 <??DataTable18_5>)
 80039e4:	f006 ff28 	bl	800a838 <inv_register_load_store>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d001      	beq.n	80039f0 <??inv_enable_gyro_tc_0>
 80039ec:	2001      	movs	r0, #1
 80039ee:	bd02      	pop	{r1, pc}

080039f0 <??inv_enable_gyro_tc_0>:
 80039f0:	4816      	ldr	r0, [pc, #88]	@ (8003a4c <??DataTable18_6>)
 80039f2:	f006 feed 	bl	800a7d0 <inv_register_mpl_start_notification>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d001      	beq.n	80039fe <??inv_enable_gyro_tc_1>
 80039fa:	2001      	movs	r0, #1
 80039fc:	bd02      	pop	{r1, pc}

080039fe <??inv_enable_gyro_tc_1>:
 80039fe:	2001      	movs	r0, #1
 8003a00:	490c      	ldr	r1, [pc, #48]	@ (8003a34 <??DataTable18>)
 8003a02:	f881 01b1 	strb.w	r0, [r1, #433]	@ 0x1b1
 8003a06:	2000      	movs	r0, #0
 8003a08:	bd02      	pop	{r1, pc}

08003a0a <inv_disable_gyro_tc>:
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	4c09      	ldr	r4, [pc, #36]	@ (8003a34 <??DataTable18>)
 8003a0e:	f894 01b1 	ldrb.w	r0, [r4, #433]	@ 0x1b1
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d101      	bne.n	8003a1a <??inv_disable_gyro_tc_0>
 8003a16:	2000      	movs	r0, #0
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <??inv_disable_gyro_tc_0>:
 8003a1a:	f7ff ffd8 	bl	80039ce <inv_stop_gyro_tc>
 8003a1e:	480b      	ldr	r0, [pc, #44]	@ (8003a4c <??DataTable18_6>)
 8003a20:	f006 feb2 	bl	800a788 <inv_unregister_mpl_start_notification>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d001      	beq.n	8003a2c <??inv_disable_gyro_tc_1>
 8003a28:	2001      	movs	r0, #1
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <??inv_disable_gyro_tc_1>:
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f884 01b1 	strb.w	r0, [r4, #433]	@ 0x1b1
 8003a32:	bd10      	pop	{r4, pc}

08003a34 <??DataTable18>:
 8003a34:	0aa0 2000                                   ... 

08003a38 <??DataTable18_1>:
 8003a38:	0c50 2000                                   P.. 

08003a3c <??DataTable18_2>:
 8003a3c:	0000 ffd8                                   ....

08003a40 <??DataTable18_3>:
 8003a40:	3581 0800                                   .5..

08003a44 <??DataTable18_4>:
 8003a44:	3553 0800                                   S5..

08003a48 <??DataTable18_5>:
 8003a48:	3529 0800                                   )5..

08003a4c <??DataTable18_6>:
 8003a4c:	39c5 0800                                   .9..

08003a50 <inv_delta_time_ms>:
 8003a50:	1a40      	subs	r0, r0, r1
 8003a52:	4770      	bx	lr

08003a54 <inv_set_magnetic_disturbance>:
 8003a54:	2801      	cmp	r0, #1
 8003a56:	db06      	blt.n	8003a66 <??inv_set_magnetic_disturbance_0>
 8003a58:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8004028 <??DataTable10>
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
 8003a62:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80

08003a66 <??inv_set_magnetic_disturbance_0>:
 8003a66:	2000      	movs	r0, #0
 8003a68:	4770      	bx	lr

08003a6a <inv_init_magnetic_disturbance>:
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	f8df 45b8 	ldr.w	r4, [pc, #1464]	@ 8004028 <??DataTable10>
 8003a70:	22b8      	movs	r2, #184	@ 0xb8
 8003a72:	2100      	movs	r1, #0
 8003a74:	4620      	mov	r0, r4
 8003a76:	f009 fbdd 	bl	800d234 <memset>
 8003a7a:	f8df 05b0 	ldr.w	r0, [pc, #1456]	@ 800402c <??DataTable10_1>
 8003a7e:	60e0      	str	r0, [r4, #12]
 8003a80:	f8df 05ac 	ldr.w	r0, [pc, #1452]	@ 8004030 <??DataTable10_2>
 8003a84:	60a0      	str	r0, [r4, #8]
 8003a86:	f8df 05ac 	ldr.w	r0, [pc, #1452]	@ 8004034 <??DataTable10_3>
 8003a8a:	6020      	str	r0, [r4, #0]
 8003a8c:	f8df 05a8 	ldr.w	r0, [pc, #1448]	@ 8004038 <??DataTable10_4>
 8003a90:	6060      	str	r0, [r4, #4]
 8003a92:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a96:	6660      	str	r0, [r4, #100]	@ 0x64
 8003a98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a9c:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8003a9e:	f8df 059c 	ldr.w	r0, [pc, #1436]	@ 800403c <??DataTable10_5>
 8003aa2:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	bd10      	pop	{r4, pc}

08003aaa <inv_start_magnetic_disturbance>:
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003ab0:	f20f 2041 	addw	r0, pc, #577	@ 0x241
 8003ab4:	f005 bfca 	b.w	8009a4c <inv_register_data_cb>

08003ab8 <inv_stop_magnetic_disturbance>:
 8003ab8:	f20f 2039 	addw	r0, pc, #569	@ 0x239
 8003abc:	f006 b822 	b.w	8009b04 <inv_unregister_data_cb>

08003ac0 <inv_enable_magnetic_disturbance>:
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	f7ff ffd2 	bl	8003a6a <inv_init_magnetic_disturbance>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d10c      	bne.n	8003ae4 <??inv_enable_magnetic_disturbance_0>
 8003aca:	f000 f815 	bl	8003af8 <inv_disable_dip_tracking>
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f8df 1554 	ldr.w	r1, [pc, #1364]	@ 8004028 <??DataTable10>
 8003ad4:	f8c1 0088 	str.w	r0, [r1, #136]	@ 0x88
 8003ad8:	f8df 0564 	ldr.w	r0, [pc, #1380]	@ 8004040 <??DataTable10_6>
 8003adc:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8003ae0:	f006 be76 	b.w	800a7d0 <inv_register_mpl_start_notification>

08003ae4 <??inv_enable_magnetic_disturbance_0>:
 8003ae4:	bd02      	pop	{r1, pc}

08003ae6 <inv_disable_magnetic_disturbance>:
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	f7ff ffe6 	bl	8003ab8 <inv_stop_magnetic_disturbance>
 8003aec:	f20f 2005 	addw	r0, pc, #517	@ 0x205
 8003af0:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8003af4:	f006 b806 	b.w	8009b04 <inv_unregister_data_cb>

08003af8 <inv_disable_dip_tracking>:
 8003af8:	2000      	movs	r0, #0
 8003afa:	f8df 152c 	ldr.w	r1, [pc, #1324]	@ 8004028 <??DataTable10>
 8003afe:	f8c1 008c 	str.w	r0, [r1, #140]	@ 0x8c
 8003b02:	4770      	bx	lr

08003b04 <inv_enable_dip_tracking>:
 8003b04:	2001      	movs	r0, #1
 8003b06:	f8df 1520 	ldr.w	r1, [pc, #1312]	@ 8004028 <??DataTable10>
 8003b0a:	f8c1 008c 	str.w	r0, [r1, #140]	@ 0x8c
 8003b0e:	2000      	movs	r0, #0
 8003b10:	4770      	bx	lr

08003b12 <inv_track_dip_angle>:
 8003b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b14:	460e      	mov	r6, r1
 8003b16:	f8df 1510 	ldr.w	r1, [pc, #1296]	@ 8004028 <??DataTable10>
 8003b1a:	f101 078c 	add.w	r7, r1, #140	@ 0x8c
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d109      	bne.n	8003b36 <??inv_track_dip_angle_0>
 8003b22:	617e      	str	r6, [r7, #20]
 8003b24:	61be      	str	r6, [r7, #24]
 8003b26:	2000      	movs	r0, #0
 8003b28:	61f8      	str	r0, [r7, #28]
 8003b2a:	60b8      	str	r0, [r7, #8]
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	2000      	movs	r0, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003b36 <??inv_track_dip_angle_0>:
 8003b36:	2801      	cmp	r0, #1
 8003b38:	d12b      	bne.n	8003b92 <??inv_track_dip_angle_1>
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	f002 fbcf 	bl	80062e0 <__aeabi_fsub>
 8003b42:	f002 f829 	bl	8005b98 <__aeabi_f2d>
 8003b46:	4604      	mov	r4, r0
 8003b48:	460d      	mov	r5, r1
 8003b4a:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8003b4e:	6938      	ldr	r0, [r7, #16]
 8003b50:	f002 f822 	bl	8005b98 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f002 fad4 	bl	8006108 <__aeabi_cdcmpeq>
 8003b60:	d208      	bcs.n	8003b74 <??inv_track_dip_angle_2>
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	1c40      	adds	r0, r0, #1
 8003b66:	60b8      	str	r0, [r7, #8]
 8003b68:	69b8      	ldr	r0, [r7, #24]
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	f002 fbba 	bl	80062e4 <__addsf3>
 8003b70:	61b8      	str	r0, [r7, #24]
 8003b72:	e002      	b.n	8003b7a <??inv_track_dip_angle_3>

08003b74 <??inv_track_dip_angle_2>:
 8003b74:	2000      	movs	r0, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	60b8      	str	r0, [r7, #8]

08003b7a <??inv_track_dip_angle_3>:
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	2832      	cmp	r0, #50	@ 0x32
 8003b7e:	db0e      	blt.n	8003b9e <??inv_track_dip_angle_4>
 8003b80:	2002      	movs	r0, #2
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	69b8      	ldr	r0, [r7, #24]
 8003b86:	f8df 14bc 	ldr.w	r1, [pc, #1212]	@ 8004044 <??DataTable10_7>
 8003b8a:	f002 fd67 	bl	800665c <__aeabi_fdiv>
 8003b8e:	61f8      	str	r0, [r7, #28]
 8003b90:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003b92 <??inv_track_dip_angle_1>:
 8003b92:	2001      	movs	r0, #1
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	2000      	movs	r0, #0
 8003b98:	f8c1 008c 	str.w	r0, [r1, #140]	@ 0x8c
 8003b9c:	6078      	str	r0, [r7, #4]

08003b9e <??inv_track_dip_angle_4>:
 8003b9e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003ba0 <ComputeAngleVelocity>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	b08e      	sub	sp, #56	@ 0x38
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	a904      	add	r1, sp, #16
 8003bac:	f006 fb0f 	bl	800a1ce <inv_quaternion_to_rotation>
 8003bb0:	aa00      	add	r2, sp, #0
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f006 f8b8 	bl	8009d2a <inv_q_mult>
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f006 f948 	bl	8009e52 <inv_q_invert>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	e014      	b.n	8003bf0 <??ComputeAngleVelocity_0>

08003bc6 <??ComputeAngleVelocity_1>:
 8003bc6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8003bca:	195d      	adds	r5, r3, r5
 8003bcc:	ae04      	add	r6, sp, #16
 8003bce:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8003bd2:	ae00      	add	r6, sp, #0
 8003bd4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003bd8:	6876      	ldr	r6, [r6, #4]
 8003bda:	fbc6 0105 	smlal	r0, r1, r6, r5
 8003bde:	1c5b      	adds	r3, r3, #1

08003be0 <??ComputeAngleVelocity_2>:
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	dbf0      	blt.n	8003bc6 <??ComputeAngleVelocity_1>
 8003be4:	0f80      	lsrs	r0, r0, #30
 8003be6:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8003bea:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 8003bee:	1c52      	adds	r2, r2, #1

08003bf0 <??ComputeAngleVelocity_0>:
 8003bf0:	2a03      	cmp	r2, #3
 8003bf2:	da03      	bge.n	8003bfc <??ComputeAngleVelocity_3>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	e7f1      	b.n	8003be0 <??ComputeAngleVelocity_2>

08003bfc <??ComputeAngleVelocity_3>:
 8003bfc:	b00e      	add	sp, #56	@ 0x38
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}

08003c00 <Mag3ofNormalizedLong>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4604      	mov	r4, r0
 8003c04:	68a0      	ldr	r0, [r4, #8]
 8003c06:	f002 fc21 	bl	800644c <__aeabi_i2f>
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	6860      	ldr	r0, [r4, #4]
 8003c0e:	f002 fc1d 	bl	800644c <__aeabi_i2f>
 8003c12:	4606      	mov	r6, r0
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	f002 fc19 	bl	800644c <__aeabi_i2f>
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	f002 fc6a 	bl	80064f4 <__aeabi_fmul>
 8003c20:	4604      	mov	r4, r0
 8003c22:	4630      	mov	r0, r6
 8003c24:	4631      	mov	r1, r6
 8003c26:	f002 fc65 	bl	80064f4 <__aeabi_fmul>
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	f002 fb5a 	bl	80062e4 <__addsf3>
 8003c30:	4604      	mov	r4, r0
 8003c32:	4628      	mov	r0, r5
 8003c34:	4629      	mov	r1, r5
 8003c36:	f002 fc5d 	bl	80064f4 <__aeabi_fmul>
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	f002 fb52 	bl	80062e4 <__addsf3>
 8003c40:	f00d f8ec 	bl	8010e1c <sqrtf>
 8003c44:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 8003c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c4c:	f002 bc52 	b.w	80064f4 <__aeabi_fmul>

08003c50 <MagDisturbSetDisturbance>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	f8df 43d0 	ldr.w	r4, [pc, #976]	@ 8004028 <??DataTable10>
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	f002 fdd5 	bl	800680c <__aeabi_cfcmpeq>
 8003c62:	d311      	bcc.n	8003c88 <??MagDisturbSetDisturbance_0>
 8003c64:	4610      	mov	r0, r2
 8003c66:	6861      	ldr	r1, [r4, #4]
 8003c68:	f002 fdd0 	bl	800680c <__aeabi_cfcmpeq>
 8003c6c:	d30c      	bcc.n	8003c88 <??MagDisturbSetDisturbance_0>
 8003c6e:	6920      	ldr	r0, [r4, #16]
 8003c70:	2801      	cmp	r0, #1
 8003c72:	d115      	bne.n	8003ca0 <??MagDisturbSetDisturbance_1>
 8003c74:	68e0      	ldr	r0, [r4, #12]
 8003c76:	4619      	mov	r1, r3
 8003c78:	f002 fdc8 	bl	800680c <__aeabi_cfcmpeq>
 8003c7c:	d304      	bcc.n	8003c88 <??MagDisturbSetDisturbance_0>
 8003c7e:	4618      	mov	r0, r3
 8003c80:	68a1      	ldr	r1, [r4, #8]
 8003c82:	f002 fdc3 	bl	800680c <__aeabi_cfcmpeq>
 8003c86:	d20b      	bcs.n	8003ca0 <??MagDisturbSetDisturbance_1>

08003c88 <??MagDisturbSetDisturbance_0>:
 8003c88:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d104      	bne.n	8003c98 <??MagDisturbSetDisturbance_2>
 8003c8e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003c90:	f104 0018 	add.w	r0, r4, #24
 8003c94:	f006 fbf2 	bl	800a47c <inv_set_compass_correction>

08003c98 <??MagDisturbSetDisturbance_2>:
 8003c98:	2001      	movs	r0, #1
 8003c9a:	6760      	str	r0, [r4, #116]	@ 0x74
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	67a0      	str	r0, [r4, #120]	@ 0x78

08003ca0 <??MagDisturbSetDisturbance_1>:
 8003ca0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003ca2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003ca4:	4288      	cmp	r0, r1
 8003ca6:	db06      	blt.n	8003cb6 <??MagDisturbSetDisturbance_3>
 8003ca8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003caa:	2801      	cmp	r0, #1
 8003cac:	d101      	bne.n	8003cb2 <??MagDisturbSetDisturbance_4>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	65e0      	str	r0, [r4, #92]	@ 0x5c

08003cb2 <??MagDisturbSetDisturbance_4>:
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	6760      	str	r0, [r4, #116]	@ 0x74

08003cb6 <??MagDisturbSetDisturbance_3>:
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <MagDisturbCheckSettling>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4605      	mov	r5, r0
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	4cda      	ldr	r4, [pc, #872]	@ (8004028 <??DataTable10>)
 8003cc0:	f006 fc12 	bl	800a4e8 <inv_get_acc_state>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d104      	bne.n	8003cd2 <??MagDisturbCheckSettling_0>
 8003cc8:	4628      	mov	r0, r5
 8003cca:	49df      	ldr	r1, [pc, #892]	@ (8004048 <??DataTable10_8>)
 8003ccc:	f002 fd9a 	bl	8006804 <__aeabi_cfrcmple>
 8003cd0:	d802      	bhi.n	8003cd8 <??MagDisturbCheckSettling_1>

08003cd2 <??MagDisturbCheckSettling_0>:
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	6120      	str	r0, [r4, #16]
 8003cd6:	6160      	str	r0, [r4, #20]

08003cd8 <??MagDisturbCheckSettling_1>:
 8003cd8:	6920      	ldr	r0, [r4, #16]
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d109      	bne.n	8003cf2 <??MagDisturbCheckSettling_2>
 8003cde:	6960      	ldr	r0, [r4, #20]
 8003ce0:	1830      	adds	r0, r6, r0
 8003ce2:	6160      	str	r0, [r4, #20]
 8003ce4:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8003ce8:	dd03      	ble.n	8003cf2 <??MagDisturbCheckSettling_2>
 8003cea:	2001      	movs	r0, #1
 8003cec:	6120      	str	r0, [r4, #16]
 8003cee:	2000      	movs	r0, #0
 8003cf0:	6160      	str	r0, [r4, #20]

08003cf2 <??MagDisturbCheckSettling_2>:
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}

08003cf4 <inv_magnetic_disturbance_process>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	a800      	add	r0, sp, #0
 8003cfc:	f006 fc28 	bl	800a550 <inv_get_gravity>
 8003d00:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8003d04:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8003d08:	f7ff fea2 	bl	8003a50 <inv_delta_time_ms>
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	a803      	add	r0, sp, #12
 8003d10:	f006 fc64 	bl	800a5dc <inv_get_6axis_quaternion>
 8003d14:	4606      	mov	r6, r0
 8003d16:	ab00      	add	r3, sp, #0
 8003d18:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 8003d1c:	a903      	add	r1, sp, #12
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f805 	bl	8003d2e <inv_check_magnetic_disturbance>
 8003d24:	f005 fe00 	bl	8009928 <inv_set_compass_disturbance>
 8003d28:	4630      	mov	r0, r6
 8003d2a:	b008      	add	sp, #32
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}

08003d2e <inv_check_magnetic_disturbance>:
 8003d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d32:	b08b      	sub	sp, #44	@ 0x2c
 8003d34:	4604      	mov	r4, r0
 8003d36:	460d      	mov	r5, r1
 8003d38:	4616      	mov	r6, r2
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	f04f 0800 	mov.w	r8, #0
 8003d40:	a804      	add	r0, sp, #16
 8003d42:	4641      	mov	r1, r8
 8003d44:	460a      	mov	r2, r1
 8003d46:	460b      	mov	r3, r1
 8003d48:	c00e      	stmia	r0!, {r1, r2, r3}
 8003d4a:	f8df 92dc 	ldr.w	r9, [pc, #732]	@ 8004028 <??DataTable10>
 8003d4e:	f8d9 0088 	ldr.w	r0, [r9, #136]	@ 0x88
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d028      	beq.n	8003da8 <??inv_check_magnetic_disturbance_0>
 8003d56:	f005 fd3b 	bl	80097d0 <inv_get_gyro_on>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d002      	beq.n	8003d64 <??inv_check_magnetic_disturbance_1>
 8003d5e:	a804      	add	r0, sp, #16
 8003d60:	f005 ff0c 	bl	8009b7c <inv_get_gyro>

08003d64 <??inv_check_magnetic_disturbance_1>:
 8003d64:	f8d9 0080 	ldr.w	r0, [r9, #128]	@ 0x80
 8003d68:	2801      	cmp	r0, #1
 8003d6a:	db19      	blt.n	8003da0 <??inv_check_magnetic_disturbance_2>
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f8c9 0084 	str.w	r0, [r9, #132]	@ 0x84
 8003d72:	f005 fd2d 	bl	80097d0 <inv_get_gyro_on>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d006      	beq.n	8003d88 <??inv_check_magnetic_disturbance_3>
 8003d7a:	a804      	add	r0, sp, #16
 8003d7c:	f005 ffbd 	bl	8009cfa <inv_get_gyro_sum_of_sqr>
 8003d80:	0980      	lsrs	r0, r0, #6
 8003d82:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003d86:	d304      	bcc.n	8003d92 <??inv_check_magnetic_disturbance_4>

08003d88 <??inv_check_magnetic_disturbance_3>:
 8003d88:	f8d9 0080 	ldr.w	r0, [r9, #128]	@ 0x80
 8003d8c:	1b00      	subs	r0, r0, r4
 8003d8e:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80

08003d92 <??inv_check_magnetic_disturbance_4>:
 8003d92:	f8d9 0080 	ldr.w	r0, [r9, #128]	@ 0x80
 8003d96:	2801      	cmp	r0, #1
 8003d98:	da02      	bge.n	8003da0 <??inv_check_magnetic_disturbance_2>
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f8c9 0084 	str.w	r0, [r9, #132]	@ 0x84

08003da0 <??inv_check_magnetic_disturbance_2>:
 8003da0:	f006 fc98 	bl	800a6d4 <inv_got_compass_bias>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d101      	bne.n	8003dac <??inv_check_magnetic_disturbance_5>

08003da8 <??inv_check_magnetic_disturbance_0>:
 8003da8:	4640      	mov	r0, r8
 8003daa:	e136      	b.n	800401a <??inv_check_magnetic_disturbance_6>

08003dac <??inv_check_magnetic_disturbance_5>:
 8003dac:	46c2      	mov	sl, r8
 8003dae:	f04f 5b5e 	mov.w	fp, #931135488	@ 0x37800000
 8003db2:	e017      	b.n	8003de4 <??inv_check_magnetic_disturbance_7>

08003db4 <??inv_check_magnetic_disturbance_8>:
 8003db4:	f856 002a 	ldr.w	r0, [r6, sl, lsl #2]
 8003db8:	f002 fb48 	bl	800644c <__aeabi_i2f>
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	f002 fb99 	bl	80064f4 <__aeabi_fmul>
 8003dc2:	9000      	str	r0, [sp, #0]
 8003dc4:	f857 002a 	ldr.w	r0, [r7, sl, lsl #2]
 8003dc8:	f002 fb40 	bl	800644c <__aeabi_i2f>
 8003dcc:	9900      	ldr	r1, [sp, #0]
 8003dce:	f002 fb91 	bl	80064f4 <__aeabi_fmul>
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	f002 fb8e 	bl	80064f4 <__aeabi_fmul>
 8003dd8:	4641      	mov	r1, r8
 8003dda:	f002 fa83 	bl	80062e4 <__addsf3>
 8003dde:	4680      	mov	r8, r0
 8003de0:	f10a 0a01 	add.w	sl, sl, #1

08003de4 <??inv_check_magnetic_disturbance_7>:
 8003de4:	f1ba 0f03 	cmp.w	sl, #3
 8003de8:	dbe4      	blt.n	8003db4 <??inv_check_magnetic_disturbance_8>
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff ff08 	bl	8003c00 <Mag3ofNormalizedLong>
 8003df0:	4606      	mov	r6, r0
 8003df2:	4640      	mov	r0, r8
 8003df4:	4631      	mov	r1, r6
 8003df6:	f002 fc31 	bl	800665c <__aeabi_fdiv>
 8003dfa:	4607      	mov	r7, r0
 8003dfc:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 800404c <??DataTable10_9>
 8003e00:	4651      	mov	r1, sl
 8003e02:	f002 fcff 	bl	8006804 <__aeabi_cfrcmple>
 8003e06:	d801      	bhi.n	8003e0c <??inv_check_magnetic_disturbance_9>
 8003e08:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000

08003e0c <??inv_check_magnetic_disturbance_9>:
 8003e0c:	f8df b240 	ldr.w	fp, [pc, #576]	@ 8004050 <??DataTable10_10>
 8003e10:	4638      	mov	r0, r7
 8003e12:	4659      	mov	r1, fp
 8003e14:	f002 fcfa 	bl	800680c <__aeabi_cfcmpeq>
 8003e18:	d200      	bcs.n	8003e1c <??inv_check_magnetic_disturbance_10>
 8003e1a:	465f      	mov	r7, fp

08003e1c <??inv_check_magnetic_disturbance_10>:
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	f00c ffcf 	bl	8010dc0 <acosf>
 8003e22:	4680      	mov	r8, r0
 8003e24:	f8d9 008c 	ldr.w	r0, [r9, #140]	@ 0x8c
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d010      	beq.n	8003e4e <??inv_check_magnetic_disturbance_11>
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f8d9 1000 	ldr.w	r1, [r9]
 8003e32:	f002 fceb 	bl	800680c <__aeabi_cfcmpeq>
 8003e36:	d20a      	bcs.n	8003e4e <??inv_check_magnetic_disturbance_11>
 8003e38:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	f002 fce5 	bl	800680c <__aeabi_cfcmpeq>
 8003e42:	d204      	bcs.n	8003e4e <??inv_check_magnetic_disturbance_11>
 8003e44:	4641      	mov	r1, r8
 8003e46:	f8d9 0090 	ldr.w	r0, [r9, #144]	@ 0x90
 8003e4a:	f7ff fe62 	bl	8003b12 <inv_track_dip_angle>

08003e4e <??inv_check_magnetic_disturbance_11>:
 8003e4e:	a801      	add	r0, sp, #4
 8003e50:	f006 fb74 	bl	800a53c <inv_get_local_field>
 8003e54:	f109 07ac 	add.w	r7, r9, #172	@ 0xac
 8003e58:	220c      	movs	r2, #12
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	a801      	add	r0, sp, #4
 8003e5e:	f009 f9bf 	bl	800d1e0 <memcmp>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d103      	bne.n	8003e6e <??inv_check_magnetic_disturbance_12>
 8003e66:	f8d9 0098 	ldr.w	r0, [r9, #152]	@ 0x98
 8003e6a:	2801      	cmp	r0, #1
 8003e6c:	d17d      	bne.n	8003f6a <??inv_check_magnetic_disturbance_13>

08003e6e <??inv_check_magnetic_disturbance_12>:
 8003e6e:	220c      	movs	r2, #12
 8003e70:	a901      	add	r1, sp, #4
 8003e72:	4638      	mov	r0, r7
 8003e74:	f009 fa62 	bl	800d33c <memcpy>
 8003e78:	9801      	ldr	r0, [sp, #4]
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d12b      	bne.n	8003ed6 <??inv_check_magnetic_disturbance_14>
 8003e7e:	a801      	add	r0, sp, #4
 8003e80:	6841      	ldr	r1, [r0, #4]
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d127      	bne.n	8003ed6 <??inv_check_magnetic_disturbance_14>
 8003e86:	6880      	ldr	r0, [r0, #8]
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d124      	bne.n	8003ed6 <??inv_check_magnetic_disturbance_14>
 8003e8c:	4869      	ldr	r0, [pc, #420]	@ (8004034 <??DataTable10_3>)
 8003e8e:	f8c9 0000 	str.w	r0, [r9]
 8003e92:	4869      	ldr	r0, [pc, #420]	@ (8004038 <??DataTable10_4>)
 8003e94:	f8c9 0004 	str.w	r0, [r9, #4]
 8003e98:	f8d9 0098 	ldr.w	r0, [r9, #152]	@ 0x98
 8003e9c:	2801      	cmp	r0, #1
 8003e9e:	d113      	bne.n	8003ec8 <??inv_check_magnetic_disturbance_15>
 8003ea0:	f8d9 709c 	ldr.w	r7, [r9, #156]	@ 0x9c
 8003ea4:	f8d9 a0a8 	ldr.w	sl, [r9, #168]	@ 0xa8
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	4639      	mov	r1, r7
 8003eac:	f002 fa18 	bl	80062e0 <__aeabi_fsub>
 8003eb0:	f8c9 0008 	str.w	r0, [r9, #8]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f002 fa14 	bl	80062e4 <__addsf3>
 8003ebc:	f8c9 000c 	str.w	r0, [r9, #12]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8003ec6:	e050      	b.n	8003f6a <??inv_check_magnetic_disturbance_13>

08003ec8 <??inv_check_magnetic_disturbance_15>:
 8003ec8:	4859      	ldr	r0, [pc, #356]	@ (8004030 <??DataTable10_2>)
 8003eca:	f8c9 0008 	str.w	r0, [r9, #8]
 8003ece:	4857      	ldr	r0, [pc, #348]	@ (800402c <??DataTable10_1>)
 8003ed0:	f8c9 000c 	str.w	r0, [r9, #12]
 8003ed4:	e049      	b.n	8003f6a <??inv_check_magnetic_disturbance_13>

08003ed6 <??inv_check_magnetic_disturbance_14>:
 8003ed6:	a801      	add	r0, sp, #4
 8003ed8:	f7ff fe92 	bl	8003c00 <Mag3ofNormalizedLong>
 8003edc:	4607      	mov	r7, r0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f002 fc94 	bl	800680c <__aeabi_cfcmpeq>
 8003ee4:	d041      	beq.n	8003f6a <??inv_check_magnetic_disturbance_13>
 8003ee6:	485b      	ldr	r0, [pc, #364]	@ (8004054 <??DataTable10_11>)
 8003ee8:	4639      	mov	r1, r7
 8003eea:	f002 f9fb 	bl	80062e4 <__addsf3>
 8003eee:	4601      	mov	r1, r0
 8003ef0:	f002 fb00 	bl	80064f4 <__aeabi_fmul>
 8003ef4:	f00c ff92 	bl	8010e1c <sqrtf>
 8003ef8:	f8c9 0004 	str.w	r0, [r9, #4]
 8003efc:	4856      	ldr	r0, [pc, #344]	@ (8004058 <??DataTable10_12>)
 8003efe:	4639      	mov	r1, r7
 8003f00:	f002 f9f0 	bl	80062e4 <__addsf3>
 8003f04:	4601      	mov	r1, r0
 8003f06:	f002 faf5 	bl	80064f4 <__aeabi_fmul>
 8003f0a:	f00c ff87 	bl	8010e1c <sqrtf>
 8003f0e:	f8c9 0000 	str.w	r0, [r9]
 8003f12:	9803      	ldr	r0, [sp, #12]
 8003f14:	f002 fa9a 	bl	800644c <__aeabi_i2f>
 8003f18:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 8003f1c:	f002 faea 	bl	80064f4 <__aeabi_fmul>
 8003f20:	4639      	mov	r1, r7
 8003f22:	f002 fb9b 	bl	800665c <__aeabi_fdiv>
 8003f26:	4607      	mov	r7, r0
 8003f28:	4651      	mov	r1, sl
 8003f2a:	f002 fc6b 	bl	8006804 <__aeabi_cfrcmple>
 8003f2e:	d801      	bhi.n	8003f34 <??inv_check_magnetic_disturbance_16>
 8003f30:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000

08003f34 <??inv_check_magnetic_disturbance_16>:
 8003f34:	4638      	mov	r0, r7
 8003f36:	4659      	mov	r1, fp
 8003f38:	f002 fc68 	bl	800680c <__aeabi_cfcmpeq>
 8003f3c:	d200      	bcs.n	8003f40 <??inv_check_magnetic_disturbance_17>
 8003f3e:	465f      	mov	r7, fp

08003f40 <??inv_check_magnetic_disturbance_17>:
 8003f40:	4638      	mov	r0, r7
 8003f42:	f00c ff3d 	bl	8010dc0 <acosf>
 8003f46:	f8d9 109c 	ldr.w	r1, [r9, #156]	@ 0x9c
 8003f4a:	f002 f9c9 	bl	80062e0 <__aeabi_fsub>
 8003f4e:	f8c9 0008 	str.w	r0, [r9, #8]
 8003f52:	4638      	mov	r0, r7
 8003f54:	f00c ff34 	bl	8010dc0 <acosf>
 8003f58:	4601      	mov	r1, r0
 8003f5a:	f8d9 009c 	ldr.w	r0, [r9, #156]	@ 0x9c
 8003f5e:	f002 f9c1 	bl	80062e4 <__addsf3>
 8003f62:	f8c9 000c 	str.w	r0, [r9, #12]
 8003f66:	f7ff fdc7 	bl	8003af8 <inv_disable_dip_tracking>

08003f6a <??inv_check_magnetic_disturbance_13>:
 8003f6a:	f8d9 005c 	ldr.w	r0, [r9, #92]	@ 0x5c
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d111      	bne.n	8003f96 <??inv_check_magnetic_disturbance_18>
 8003f72:	2001      	movs	r0, #1
 8003f74:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
 8003f78:	f04f 0a00 	mov.w	sl, #0
 8003f7c:	e008      	b.n	8003f90 <??inv_check_magnetic_disturbance_19>

08003f7e <??inv_check_magnetic_disturbance_20>:
 8003f7e:	f109 0158 	add.w	r1, r9, #88	@ 0x58
 8003f82:	eb09 100a 	add.w	r0, r9, sl, lsl #4
 8003f86:	3018      	adds	r0, #24
 8003f88:	f006 fa90 	bl	800a4ac <inv_get_compass_correction>
 8003f8c:	f10a 0a01 	add.w	sl, sl, #1

08003f90 <??inv_check_magnetic_disturbance_19>:
 8003f90:	f1ba 0f04 	cmp.w	sl, #4
 8003f94:	dbf3      	blt.n	8003f7e <??inv_check_magnetic_disturbance_20>

08003f96 <??inv_check_magnetic_disturbance_18>:
 8003f96:	aa07      	add	r2, sp, #28
 8003f98:	f109 0164 	add.w	r1, r9, #100	@ 0x64
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f7ff fdff 	bl	8003ba0 <ComputeAngleVelocity>
 8003fa2:	f109 0164 	add.w	r1, r9, #100	@ 0x64
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f005 ff53 	bl	8009e52 <inv_q_invert>
 8003fac:	a804      	add	r0, sp, #16
 8003fae:	f005 fea4 	bl	8009cfa <inv_get_gyro_sum_of_sqr>
 8003fb2:	f002 fa47 	bl	8006444 <__aeabi_ui2f>
 8003fb6:	f04f 5172 	mov.w	r1, #1015021568	@ 0x3c800000
 8003fba:	f002 fa9b 	bl	80064f4 <__aeabi_fmul>
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	f7ff fe7a 	bl	8003cb8 <MagDisturbCheckSettling>
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7ff fe42 	bl	8003c50 <MagDisturbSetDisturbance>
 8003fcc:	f8d9 0078 	ldr.w	r0, [r9, #120]	@ 0x78
 8003fd0:	f8d9 107c 	ldr.w	r1, [r9, #124]	@ 0x7c
 8003fd4:	4288      	cmp	r0, r1
 8003fd6:	da02      	bge.n	8003fde <??inv_check_magnetic_disturbance_21>
 8003fd8:	1820      	adds	r0, r4, r0
 8003fda:	f8c9 0078 	str.w	r0, [r9, #120]	@ 0x78

08003fde <??inv_check_magnetic_disturbance_21>:
 8003fde:	f8d9 0074 	ldr.w	r0, [r9, #116]	@ 0x74
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d117      	bne.n	8004016 <??inv_check_magnetic_disturbance_22>
 8003fe6:	f8d9 0060 	ldr.w	r0, [r9, #96]	@ 0x60
 8003fea:	1820      	adds	r0, r4, r0
 8003fec:	f8c9 0060 	str.w	r0, [r9, #96]	@ 0x60
 8003ff0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003ff4:	dd0f      	ble.n	8004016 <??inv_check_magnetic_disturbance_22>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f8c9 0060 	str.w	r0, [r9, #96]	@ 0x60
 8003ffc:	2230      	movs	r2, #48	@ 0x30
 8003ffe:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8004002:	f109 0018 	add.w	r0, r9, #24
 8004006:	f009 f8fb 	bl	800d200 <memmove>
 800400a:	f109 0158 	add.w	r1, r9, #88	@ 0x58
 800400e:	f109 0048 	add.w	r0, r9, #72	@ 0x48
 8004012:	f006 fa4b 	bl	800a4ac <inv_get_compass_correction>

08004016 <??inv_check_magnetic_disturbance_22>:
 8004016:	f8d9 0074 	ldr.w	r0, [r9, #116]	@ 0x74

0800401a <??inv_check_magnetic_disturbance_6>:
 800401a:	b00b      	add	sp, #44	@ 0x2c
 800401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004020 <inv_get_magnetic_disturbance_state>:
 8004020:	4801      	ldr	r0, [pc, #4]	@ (8004028 <??DataTable10>)
 8004022:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8004024:	4770      	bx	lr
	...

08004028 <??DataTable10>:
 8004028:	0c64 2000                                   d.. 

0800402c <??DataTable10_1>:
 800402c:	0000 42b4                                   ...B

08004030 <??DataTable10_2>:
 8004030:	0000 c2b4                                   ....

08004034 <??DataTable10_3>:
 8004034:	0000 4270                                   ..pB

08004038 <??DataTable10_4>:
 8004038:	0000 41f0                                   ...A

0800403c <??DataTable10_5>:
 800403c:	147b 3e2e                                   {..>

08004040 <??DataTable10_6>:
 8004040:	3aab 0800                                   .:..

08004044 <??DataTable10_7>:
 8004044:	0000 4248                                   ..HB

08004048 <??DataTable10_8>:
 8004048:	4001 461c                                   .@.F

0800404c <??DataTable10_9>:
 800404c:	0001 3f80                                   ...?

08004050 <??DataTable10_10>:
 8004050:	0000 bf80                                   ....

08004054 <??DataTable10_11>:
 8004054:	0000 c120                                   .. .

08004058 <??DataTable10_12>:
 8004058:	0000 4120                                   .. A

0800405c <accel_fusion>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	b098      	sub	sp, #96	@ 0x60
 8004062:	4604      	mov	r4, r0
 8004064:	460d      	mov	r5, r1
 8004066:	4690      	mov	r8, r2
 8004068:	461e      	mov	r6, r3
 800406a:	68a0      	ldr	r0, [r4, #8]
 800406c:	f002 f9ee 	bl	800644c <__aeabi_i2f>
 8004070:	4607      	mov	r7, r0
 8004072:	6860      	ldr	r0, [r4, #4]
 8004074:	f002 f9ea 	bl	800644c <__aeabi_i2f>
 8004078:	4681      	mov	r9, r0
 800407a:	6820      	ldr	r0, [r4, #0]
 800407c:	f002 f9e6 	bl	800644c <__aeabi_i2f>
 8004080:	4601      	mov	r1, r0
 8004082:	f002 fa37 	bl	80064f4 <__aeabi_fmul>
 8004086:	4682      	mov	sl, r0
 8004088:	4648      	mov	r0, r9
 800408a:	4649      	mov	r1, r9
 800408c:	f002 fa32 	bl	80064f4 <__aeabi_fmul>
 8004090:	4651      	mov	r1, sl
 8004092:	f002 f927 	bl	80062e4 <__addsf3>
 8004096:	4681      	mov	r9, r0
 8004098:	4638      	mov	r0, r7
 800409a:	4639      	mov	r1, r7
 800409c:	f002 fa2a 	bl	80064f4 <__aeabi_fmul>
 80040a0:	4649      	mov	r1, r9
 80040a2:	f002 f91f 	bl	80062e4 <__addsf3>
 80040a6:	f00c feb9 	bl	8010e1c <sqrtf>
 80040aa:	4607      	mov	r7, r0
 80040ac:	f001 fd74 	bl	8005b98 <__aeabi_f2d>
 80040b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80040b4:	2201      	movs	r2, #1
 80040b6:	f8df 39c4 	ldr.w	r3, [pc, #2500]	@ 8004a7c <??DataTable11>
 80040ba:	f002 f81d 	bl	80060f8 <__aeabi_cdrcmple>
 80040be:	f200 80be 	bhi.w	800423e <??accel_fusion_0>
 80040c2:	f04f 5942 	mov.w	r9, #813694976	@ 0x30800000
 80040c6:	6828      	ldr	r0, [r5, #0]
 80040c8:	f002 f9c0 	bl	800644c <__aeabi_i2f>
 80040cc:	4649      	mov	r1, r9
 80040ce:	f002 fa11 	bl	80064f4 <__aeabi_fmul>
 80040d2:	9004      	str	r0, [sp, #16]
 80040d4:	f10d 0a10 	add.w	sl, sp, #16
 80040d8:	6868      	ldr	r0, [r5, #4]
 80040da:	f002 f9b7 	bl	800644c <__aeabi_i2f>
 80040de:	4649      	mov	r1, r9
 80040e0:	f002 fa08 	bl	80064f4 <__aeabi_fmul>
 80040e4:	f8ca 0004 	str.w	r0, [sl, #4]
 80040e8:	68a8      	ldr	r0, [r5, #8]
 80040ea:	f002 f9af 	bl	800644c <__aeabi_i2f>
 80040ee:	4649      	mov	r1, r9
 80040f0:	f002 fa00 	bl	80064f4 <__aeabi_fmul>
 80040f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80040f8:	68e8      	ldr	r0, [r5, #12]
 80040fa:	f002 f9a7 	bl	800644c <__aeabi_i2f>
 80040fe:	4649      	mov	r1, r9
 8004100:	f002 f9f8 	bl	80064f4 <__aeabi_fmul>
 8004104:	f8ca 000c 	str.w	r0, [sl, #12]
 8004108:	2000      	movs	r0, #0
 800410a:	9008      	str	r0, [sp, #32]
 800410c:	ad08      	add	r5, sp, #32
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	f002 f99c 	bl	800644c <__aeabi_i2f>
 8004114:	4639      	mov	r1, r7
 8004116:	f002 faa1 	bl	800665c <__aeabi_fdiv>
 800411a:	6068      	str	r0, [r5, #4]
 800411c:	6860      	ldr	r0, [r4, #4]
 800411e:	f002 f995 	bl	800644c <__aeabi_i2f>
 8004122:	4639      	mov	r1, r7
 8004124:	f002 fa9a 	bl	800665c <__aeabi_fdiv>
 8004128:	60a8      	str	r0, [r5, #8]
 800412a:	68a0      	ldr	r0, [r4, #8]
 800412c:	f002 f98e 	bl	800644c <__aeabi_i2f>
 8004130:	4639      	mov	r1, r7
 8004132:	f002 fa93 	bl	800665c <__aeabi_fdiv>
 8004136:	60e8      	str	r0, [r5, #12]
 8004138:	aa14      	add	r2, sp, #80	@ 0x50
 800413a:	a908      	add	r1, sp, #32
 800413c:	a804      	add	r0, sp, #16
 800413e:	f005 ff15 	bl	8009f6c <inv_q_multf>
 8004142:	a910      	add	r1, sp, #64	@ 0x40
 8004144:	a804      	add	r0, sp, #16
 8004146:	f006 f82d 	bl	800a1a4 <inv_q_invertf>
 800414a:	aa00      	add	r2, sp, #0
 800414c:	a910      	add	r1, sp, #64	@ 0x40
 800414e:	a814      	add	r0, sp, #80	@ 0x50
 8004150:	f005 ff0c 	bl	8009f6c <inv_q_multf>
 8004154:	ac00      	add	r4, sp, #0
 8004156:	6865      	ldr	r5, [r4, #4]
 8004158:	68a7      	ldr	r7, [r4, #8]
 800415a:	4638      	mov	r0, r7
 800415c:	4639      	mov	r1, r7
 800415e:	f002 f9c9 	bl	80064f4 <__aeabi_fmul>
 8004162:	4681      	mov	r9, r0
 8004164:	4628      	mov	r0, r5
 8004166:	4629      	mov	r1, r5
 8004168:	f002 f9c4 	bl	80064f4 <__aeabi_fmul>
 800416c:	4649      	mov	r1, r9
 800416e:	f002 f8b9 	bl	80062e4 <__addsf3>
 8004172:	f8df 190c 	ldr.w	r1, [pc, #2316]	@ 8004a80 <??DataTable11_1>
 8004176:	f002 fb49 	bl	800680c <__aeabi_cfcmpeq>
 800417a:	d202      	bcs.n	8004182 <??accel_fusion_1>
 800417c:	f8df 9904 	ldr.w	r9, [pc, #2308]	@ 8004a84 <??DataTable11_2>
 8004180:	e011      	b.n	80041a6 <??accel_fusion_2>

08004182 <??accel_fusion_1>:
 8004182:	f8df 1904 	ldr.w	r1, [pc, #2308]	@ 8004a88 <??DataTable11_3>
 8004186:	f002 fb41 	bl	800680c <__aeabi_cfcmpeq>
 800418a:	d202      	bcs.n	8004192 <??accel_fusion_3>
 800418c:	f8df 98fc 	ldr.w	r9, [pc, #2300]	@ 8004a8c <??DataTable11_4>
 8004190:	e009      	b.n	80041a6 <??accel_fusion_2>

08004192 <??accel_fusion_3>:
 8004192:	f8df 18fc 	ldr.w	r1, [pc, #2300]	@ 8004a90 <??DataTable11_5>
 8004196:	f002 fb39 	bl	800680c <__aeabi_cfcmpeq>
 800419a:	d202      	bcs.n	80041a2 <??accel_fusion_4>
 800419c:	f04f 597a 	mov.w	r9, #1048576000	@ 0x3e800000
 80041a0:	e001      	b.n	80041a6 <??accel_fusion_2>

080041a2 <??accel_fusion_4>:
 80041a2:	f8df 98f0 	ldr.w	r9, [pc, #2288]	@ 8004a94 <??DataTable11_6>

080041a6 <??accel_fusion_2>:
 80041a6:	4640      	mov	r0, r8
 80041a8:	f002 f950 	bl	800644c <__aeabi_i2f>
 80041ac:	f8df 18e8 	ldr.w	r1, [pc, #2280]	@ 8004a98 <??DataTable11_7>
 80041b0:	f002 fa54 	bl	800665c <__aeabi_fdiv>
 80041b4:	4649      	mov	r1, r9
 80041b6:	f002 f99d 	bl	80064f4 <__aeabi_fmul>
 80041ba:	4680      	mov	r8, r0
 80041bc:	2000      	movs	r0, #0
 80041be:	900c      	str	r0, [sp, #48]	@ 0x30
 80041c0:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80041c4:	4638      	mov	r0, r7
 80041c6:	4641      	mov	r1, r8
 80041c8:	f002 f994 	bl	80064f4 <__aeabi_fmul>
 80041cc:	f8c9 0004 	str.w	r0, [r9, #4]
 80041d0:	4628      	mov	r0, r5
 80041d2:	4641      	mov	r1, r8
 80041d4:	f002 f98e 	bl	80064f4 <__aeabi_fmul>
 80041d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80041dc:	f8c9 0008 	str.w	r0, [r9, #8]
 80041e0:	2000      	movs	r0, #0
 80041e2:	f8c9 000c 	str.w	r0, [r9, #12]
 80041e6:	aa00      	add	r2, sp, #0
 80041e8:	a904      	add	r1, sp, #16
 80041ea:	a80c      	add	r0, sp, #48	@ 0x30
 80041ec:	f005 febe 	bl	8009f6c <inv_q_multf>
 80041f0:	aa00      	add	r2, sp, #0
 80041f2:	a904      	add	r1, sp, #16
 80041f4:	a800      	add	r0, sp, #0
 80041f6:	f005 ff22 	bl	800a03e <inv_q_addf>
 80041fa:	a800      	add	r0, sp, #0
 80041fc:	f005 ff98 	bl	800a130 <inv_q_norm4>
 8004200:	f04f 459d 	mov.w	r5, #1317011456	@ 0x4e800000
 8004204:	9800      	ldr	r0, [sp, #0]
 8004206:	4629      	mov	r1, r5
 8004208:	f002 f974 	bl	80064f4 <__aeabi_fmul>
 800420c:	f002 fb38 	bl	8006880 <__aeabi_f2iz>
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	6860      	ldr	r0, [r4, #4]
 8004214:	4629      	mov	r1, r5
 8004216:	f002 f96d 	bl	80064f4 <__aeabi_fmul>
 800421a:	f002 fb31 	bl	8006880 <__aeabi_f2iz>
 800421e:	6070      	str	r0, [r6, #4]
 8004220:	68a0      	ldr	r0, [r4, #8]
 8004222:	4629      	mov	r1, r5
 8004224:	f002 f966 	bl	80064f4 <__aeabi_fmul>
 8004228:	f002 fb2a 	bl	8006880 <__aeabi_f2iz>
 800422c:	60b0      	str	r0, [r6, #8]
 800422e:	68e0      	ldr	r0, [r4, #12]
 8004230:	4629      	mov	r1, r5
 8004232:	f002 f95f 	bl	80064f4 <__aeabi_fmul>
 8004236:	f002 fb23 	bl	8006880 <__aeabi_f2iz>
 800423a:	60f0      	str	r0, [r6, #12]
 800423c:	e004      	b.n	8004248 <??accel_fusion_5>

0800423e <??accel_fusion_0>:
 800423e:	2210      	movs	r2, #16
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f009 f87a 	bl	800d33c <memcpy>

08004248 <??accel_fusion_5>:
 8004248:	b018      	add	sp, #96	@ 0x60
 800424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800424e <inv_compute_quat_from_accel>:
 800424e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	460d      	mov	r5, r1
 8004256:	68a0      	ldr	r0, [r4, #8]
 8004258:	f002 f8f8 	bl	800644c <__aeabi_i2f>
 800425c:	4606      	mov	r6, r0
 800425e:	6860      	ldr	r0, [r4, #4]
 8004260:	f002 f8f4 	bl	800644c <__aeabi_i2f>
 8004264:	4607      	mov	r7, r0
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	f002 f8f0 	bl	800644c <__aeabi_i2f>
 800426c:	4601      	mov	r1, r0
 800426e:	f002 f941 	bl	80064f4 <__aeabi_fmul>
 8004272:	4680      	mov	r8, r0
 8004274:	4638      	mov	r0, r7
 8004276:	4639      	mov	r1, r7
 8004278:	f002 f93c 	bl	80064f4 <__aeabi_fmul>
 800427c:	4641      	mov	r1, r8
 800427e:	f002 f831 	bl	80062e4 <__addsf3>
 8004282:	4607      	mov	r7, r0
 8004284:	4630      	mov	r0, r6
 8004286:	4631      	mov	r1, r6
 8004288:	f002 f934 	bl	80064f4 <__aeabi_fmul>
 800428c:	4639      	mov	r1, r7
 800428e:	f002 f829 	bl	80062e4 <__addsf3>
 8004292:	f00c fdc3 	bl	8010e1c <sqrtf>
 8004296:	4681      	mov	r9, r0
 8004298:	f8df 6800 	ldr.w	r6, [pc, #2048]	@ 8004a9c <??DataTable11_8>
 800429c:	4631      	mov	r1, r6
 800429e:	f002 fab5 	bl	800680c <__aeabi_cfcmpeq>
 80042a2:	d341      	bcc.n	8004328 <??inv_compute_quat_from_accel_0>
 80042a4:	68a0      	ldr	r0, [r4, #8]
 80042a6:	f002 f8d1 	bl	800644c <__aeabi_i2f>
 80042aa:	4649      	mov	r1, r9
 80042ac:	f002 f9d6 	bl	800665c <__aeabi_fdiv>
 80042b0:	4680      	mov	r8, r0
 80042b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80042b6:	4641      	mov	r1, r8
 80042b8:	f002 f812 	bl	80062e0 <__aeabi_fsub>
 80042bc:	2100      	movs	r1, #0
 80042be:	f002 faa1 	bl	8006804 <__aeabi_cfrcmple>
 80042c2:	d300      	bcc.n	80042c6 <??inv_compute_quat_from_accel_1>
 80042c4:	4608      	mov	r0, r1

080042c6 <??inv_compute_quat_from_accel_1>:
 80042c6:	f04f 597c 	mov.w	r9, #1056964608	@ 0x3f000000
 80042ca:	4649      	mov	r1, r9
 80042cc:	f002 f912 	bl	80064f4 <__aeabi_fmul>
 80042d0:	f00c fda4 	bl	8010e1c <sqrtf>
 80042d4:	4607      	mov	r7, r0
 80042d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80042da:	4641      	mov	r1, r8
 80042dc:	f002 f802 	bl	80062e4 <__addsf3>
 80042e0:	2100      	movs	r1, #0
 80042e2:	f002 fa8f 	bl	8006804 <__aeabi_cfrcmple>
 80042e6:	d300      	bcc.n	80042ea <??inv_compute_quat_from_accel_2>
 80042e8:	4608      	mov	r0, r1

080042ea <??inv_compute_quat_from_accel_2>:
 80042ea:	4649      	mov	r1, r9
 80042ec:	f002 f902 	bl	80064f4 <__aeabi_fmul>
 80042f0:	f00c fd94 	bl	8010e1c <sqrtf>
 80042f4:	4680      	mov	r8, r0
 80042f6:	6860      	ldr	r0, [r4, #4]
 80042f8:	f002 f8a8 	bl	800644c <__aeabi_i2f>
 80042fc:	4681      	mov	r9, r0
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	f002 f8a4 	bl	800644c <__aeabi_i2f>
 8004304:	4601      	mov	r1, r0
 8004306:	f002 f8f5 	bl	80064f4 <__aeabi_fmul>
 800430a:	4682      	mov	sl, r0
 800430c:	4648      	mov	r0, r9
 800430e:	4649      	mov	r1, r9
 8004310:	f002 f8f0 	bl	80064f4 <__aeabi_fmul>
 8004314:	4651      	mov	r1, sl
 8004316:	f001 ffe5 	bl	80062e4 <__addsf3>
 800431a:	f00c fd7f 	bl	8010e1c <sqrtf>
 800431e:	4681      	mov	r9, r0
 8004320:	4631      	mov	r1, r6
 8004322:	f002 fa73 	bl	800680c <__aeabi_cfcmpeq>
 8004326:	d207      	bcs.n	8004338 <??inv_compute_quat_from_accel_3>

08004328 <??inv_compute_quat_from_accel_0>:
 8004328:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800432c:	6028      	str	r0, [r5, #0]
 800432e:	2000      	movs	r0, #0
 8004330:	6068      	str	r0, [r5, #4]
 8004332:	60a8      	str	r0, [r5, #8]
 8004334:	60e8      	str	r0, [r5, #12]
 8004336:	e029      	b.n	800438c <??inv_compute_quat_from_accel_4>

08004338 <??inv_compute_quat_from_accel_3>:
 8004338:	f04f 469d 	mov.w	r6, #1317011456	@ 0x4e800000
 800433c:	4640      	mov	r0, r8
 800433e:	4631      	mov	r1, r6
 8004340:	f002 f8d8 	bl	80064f4 <__aeabi_fmul>
 8004344:	f002 fa9c 	bl	8006880 <__aeabi_f2iz>
 8004348:	6028      	str	r0, [r5, #0]
 800434a:	6860      	ldr	r0, [r4, #4]
 800434c:	f002 f87e 	bl	800644c <__aeabi_i2f>
 8004350:	4649      	mov	r1, r9
 8004352:	f002 f983 	bl	800665c <__aeabi_fdiv>
 8004356:	4639      	mov	r1, r7
 8004358:	f002 f8cc 	bl	80064f4 <__aeabi_fmul>
 800435c:	4631      	mov	r1, r6
 800435e:	f002 f8c9 	bl	80064f4 <__aeabi_fmul>
 8004362:	f002 fa8d 	bl	8006880 <__aeabi_f2iz>
 8004366:	6068      	str	r0, [r5, #4]
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	f002 f86f 	bl	800644c <__aeabi_i2f>
 800436e:	4649      	mov	r1, r9
 8004370:	f002 f974 	bl	800665c <__aeabi_fdiv>
 8004374:	4639      	mov	r1, r7
 8004376:	f002 f8bd 	bl	80064f4 <__aeabi_fmul>
 800437a:	f8df 1724 	ldr.w	r1, [pc, #1828]	@ 8004aa0 <??DataTable11_9>
 800437e:	f002 f8b9 	bl	80064f4 <__aeabi_fmul>
 8004382:	f002 fa7d 	bl	8006880 <__aeabi_f2iz>
 8004386:	60a8      	str	r0, [r5, #8]
 8004388:	2000      	movs	r0, #0
 800438a:	60e8      	str	r0, [r5, #12]

0800438c <??inv_compute_quat_from_accel_4>:
 800438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004390 <inv_normalize_quat>:
 8004390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004394:	4604      	mov	r4, r0
 8004396:	460d      	mov	r5, r1
 8004398:	68e0      	ldr	r0, [r4, #12]
 800439a:	f002 f857 	bl	800644c <__aeabi_i2f>
 800439e:	4606      	mov	r6, r0
 80043a0:	68a0      	ldr	r0, [r4, #8]
 80043a2:	f002 f853 	bl	800644c <__aeabi_i2f>
 80043a6:	4607      	mov	r7, r0
 80043a8:	6860      	ldr	r0, [r4, #4]
 80043aa:	f002 f84f 	bl	800644c <__aeabi_i2f>
 80043ae:	4680      	mov	r8, r0
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	f002 f84b 	bl	800644c <__aeabi_i2f>
 80043b6:	4601      	mov	r1, r0
 80043b8:	f002 f89c 	bl	80064f4 <__aeabi_fmul>
 80043bc:	4681      	mov	r9, r0
 80043be:	4640      	mov	r0, r8
 80043c0:	4641      	mov	r1, r8
 80043c2:	f002 f897 	bl	80064f4 <__aeabi_fmul>
 80043c6:	4649      	mov	r1, r9
 80043c8:	f001 ff8c 	bl	80062e4 <__addsf3>
 80043cc:	4680      	mov	r8, r0
 80043ce:	4638      	mov	r0, r7
 80043d0:	4639      	mov	r1, r7
 80043d2:	f002 f88f 	bl	80064f4 <__aeabi_fmul>
 80043d6:	4641      	mov	r1, r8
 80043d8:	f001 ff84 	bl	80062e4 <__addsf3>
 80043dc:	4607      	mov	r7, r0
 80043de:	4630      	mov	r0, r6
 80043e0:	4631      	mov	r1, r6
 80043e2:	f002 f887 	bl	80064f4 <__aeabi_fmul>
 80043e6:	4639      	mov	r1, r7
 80043e8:	f001 ff7c 	bl	80062e4 <__addsf3>
 80043ec:	2100      	movs	r1, #0
 80043ee:	f002 fa0d 	bl	800680c <__aeabi_cfcmpeq>
 80043f2:	d807      	bhi.n	8004404 <??inv_normalize_quat_0>
 80043f4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043f8:	6028      	str	r0, [r5, #0]
 80043fa:	4608      	mov	r0, r1
 80043fc:	6068      	str	r0, [r5, #4]
 80043fe:	60a8      	str	r0, [r5, #8]
 8004400:	60e8      	str	r0, [r5, #12]
 8004402:	e030      	b.n	8004466 <??inv_normalize_quat_1>

08004404 <??inv_normalize_quat_0>:
 8004404:	f00c fd0a 	bl	8010e1c <sqrtf>
 8004408:	4601      	mov	r1, r0
 800440a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800440e:	f002 f925 	bl	800665c <__aeabi_fdiv>
 8004412:	4601      	mov	r1, r0
 8004414:	f04f 409d 	mov.w	r0, #1317011456	@ 0x4e800000
 8004418:	f002 f86c 	bl	80064f4 <__aeabi_fmul>
 800441c:	4606      	mov	r6, r0
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	f002 f814 	bl	800644c <__aeabi_i2f>
 8004424:	4631      	mov	r1, r6
 8004426:	f002 f865 	bl	80064f4 <__aeabi_fmul>
 800442a:	f002 fa29 	bl	8006880 <__aeabi_f2iz>
 800442e:	6028      	str	r0, [r5, #0]
 8004430:	6860      	ldr	r0, [r4, #4]
 8004432:	f002 f80b 	bl	800644c <__aeabi_i2f>
 8004436:	4631      	mov	r1, r6
 8004438:	f002 f85c 	bl	80064f4 <__aeabi_fmul>
 800443c:	f002 fa20 	bl	8006880 <__aeabi_f2iz>
 8004440:	6068      	str	r0, [r5, #4]
 8004442:	68a0      	ldr	r0, [r4, #8]
 8004444:	f002 f802 	bl	800644c <__aeabi_i2f>
 8004448:	4631      	mov	r1, r6
 800444a:	f002 f853 	bl	80064f4 <__aeabi_fmul>
 800444e:	f002 fa17 	bl	8006880 <__aeabi_f2iz>
 8004452:	60a8      	str	r0, [r5, #8]
 8004454:	68e0      	ldr	r0, [r4, #12]
 8004456:	f001 fff9 	bl	800644c <__aeabi_i2f>
 800445a:	4631      	mov	r1, r6
 800445c:	f002 f84a 	bl	80064f4 <__aeabi_fmul>
 8004460:	f002 fa0e 	bl	8006880 <__aeabi_f2iz>
 8004464:	60e8      	str	r0, [r5, #12]

08004466 <??inv_normalize_quat_1>:
 8004466:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

0800446a <inv_generate_gyro_quaternion>:
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	b088      	sub	sp, #32
 800446e:	4605      	mov	r5, r0
 8004470:	f895 0030 	ldrb.w	r0, [r5, #48]	@ 0x30
 8004474:	0640      	lsls	r0, r0, #25
 8004476:	d57d      	bpl.n	8004574 <??inv_generate_gyro_quaternion_0>
 8004478:	69a8      	ldr	r0, [r5, #24]
 800447a:	2800      	cmp	r0, #0
 800447c:	d500      	bpl.n	8004480 <??inv_generate_gyro_quaternion_1>
 800447e:	4240      	negs	r0, r0

08004480 <??inv_generate_gyro_quaternion_1>:
 8004480:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004484:	da0d      	bge.n	80044a2 <??inv_generate_gyro_quaternion_2>
 8004486:	69e9      	ldr	r1, [r5, #28]
 8004488:	2900      	cmp	r1, #0
 800448a:	d500      	bpl.n	800448e <??inv_generate_gyro_quaternion_3>
 800448c:	4249      	negs	r1, r1

0800448e <??inv_generate_gyro_quaternion_3>:
 800448e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004492:	da06      	bge.n	80044a2 <??inv_generate_gyro_quaternion_2>
 8004494:	6a29      	ldr	r1, [r5, #32]
 8004496:	2900      	cmp	r1, #0
 8004498:	d500      	bpl.n	800449c <??inv_generate_gyro_quaternion_4>
 800449a:	4249      	negs	r1, r1

0800449c <??inv_generate_gyro_quaternion_4>:
 800449c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80044a0:	db64      	blt.n	800456c <??inv_generate_gyro_quaternion_5>

080044a2 <??inv_generate_gyro_quaternion_2>:
 80044a2:	f8df 1600 	ldr.w	r1, [pc, #1536]	@ 8004aa4 <??DataTable11_10>
 80044a6:	f8df 4600 	ldr.w	r4, [pc, #1536]	@ 8004aa8 <??DataTable11_11>
 80044aa:	4288      	cmp	r0, r1
 80044ac:	da0b      	bge.n	80044c6 <??inv_generate_gyro_quaternion_6>
 80044ae:	69e8      	ldr	r0, [r5, #28]
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d500      	bpl.n	80044b6 <??inv_generate_gyro_quaternion_7>
 80044b4:	4240      	negs	r0, r0

080044b6 <??inv_generate_gyro_quaternion_7>:
 80044b6:	4288      	cmp	r0, r1
 80044b8:	da05      	bge.n	80044c6 <??inv_generate_gyro_quaternion_6>
 80044ba:	6a28      	ldr	r0, [r5, #32]
 80044bc:	2800      	cmp	r0, #0
 80044be:	d500      	bpl.n	80044c2 <??inv_generate_gyro_quaternion_8>
 80044c0:	4240      	negs	r0, r0

080044c2 <??inv_generate_gyro_quaternion_8>:
 80044c2:	4288      	cmp	r0, r1
 80044c4:	db02      	blt.n	80044cc <??inv_generate_gyro_quaternion_9>

080044c6 <??inv_generate_gyro_quaternion_6>:
 80044c6:	2003      	movs	r0, #3
 80044c8:	63a0      	str	r0, [r4, #56]	@ 0x38
 80044ca:	e001      	b.n	80044d0 <??inv_generate_gyro_quaternion_10>

080044cc <??inv_generate_gyro_quaternion_9>:
 80044cc:	2002      	movs	r0, #2
 80044ce:	63a0      	str	r0, [r4, #56]	@ 0x38

080044d0 <??inv_generate_gyro_quaternion_10>:
 80044d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80044d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044d4:	4281      	cmp	r1, r0
 80044d6:	d01b      	beq.n	8004510 <??inv_generate_gyro_quaternion_11>
 80044d8:	6360      	str	r0, [r4, #52]	@ 0x34
 80044da:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80044dc:	f001 ffb6 	bl	800644c <__aeabi_i2f>
 80044e0:	f8df 15c8 	ldr.w	r1, [pc, #1480]	@ 8004aac <??DataTable11_12>
 80044e4:	f002 f8ba 	bl	800665c <__aeabi_fdiv>
 80044e8:	f04f 419c 	mov.w	r1, #1308622848	@ 0x4e000000
 80044ec:	f002 f802 	bl	80064f4 <__aeabi_fmul>
 80044f0:	f001 fb52 	bl	8005b98 <__aeabi_f2d>
 80044f4:	f8df 25b8 	ldr.w	r2, [pc, #1464]	@ 8004ab0 <??DataTable11_13>
 80044f8:	f8df 35b8 	ldr.w	r3, [pc, #1464]	@ 8004ab4 <??DataTable11_14>
 80044fc:	f001 fba4 	bl	8005c48 <__aeabi_dmul>
 8004500:	2200      	movs	r2, #0
 8004502:	f8df 35b4 	ldr.w	r3, [pc, #1460]	@ 8004ab8 <??DataTable11_15>
 8004506:	f001 fcc9 	bl	8005e9c <__aeabi_ddiv>
 800450a:	f001 fe4d 	bl	80061a8 <__aeabi_d2iz>
 800450e:	6320      	str	r0, [r4, #48]	@ 0x30

08004510 <??inv_generate_gyro_quaternion_11>:
 8004510:	2000      	movs	r0, #0
 8004512:	9004      	str	r0, [sp, #16]
 8004514:	ae04      	add	r6, sp, #16
 8004516:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004518:	69a8      	ldr	r0, [r5, #24]
 800451a:	f005 fc00 	bl	8009d1e <inv_q30_mult>
 800451e:	6070      	str	r0, [r6, #4]
 8004520:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004522:	69e8      	ldr	r0, [r5, #28]
 8004524:	f005 fbfb 	bl	8009d1e <inv_q30_mult>
 8004528:	60b0      	str	r0, [r6, #8]
 800452a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800452c:	6a28      	ldr	r0, [r5, #32]
 800452e:	f005 fbf6 	bl	8009d1e <inv_q30_mult>
 8004532:	60f0      	str	r0, [r6, #12]
 8004534:	aa00      	add	r2, sp, #0
 8004536:	a904      	add	r1, sp, #16
 8004538:	4620      	mov	r0, r4
 800453a:	f005 fbf6 	bl	8009d2a <inv_q_mult>
 800453e:	9800      	ldr	r0, [sp, #0]
 8004540:	0180      	lsls	r0, r0, #6
 8004542:	9000      	str	r0, [sp, #0]
 8004544:	a800      	add	r0, sp, #0
 8004546:	6841      	ldr	r1, [r0, #4]
 8004548:	0189      	lsls	r1, r1, #6
 800454a:	6041      	str	r1, [r0, #4]
 800454c:	6881      	ldr	r1, [r0, #8]
 800454e:	0189      	lsls	r1, r1, #6
 8004550:	6081      	str	r1, [r0, #8]
 8004552:	68c1      	ldr	r1, [r0, #12]
 8004554:	0189      	lsls	r1, r1, #6
 8004556:	60c1      	str	r1, [r0, #12]
 8004558:	4622      	mov	r2, r4
 800455a:	a900      	add	r1, sp, #0
 800455c:	4620      	mov	r0, r4
 800455e:	f005 fc66 	bl	8009e2e <inv_q_add>
 8004562:	4621      	mov	r1, r4
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff ff13 	bl	8004390 <inv_normalize_quat>
 800456a:	e003      	b.n	8004574 <??inv_generate_gyro_quaternion_0>

0800456c <??inv_generate_gyro_quaternion_5>:
 800456c:	2000      	movs	r0, #0
 800456e:	f8df 1538 	ldr.w	r1, [pc, #1336]	@ 8004aa8 <??DataTable11_11>
 8004572:	6388      	str	r0, [r1, #56]	@ 0x38

08004574 <??inv_generate_gyro_quaternion_0>:
 8004574:	b008      	add	sp, #32
 8004576:	bd70      	pop	{r4, r5, r6, pc}

08004578 <inv_process_dmp_quaternion>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	b08e      	sub	sp, #56	@ 0x38
 800457e:	4604      	mov	r4, r0
 8004580:	f894 0120 	ldrb.w	r0, [r4, #288]	@ 0x120
 8004584:	0640      	lsls	r0, r0, #25
 8004586:	f140 80de 	bpl.w	8004746 <??inv_process_dmp_quaternion_0>
 800458a:	f8df 551c 	ldr.w	r5, [pc, #1308]	@ 8004aa8 <??DataTable11_11>
 800458e:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8004592:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8004abc <??DataTable11_16>
 8004596:	4348      	muls	r0, r1
 8004598:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
 800459c:	682a      	ldr	r2, [r5, #0]
 800459e:	1a89      	subs	r1, r1, r2
 80045a0:	4288      	cmp	r0, r1
 80045a2:	da02      	bge.n	80045aa <??inv_process_dmp_quaternion_1>
 80045a4:	2003      	movs	r0, #3
 80045a6:	63a8      	str	r0, [r5, #56]	@ 0x38
 80045a8:	e001      	b.n	80045ae <??inv_process_dmp_quaternion_2>

080045aa <??inv_process_dmp_quaternion_1>:
 80045aa:	2002      	movs	r0, #2
 80045ac:	63a8      	str	r0, [r5, #56]	@ 0x38

080045ae <??inv_process_dmp_quaternion_2>:
 80045ae:	f8d4 0120 	ldr.w	r0, [r4, #288]	@ 0x120
 80045b2:	0580      	lsls	r0, r0, #22
 80045b4:	d505      	bpl.n	80045c2 <??inv_process_dmp_quaternion_3>
 80045b6:	4629      	mov	r1, r5
 80045b8:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 80045bc:	f7ff fee8 	bl	8004390 <inv_normalize_quat>
 80045c0:	e0c1      	b.n	8004746 <??inv_process_dmp_quaternion_0>

080045c2 <??inv_process_dmp_quaternion_3>:
 80045c2:	2100      	movs	r1, #0
 80045c4:	a803      	add	r0, sp, #12
 80045c6:	f005 fa2d 	bl	8009a24 <inv_get_gyro_bias>
 80045ca:	220c      	movs	r2, #12
 80045cc:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 80045d0:	a803      	add	r0, sp, #12
 80045d2:	f008 fe05 	bl	800d1e0 <memcmp>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d105      	bne.n	80045e6 <??inv_process_dmp_quaternion_4>
 80045da:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80045de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80045e0:	4288      	cmp	r0, r1
 80045e2:	f000 8094 	beq.w	800470e <??inv_process_dmp_quaternion_5>

080045e6 <??inv_process_dmp_quaternion_4>:
 80045e6:	ab00      	add	r3, sp, #0
 80045e8:	aa03      	add	r2, sp, #12
 80045ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	b280      	uxth	r0, r0
 80045f0:	f005 fe91 	bl	800a316 <inv_convert_to_body_with_scale>
 80045f4:	ae00      	add	r6, sp, #0
 80045f6:	68b0      	ldr	r0, [r6, #8]
 80045f8:	f001 ff28 	bl	800644c <__aeabi_i2f>
 80045fc:	4607      	mov	r7, r0
 80045fe:	6870      	ldr	r0, [r6, #4]
 8004600:	f001 ff24 	bl	800644c <__aeabi_i2f>
 8004604:	4680      	mov	r8, r0
 8004606:	9800      	ldr	r0, [sp, #0]
 8004608:	f001 ff20 	bl	800644c <__aeabi_i2f>
 800460c:	4601      	mov	r1, r0
 800460e:	f001 ff71 	bl	80064f4 <__aeabi_fmul>
 8004612:	4681      	mov	r9, r0
 8004614:	4640      	mov	r0, r8
 8004616:	4641      	mov	r1, r8
 8004618:	f001 ff6c 	bl	80064f4 <__aeabi_fmul>
 800461c:	4649      	mov	r1, r9
 800461e:	f001 fe61 	bl	80062e4 <__addsf3>
 8004622:	4680      	mov	r8, r0
 8004624:	4638      	mov	r0, r7
 8004626:	4639      	mov	r1, r7
 8004628:	f001 ff64 	bl	80064f4 <__aeabi_fmul>
 800462c:	4641      	mov	r1, r8
 800462e:	f001 fe59 	bl	80062e4 <__addsf3>
 8004632:	f00c fbf3 	bl	8010e1c <sqrtf>
 8004636:	4607      	mov	r7, r0
 8004638:	f8df 0484 	ldr.w	r0, [pc, #1156]	@ 8004ac0 <??DataTable11_17>
 800463c:	4639      	mov	r1, r7
 800463e:	f001 ff59 	bl	80064f4 <__aeabi_fmul>
 8004642:	f8df 1480 	ldr.w	r1, [pc, #1152]	@ 8004ac4 <??DataTable11_18>
 8004646:	f002 f809 	bl	800665c <__aeabi_fdiv>
 800464a:	4680      	mov	r8, r0
 800464c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8004650:	f001 fefc 	bl	800644c <__aeabi_i2f>
 8004654:	4641      	mov	r1, r8
 8004656:	f001 ff4d 	bl	80064f4 <__aeabi_fmul>
 800465a:	f8df 146c 	ldr.w	r1, [pc, #1132]	@ 8004ac8 <??DataTable11_19>
 800465e:	f001 fffd 	bl	800665c <__aeabi_fdiv>
 8004662:	4680      	mov	r8, r0
 8004664:	f00c fbf8 	bl	8010e58 <cosf>
 8004668:	4681      	mov	r9, r0
 800466a:	4640      	mov	r0, r8
 800466c:	f00c fc40 	bl	8010ef0 <sinf>
 8004670:	4680      	mov	r8, r0
 8004672:	4638      	mov	r0, r7
 8004674:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004678:	f002 f8c8 	bl	800680c <__aeabi_cfcmpeq>
 800467c:	d206      	bcs.n	800468c <??inv_process_dmp_quaternion_6>
 800467e:	4608      	mov	r0, r1
 8004680:	64a8      	str	r0, [r5, #72]	@ 0x48
 8004682:	2000      	movs	r0, #0
 8004684:	64e8      	str	r0, [r5, #76]	@ 0x4c
 8004686:	6528      	str	r0, [r5, #80]	@ 0x50
 8004688:	6568      	str	r0, [r5, #84]	@ 0x54
 800468a:	e037      	b.n	80046fc <??inv_process_dmp_quaternion_7>

0800468c <??inv_process_dmp_quaternion_6>:
 800468c:	f04f 4a9d 	mov.w	sl, #1317011456	@ 0x4e800000
 8004690:	4648      	mov	r0, r9
 8004692:	4651      	mov	r1, sl
 8004694:	f001 ff2e 	bl	80064f4 <__aeabi_fmul>
 8004698:	f002 f8f2 	bl	8006880 <__aeabi_f2iz>
 800469c:	64a8      	str	r0, [r5, #72]	@ 0x48
 800469e:	4640      	mov	r0, r8
 80046a0:	4651      	mov	r1, sl
 80046a2:	f001 ff27 	bl	80064f4 <__aeabi_fmul>
 80046a6:	4680      	mov	r8, r0
 80046a8:	9800      	ldr	r0, [sp, #0]
 80046aa:	f001 fecf 	bl	800644c <__aeabi_i2f>
 80046ae:	4641      	mov	r1, r8
 80046b0:	f001 ff20 	bl	80064f4 <__aeabi_fmul>
 80046b4:	4639      	mov	r1, r7
 80046b6:	f001 ffd1 	bl	800665c <__aeabi_fdiv>
 80046ba:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80046be:	f002 f8df 	bl	8006880 <__aeabi_f2iz>
 80046c2:	64e8      	str	r0, [r5, #76]	@ 0x4c
 80046c4:	6870      	ldr	r0, [r6, #4]
 80046c6:	f001 fec1 	bl	800644c <__aeabi_i2f>
 80046ca:	4641      	mov	r1, r8
 80046cc:	f001 ff12 	bl	80064f4 <__aeabi_fmul>
 80046d0:	4639      	mov	r1, r7
 80046d2:	f001 ffc3 	bl	800665c <__aeabi_fdiv>
 80046d6:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80046da:	f002 f8d1 	bl	8006880 <__aeabi_f2iz>
 80046de:	6528      	str	r0, [r5, #80]	@ 0x50
 80046e0:	68b0      	ldr	r0, [r6, #8]
 80046e2:	f001 feb3 	bl	800644c <__aeabi_i2f>
 80046e6:	4641      	mov	r1, r8
 80046e8:	f001 ff04 	bl	80064f4 <__aeabi_fmul>
 80046ec:	4639      	mov	r1, r7
 80046ee:	f001 ffb5 	bl	800665c <__aeabi_fdiv>
 80046f2:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80046f6:	f002 f8c3 	bl	8006880 <__aeabi_f2iz>
 80046fa:	6568      	str	r0, [r5, #84]	@ 0x54

080046fc <??inv_process_dmp_quaternion_7>:
 80046fc:	220c      	movs	r2, #12
 80046fe:	a903      	add	r1, sp, #12
 8004700:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 8004704:	f008 fe1a 	bl	800d33c <memcpy>
 8004708:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 800470c:	65a8      	str	r0, [r5, #88]	@ 0x58

0800470e <??inv_process_dmp_quaternion_5>:
 800470e:	f504 7488 	add.w	r4, r4, #272	@ 0x110
 8004712:	aa06      	add	r2, sp, #24
 8004714:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 8004718:	4620      	mov	r0, r4
 800471a:	f005 fb06 	bl	8009d2a <inv_q_mult>
 800471e:	aa0a      	add	r2, sp, #40	@ 0x28
 8004720:	a906      	add	r1, sp, #24
 8004722:	f105 005c 	add.w	r0, r5, #92	@ 0x5c
 8004726:	f005 fb00 	bl	8009d2a <inv_q_mult>
 800472a:	f105 015c 	add.w	r1, r5, #92	@ 0x5c
 800472e:	4620      	mov	r0, r4
 8004730:	f005 fb8f 	bl	8009e52 <inv_q_invert>
 8004734:	aa06      	add	r2, sp, #24
 8004736:	a90a      	add	r1, sp, #40	@ 0x28
 8004738:	4628      	mov	r0, r5
 800473a:	f005 faf6 	bl	8009d2a <inv_q_mult>
 800473e:	4629      	mov	r1, r5
 8004740:	a806      	add	r0, sp, #24
 8004742:	f7ff fe25 	bl	8004390 <inv_normalize_quat>

08004746 <??inv_process_dmp_quaternion_0>:
 8004746:	b00e      	add	sp, #56	@ 0x38
 8004748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800474c <inv_set_quaternion>:
 800474c:	b530      	push	{r4, r5, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	4604      	mov	r4, r0
 8004752:	4dd5      	ldr	r5, [pc, #852]	@ (8004aa8 <??DataTable11_11>)
 8004754:	a900      	add	r1, sp, #0
 8004756:	4628      	mov	r0, r5
 8004758:	f005 fb7b 	bl	8009e52 <inv_q_invert>
 800475c:	f105 0220 	add.w	r2, r5, #32
 8004760:	a900      	add	r1, sp, #0
 8004762:	4620      	mov	r0, r4
 8004764:	f005 fae1 	bl	8009d2a <inv_q_mult>
 8004768:	2210      	movs	r2, #16
 800476a:	4621      	mov	r1, r4
 800476c:	f105 0010 	add.w	r0, r5, #16
 8004770:	f008 fde4 	bl	800d33c <memcpy>
 8004774:	b005      	add	sp, #20
 8004776:	bd30      	pop	{r4, r5, pc}

08004778 <inv_generate_accel_gyro_quaternion>:
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	b093      	sub	sp, #76	@ 0x4c
 800477e:	4607      	mov	r7, r0
 8004780:	2401      	movs	r4, #1
 8004782:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 8004786:	4ec8      	ldr	r6, [pc, #800]	@ (8004aa8 <??DataTable11_11>)
 8004788:	f895 0044 	ldrb.w	r0, [r5, #68]	@ 0x44
 800478c:	f000 0050 	and.w	r0, r0, #80	@ 0x50
 8004790:	2840      	cmp	r0, #64	@ 0x40
 8004792:	d110      	bne.n	80047b6 <??inv_generate_accel_gyro_quaternion_0>
 8004794:	f106 0110 	add.w	r1, r6, #16
 8004798:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800479c:	f7ff fd57 	bl	800424e <inv_compute_quat_from_accel>
 80047a0:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80047a4:	05c0      	lsls	r0, r0, #23
 80047a6:	d515      	bpl.n	80047d4 <??inv_generate_accel_gyro_quaternion_1>
 80047a8:	f106 015c 	add.w	r1, r6, #92	@ 0x5c
 80047ac:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80047b0:	f005 fb4f 	bl	8009e52 <inv_q_invert>
 80047b4:	e00e      	b.n	80047d4 <??inv_generate_accel_gyro_quaternion_1>

080047b6 <??inv_generate_accel_gyro_quaternion_0>:
 80047b6:	f897 0120 	ldrb.w	r0, [r7, #288]	@ 0x120
 80047ba:	f000 0050 	and.w	r0, r0, #80	@ 0x50
 80047be:	2840      	cmp	r0, #64	@ 0x40
 80047c0:	d113      	bne.n	80047ea <??inv_generate_accel_gyro_quaternion_2>
 80047c2:	f106 015c 	add.w	r1, r6, #92	@ 0x5c
 80047c6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80047ca:	f005 fb42 	bl	8009e52 <inv_q_invert>
 80047ce:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 80047d0:	05c0      	lsls	r0, r0, #23
 80047d2:	d50a      	bpl.n	80047ea <??inv_generate_accel_gyro_quaternion_2>

080047d4 <??inv_generate_accel_gyro_quaternion_1>:
 80047d4:	a900      	add	r1, sp, #0
 80047d6:	4630      	mov	r0, r6
 80047d8:	f005 fb3b 	bl	8009e52 <inv_q_invert>
 80047dc:	f106 0220 	add.w	r2, r6, #32
 80047e0:	a900      	add	r1, sp, #0
 80047e2:	f106 0010 	add.w	r0, r6, #16
 80047e6:	f005 faa0 	bl	8009d2a <inv_q_mult>

080047ea <??inv_generate_accel_gyro_quaternion_2>:
 80047ea:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80047ee:	05c0      	lsls	r0, r0, #23
 80047f0:	4638      	mov	r0, r7
 80047f2:	d502      	bpl.n	80047fa <??inv_generate_accel_gyro_quaternion_3>
 80047f4:	f7ff fec0 	bl	8004578 <inv_process_dmp_quaternion>
 80047f8:	e001      	b.n	80047fe <??inv_generate_accel_gyro_quaternion_4>

080047fa <??inv_generate_accel_gyro_quaternion_3>:
 80047fa:	f7ff fe36 	bl	800446a <inv_generate_gyro_quaternion>

080047fe <??inv_generate_accel_gyro_quaternion_4>:
 80047fe:	f106 0210 	add.w	r2, r6, #16
 8004802:	4631      	mov	r1, r6
 8004804:	f106 0020 	add.w	r0, r6, #32
 8004808:	f005 fa8f 	bl	8009d2a <inv_q_mult>
 800480c:	f895 0044 	ldrb.w	r0, [r5, #68]	@ 0x44
 8004810:	0640      	lsls	r0, r0, #25
 8004812:	f140 80c7 	bpl.w	80049a4 <??inv_generate_accel_gyro_quaternion_5>
 8004816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004818:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800481c:	4308      	orrs	r0, r1
 800481e:	05c0      	lsls	r0, r0, #23
 8004820:	f140 80ac 	bpl.w	800497c <??inv_generate_accel_gyro_quaternion_6>
 8004824:	aa04      	add	r2, sp, #16
 8004826:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800482a:	f106 0010 	add.w	r0, r6, #16
 800482e:	f005 fb7b 	bl	8009f28 <inv_q_rotate>
 8004832:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8004836:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800483a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800483c:	17c1      	asrs	r1, r0, #31
 800483e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8004840:	17d3      	asrs	r3, r2, #31
 8004842:	fba2 8902 	umull	r8, r9, r2, r2
 8004846:	fb02 9903 	mla	r9, r2, r3, r9
 800484a:	fb03 9902 	mla	r9, r3, r2, r9
 800484e:	fba0 2300 	umull	r2, r3, r0, r0
 8004852:	fb00 3301 	mla	r3, r0, r1, r3
 8004856:	fb01 3300 	mla	r3, r1, r0, r3
 800485a:	eb18 0002 	adds.w	r0, r8, r2
 800485e:	eb49 0103 	adc.w	r1, r9, r3
 8004862:	fbaa 230a 	umull	r2, r3, sl, sl
 8004866:	fb0a 330b 	mla	r3, sl, fp, r3
 800486a:	fb0b 330a 	mla	r3, fp, sl, r3
 800486e:	1880      	adds	r0, r0, r2
 8004870:	4159      	adcs	r1, r3
 8004872:	2902      	cmp	r1, #2
 8004874:	db2f      	blt.n	80048d6 <??inv_generate_accel_gyro_quaternion_7>
 8004876:	dc02      	bgt.n	800487e <??inv_generate_accel_gyro_quaternion_8>
 8004878:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800487c:	d32b      	bcc.n	80048d6 <??inv_generate_accel_gyro_quaternion_7>

0800487e <??inv_generate_accel_gyro_quaternion_8>:
 800487e:	a807      	add	r0, sp, #28
 8004880:	f005 ff4a 	bl	800a718 <inv_get_linear_accel>
 8004884:	a807      	add	r0, sp, #28
 8004886:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800488a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800488e:	6840      	ldr	r0, [r0, #4]
 8004890:	17c1      	asrs	r1, r0, #31
 8004892:	9a07      	ldr	r2, [sp, #28]
 8004894:	17d3      	asrs	r3, r2, #31
 8004896:	fba2 8902 	umull	r8, r9, r2, r2
 800489a:	fb02 9903 	mla	r9, r2, r3, r9
 800489e:	fb03 9902 	mla	r9, r3, r2, r9
 80048a2:	fba0 2300 	umull	r2, r3, r0, r0
 80048a6:	fb00 3301 	mla	r3, r0, r1, r3
 80048aa:	fb01 3300 	mla	r3, r1, r0, r3
 80048ae:	eb18 0002 	adds.w	r0, r8, r2
 80048b2:	eb49 0103 	adc.w	r1, r9, r3
 80048b6:	fbaa 230a 	umull	r2, r3, sl, sl
 80048ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80048be:	fb0b 330a 	mla	r3, fp, sl, r3
 80048c2:	1880      	adds	r0, r0, r2
 80048c4:	4159      	adcs	r1, r3
 80048c6:	2902      	cmp	r1, #2
 80048c8:	db05      	blt.n	80048d6 <??inv_generate_accel_gyro_quaternion_7>
 80048ca:	dc02      	bgt.n	80048d2 <??inv_generate_accel_gyro_quaternion_9>
 80048cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80048d0:	d301      	bcc.n	80048d6 <??inv_generate_accel_gyro_quaternion_7>

080048d2 <??inv_generate_accel_gyro_quaternion_9>:
 80048d2:	2004      	movs	r0, #4
 80048d4:	63b0      	str	r0, [r6, #56]	@ 0x38

080048d6 <??inv_generate_accel_gyro_quaternion_7>:
 80048d6:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 80048d8:	2804      	cmp	r0, #4
 80048da:	d101      	bne.n	80048e0 <??inv_generate_accel_gyro_quaternion_10>
 80048dc:	2400      	movs	r4, #0
 80048de:	e017      	b.n	8004910 <??inv_generate_accel_gyro_quaternion_11>

080048e0 <??inv_generate_accel_gyro_quaternion_10>:
 80048e0:	2802      	cmp	r0, #2
 80048e2:	d001      	beq.n	80048e8 <??inv_generate_accel_gyro_quaternion_12>
 80048e4:	2803      	cmp	r0, #3
 80048e6:	d108      	bne.n	80048fa <??inv_generate_accel_gyro_quaternion_13>

080048e8 <??inv_generate_accel_gyro_quaternion_12>:
 80048e8:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	fb91 f4f2 	sdiv	r4, r1, r2
 80048f2:	2c01      	cmp	r4, #1
 80048f4:	da0c      	bge.n	8004910 <??inv_generate_accel_gyro_quaternion_11>
 80048f6:	2401      	movs	r4, #1
 80048f8:	e00a      	b.n	8004910 <??inv_generate_accel_gyro_quaternion_11>

080048fa <??inv_generate_accel_gyro_quaternion_13>:
 80048fa:	2801      	cmp	r0, #1
 80048fc:	d108      	bne.n	8004910 <??inv_generate_accel_gyro_quaternion_11>
 80048fe:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8004900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004904:	fb91 f1f2 	sdiv	r1, r1, r2
 8004908:	2901      	cmp	r1, #1
 800490a:	da00      	bge.n	800490e <??inv_generate_accel_gyro_quaternion_14>
 800490c:	4621      	mov	r1, r4

0800490e <??inv_generate_accel_gyro_quaternion_14>:
 800490e:	004c      	lsls	r4, r1, #1

08004910 <??inv_generate_accel_gyro_quaternion_11>:
 8004910:	2803      	cmp	r0, #3
 8004912:	d000      	beq.n	8004916 <??inv_generate_accel_gyro_quaternion_15>
 8004914:	00a4      	lsls	r4, r4, #2

08004916 <??inv_generate_accel_gyro_quaternion_15>:
 8004916:	486d      	ldr	r0, [pc, #436]	@ (8004acc <??DataTable11_20>)
 8004918:	4344      	muls	r4, r0
 800491a:	2000      	movs	r0, #0
 800491c:	900a      	str	r0, [sp, #40]	@ 0x28
 800491e:	ad0a      	add	r5, sp, #40	@ 0x28
 8004920:	4621      	mov	r1, r4
 8004922:	9805      	ldr	r0, [sp, #20]
 8004924:	0280      	lsls	r0, r0, #10
 8004926:	f005 f9fa 	bl	8009d1e <inv_q30_mult>
 800492a:	6068      	str	r0, [r5, #4]
 800492c:	4621      	mov	r1, r4
 800492e:	9804      	ldr	r0, [sp, #16]
 8004930:	4240      	negs	r0, r0
 8004932:	0280      	lsls	r0, r0, #10
 8004934:	f005 f9f3 	bl	8009d1e <inv_q30_mult>
 8004938:	60a8      	str	r0, [r5, #8]
 800493a:	2000      	movs	r0, #0
 800493c:	900d      	str	r0, [sp, #52]	@ 0x34
 800493e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004940:	f106 0110 	add.w	r1, r6, #16
 8004944:	a80a      	add	r0, sp, #40	@ 0x28
 8004946:	f005 f9f0 	bl	8009d2a <inv_q_mult>
 800494a:	f106 0210 	add.w	r2, r6, #16
 800494e:	a90e      	add	r1, sp, #56	@ 0x38
 8004950:	f106 0010 	add.w	r0, r6, #16
 8004954:	f005 fa6b 	bl	8009e2e <inv_q_add>
 8004958:	f106 0110 	add.w	r1, r6, #16
 800495c:	f106 0010 	add.w	r0, r6, #16
 8004960:	f7ff fd16 	bl	8004390 <inv_normalize_quat>
 8004964:	a900      	add	r1, sp, #0
 8004966:	4630      	mov	r0, r6
 8004968:	f005 fa73 	bl	8009e52 <inv_q_invert>
 800496c:	f106 0220 	add.w	r2, r6, #32
 8004970:	a900      	add	r1, sp, #0
 8004972:	f106 0010 	add.w	r0, r6, #16
 8004976:	f005 f9d8 	bl	8009d2a <inv_q_mult>
 800497a:	e013      	b.n	80049a4 <??inv_generate_accel_gyro_quaternion_5>

0800497c <??inv_generate_accel_gyro_quaternion_6>:
 800497c:	f106 0310 	add.w	r3, r6, #16
 8004980:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8004982:	f106 0110 	add.w	r1, r6, #16
 8004986:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800498a:	f7ff fb67 	bl	800405c <accel_fusion>
 800498e:	a900      	add	r1, sp, #0
 8004990:	4630      	mov	r0, r6
 8004992:	f005 fa5e 	bl	8009e52 <inv_q_invert>
 8004996:	f106 0220 	add.w	r2, r6, #32
 800499a:	a900      	add	r1, sp, #0
 800499c:	f106 0010 	add.w	r0, r6, #16
 80049a0:	f005 f9c3 	bl	8009d2a <inv_q_mult>

080049a4 <??inv_generate_accel_gyro_quaternion_5>:
 80049a4:	2000      	movs	r0, #0
 80049a6:	b013      	add	sp, #76	@ 0x4c
 80049a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049ac <inv_generate_quaternion>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4604      	mov	r4, r0
 80049b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80049b2:	05c0      	lsls	r0, r0, #23
 80049b4:	d40a      	bmi.n	80049cc <??inv_generate_quaternion_0>
 80049b6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049ba:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80049bc:	05c0      	lsls	r0, r0, #23
 80049be:	d405      	bmi.n	80049cc <??inv_generate_quaternion_0>
 80049c0:	f8d4 0120 	ldr.w	r0, [r4, #288]	@ 0x120
 80049c4:	05c0      	lsls	r0, r0, #23
 80049c6:	d401      	bmi.n	80049cc <??inv_generate_quaternion_0>
 80049c8:	2000      	movs	r0, #0
 80049ca:	bd32      	pop	{r1, r4, r5, pc}

080049cc <??inv_generate_quaternion_0>:
 80049cc:	4d36      	ldr	r5, [pc, #216]	@ (8004aa8 <??DataTable11_11>)
 80049ce:	f8d4 0120 	ldr.w	r0, [r4, #288]	@ 0x120
 80049d2:	f400 7040 	and.w	r0, r0, #768	@ 0x300
 80049d6:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
 80049da:	d107      	bne.n	80049ec <??inv_generate_quaternion_1>
 80049dc:	2210      	movs	r2, #16
 80049de:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 80049e2:	f105 0010 	add.w	r0, r5, #16
 80049e6:	f008 fca9 	bl	800d33c <memcpy>
 80049ea:	e002      	b.n	80049f2 <??inv_generate_quaternion_2>

080049ec <??inv_generate_quaternion_1>:
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fec3 	bl	8004778 <inv_generate_accel_gyro_quaternion>

080049f2 <??inv_generate_quaternion_2>:
 80049f2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049f6:	6881      	ldr	r1, [r0, #8]
 80049f8:	f105 0010 	add.w	r0, r5, #16
 80049fc:	f005 fd26 	bl	800a44c <inv_store_gaming_quaternion>
 8004a00:	2000      	movs	r0, #0
 8004a02:	bd32      	pop	{r1, r4, r5, pc}

08004a04 <inv_stop_quaternion>:
 8004a04:	4832      	ldr	r0, [pc, #200]	@ (8004ad0 <??DataTable11_21>)
 8004a06:	f005 b87d 	b.w	8009b04 <inv_unregister_data_cb>

08004a0a <inv_init_quaternion>:
 8004a0a:	b510      	push	{r4, lr}
 8004a0c:	4c26      	ldr	r4, [pc, #152]	@ (8004aa8 <??DataTable11_11>)
 8004a0e:	226c      	movs	r2, #108	@ 0x6c
 8004a10:	2100      	movs	r1, #0
 8004a12:	4620      	mov	r0, r4
 8004a14:	f008 fc0e 	bl	800d234 <memset>
 8004a18:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004a1c:	6120      	str	r0, [r4, #16]
 8004a1e:	6020      	str	r0, [r4, #0]
 8004a20:	6220      	str	r0, [r4, #32]
 8004a22:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8004a24:	65e0      	str	r0, [r4, #92]	@ 0x5c
 8004a26:	2000      	movs	r0, #0
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <inv_enable_quaternion>:
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	f7ff ffed 	bl	8004a0a <inv_init_quaternion>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d105      	bne.n	8004a40 <??inv_enable_quaternion_0>
 8004a34:	f20f 000d 	addw	r0, pc, #13
 8004a38:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8004a3c:	f005 bec8 	b.w	800a7d0 <inv_register_mpl_start_notification>

08004a40 <??inv_enable_quaternion_0>:
 8004a40:	bd02      	pop	{r1, pc}
	...

08004a44 <inv_start_quaternion>:
 8004a44:	b580      	push	{r7, lr}
 8004a46:	2208      	movs	r2, #8
 8004a48:	f20f 0190 	addw	r1, pc, #144	@ 0x90
 8004a4c:	4821      	ldr	r0, [pc, #132]	@ (8004ad4 <??DataTable11_22>)
 8004a4e:	6800      	ldr	r0, [r0, #0]
 8004a50:	f008 fbc6 	bl	800d1e0 <memcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d001      	beq.n	8004a5c <??inv_start_quaternion_0>
 8004a58:	2032      	movs	r0, #50	@ 0x32
 8004a5a:	bd02      	pop	{r1, pc}

08004a5c <??inv_start_quaternion_0>:
 8004a5c:	2213      	movs	r2, #19
 8004a5e:	21c8      	movs	r1, #200	@ 0xc8
 8004a60:	481b      	ldr	r0, [pc, #108]	@ (8004ad0 <??DataTable11_21>)
 8004a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a66:	f004 bff1 	b.w	8009a4c <inv_register_data_cb>

08004a6a <inv_disable_quaternion>:
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	f7ff ffca 	bl	8004a04 <inv_stop_quaternion>
 8004a70:	4819      	ldr	r0, [pc, #100]	@ (8004ad8 <??DataTable11_23>)
 8004a72:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8004a76:	f005 be87 	b.w	800a788 <inv_unregister_mpl_start_notification>
	...

08004a7c <??DataTable11>:
 8004a7c:	0000 40d0                                   ...@

08004a80 <??DataTable11_1>:
 8004a80:	b717 3951                                   ..Q9

08004a84 <??DataTable11_2>:
 8004a84:	9ba6 3bc4                                   ...;

08004a88 <??DataTable11_3>:
 8004a88:	d70a 3c23                                   ..#<

08004a8c <??DataTable11_4>:
 8004a8c:	c28f 3d75                                   ..u=

08004a90 <??DataTable11_5>:
 8004a90:	cccd 3e4c                                   ..L>

08004a94 <??DataTable11_6>:
 8004a94:	cccd 3ecc                                   ...>

08004a98 <??DataTable11_7>:
 8004a98:	1400 47cd                                   ...G

08004a9c <??DataTable11_8>:
 8004a9c:	0001 3f80                                   ...?

08004aa0 <??DataTable11_9>:
 8004aa0:	0000 ce80                                   ....

08004aa4 <??DataTable11_10>:
 8004aa4:	0001 0064                                   ..d.

08004aa8 <??DataTable11_11>:
 8004aa8:	0d1c 2000                                   ... 

08004aac <??DataTable11_12>:
 8004aac:	2400 4974                                   .$tI

08004ab0 <??DataTable11_13>:
 8004ab0:	2d11 5444                                   .-DT

08004ab4 <??DataTable11_14>:
 8004ab4:	21fb 4089                                   .!.@

08004ab8 <??DataTable11_15>:
 8004ab8:	8000 4066                                   ..f@

08004abc <??DataTable11_16>:
 8004abc:	9871 001c                                   q...

08004ac0 <??DataTable11_17>:
 8004ac0:	0fdb 4049                                   ..I@

08004ac4 <??DataTable11_18>:
 8004ac4:	0000 4b34                                   ..4K

08004ac8 <??DataTable11_19>:
 8004ac8:	2400 49f4                                   .$.I

08004acc <??DataTable11_20>:
 8004acc:	9ba6 00c4                                   ....

08004ad0 <??DataTable11_21>:
 8004ad0:	49ad 0800                                   .I..

08004ad4 <??DataTable11_22>:
 8004ad4:	0068 2000                                   h.. 

08004ad8 <??DataTable11_23>:
 8004ad8:	4a45 0800                                   EJ..

08004adc <?<Constant "eMPL 5.1">>:
 8004adc:	4d65 4c50 3520 312e 0000 0000               eMPL 5.1....

08004ae8 <__print_result_location>:
 8004ae8:	4770      	bx	lr

08004aea <inv_init_accel_maxmin>:
 8004aea:	2000      	movs	r0, #0
 8004aec:	e00a      	b.n	8004b04 <??inv_init_accel_maxmin_0>

08004aee <??inv_init_accel_maxmin_1>:
 8004aee:	f8df 1b8c 	ldr.w	r1, [pc, #2956]	@ 800567c <??DataTable18>
 8004af2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004af6:	f8df 2b88 	ldr.w	r2, [pc, #2952]	@ 8005680 <??DataTable18_1>
 8004afa:	620a      	str	r2, [r1, #32]
 8004afc:	f8df 2b84 	ldr.w	r2, [pc, #2948]	@ 8005684 <??DataTable18_2>
 8004b00:	62ca      	str	r2, [r1, #44]	@ 0x2c
 8004b02:	1c40      	adds	r0, r0, #1

08004b04 <??inv_init_accel_maxmin_0>:
 8004b04:	2803      	cmp	r0, #3
 8004b06:	dbf2      	blt.n	8004aee <??inv_init_accel_maxmin_1>
 8004b08:	4770      	bx	lr

08004b0a <inv_record_good_accel_maxmin>:
 8004b0a:	b510      	push	{r4, lr}
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	e013      	b.n	8004b38 <??inv_record_good_accel_maxmin_0>

08004b10 <??inv_record_good_accel_maxmin_1>:
 8004b10:	f8df 0b68 	ldr.w	r0, [pc, #2920]	@ 800567c <??DataTable18>
 8004b14:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004b18:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8004b1c:	6a18      	ldr	r0, [r3, #32]
 8004b1e:	f001 fe75 	bl	800680c <__aeabi_cfcmpeq>
 8004b22:	d200      	bcs.n	8004b26 <??inv_record_good_accel_maxmin_2>
 8004b24:	6219      	str	r1, [r3, #32]

08004b26 <??inv_record_good_accel_maxmin_2>:
 8004b26:	f103 0420 	add.w	r4, r3, #32
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	68e1      	ldr	r1, [r4, #12]
 8004b2e:	f001 fe6d 	bl	800680c <__aeabi_cfcmpeq>
 8004b32:	d200      	bcs.n	8004b36 <??inv_record_good_accel_maxmin_3>
 8004b34:	60e0      	str	r0, [r4, #12]

08004b36 <??inv_record_good_accel_maxmin_3>:
 8004b36:	1c52      	adds	r2, r2, #1

08004b38 <??inv_record_good_accel_maxmin_0>:
 8004b38:	2a03      	cmp	r2, #3
 8004b3a:	dbe9      	blt.n	8004b10 <??inv_record_good_accel_maxmin_1>
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <inv_get_current_calibrated_accel>:
 8004b3e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004b40:	f9b0 2048 	ldrsh.w	r2, [r0, #72]	@ 0x48
 8004b44:	0412      	lsls	r2, r2, #16
 8004b46:	9200      	str	r2, [sp, #0]
 8004b48:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	@ 0x4a
 8004b4c:	0413      	lsls	r3, r2, #16
 8004b4e:	aa00      	add	r2, sp, #0
 8004b50:	6053      	str	r3, [r2, #4]
 8004b52:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	@ 0x4c
 8004b56:	0424      	lsls	r4, r4, #16
 8004b58:	6094      	str	r4, [r2, #8]
 8004b5a:	f8df 5b20 	ldr.w	r5, [pc, #2848]	@ 800567c <??DataTable18>
 8004b5e:	9e00      	ldr	r6, [sp, #0]
 8004b60:	6e6f      	ldr	r7, [r5, #100]	@ 0x64
 8004b62:	1bf6      	subs	r6, r6, r7
 8004b64:	9600      	str	r6, [sp, #0]
 8004b66:	6eae      	ldr	r6, [r5, #104]	@ 0x68
 8004b68:	1b9b      	subs	r3, r3, r6
 8004b6a:	6053      	str	r3, [r2, #4]
 8004b6c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8004b6e:	1ae3      	subs	r3, r4, r3
 8004b70:	6093      	str	r3, [r2, #8]
 8004b72:	460b      	mov	r3, r1
 8004b74:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004b76:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8004b78:	b280      	uxth	r0, r0
 8004b7a:	f005 fbcc 	bl	800a316 <inv_convert_to_body_with_scale>
 8004b7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004b80 <inv_check_push>:
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	2500      	movs	r5, #0
 8004b86:	462e      	mov	r6, r5
 8004b88:	462f      	mov	r7, r5
 8004b8a:	f8df 4af0 	ldr.w	r4, [pc, #2800]	@ 800567c <??DataTable18>
 8004b8e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004b92:	2901      	cmp	r1, #1
 8004b94:	d102      	bne.n	8004b9c <??inv_check_push_0>
 8004b96:	4629      	mov	r1, r5
 8004b98:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94

08004b9c <??inv_check_push_0>:
 8004b9c:	a903      	add	r1, sp, #12
 8004b9e:	f7ff ffce 	bl	8004b3e <inv_get_current_calibrated_accel>
 8004ba2:	a806      	add	r0, sp, #24
 8004ba4:	f005 fcd4 	bl	800a550 <inv_get_gravity>
 8004ba8:	9803      	ldr	r0, [sp, #12]
 8004baa:	9906      	ldr	r1, [sp, #24]
 8004bac:	eba0 30a1 	sub.w	r0, r0, r1, asr #14
 8004bb0:	9003      	str	r0, [sp, #12]
 8004bb2:	a806      	add	r0, sp, #24
 8004bb4:	a903      	add	r1, sp, #12
 8004bb6:	684a      	ldr	r2, [r1, #4]
 8004bb8:	6843      	ldr	r3, [r0, #4]
 8004bba:	eba2 32a3 	sub.w	r2, r2, r3, asr #14
 8004bbe:	604a      	str	r2, [r1, #4]
 8004bc0:	688a      	ldr	r2, [r1, #8]
 8004bc2:	6880      	ldr	r0, [r0, #8]
 8004bc4:	eba2 30a0 	sub.w	r0, r2, r0, asr #14
 8004bc8:	6088      	str	r0, [r1, #8]
 8004bca:	2260      	movs	r2, #96	@ 0x60
 8004bcc:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 8004bd0:	f504 7053 	add.w	r0, r4, #844	@ 0x34c
 8004bd4:	f008 fb14 	bl	800d200 <memmove>
 8004bd8:	220c      	movs	r2, #12
 8004bda:	a903      	add	r1, sp, #12
 8004bdc:	f504 7059 	add.w	r0, r4, #868	@ 0x364
 8004be0:	f008 fbac 	bl	800d33c <memcpy>
 8004be4:	a800      	add	r0, sp, #0
 8004be6:	f005 fd97 	bl	800a718 <inv_get_linear_accel>
 8004bea:	2260      	movs	r2, #96	@ 0x60
 8004bec:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 8004bf0:	f504 706e 	add.w	r0, r4, #952	@ 0x3b8
 8004bf4:	f008 fb04 	bl	800d200 <memmove>
 8004bf8:	220c      	movs	r2, #12
 8004bfa:	a900      	add	r1, sp, #0
 8004bfc:	f504 7074 	add.w	r0, r4, #976	@ 0x3d0
 8004c00:	f008 fb9c 	bl	800d33c <memcpy>
 8004c04:	4629      	mov	r1, r5
 8004c06:	a800      	add	r0, sp, #0
 8004c08:	e038      	b.n	8004c7c <??inv_check_push_1>

08004c0a <??inv_check_push_2>:
 8004c0a:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 8004c0e:	6893      	ldr	r3, [r2, #8]
 8004c10:	1c5b      	adds	r3, r3, #1
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004c18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004c1c:	f8d2 334c 	ldr.w	r3, [r2, #844]	@ 0x34c
 8004c20:	f04f 0c09 	mov.w	ip, #9
 8004c24:	fb93 f3fc 	sdiv	r3, r3, ip
 8004c28:	195d      	adds	r5, r3, r5
 8004c2a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8004c2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c32:	f8d3 c350 	ldr.w	ip, [r3, #848]	@ 0x350
 8004c36:	f04f 0e09 	mov.w	lr, #9
 8004c3a:	fb9c fcfe 	sdiv	ip, ip, lr
 8004c3e:	4466      	add	r6, ip
 8004c40:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004c44:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004c48:	fb9c fcfe 	sdiv	ip, ip, lr
 8004c4c:	4467      	add	r7, ip
 8004c4e:	f8dd c000 	ldr.w	ip, [sp]
 8004c52:	f8d2 23b8 	ldr.w	r2, [r2, #952]	@ 0x3b8
 8004c56:	fb92 f2fe 	sdiv	r2, r2, lr
 8004c5a:	4462      	add	r2, ip
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	6842      	ldr	r2, [r0, #4]
 8004c60:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8004c64:	fb9c fcfe 	sdiv	ip, ip, lr
 8004c68:	4462      	add	r2, ip
 8004c6a:	6042      	str	r2, [r0, #4]
 8004c6c:	6882      	ldr	r2, [r0, #8]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	46f4      	mov	ip, lr
 8004c72:	fb93 f3fc 	sdiv	r3, r3, ip
 8004c76:	189a      	adds	r2, r3, r2
 8004c78:	6082      	str	r2, [r0, #8]
 8004c7a:	1c49      	adds	r1, r1, #1

08004c7c <??inv_check_push_1>:
 8004c7c:	2909      	cmp	r1, #9
 8004c7e:	dbc4      	blt.n	8004c0a <??inv_check_push_2>
 8004c80:	0029      	movs	r1, r5
 8004c82:	d500      	bpl.n	8004c86 <??inv_check_push_3>
 8004c84:	4249      	negs	r1, r1

08004c86 <??inv_check_push_3>:
 8004c86:	0032      	movs	r2, r6
 8004c88:	d500      	bpl.n	8004c8c <??inv_check_push_4>
 8004c8a:	4252      	negs	r2, r2

08004c8c <??inv_check_push_4>:
 8004c8c:	003b      	movs	r3, r7
 8004c8e:	d500      	bpl.n	8004c92 <??inv_check_push_5>
 8004c90:	425b      	negs	r3, r3

08004c92 <??inv_check_push_5>:
 8004c92:	9d00      	ldr	r5, [sp, #0]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	d500      	bpl.n	8004c9a <??inv_check_push_6>
 8004c98:	426d      	negs	r5, r5

08004c9a <??inv_check_push_6>:
 8004c9a:	9500      	str	r5, [sp, #0]
 8004c9c:	6845      	ldr	r5, [r0, #4]
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d501      	bpl.n	8004ca6 <??inv_check_push_7>
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	6045      	str	r5, [r0, #4]

08004ca6 <??inv_check_push_7>:
 8004ca6:	6885      	ldr	r5, [r0, #8]
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	d501      	bpl.n	8004cb0 <??inv_check_push_8>
 8004cac:	426d      	negs	r5, r5
 8004cae:	6085      	str	r5, [r0, #8]

08004cb0 <??inv_check_push_8>:
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	9e00      	ldr	r6, [sp, #0]
 8004cb4:	42b1      	cmp	r1, r6
 8004cb6:	da00      	bge.n	8004cba <??inv_check_push_9>
 8004cb8:	2501      	movs	r5, #1

08004cba <??inv_check_push_9>:
 8004cba:	6841      	ldr	r1, [r0, #4]
 8004cbc:	428a      	cmp	r2, r1
 8004cbe:	da00      	bge.n	8004cc2 <??inv_check_push_10>
 8004cc0:	1c6d      	adds	r5, r5, #1

08004cc2 <??inv_check_push_10>:
 8004cc2:	6880      	ldr	r0, [r0, #8]
 8004cc4:	4283      	cmp	r3, r0
 8004cc6:	da00      	bge.n	8004cca <??inv_check_push_11>
 8004cc8:	1c6d      	adds	r5, r5, #1

08004cca <??inv_check_push_11>:
 8004cca:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 8004cce:	6890      	ldr	r0, [r2, #8]
 8004cd0:	2809      	cmp	r0, #9
 8004cd2:	db00      	blt.n	8004cd6 <??inv_check_push_12>
 8004cd4:	1c6d      	adds	r5, r5, #1

08004cd6 <??inv_check_push_12>:
 8004cd6:	2d04      	cmp	r5, #4
 8004cd8:	d10f      	bne.n	8004cfa <??inv_check_push_13>
 8004cda:	f894 1424 	ldrb.w	r1, [r4, #1060]	@ 0x424
 8004cde:	2903      	cmp	r1, #3
 8004ce0:	db08      	blt.n	8004cf4 <??inv_check_push_14>
 8004ce2:	6852      	ldr	r2, [r2, #4]
 8004ce4:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8004ce8:	f004 fe32 	bl	8009950 <inv_set_accel_bias_mask>
 8004cec:	2001      	movs	r0, #1
 8004cee:	f005 fceb 	bl	800a6c8 <inv_set_accel_bias_found>
 8004cf2:	e002      	b.n	8004cfa <??inv_check_push_13>

08004cf4 <??inv_check_push_14>:
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	f004 fe1d 	bl	8009934 <inv_set_accel_accuracy>

08004cfa <??inv_check_push_13>:
 8004cfa:	b009      	add	sp, #36	@ 0x24
 8004cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cfe <inv_check_coverage_set_bias>:
 8004cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	f8df 5974 	ldr.w	r5, [pc, #2420]	@ 800567c <??DataTable18>
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f885 0424 	strb.w	r0, [r5, #1060]	@ 0x424
 8004d0e:	f205 4624 	addw	r6, r5, #1060	@ 0x424
 8004d12:	6070      	str	r0, [r6, #4]
 8004d14:	4607      	mov	r7, r0
 8004d16:	f105 0808 	add.w	r8, r5, #8
 8004d1a:	e023      	b.n	8004d64 <??inv_check_coverage_set_bias_0>

08004d1c <??inv_check_coverage_set_bias_1>:
 8004d1c:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8004d20:	f8d0 00cc 	ldr.w	r0, [r0, #204]	@ 0xcc
 8004d24:	f8d8 1034 	ldr.w	r1, [r8, #52]	@ 0x34
 8004d28:	f001 fd6c 	bl	8006804 <__aeabi_cfrcmple>
 8004d2c:	d819      	bhi.n	8004d62 <??inv_check_coverage_set_bias_2>
 8004d2e:	e9d8 0112 	ldrd	r0, r1, [r8, #72]	@ 0x48
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8df 3950 	ldr.w	r3, [pc, #2384]	@ 8005688 <??DataTable18_3>
 8004d38:	f000 fdd0 	bl	80058dc <__adddf3>
 8004d3c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004d40:	f8df 2948 	ldr.w	r2, [pc, #2376]	@ 800568c <??DataTable18_4>
 8004d44:	f8df 3948 	ldr.w	r3, [pc, #2376]	@ 8005690 <??DataTable18_5>
 8004d48:	f001 f9de 	bl	8006108 <__aeabi_cdcmpeq>
 8004d4c:	d209      	bcs.n	8004d62 <??inv_check_coverage_set_bias_2>
 8004d4e:	f895 0424 	ldrb.w	r0, [r5, #1060]	@ 0x424
 8004d52:	1c40      	adds	r0, r0, #1
 8004d54:	f885 0424 	strb.w	r0, [r5, #1060]	@ 0x424
 8004d58:	6870      	ldr	r0, [r6, #4]
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	40b9      	lsls	r1, r7
 8004d5e:	4308      	orrs	r0, r1
 8004d60:	6070      	str	r0, [r6, #4]

08004d62 <??inv_check_coverage_set_bias_2>:
 8004d62:	1c7f      	adds	r7, r7, #1

08004d64 <??inv_check_coverage_set_bias_0>:
 8004d64:	2f03      	cmp	r7, #3
 8004d66:	dbd9      	blt.n	8004d1c <??inv_check_coverage_set_bias_1>
 8004d68:	f895 0424 	ldrb.w	r0, [r5, #1060]	@ 0x424
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d015      	beq.n	8004d9c <??inv_check_coverage_set_bias_3>
 8004d70:	2700      	movs	r7, #0
 8004d72:	e009      	b.n	8004d88 <??inv_check_coverage_set_bias_4>

08004d74 <??inv_check_coverage_set_bias_5>:
 8004d74:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8004d78:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004d7c:	f001 fa14 	bl	80061a8 <__aeabi_d2iz>
 8004d80:	eb05 0187 	add.w	r1, r5, r7, lsl #2
 8004d84:	6648      	str	r0, [r1, #100]	@ 0x64
 8004d86:	1c7f      	adds	r7, r7, #1

08004d88 <??inv_check_coverage_set_bias_4>:
 8004d88:	2f03      	cmp	r7, #3
 8004d8a:	dbf3      	blt.n	8004d74 <??inv_check_coverage_set_bias_5>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	60b0      	str	r0, [r6, #8]
 8004d90:	68a8      	ldr	r0, [r5, #8]
 8004d92:	2804      	cmp	r0, #4
 8004d94:	da02      	bge.n	8004d9c <??inv_check_coverage_set_bias_3>
 8004d96:	f895 0424 	ldrb.w	r0, [r5, #1060]	@ 0x424
 8004d9a:	60a8      	str	r0, [r5, #8]

08004d9c <??inv_check_coverage_set_bias_3>:
 8004d9c:	f895 0424 	ldrb.w	r0, [r5, #1060]	@ 0x424
 8004da0:	2803      	cmp	r0, #3
 8004da2:	d11b      	bne.n	8004ddc <??inv_check_coverage_set_bias_6>
 8004da4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004da8:	f8df 18e8 	ldr.w	r1, [pc, #2280]	@ 8005694 <??DataTable18_6>
 8004dac:	f001 fd2e 	bl	800680c <__aeabi_cfcmpeq>
 8004db0:	d214      	bcs.n	8004ddc <??inv_check_coverage_set_bias_6>
 8004db2:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	@ 0x48
 8004db6:	2000      	movs	r0, #0
 8004db8:	f8df 18cc 	ldr.w	r1, [pc, #2252]	@ 8005688 <??DataTable18_3>
 8004dbc:	f000 fd8e 	bl	80058dc <__adddf3>
 8004dc0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004dc4:	f8df 28c4 	ldr.w	r2, [pc, #2244]	@ 800568c <??DataTable18_4>
 8004dc8:	f8df 38c4 	ldr.w	r3, [pc, #2244]	@ 8005690 <??DataTable18_5>
 8004dcc:	f001 f99c 	bl	8006108 <__aeabi_cdcmpeq>
 8004dd0:	d204      	bcs.n	8004ddc <??inv_check_coverage_set_bias_6>
 8004dd2:	68a8      	ldr	r0, [r5, #8]
 8004dd4:	2803      	cmp	r0, #3
 8004dd6:	d101      	bne.n	8004ddc <??inv_check_coverage_set_bias_6>
 8004dd8:	2004      	movs	r0, #4
 8004dda:	60a8      	str	r0, [r5, #8]

08004ddc <??inv_check_coverage_set_bias_6>:
 8004ddc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004de0:	f8df 18b4 	ldr.w	r1, [pc, #2228]	@ 8005698 <??DataTable18_7>
 8004de4:	f001 fd12 	bl	800680c <__aeabi_cfcmpeq>
 8004de8:	d21b      	bcs.n	8004e22 <??inv_check_coverage_set_bias_7>
 8004dea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004dee:	f8df 18ac 	ldr.w	r1, [pc, #2220]	@ 800569c <??DataTable18_8>
 8004df2:	f001 fd0b 	bl	800680c <__aeabi_cfcmpeq>
 8004df6:	d214      	bcs.n	8004e22 <??inv_check_coverage_set_bias_7>
 8004df8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	@ 0x48
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f8df 1888 	ldr.w	r1, [pc, #2184]	@ 8005688 <??DataTable18_3>
 8004e02:	f000 fd6b 	bl	80058dc <__adddf3>
 8004e06:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004e0a:	f8df 2894 	ldr.w	r2, [pc, #2196]	@ 80056a0 <??DataTable18_9>
 8004e0e:	f8df 3894 	ldr.w	r3, [pc, #2196]	@ 80056a4 <??DataTable18_10>
 8004e12:	f001 f979 	bl	8006108 <__aeabi_cdcmpeq>
 8004e16:	d204      	bcs.n	8004e22 <??inv_check_coverage_set_bias_7>
 8004e18:	68a8      	ldr	r0, [r5, #8]
 8004e1a:	2804      	cmp	r0, #4
 8004e1c:	d101      	bne.n	8004e22 <??inv_check_coverage_set_bias_7>
 8004e1e:	2005      	movs	r0, #5
 8004e20:	60a8      	str	r0, [r5, #8]

08004e22 <??inv_check_coverage_set_bias_7>:
 8004e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e26 <inv_combine_data_calculate_bias>:
 8004e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	f8df 784c 	ldr.w	r7, [pc, #2124]	@ 800567c <??DataTable18>
 8004e30:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	@ 0x4a4
 8004e34:	2801      	cmp	r0, #1
 8004e36:	d14d      	bne.n	8004ed4 <??inv_combine_data_calculate_bias_0>
 8004e38:	f107 05e0 	add.w	r5, r7, #224	@ 0xe0
 8004e3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e40:	461a      	mov	r2, r3
 8004e42:	f507 71e4 	add.w	r1, r7, #456	@ 0x1c8
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb fb41 	bl	80004ce <inv_combine_compass_data>
 8004e4c:	f107 0850 	add.w	r8, r7, #80	@ 0x50
 8004e50:	4642      	mov	r2, r8
 8004e52:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fb fd47 	bl	80008ea <inv_compute_bias>
 8004e5c:	0006      	movs	r6, r0
 8004e5e:	d03a      	beq.n	8004ed6 <??inv_combine_data_calculate_bias_1>
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	1c40      	adds	r0, r0, #1
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004e68:	460c      	mov	r4, r1
 8004e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004e6e:	f001 f99b 	bl	80061a8 <__aeabi_d2iz>
 8004e72:	4621      	mov	r1, r4
 8004e74:	f004 ff53 	bl	8009d1e <inv_q30_mult>
 8004e78:	f001 fae8 	bl	800644c <__aeabi_i2f>
 8004e7c:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 8004e80:	f001 fb38 	bl	80064f4 <__aeabi_fmul>
 8004e84:	f000 fe88 	bl	8005b98 <__aeabi_f2d>
 8004e88:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8004e8c:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8004e90:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004e94:	f001 f988 	bl	80061a8 <__aeabi_d2iz>
 8004e98:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e9c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004ea0:	f001 f982 	bl	80061a8 <__aeabi_d2iz>
 8004ea4:	f8c8 000c 	str.w	r0, [r8, #12]
 8004ea8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8004eac:	f001 f97c 	bl	80061a8 <__aeabi_d2iz>
 8004eb0:	f8c8 0010 	str.w	r0, [r8, #16]
 8004eb4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f8df 37ec 	ldr.w	r3, [pc, #2028]	@ 80056a8 <??DataTable18_11>
 8004ebe:	f001 f91b 	bl	80060f8 <__aeabi_cdrcmple>
 8004ec2:	d808      	bhi.n	8004ed6 <??inv_combine_data_calculate_bias_1>
 8004ec4:	f8df 37e4 	ldr.w	r3, [pc, #2020]	@ 80056ac <??DataTable18_12>
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4629      	mov	r1, r5
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f7fb fafe 	bl	80004ce <inv_combine_compass_data>
 8004ed2:	e000      	b.n	8004ed6 <??inv_combine_data_calculate_bias_1>

08004ed4 <??inv_combine_data_calculate_bias_0>:
 8004ed4:	2600      	movs	r6, #0

08004ed6 <??inv_combine_data_calculate_bias_1>:
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004edc <inv_sort_order_4_T>:
 8004edc:	b580      	push	{r7, lr}
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68d1      	ldr	r1, [r2, #12]
 8004ee2:	6913      	ldr	r3, [r2, #16]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fc91 	bl	800680c <__aeabi_cfcmpeq>
 8004eea:	d214      	bcs.n	8004f16 <??inv_sort_order_4_T_0>
 8004eec:	6950      	ldr	r0, [r2, #20]
 8004eee:	f001 fc8d 	bl	800680c <__aeabi_cfcmpeq>
 8004ef2:	d210      	bcs.n	8004f16 <??inv_sort_order_4_T_0>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	6410      	str	r0, [r2, #64]	@ 0x40
 8004ef8:	6910      	ldr	r0, [r2, #16]
 8004efa:	6951      	ldr	r1, [r2, #20]
 8004efc:	f001 fc82 	bl	8006804 <__aeabi_cfrcmple>
 8004f00:	d804      	bhi.n	8004f0c <??inv_sort_order_4_T_1>
 8004f02:	2001      	movs	r0, #1
 8004f04:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f06:	2002      	movs	r0, #2
 8004f08:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f0a:	bd01      	pop	{r0, pc}

08004f0c <??inv_sort_order_4_T_1>:
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f10:	2001      	movs	r0, #1
 8004f12:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f14:	bd01      	pop	{r0, pc}

08004f16 <??inv_sort_order_4_T_0>:
 8004f16:	4608      	mov	r0, r1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f001 fc77 	bl	800680c <__aeabi_cfcmpeq>
 8004f1e:	d214      	bcs.n	8004f4a <??inv_sort_order_4_T_2>
 8004f20:	6950      	ldr	r0, [r2, #20]
 8004f22:	f001 fc73 	bl	800680c <__aeabi_cfcmpeq>
 8004f26:	d210      	bcs.n	8004f4a <??inv_sort_order_4_T_2>
 8004f28:	2001      	movs	r0, #1
 8004f2a:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f2c:	68d0      	ldr	r0, [r2, #12]
 8004f2e:	6951      	ldr	r1, [r2, #20]
 8004f30:	f001 fc68 	bl	8006804 <__aeabi_cfrcmple>
 8004f34:	d804      	bhi.n	8004f40 <??inv_sort_order_4_T_3>
 8004f36:	2000      	movs	r0, #0
 8004f38:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f3e:	bd01      	pop	{r0, pc}

08004f40 <??inv_sort_order_4_T_3>:
 8004f40:	2002      	movs	r0, #2
 8004f42:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f44:	2000      	movs	r0, #0
 8004f46:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f48:	bd01      	pop	{r0, pc}

08004f4a <??inv_sort_order_4_T_2>:
 8004f4a:	2002      	movs	r0, #2
 8004f4c:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f4e:	68d0      	ldr	r0, [r2, #12]
 8004f50:	6911      	ldr	r1, [r2, #16]
 8004f52:	f001 fc57 	bl	8006804 <__aeabi_cfrcmple>
 8004f56:	d804      	bhi.n	8004f62 <??inv_sort_order_4_T_4>
 8004f58:	2000      	movs	r0, #0
 8004f5a:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f60:	bd01      	pop	{r0, pc}

08004f62 <??inv_sort_order_4_T_4>:
 8004f62:	2001      	movs	r0, #1
 8004f64:	6450      	str	r0, [r2, #68]	@ 0x44
 8004f66:	2000      	movs	r0, #0
 8004f68:	6490      	str	r0, [r2, #72]	@ 0x48
 8004f6a:	bd01      	pop	{r0, pc}

08004f6c <inv_init_check_sample_balance>:
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	64c1      	str	r1, [r0, #76]	@ 0x4c
 8004f70:	460a      	mov	r2, r1
 8004f72:	e005      	b.n	8004f80 <??inv_init_check_sample_balance_0>

08004f74 <??inv_init_check_sample_balance_1>:
 8004f74:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 8004f78:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f7e:	1c49      	adds	r1, r1, #1

08004f80 <??inv_init_check_sample_balance_0>:
 8004f80:	2903      	cmp	r1, #3
 8004f82:	dbf7      	blt.n	8004f74 <??inv_init_check_sample_balance_1>
 8004f84:	2101      	movs	r1, #1
 8004f86:	6741      	str	r1, [r0, #116]	@ 0x74
 8004f88:	4611      	mov	r1, r2
 8004f8a:	6781      	str	r1, [r0, #120]	@ 0x78
 8004f8c:	4770      	bx	lr

08004f8e <inv_init_check_sample_balance_parameter>:
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	4604      	mov	r4, r0
 8004f92:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8004f96:	2114      	movs	r1, #20
 8004f98:	6041      	str	r1, [r0, #4]
 8004f9a:	210a      	movs	r1, #10
 8004f9c:	60c1      	str	r1, [r0, #12]
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	7701      	strb	r1, [r0, #28]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7ff ffe2 	bl	8004f6c <inv_init_check_sample_balance>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fac:	bd10      	pop	{r4, pc}

08004fae <inv_add_accel_block_data>:
 8004fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	a903      	add	r1, sp, #12
 8004fb4:	f7ff fdc3 	bl	8004b3e <inv_get_current_calibrated_accel>
 8004fb8:	2400      	movs	r4, #0
 8004fba:	4625      	mov	r5, r4
 8004fbc:	4626      	mov	r6, r4
 8004fbe:	e017      	b.n	8004ff0 <??inv_add_accel_block_data_0>

08004fc0 <??inv_add_accel_block_data_1>:
 8004fc0:	a803      	add	r0, sp, #12
 8004fc2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8004fc6:	f001 fa41 	bl	800644c <__aeabi_i2f>
 8004fca:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 8004fce:	f001 fa91 	bl	80064f4 <__aeabi_fmul>
 8004fd2:	a900      	add	r1, sp, #0
 8004fd4:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
 8004fd8:	4601      	mov	r1, r0
 8004fda:	f001 fa8b 	bl	80064f4 <__aeabi_fmul>
 8004fde:	f000 fddb 	bl	8005b98 <__aeabi_f2d>
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f000 fc79 	bl	80058dc <__adddf3>
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
 8004fee:	1c76      	adds	r6, r6, #1

08004ff0 <??inv_add_accel_block_data_0>:
 8004ff0:	2e03      	cmp	r6, #3
 8004ff2:	dbe5      	blt.n	8004fc0 <??inv_add_accel_block_data_1>
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f00b fcc0 	bl	801097c <sqrt>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	460d      	mov	r5, r1
 8005000:	2600      	movs	r6, #0
 8005002:	e013      	b.n	800502c <??inv_add_accel_block_data_2>

08005004 <??inv_add_accel_block_data_3>:
 8005004:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8005008:	a800      	add	r0, sp, #0
 800500a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800500e:	f000 fdc3 	bl	8005b98 <__aeabi_f2d>
 8005012:	4622      	mov	r2, r4
 8005014:	462b      	mov	r3, r5
 8005016:	f000 ff41 	bl	8005e9c <__aeabi_ddiv>
 800501a:	f001 f90d 	bl	8006238 <__aeabi_d2f>
 800501e:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 8005022:	f001 f95f 	bl	80062e4 <__addsf3>
 8005026:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
 800502a:	1c76      	adds	r6, r6, #1

0800502c <??inv_add_accel_block_data_2>:
 800502c:	f8df 064c 	ldr.w	r0, [pc, #1612]	@ 800567c <??DataTable18>
 8005030:	2e03      	cmp	r6, #3
 8005032:	dbe7      	blt.n	8005004 <??inv_add_accel_block_data_3>
 8005034:	f8d0 1484 	ldr.w	r1, [r0, #1156]	@ 0x484
 8005038:	1c49      	adds	r1, r1, #1
 800503a:	f8c0 1484 	str.w	r1, [r0, #1156]	@ 0x484
 800503e:	2101      	movs	r1, #1
 8005040:	f8c0 14ac 	str.w	r1, [r0, #1196]	@ 0x4ac
 8005044:	b007      	add	sp, #28
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005048 <inv_add_vector_block_data>:
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b085      	sub	sp, #20
 800504c:	4606      	mov	r6, r0
 800504e:	aa00      	add	r2, sp, #0
 8005050:	a901      	add	r1, sp, #4
 8005052:	a802      	add	r0, sp, #8
 8005054:	f004 fdf8 	bl	8009c48 <inv_get_sensor_type_gravity>
 8005058:	2400      	movs	r4, #0
 800505a:	4625      	mov	r5, r4
 800505c:	4627      	mov	r7, r4
 800505e:	e00e      	b.n	800507e <??inv_add_vector_block_data_0>

08005060 <??inv_add_vector_block_data_1>:
 8005060:	a802      	add	r0, sp, #8
 8005062:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 8005066:	4601      	mov	r1, r0
 8005068:	f001 fa44 	bl	80064f4 <__aeabi_fmul>
 800506c:	f000 fd94 	bl	8005b98 <__aeabi_f2d>
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	f000 fc32 	bl	80058dc <__adddf3>
 8005078:	4604      	mov	r4, r0
 800507a:	460d      	mov	r5, r1
 800507c:	1c7f      	adds	r7, r7, #1

0800507e <??inv_add_vector_block_data_0>:
 800507e:	2f03      	cmp	r7, #3
 8005080:	dbee      	blt.n	8005060 <??inv_add_vector_block_data_1>
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f00b fc79 	bl	801097c <sqrt>
 800508a:	4604      	mov	r4, r0
 800508c:	460d      	mov	r5, r1
 800508e:	2700      	movs	r7, #0
 8005090:	e011      	b.n	80050b6 <??inv_add_vector_block_data_2>

08005092 <??inv_add_vector_block_data_3>:
 8005092:	a802      	add	r0, sp, #8
 8005094:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 8005098:	f000 fd7e 	bl	8005b98 <__aeabi_f2d>
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f000 fefc 	bl	8005e9c <__aeabi_ddiv>
 80050a4:	f001 f8c8 	bl	8006238 <__aeabi_d2f>
 80050a8:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 80050ac:	f001 f91a 	bl	80062e4 <__addsf3>
 80050b0:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 80050b4:	1c7f      	adds	r7, r7, #1

080050b6 <??inv_add_vector_block_data_2>:
 80050b6:	2f03      	cmp	r7, #3
 80050b8:	dbeb      	blt.n	8005092 <??inv_add_vector_block_data_3>
 80050ba:	6d70      	ldr	r0, [r6, #84]	@ 0x54
 80050bc:	1c40      	adds	r0, r0, #1
 80050be:	6570      	str	r0, [r6, #84]	@ 0x54
 80050c0:	2001      	movs	r0, #1
 80050c2:	67f0      	str	r0, [r6, #124]	@ 0x7c
 80050c4:	b005      	add	sp, #20
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050c8 <inv_check_sample_balance>:
 80050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	2500      	movs	r5, #0
 80050d0:	e006      	b.n	80050e0 <??inv_check_sample_balance_1>

080050d2 <??inv_check_sample_balance_2>:
 80050d2:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000

080050d6 <??inv_check_sample_balance_3>:
 80050d6:	60f0      	str	r0, [r6, #12]
 80050d8:	4608      	mov	r0, r1
 80050da:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80050de:	1c6d      	adds	r5, r5, #1

080050e0 <??inv_check_sample_balance_1>:
 80050e0:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 80050e4:	2d03      	cmp	r5, #3
 80050e6:	da36      	bge.n	8005156 <??inv_check_sample_balance_4>
 80050e8:	6970      	ldr	r0, [r6, #20]
 80050ea:	f001 f9af 	bl	800644c <__aeabi_i2f>
 80050ee:	4601      	mov	r1, r0
 80050f0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80050f4:	f001 fab2 	bl	800665c <__aeabi_fdiv>
 80050f8:	4607      	mov	r7, r0
 80050fa:	46b8      	mov	r8, r7
 80050fc:	2100      	movs	r1, #0
 80050fe:	f001 fb81 	bl	8006804 <__aeabi_cfrcmple>
 8005102:	4642      	mov	r2, r8
 8005104:	d901      	bls.n	800510a <??inv_check_sample_balance_5>
 8005106:	f082 4200 	eor.w	r2, r2, #2147483648	@ 0x80000000

0800510a <??inv_check_sample_balance_5>:
 800510a:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 800510e:	69b3      	ldr	r3, [r6, #24]
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fb77 	bl	8006804 <__aeabi_cfrcmple>
 8005116:	d901      	bls.n	800511c <??inv_check_sample_balance_6>
 8005118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800511c <??inv_check_sample_balance_6>:
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	f001 f8de 	bl	80062e0 <__aeabi_fsub>
 8005124:	6330      	str	r0, [r6, #48]	@ 0x30
 8005126:	f8c6 8018 	str.w	r8, [r6, #24]
 800512a:	f8d4 803c 	ldr.w	r8, [r4, #60]	@ 0x3c
 800512e:	f8df 0580 	ldr.w	r0, [pc, #1408]	@ 80056b0 <??DataTable18_13>
 8005132:	4641      	mov	r1, r8
 8005134:	f001 f8d6 	bl	80062e4 <__addsf3>
 8005138:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800513a:	f001 f9db 	bl	80064f4 <__aeabi_fmul>
 800513e:	4639      	mov	r1, r7
 8005140:	f001 f8d0 	bl	80062e4 <__addsf3>
 8005144:	4641      	mov	r1, r8
 8005146:	f001 fa89 	bl	800665c <__aeabi_fdiv>
 800514a:	6270      	str	r0, [r6, #36]	@ 0x24
 800514c:	2100      	movs	r1, #0
 800514e:	f001 fb59 	bl	8006804 <__aeabi_cfrcmple>
 8005152:	d8be      	bhi.n	80050d2 <??inv_check_sample_balance_2>
 8005154:	e7bf      	b.n	80050d6 <??inv_check_sample_balance_3>

08005156 <??inv_check_sample_balance_4>:
 8005156:	4620      	mov	r0, r4
 8005158:	f7ff fec0 	bl	8004edc <inv_sort_order_4_T>
 800515c:	6930      	ldr	r0, [r6, #16]
 800515e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005162:	da01      	bge.n	8005168 <??inv_check_sample_balance_7>
 8005164:	1c40      	adds	r0, r0, #1
 8005166:	6130      	str	r0, [r6, #16]

08005168 <??inv_check_sample_balance_7>:
 8005168:	6871      	ldr	r1, [r6, #4]
 800516a:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 800516e:	2805      	cmp	r0, #5
 8005170:	d86e      	bhi.n	8005250 <??inv_check_sample_balance_8>
 8005172:	e8df f000 	tbb	[pc, r0]

08005176 <??inv_check_sample_balance_0>:
 8005176:	0e03 2719 375c                              ...'\7

0800517c <??inv_check_sample_balance_9>:
 800517c:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8005180:	2101      	movs	r1, #1
 8005182:	6041      	str	r1, [r0, #4]
 8005184:	6081      	str	r1, [r0, #8]
 8005186:	2000      	movs	r0, #0
 8005188:	6130      	str	r0, [r6, #16]
 800518a:	4608      	mov	r0, r1
 800518c:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 8005190:	e05e      	b.n	8005250 <??inv_check_sample_balance_8>

08005192 <??inv_check_sample_balance_10>:
 8005192:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8005196:	68c1      	ldr	r1, [r0, #12]
 8005198:	2901      	cmp	r1, #1
 800519a:	d159      	bne.n	8005250 <??inv_check_sample_balance_8>
 800519c:	2102      	movs	r1, #2
 800519e:	f884 1070 	strb.w	r1, [r4, #112]	@ 0x70
 80051a2:	2100      	movs	r1, #0
 80051a4:	6081      	str	r1, [r0, #8]
 80051a6:	e053      	b.n	8005250 <??inv_check_sample_balance_8>

080051a8 <??inv_check_sample_balance_11>:
 80051a8:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 80051ac:	68d2      	ldr	r2, [r2, #12]
 80051ae:	4610      	mov	r0, r2
 80051b0:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80051b2:	f001 fb27 	bl	8006804 <__aeabi_cfrcmple>
 80051b6:	d90c      	bls.n	80051d2 <??inv_check_sample_balance_12>
 80051b8:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80051ba:	4611      	mov	r1, r2
 80051bc:	f001 fb22 	bl	8006804 <__aeabi_cfrcmple>
 80051c0:	d83c      	bhi.n	800523c <??inv_check_sample_balance_13>
 80051c2:	e020      	b.n	8005206 <??inv_check_sample_balance_14>

080051c4 <??inv_check_sample_balance_15>:
 80051c4:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 80051c8:	68c0      	ldr	r0, [r0, #12]
 80051ca:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80051cc:	f001 fb1a 	bl	8006804 <__aeabi_cfrcmple>
 80051d0:	d83e      	bhi.n	8005250 <??inv_check_sample_balance_8>

080051d2 <??inv_check_sample_balance_12>:
 80051d2:	2004      	movs	r0, #4
 80051d4:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 80051d8:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 80051dc:	2100      	movs	r1, #0
 80051de:	6041      	str	r1, [r0, #4]
 80051e0:	6081      	str	r1, [r0, #8]
 80051e2:	e035      	b.n	8005250 <??inv_check_sample_balance_8>

080051e4 <??inv_check_sample_balance_16>:
 80051e4:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 80051e8:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80051ea:	68d1      	ldr	r1, [r2, #12]
 80051ec:	f001 fb0a 	bl	8006804 <__aeabi_cfrcmple>
 80051f0:	d909      	bls.n	8005206 <??inv_check_sample_balance_14>
 80051f2:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80051f4:	f8df 14bc 	ldr.w	r1, [pc, #1212]	@ 80056b4 <??DataTable18_14>
 80051f8:	f001 fb08 	bl	800680c <__aeabi_cfcmpeq>
 80051fc:	d20c      	bcs.n	8005218 <??inv_check_sample_balance_17>
 80051fe:	6930      	ldr	r0, [r6, #16]
 8005200:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8005202:	4288      	cmp	r0, r1
 8005204:	db24      	blt.n	8005250 <??inv_check_sample_balance_8>

08005206 <??inv_check_sample_balance_14>:
 8005206:	2003      	movs	r0, #3
 8005208:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 800520c:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8005210:	2101      	movs	r1, #1
 8005212:	6041      	str	r1, [r0, #4]
 8005214:	6081      	str	r1, [r0, #8]
 8005216:	e01b      	b.n	8005250 <??inv_check_sample_balance_8>

08005218 <??inv_check_sample_balance_17>:
 8005218:	2004      	movs	r0, #4
 800521a:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 800521e:	2000      	movs	r0, #0
 8005220:	6130      	str	r0, [r6, #16]
 8005222:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8005226:	2100      	movs	r1, #0
 8005228:	6041      	str	r1, [r0, #4]
 800522a:	6081      	str	r1, [r0, #8]
 800522c:	e010      	b.n	8005250 <??inv_check_sample_balance_8>

0800522e <??inv_check_sample_balance_18>:
 800522e:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8005230:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005234:	68c9      	ldr	r1, [r1, #12]
 8005236:	f001 fae5 	bl	8006804 <__aeabi_cfrcmple>
 800523a:	d809      	bhi.n	8005250 <??inv_check_sample_balance_8>

0800523c <??inv_check_sample_balance_13>:
 800523c:	2005      	movs	r0, #5
 800523e:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 8005242:	2000      	movs	r0, #0
 8005244:	6130      	str	r0, [r6, #16]
 8005246:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 800524a:	2101      	movs	r1, #1
 800524c:	6041      	str	r1, [r0, #4]
 800524e:	6081      	str	r1, [r0, #8]

08005250 <??inv_check_sample_balance_8>:
 8005250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005254 <set_sample_rate>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f8df 5420 	ldr.w	r5, [pc, #1056]	@ 800567c <??DataTable18>
 800525c:	f001 f8f6 	bl	800644c <__aeabi_i2f>
 8005260:	f8df 1454 	ldr.w	r1, [pc, #1108]	@ 80056b8 <??DataTable18_15>
 8005264:	f001 f946 	bl	80064f4 <__aeabi_fmul>
 8005268:	f8df 1450 	ldr.w	r1, [pc, #1104]	@ 80056bc <??DataTable18_16>
 800526c:	f001 f9f6 	bl	800665c <__aeabi_fdiv>
 8005270:	f000 fc92 	bl	8005b98 <__aeabi_f2d>
 8005274:	f00b fd48 	bl	8010d08 <cos>
 8005278:	2200      	movs	r2, #0
 800527a:	f8df 3444 	ldr.w	r3, [pc, #1092]	@ 80056c0 <??DataTable18_17>
 800527e:	f000 fce3 	bl	8005c48 <__aeabi_dmul>
 8005282:	f000 ff91 	bl	80061a8 <__aeabi_d2iz>
 8005286:	f8c5 0084 	str.w	r0, [r5, #132]	@ 0x84
 800528a:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
 800528e:	bd31      	pop	{r0, r4, r5, pc}

08005290 <inv_auto_calibrate>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	b090      	sub	sp, #64	@ 0x40
 8005296:	4604      	mov	r4, r0
 8005298:	a802      	add	r0, sp, #8
 800529a:	2100      	movs	r1, #0
 800529c:	460a      	mov	r2, r1
 800529e:	460b      	mov	r3, r1
 80052a0:	c00e      	stmia	r0!, {r1, r2, r3}
 80052a2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80052a6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80052a8:	f8df 53d0 	ldr.w	r5, [pc, #976]	@ 800567c <??DataTable18>
 80052ac:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80052b0:	4288      	cmp	r0, r1
 80052b2:	db06      	blt.n	80052c2 <??inv_auto_calibrate_0>
 80052b4:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 80052b8:	4288      	cmp	r0, r1
 80052ba:	d012      	beq.n	80052e2 <??inv_auto_calibrate_1>
 80052bc:	f7ff ffca 	bl	8005254 <set_sample_rate>
 80052c0:	e00f      	b.n	80052e2 <??inv_auto_calibrate_1>

080052c2 <??inv_auto_calibrate_0>:
 80052c2:	f8d5 2348 	ldr.w	r2, [r5, #840]	@ 0x348
 80052c6:	1880      	adds	r0, r0, r2
 80052c8:	f8c5 0348 	str.w	r0, [r5, #840]	@ 0x348
 80052cc:	4288      	cmp	r0, r1
 80052ce:	f2c0 8172 	blt.w	80055b6 <??inv_auto_calibrate_2>
 80052d2:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80052d4:	4281      	cmp	r1, r0
 80052d6:	d001      	beq.n	80052dc <??inv_auto_calibrate_3>
 80052d8:	f7ff ffbc 	bl	8005254 <set_sample_rate>

080052dc <??inv_auto_calibrate_3>:
 80052dc:	2000      	movs	r0, #0
 80052de:	f8c5 0348 	str.w	r0, [r5, #840]	@ 0x348

080052e2 <??inv_auto_calibrate_1>:
 80052e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80052e4:	f8c5 04b0 	str.w	r0, [r5, #1200]	@ 0x4b0
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7ff fe60 	bl	8004fae <inv_add_accel_block_data>
 80052ee:	f8d5 0484 	ldr.w	r0, [r5, #1156]	@ 0x484
 80052f2:	f8d5 1480 	ldr.w	r1, [r5, #1152]	@ 0x480
 80052f6:	4288      	cmp	r0, r1
 80052f8:	db06      	blt.n	8005308 <??inv_auto_calibrate_4>
 80052fa:	f505 6086 	add.w	r0, r5, #1072	@ 0x430
 80052fe:	f7ff fee3 	bl	80050c8 <inv_check_sample_balance>
 8005302:	2000      	movs	r0, #0
 8005304:	f8c5 0484 	str.w	r0, [r5, #1156]	@ 0x484

08005308 <??inv_auto_calibrate_4>:
 8005308:	f8d5 04a8 	ldr.w	r0, [r5, #1192]	@ 0x4a8
 800530c:	2801      	cmp	r0, #1
 800530e:	d102      	bne.n	8005316 <??inv_auto_calibrate_5>
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff fc35 	bl	8004b80 <inv_check_push>

08005316 <??inv_auto_calibrate_5>:
 8005316:	f8d5 04a4 	ldr.w	r0, [r5, #1188]	@ 0x4a4
 800531a:	2801      	cmp	r0, #1
 800531c:	f040 814b 	bne.w	80055b6 <??inv_auto_calibrate_2>
 8005320:	a802      	add	r0, sp, #8
 8005322:	f005 f9ff 	bl	800a724 <inv_get_linear_accel_float>
 8005326:	a802      	add	r0, sp, #8
 8005328:	6887      	ldr	r7, [r0, #8]
 800532a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800532e:	9902      	ldr	r1, [sp, #8]
 8005330:	4608      	mov	r0, r1
 8005332:	f001 f8df 	bl	80064f4 <__aeabi_fmul>
 8005336:	4681      	mov	r9, r0
 8005338:	4640      	mov	r0, r8
 800533a:	4641      	mov	r1, r8
 800533c:	f001 f8da 	bl	80064f4 <__aeabi_fmul>
 8005340:	4649      	mov	r1, r9
 8005342:	f000 ffcf 	bl	80062e4 <__addsf3>
 8005346:	4680      	mov	r8, r0
 8005348:	4638      	mov	r0, r7
 800534a:	4639      	mov	r1, r7
 800534c:	f001 f8d2 	bl	80064f4 <__aeabi_fmul>
 8005350:	4641      	mov	r1, r8
 8005352:	f000 ffc7 	bl	80062e4 <__addsf3>
 8005356:	f00b fd61 	bl	8010e1c <sqrtf>
 800535a:	4601      	mov	r1, r0
 800535c:	60e9      	str	r1, [r5, #12]
 800535e:	f04f 408d 	mov.w	r0, #1182793728	@ 0x46800000
 8005362:	f001 f8c7 	bl	80064f4 <__aeabi_fmul>
 8005366:	f001 fa8b 	bl	8006880 <__aeabi_f2iz>
 800536a:	f8ad 0000 	strh.w	r0, [sp]
 800536e:	a800      	add	r0, sp, #0
 8005370:	2100      	movs	r1, #0
 8005372:	8041      	strh	r1, [r0, #2]
 8005374:	8081      	strh	r1, [r0, #4]
 8005376:	f505 772c 	add.w	r7, r5, #688	@ 0x2b0
 800537a:	4639      	mov	r1, r7
 800537c:	f7fd f9a0 	bl	80026c0 <inv_fast_nomot_store_data>
 8005380:	a808      	add	r0, sp, #32
 8005382:	f005 f93d 	bl	800a600 <inv_get_quaternion>
 8005386:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8005388:	9808      	ldr	r0, [sp, #32]
 800538a:	f004 fcc8 	bl	8009d1e <inv_q30_mult>
 800538e:	4681      	mov	r9, r0
 8005390:	f10d 0820 	add.w	r8, sp, #32
 8005394:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8005396:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800539a:	f004 fcc0 	bl	8009d1e <inv_q30_mult>
 800539e:	4682      	mov	sl, r0
 80053a0:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 80053a2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80053a6:	f004 fcba 	bl	8009d1e <inv_q30_mult>
 80053aa:	eb0a 0109 	add.w	r1, sl, r9
 80053ae:	eb00 0901 	add.w	r9, r0, r1
 80053b2:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 80053b4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80053b8:	f004 fcb1 	bl	8009d1e <inv_q30_mult>
 80053bc:	eb00 0809 	add.w	r8, r0, r9
 80053c0:	2210      	movs	r2, #16
 80053c2:	a908      	add	r1, sp, #32
 80053c4:	f105 0070 	add.w	r0, r5, #112	@ 0x70
 80053c8:	f007 ffb8 	bl	800d33c <memcpy>
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	e01b      	b.n	800540a <??inv_auto_calibrate_6>

080053d2 <??inv_auto_calibrate_7>:
 80053d2:	eb04 0a49 	add.w	sl, r4, r9, lsl #1
 80053d6:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80053d8:	f9ba 0048 	ldrsh.w	r0, [sl, #72]	@ 0x48
 80053dc:	0400      	lsls	r0, r0, #16
 80053de:	f004 fc9e 	bl	8009d1e <inv_q30_mult>
 80053e2:	a90c      	add	r1, sp, #48	@ 0x30
 80053e4:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80053e8:	f001 f830 	bl	800644c <__aeabi_i2f>
 80053ec:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 80053f0:	f001 f880 	bl	80064f4 <__aeabi_fmul>
 80053f4:	eb05 0189 	add.w	r1, r5, r9, lsl #2
 80053f8:	6148      	str	r0, [r1, #20]
 80053fa:	f9ba 0048 	ldrsh.w	r0, [sl, #72]	@ 0x48
 80053fe:	0400      	lsls	r0, r0, #16
 8005400:	a905      	add	r1, sp, #20
 8005402:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 8005406:	f109 0901 	add.w	r9, r9, #1

0800540a <??inv_auto_calibrate_6>:
 800540a:	f1b9 0f03 	cmp.w	r9, #3
 800540e:	dbe0      	blt.n	80053d2 <??inv_auto_calibrate_7>
 8005410:	f505 76e4 	add.w	r6, r5, #456	@ 0x1c8
 8005414:	a905      	add	r1, sp, #20
 8005416:	4630      	mov	r0, r6
 8005418:	f7fb f903 	bl	8000622 <inv_set_terms>
 800541c:	f8d5 0328 	ldr.w	r0, [r5, #808]	@ 0x328
 8005420:	6829      	ldr	r1, [r5, #0]
 8005422:	4288      	cmp	r0, r1
 8005424:	f2c0 80c7 	blt.w	80055b6 <??inv_auto_calibrate_2>
 8005428:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 800542c:	f001 f80e 	bl	800644c <__aeabi_i2f>
 8005430:	f04f 515e 	mov.w	r1, #931135488	@ 0x37800000
 8005434:	f001 f85e 	bl	80064f4 <__aeabi_fmul>
 8005438:	4681      	mov	r9, r0
 800543a:	f8d5 20d8 	ldr.w	r2, [r5, #216]	@ 0xd8
 800543e:	4610      	mov	r0, r2
 8005440:	2100      	movs	r1, #0
 8005442:	f001 f9e3 	bl	800680c <__aeabi_cfcmpeq>
 8005446:	d00b      	beq.n	8005460 <??inv_auto_calibrate_8>
 8005448:	4648      	mov	r0, r9
 800544a:	4611      	mov	r1, r2
 800544c:	f000 ff48 	bl	80062e0 <__aeabi_fsub>
 8005450:	f000 fba2 	bl	8005b98 <__aeabi_f2d>
 8005454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005458:	f000 feee 	bl	8006238 <__aeabi_d2f>
 800545c:	f8c5 00dc 	str.w	r0, [r5, #220]	@ 0xdc

08005460 <??inv_auto_calibrate_8>:
 8005460:	f8c5 90d8 	str.w	r9, [r5, #216]	@ 0xd8
 8005464:	68a8      	ldr	r0, [r5, #8]
 8005466:	2803      	cmp	r0, #3
 8005468:	d904      	bls.n	8005474 <??inv_auto_calibrate_9>
 800546a:	1f00      	subs	r0, r0, #4
 800546c:	d00a      	beq.n	8005484 <??inv_auto_calibrate_10>
 800546e:	1e40      	subs	r0, r0, #1
 8005470:	d00f      	beq.n	8005492 <??inv_auto_calibrate_11>
 8005472:	e014      	b.n	800549e <??inv_auto_calibrate_12>

08005474 <??inv_auto_calibrate_9>:
 8005474:	4893      	ldr	r0, [pc, #588]	@ (80056c4 <??DataTable18_18>)
 8005476:	63a8      	str	r0, [r5, #56]	@ 0x38
 8005478:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800547c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800547e:	20c8      	movs	r0, #200	@ 0xc8
 8005480:	6428      	str	r0, [r5, #64]	@ 0x40
 8005482:	e00c      	b.n	800549e <??inv_auto_calibrate_12>

08005484 <??inv_auto_calibrate_10>:
 8005484:	4890      	ldr	r0, [pc, #576]	@ (80056c8 <??DataTable18_19>)
 8005486:	63a8      	str	r0, [r5, #56]	@ 0x38
 8005488:	4890      	ldr	r0, [pc, #576]	@ (80056cc <??DataTable18_20>)
 800548a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800548c:	2064      	movs	r0, #100	@ 0x64
 800548e:	6428      	str	r0, [r5, #64]	@ 0x40
 8005490:	e005      	b.n	800549e <??inv_auto_calibrate_12>

08005492 <??inv_auto_calibrate_11>:
 8005492:	488f      	ldr	r0, [pc, #572]	@ (80056d0 <??DataTable18_21>)
 8005494:	63a8      	str	r0, [r5, #56]	@ 0x38
 8005496:	488f      	ldr	r0, [pc, #572]	@ (80056d4 <??DataTable18_22>)
 8005498:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800549a:	2032      	movs	r0, #50	@ 0x32
 800549c:	6428      	str	r0, [r5, #64]	@ 0x40

0800549e <??inv_auto_calibrate_12>:
 800549e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80054a0:	05c0      	lsls	r0, r0, #23
 80054a2:	4638      	mov	r0, r7
 80054a4:	d408      	bmi.n	80054b8 <??inv_auto_calibrate_13>
 80054a6:	f7fc ffd5 	bl	8002454 <inv_fast_nomot_parameter_3rd>
 80054aa:	f000 ffe5 	bl	8006478 <__aeabi_l2f>
 80054ae:	498a      	ldr	r1, [pc, #552]	@ (80056d8 <??DataTable18_23>)
 80054b0:	f001 f8d4 	bl	800665c <__aeabi_fdiv>
 80054b4:	6128      	str	r0, [r5, #16]
 80054b6:	e007      	b.n	80054c8 <??inv_auto_calibrate_14>

080054b8 <??inv_auto_calibrate_13>:
 80054b8:	f7fc ff0f 	bl	80022da <inv_fast_nomot_parameter>
 80054bc:	f000 ffdc 	bl	8006478 <__aeabi_l2f>
 80054c0:	4986      	ldr	r1, [pc, #536]	@ (80056dc <??DataTable18_24>)
 80054c2:	f001 f8cb 	bl	800665c <__aeabi_fdiv>
 80054c6:	6128      	str	r0, [r5, #16]

080054c8 <??inv_auto_calibrate_14>:
 80054c8:	2298      	movs	r2, #152	@ 0x98
 80054ca:	2100      	movs	r1, #0
 80054cc:	4638      	mov	r0, r7
 80054ce:	f007 feb1 	bl	800d234 <memset>
 80054d2:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 80054d6:	4540      	cmp	r0, r8
 80054d8:	da3f      	bge.n	800555a <??inv_auto_calibrate_15>
 80054da:	6928      	ldr	r0, [r5, #16]
 80054dc:	2100      	movs	r1, #0
 80054de:	f001 f991 	bl	8006804 <__aeabi_cfrcmple>
 80054e2:	d23a      	bcs.n	800555a <??inv_auto_calibrate_15>
 80054e4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80054e6:	f001 f991 	bl	800680c <__aeabi_cfcmpeq>
 80054ea:	d236      	bcs.n	800555a <??inv_auto_calibrate_15>
 80054ec:	6868      	ldr	r0, [r5, #4]
 80054ee:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80054f0:	4288      	cmp	r0, r1
 80054f2:	da05      	bge.n	8005500 <??inv_auto_calibrate_16>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff fc96 	bl	8004e26 <inv_combine_data_calculate_bias>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d10d      	bne.n	800551a <??inv_auto_calibrate_17>
 80054fe:	e05a      	b.n	80055b6 <??inv_auto_calibrate_2>

08005500 <??inv_auto_calibrate_16>:
 8005500:	f8d5 00b0 	ldr.w	r0, [r5, #176]	@ 0xb0
 8005504:	4976      	ldr	r1, [pc, #472]	@ (80056e0 <??DataTable18_25>)
 8005506:	f001 f97d 	bl	8006804 <__aeabi_cfrcmple>
 800550a:	d806      	bhi.n	800551a <??inv_auto_calibrate_17>
 800550c:	4620      	mov	r0, r4
 800550e:	f7ff fc8a 	bl	8004e26 <inv_combine_data_calculate_bias>
 8005512:	2800      	cmp	r0, #0
 8005514:	d04f      	beq.n	80055b6 <??inv_auto_calibrate_2>
 8005516:	2000      	movs	r0, #0
 8005518:	6068      	str	r0, [r5, #4]

0800551a <??inv_auto_calibrate_17>:
 800551a:	2000      	movs	r0, #0
 800551c:	e005      	b.n	800552a <??inv_auto_calibrate_18>

0800551e <??inv_auto_calibrate_19>:
 800551e:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8005522:	694a      	ldr	r2, [r1, #20]
 8005524:	f8c1 20b4 	str.w	r2, [r1, #180]	@ 0xb4
 8005528:	1c40      	adds	r0, r0, #1

0800552a <??inv_auto_calibrate_18>:
 800552a:	2803      	cmp	r0, #3
 800552c:	dbf7      	blt.n	800551e <??inv_auto_calibrate_19>
 800552e:	f7ff faec 	bl	8004b0a <inv_record_good_accel_maxmin>
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	e009      	b.n	800554c <??inv_auto_calibrate_20>

08005538 <??inv_auto_calibrate_21>:
 8005538:	eb05 0489 	add.w	r4, r5, r9, lsl #2
 800553c:	6a20      	ldr	r0, [r4, #32]
 800553e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005540:	f000 fece 	bl	80062e0 <__aeabi_fsub>
 8005544:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8005548:	f109 0901 	add.w	r9, r9, #1

0800554c <??inv_auto_calibrate_20>:
 800554c:	f1b9 0f03 	cmp.w	r9, #3
 8005550:	dbf2      	blt.n	8005538 <??inv_auto_calibrate_21>
 8005552:	f505 70d4 	add.w	r0, r5, #424	@ 0x1a8
 8005556:	f7ff fbd2 	bl	8004cfe <inv_check_coverage_set_bias>

0800555a <??inv_auto_calibrate_15>:
 800555a:	2400      	movs	r4, #0
 800555c:	e00b      	b.n	8005576 <??inv_auto_calibrate_22>

0800555e <??inv_auto_calibrate_23>:
 800555e:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8005562:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	f000 feba 	bl	80062e0 <__aeabi_fsub>
 800556c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005570:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8005574:	1c64      	adds	r4, r4, #1

08005576 <??inv_auto_calibrate_22>:
 8005576:	2c03      	cmp	r4, #3
 8005578:	dbf1      	blt.n	800555e <??inv_auto_calibrate_23>
 800557a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800557e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	@ 0xa8
 8005582:	f000 feaf 	bl	80062e4 <__addsf3>
 8005586:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800558a:	f000 feab 	bl	80062e4 <__addsf3>
 800558e:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	e006      	b.n	80055a6 <??inv_auto_calibrate_24>

08005598 <??inv_auto_calibrate_25>:
 8005598:	eb05 0089 	add.w	r0, r5, r9, lsl #2
 800559c:	6941      	ldr	r1, [r0, #20]
 800559e:	f8c0 1098 	str.w	r1, [r0, #152]	@ 0x98
 80055a2:	f109 0901 	add.w	r9, r9, #1

080055a6 <??inv_auto_calibrate_24>:
 80055a6:	f1b9 0f03 	cmp.w	r9, #3
 80055aa:	dbf5      	blt.n	8005598 <??inv_auto_calibrate_25>
 80055ac:	22e8      	movs	r2, #232	@ 0xe8
 80055ae:	2100      	movs	r1, #0
 80055b0:	4630      	mov	r0, r6
 80055b2:	f007 fe3f 	bl	800d234 <memset>

080055b6 <??inv_auto_calibrate_2>:
 80055b6:	2000      	movs	r0, #0
 80055b8:	b010      	add	sp, #64	@ 0x40
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055be <inv_init_in_use_auto_calibration>:
 80055be:	b510      	push	{r4, lr}
 80055c0:	4c2e      	ldr	r4, [pc, #184]	@ (800567c <??DataTable18>)
 80055c2:	f44f 6297 	mov.w	r2, #1208	@ 0x4b8
 80055c6:	2100      	movs	r1, #0
 80055c8:	4620      	mov	r0, r4
 80055ca:	f007 fe33 	bl	800d234 <memset>
 80055ce:	200a      	movs	r0, #10
 80055d0:	6020      	str	r0, [r4, #0]
 80055d2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80055d6:	6720      	str	r0, [r4, #112]	@ 0x70
 80055d8:	f7ff fa87 	bl	8004aea <inv_init_accel_maxmin>
 80055dc:	f504 6086 	add.w	r0, r4, #1072	@ 0x430
 80055e0:	f7ff fcd5 	bl	8004f8e <inv_init_check_sample_balance_parameter>
 80055e4:	6820      	ldr	r0, [r4, #0]
 80055e6:	f8c4 0480 	str.w	r0, [r4, #1152]	@ 0x480
 80055ea:	f04f 4084 	mov.w	r0, #1107296256	@ 0x42000000
 80055ee:	f8c4 046c 	str.w	r0, [r4, #1132]	@ 0x46c
 80055f2:	201e      	movs	r0, #30
 80055f4:	f8c4 048c 	str.w	r0, [r4, #1164]	@ 0x48c
 80055f8:	482c      	ldr	r0, [pc, #176]	@ (80056ac <??DataTable18_12>)
 80055fa:	f8c4 0498 	str.w	r0, [r4, #1176]	@ 0x498
 80055fe:	4839      	ldr	r0, [pc, #228]	@ (80056e4 <??DataTable18_26>)
 8005600:	f8c4 0494 	str.w	r0, [r4, #1172]	@ 0x494
 8005604:	4838      	ldr	r0, [pc, #224]	@ (80056e8 <??DataTable18_27>)
 8005606:	f8c4 049c 	str.w	r0, [r4, #1180]	@ 0x49c
 800560a:	2019      	movs	r0, #25
 800560c:	f7fd fb6a 	bl	8002ce4 <inv_set_default_number_of_samples>
 8005610:	2000      	movs	r0, #0
 8005612:	bd10      	pop	{r4, pc}

08005614 <inv_start_in_use_auto_calibration>:
 8005614:	2201      	movs	r2, #1
 8005616:	f240 3152 	movw	r1, #850	@ 0x352
 800561a:	4834      	ldr	r0, [pc, #208]	@ (80056ec <??DataTable18_28>)
 800561c:	f004 ba16 	b.w	8009a4c <inv_register_data_cb>

08005620 <inv_stop_in_use_auto_calibration>:
 8005620:	4832      	ldr	r0, [pc, #200]	@ (80056ec <??DataTable18_28>)
 8005622:	f004 ba6f 	b.w	8009b04 <inv_unregister_data_cb>

08005626 <inv_enable_in_use_auto_calibration>:
 8005626:	b510      	push	{r4, lr}
 8005628:	f7ff ffc9 	bl	80055be <inv_init_in_use_auto_calibration>
 800562c:	0004      	movs	r4, r0
 800562e:	d009      	beq.n	8005644 <??inv_enable_in_use_auto_calibration_0>
 8005630:	f240 23d6 	movw	r3, #726	@ 0x2d6
 8005634:	f20f 02bc 	addw	r2, pc, #188	@ 0xbc
 8005638:	f20f 01dc 	addw	r1, pc, #220	@ 0xdc
 800563c:	f7ff fa54 	bl	8004ae8 <__print_result_location>
 8005640:	4620      	mov	r0, r4
 8005642:	bd10      	pop	{r4, pc}

08005644 <??inv_enable_in_use_auto_calibration_0>:
 8005644:	482a      	ldr	r0, [pc, #168]	@ (80056f0 <??DataTable18_29>)
 8005646:	f005 f8c3 	bl	800a7d0 <inv_register_mpl_start_notification>
 800564a:	0004      	movs	r4, r0
 800564c:	d009      	beq.n	8005662 <??inv_enable_in_use_auto_calibration_1>
 800564e:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8005652:	f20f 02a0 	addw	r2, pc, #160	@ 0xa0
 8005656:	f20f 01c0 	addw	r1, pc, #192	@ 0xc0
 800565a:	f7ff fa45 	bl	8004ae8 <__print_result_location>
 800565e:	4620      	mov	r0, r4
 8005660:	bd10      	pop	{r4, pc}

08005662 <??inv_enable_in_use_auto_calibration_1>:
 8005662:	2000      	movs	r0, #0
 8005664:	bd10      	pop	{r4, pc}

08005666 <inv_disable_in_use_auto_calibration>:
 8005666:	b580      	push	{r7, lr}
 8005668:	f7ff ffda 	bl	8005620 <inv_stop_in_use_auto_calibration>
 800566c:	4820      	ldr	r0, [pc, #128]	@ (80056f0 <??DataTable18_29>)
 800566e:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
 8005672:	f005 b889 	b.w	800a788 <inv_unregister_mpl_start_notification>

08005676 <inv_get_accel_bias_stage>:
 8005676:	4801      	ldr	r0, [pc, #4]	@ (800567c <??DataTable18>)
 8005678:	6880      	ldr	r0, [r0, #8]
 800567a:	4770      	bx	lr

0800567c <??DataTable18>:
 800567c:	0d88 2000                                   ... 

08005680 <??DataTable18_1>:
 8005680:	4000 c61c                                   .@..

08005684 <??DataTable18_2>:
 8005684:	4000 461c                                   .@.F

08005688 <??DataTable18_3>:
 8005688:	0000 bff0                                   ....

0800568c <??DataTable18_4>:
 800568c:	999a 9999                                   ....

08005690 <??DataTable18_5>:
 8005690:	9999 3fb9                                   ...?

08005694 <??DataTable18_6>:
 8005694:	47af 3de1                                   .G.=

08005698 <??DataTable18_7>:
 8005698:	0000 437a                                   ..zC

0800569c <??DataTable18_8>:
 800569c:	74bd 3c93                                   .t.<

080056a0 <??DataTable18_9>:
 80056a0:	c49c b020                                   .. .

080056a4 <??DataTable18_10>:
 80056a4:	6872 3f91                                   rh.?

080056a8 <??DataTable18_11>:
 80056a8:	7000 40a7                                   .p.@

080056ac <??DataTable18_12>:
 80056ac:	cccd 3ecc                                   ...>

080056b0 <??DataTable18_13>:
 80056b0:	0000 bf80                                   ....

080056b4 <??DataTable18_14>:
 80056b4:	cccc bd4c                                   ..L.

080056b8 <??DataTable18_15>:
 80056b8:	8d36 4027                                   6.'@

080056bc <??DataTable18_16>:
 80056bc:	2400 49f4                                   .$.I

080056c0 <??DataTable18_17>:
 80056c0:	0000 41d0                                   ...A

080056c4 <??DataTable18_18>:
 80056c4:	8000 44bb                                   ...D

080056c8 <??DataTable18_19>:
 80056c8:	0000 4396                                   ...C

080056cc <??DataTable18_20>:
 80056cc:	999a 3f99                                   ...?

080056d0 <??DataTable18_21>:
 80056d0:	0000 4270                                   ..pB

080056d4 <??DataTable18_22>:
 80056d4:	3333 3fb3                                   33.?

080056d8 <??DataTable18_23>:
 80056d8:	2400 4974                                   .$tI

080056dc <??DataTable18_24>:
 80056dc:	5000 47c3                                   .P.G

080056e0 <??DataTable18_25>:
 80056e0:	cccd 3d4c                                   ..L=

080056e4 <??DataTable18_26>:
 80056e4:	cccd 3f4c                                   ..L?

080056e8 <??DataTable18_27>:
 80056e8:	3333 3f33                                   333?

080056ec <??DataTable18_28>:
 80056ec:	5291 0800                                   .R..

080056f0 <??DataTable18_29>:
 80056f0:	5615 0800                                   .V..

080056f4 <??__func__>:
 80056f4:	6e69 5f76 6e65 6261 656c 695f 5f6e 7375     inv_enable_in_us
 8005704:	5f65 7561 6f74 635f 6c61 6269 6172 6974     e_auto_calibrati
 8005714:	6e6f 0000                                   on..

08005718 <?<Constant "C:\\STM32_EWARM\\STM32L...">>:
 8005718:	3a43 535c 4d54 3233 455f 4157 4d52 535c     C:\STM32_EWARM\S
 8005728:	4d54 3233 5f4c 504d 4c4c 4249 6d5c 6c70     TM32L_MPLLIB\mpl
 8005738:	615c 6363 6c65 615f 7475 5f6f 6163 2e6c     \accel_auto_cal.
 8005748:	0063 0000 0000 0000                         c.......

08005750 <memchr>:
 8005750:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005754:	2a10      	cmp	r2, #16
 8005756:	db2b      	blt.n	80057b0 <memchr+0x60>
 8005758:	f010 0f07 	tst.w	r0, #7
 800575c:	d008      	beq.n	8005770 <memchr+0x20>
 800575e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005762:	3a01      	subs	r2, #1
 8005764:	428b      	cmp	r3, r1
 8005766:	d02d      	beq.n	80057c4 <memchr+0x74>
 8005768:	f010 0f07 	tst.w	r0, #7
 800576c:	b342      	cbz	r2, 80057c0 <memchr+0x70>
 800576e:	d1f6      	bne.n	800575e <memchr+0xe>
 8005770:	b4f0      	push	{r4, r5, r6, r7}
 8005772:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005776:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800577a:	f022 0407 	bic.w	r4, r2, #7
 800577e:	f07f 0700 	mvns.w	r7, #0
 8005782:	2300      	movs	r3, #0
 8005784:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005788:	3c08      	subs	r4, #8
 800578a:	ea85 0501 	eor.w	r5, r5, r1
 800578e:	ea86 0601 	eor.w	r6, r6, r1
 8005792:	fa85 f547 	uadd8	r5, r5, r7
 8005796:	faa3 f587 	sel	r5, r3, r7
 800579a:	fa86 f647 	uadd8	r6, r6, r7
 800579e:	faa5 f687 	sel	r6, r5, r7
 80057a2:	b98e      	cbnz	r6, 80057c8 <memchr+0x78>
 80057a4:	d1ee      	bne.n	8005784 <memchr+0x34>
 80057a6:	bcf0      	pop	{r4, r5, r6, r7}
 80057a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80057ac:	f002 0207 	and.w	r2, r2, #7
 80057b0:	b132      	cbz	r2, 80057c0 <memchr+0x70>
 80057b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057b6:	3a01      	subs	r2, #1
 80057b8:	ea83 0301 	eor.w	r3, r3, r1
 80057bc:	b113      	cbz	r3, 80057c4 <memchr+0x74>
 80057be:	d1f8      	bne.n	80057b2 <memchr+0x62>
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr
 80057c4:	3801      	subs	r0, #1
 80057c6:	4770      	bx	lr
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	bf06      	itte	eq
 80057cc:	4635      	moveq	r5, r6
 80057ce:	3803      	subeq	r0, #3
 80057d0:	3807      	subne	r0, #7
 80057d2:	f015 0f01 	tst.w	r5, #1
 80057d6:	d107      	bne.n	80057e8 <memchr+0x98>
 80057d8:	3001      	adds	r0, #1
 80057da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80057de:	bf02      	ittt	eq
 80057e0:	3001      	addeq	r0, #1
 80057e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80057e6:	3001      	addeq	r0, #1
 80057e8:	bcf0      	pop	{r4, r5, r6, r7}
 80057ea:	3801      	subs	r0, #1
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <strlen>:
 80057f0:	4603      	mov	r3, r0
 80057f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	d1fb      	bne.n	80057f2 <strlen+0x2>
 80057fa:	1a18      	subs	r0, r3, r0
 80057fc:	3801      	subs	r0, #1
 80057fe:	4770      	bx	lr

08005800 <__aeabi_memset>:
 8005800:	b470      	push	{r4, r5, r6}
 8005802:	0784      	lsls	r4, r0, #30
 8005804:	d046      	beq.n	8005894 <__aeabi_memset+0x94>
 8005806:	1e4c      	subs	r4, r1, #1
 8005808:	2900      	cmp	r1, #0
 800580a:	d041      	beq.n	8005890 <__aeabi_memset+0x90>
 800580c:	b2d5      	uxtb	r5, r2
 800580e:	4603      	mov	r3, r0
 8005810:	e002      	b.n	8005818 <__aeabi_memset+0x18>
 8005812:	1e61      	subs	r1, r4, #1
 8005814:	b3e4      	cbz	r4, 8005890 <__aeabi_memset+0x90>
 8005816:	460c      	mov	r4, r1
 8005818:	f803 5b01 	strb.w	r5, [r3], #1
 800581c:	0799      	lsls	r1, r3, #30
 800581e:	d1f8      	bne.n	8005812 <__aeabi_memset+0x12>
 8005820:	2c03      	cmp	r4, #3
 8005822:	d92e      	bls.n	8005882 <__aeabi_memset+0x82>
 8005824:	b2d5      	uxtb	r5, r2
 8005826:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800582a:	2c0f      	cmp	r4, #15
 800582c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005830:	d919      	bls.n	8005866 <__aeabi_memset+0x66>
 8005832:	4626      	mov	r6, r4
 8005834:	f103 0110 	add.w	r1, r3, #16
 8005838:	3e10      	subs	r6, #16
 800583a:	2e0f      	cmp	r6, #15
 800583c:	f841 5c10 	str.w	r5, [r1, #-16]
 8005840:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005844:	f841 5c08 	str.w	r5, [r1, #-8]
 8005848:	f841 5c04 	str.w	r5, [r1, #-4]
 800584c:	f101 0110 	add.w	r1, r1, #16
 8005850:	d8f2      	bhi.n	8005838 <__aeabi_memset+0x38>
 8005852:	f1a4 0110 	sub.w	r1, r4, #16
 8005856:	f021 010f 	bic.w	r1, r1, #15
 800585a:	f004 040f 	and.w	r4, r4, #15
 800585e:	3110      	adds	r1, #16
 8005860:	2c03      	cmp	r4, #3
 8005862:	440b      	add	r3, r1
 8005864:	d90d      	bls.n	8005882 <__aeabi_memset+0x82>
 8005866:	461e      	mov	r6, r3
 8005868:	4621      	mov	r1, r4
 800586a:	3904      	subs	r1, #4
 800586c:	2903      	cmp	r1, #3
 800586e:	f846 5b04 	str.w	r5, [r6], #4
 8005872:	d8fa      	bhi.n	800586a <__aeabi_memset+0x6a>
 8005874:	1f21      	subs	r1, r4, #4
 8005876:	f021 0103 	bic.w	r1, r1, #3
 800587a:	3104      	adds	r1, #4
 800587c:	440b      	add	r3, r1
 800587e:	f004 0403 	and.w	r4, r4, #3
 8005882:	b12c      	cbz	r4, 8005890 <__aeabi_memset+0x90>
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	441c      	add	r4, r3
 8005888:	f803 2b01 	strb.w	r2, [r3], #1
 800588c:	42a3      	cmp	r3, r4
 800588e:	d1fb      	bne.n	8005888 <__aeabi_memset+0x88>
 8005890:	bc70      	pop	{r4, r5, r6}
 8005892:	4770      	bx	lr
 8005894:	460c      	mov	r4, r1
 8005896:	4603      	mov	r3, r0
 8005898:	e7c2      	b.n	8005820 <__aeabi_memset+0x20>
	...

0800589c <__aeabi_lasr>:
 800589c:	40d0      	lsrs	r0, r2
 800589e:	000b      	movs	r3, r1
 80058a0:	4111      	asrs	r1, r2
 80058a2:	3a20      	subs	r2, #32
 80058a4:	d403      	bmi.n	80058ae <__aeabi_lasr+0x12>
 80058a6:	469c      	mov	ip, r3
 80058a8:	4113      	asrs	r3, r2
 80058aa:	4318      	orrs	r0, r3
 80058ac:	4663      	mov	r3, ip
 80058ae:	4252      	negs	r2, r2
 80058b0:	4093      	lsls	r3, r2
 80058b2:	4318      	orrs	r0, r3
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop

080058b8 <__aeabi_llsl>:
 80058b8:	4091      	lsls	r1, r2
 80058ba:	0003      	movs	r3, r0
 80058bc:	4090      	lsls	r0, r2
 80058be:	469c      	mov	ip, r3
 80058c0:	3a20      	subs	r2, #32
 80058c2:	4093      	lsls	r3, r2
 80058c4:	4319      	orrs	r1, r3
 80058c6:	4252      	negs	r2, r2
 80058c8:	4663      	mov	r3, ip
 80058ca:	40d3      	lsrs	r3, r2
 80058cc:	4319      	orrs	r1, r3
 80058ce:	4770      	bx	lr

080058d0 <__aeabi_drsub>:
 80058d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80058d4:	e002      	b.n	80058dc <__adddf3>
 80058d6:	bf00      	nop

080058d8 <__aeabi_dsub>:
 80058d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080058dc <__adddf3>:
 80058dc:	b530      	push	{r4, r5, lr}
 80058de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80058e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80058e6:	ea94 0f05 	teq	r4, r5
 80058ea:	bf08      	it	eq
 80058ec:	ea90 0f02 	teqeq	r0, r2
 80058f0:	bf1f      	itttt	ne
 80058f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80058f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80058fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80058fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005902:	f000 80e2 	beq.w	8005aca <__adddf3+0x1ee>
 8005906:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800590a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800590e:	bfb8      	it	lt
 8005910:	426d      	neglt	r5, r5
 8005912:	dd0c      	ble.n	800592e <__adddf3+0x52>
 8005914:	442c      	add	r4, r5
 8005916:	ea80 0202 	eor.w	r2, r0, r2
 800591a:	ea81 0303 	eor.w	r3, r1, r3
 800591e:	ea82 0000 	eor.w	r0, r2, r0
 8005922:	ea83 0101 	eor.w	r1, r3, r1
 8005926:	ea80 0202 	eor.w	r2, r0, r2
 800592a:	ea81 0303 	eor.w	r3, r1, r3
 800592e:	2d36      	cmp	r5, #54	@ 0x36
 8005930:	bf88      	it	hi
 8005932:	bd30      	pophi	{r4, r5, pc}
 8005934:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800593c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8005940:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005944:	d002      	beq.n	800594c <__adddf3+0x70>
 8005946:	4240      	negs	r0, r0
 8005948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800594c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8005950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005954:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005958:	d002      	beq.n	8005960 <__adddf3+0x84>
 800595a:	4252      	negs	r2, r2
 800595c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005960:	ea94 0f05 	teq	r4, r5
 8005964:	f000 80a7 	beq.w	8005ab6 <__adddf3+0x1da>
 8005968:	f1a4 0401 	sub.w	r4, r4, #1
 800596c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005970:	db0d      	blt.n	800598e <__adddf3+0xb2>
 8005972:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005976:	fa22 f205 	lsr.w	r2, r2, r5
 800597a:	1880      	adds	r0, r0, r2
 800597c:	f141 0100 	adc.w	r1, r1, #0
 8005980:	fa03 f20e 	lsl.w	r2, r3, lr
 8005984:	1880      	adds	r0, r0, r2
 8005986:	fa43 f305 	asr.w	r3, r3, r5
 800598a:	4159      	adcs	r1, r3
 800598c:	e00e      	b.n	80059ac <__adddf3+0xd0>
 800598e:	f1a5 0520 	sub.w	r5, r5, #32
 8005992:	f10e 0e20 	add.w	lr, lr, #32
 8005996:	2a01      	cmp	r2, #1
 8005998:	fa03 fc0e 	lsl.w	ip, r3, lr
 800599c:	bf28      	it	cs
 800599e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80059a2:	fa43 f305 	asr.w	r3, r3, r5
 80059a6:	18c0      	adds	r0, r0, r3
 80059a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80059ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80059b0:	d507      	bpl.n	80059c2 <__adddf3+0xe6>
 80059b2:	f04f 0e00 	mov.w	lr, #0
 80059b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80059ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80059be:	eb6e 0101 	sbc.w	r1, lr, r1
 80059c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80059c6:	d31b      	bcc.n	8005a00 <__adddf3+0x124>
 80059c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80059cc:	d30c      	bcc.n	80059e8 <__adddf3+0x10c>
 80059ce:	0849      	lsrs	r1, r1, #1
 80059d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80059d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80059d8:	f104 0401 	add.w	r4, r4, #1
 80059dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80059e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80059e4:	f080 809a 	bcs.w	8005b1c <__adddf3+0x240>
 80059e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80059ec:	bf08      	it	eq
 80059ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80059f2:	f150 0000 	adcs.w	r0, r0, #0
 80059f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80059fa:	ea41 0105 	orr.w	r1, r1, r5
 80059fe:	bd30      	pop	{r4, r5, pc}
 8005a00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005a04:	4140      	adcs	r0, r0
 8005a06:	eb41 0101 	adc.w	r1, r1, r1
 8005a0a:	3c01      	subs	r4, #1
 8005a0c:	bf28      	it	cs
 8005a0e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8005a12:	d2e9      	bcs.n	80059e8 <__adddf3+0x10c>
 8005a14:	f091 0f00 	teq	r1, #0
 8005a18:	bf04      	itt	eq
 8005a1a:	4601      	moveq	r1, r0
 8005a1c:	2000      	moveq	r0, #0
 8005a1e:	fab1 f381 	clz	r3, r1
 8005a22:	bf08      	it	eq
 8005a24:	3320      	addeq	r3, #32
 8005a26:	f1a3 030b 	sub.w	r3, r3, #11
 8005a2a:	f1b3 0220 	subs.w	r2, r3, #32
 8005a2e:	da0c      	bge.n	8005a4a <__adddf3+0x16e>
 8005a30:	320c      	adds	r2, #12
 8005a32:	dd08      	ble.n	8005a46 <__adddf3+0x16a>
 8005a34:	f102 0c14 	add.w	ip, r2, #20
 8005a38:	f1c2 020c 	rsb	r2, r2, #12
 8005a3c:	fa01 f00c 	lsl.w	r0, r1, ip
 8005a40:	fa21 f102 	lsr.w	r1, r1, r2
 8005a44:	e00c      	b.n	8005a60 <__adddf3+0x184>
 8005a46:	f102 0214 	add.w	r2, r2, #20
 8005a4a:	bfd8      	it	le
 8005a4c:	f1c2 0c20 	rsble	ip, r2, #32
 8005a50:	fa01 f102 	lsl.w	r1, r1, r2
 8005a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005a58:	bfdc      	itt	le
 8005a5a:	ea41 010c 	orrle.w	r1, r1, ip
 8005a5e:	4090      	lslle	r0, r2
 8005a60:	1ae4      	subs	r4, r4, r3
 8005a62:	bfa2      	ittt	ge
 8005a64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005a68:	4329      	orrge	r1, r5
 8005a6a:	bd30      	popge	{r4, r5, pc}
 8005a6c:	ea6f 0404 	mvn.w	r4, r4
 8005a70:	3c1f      	subs	r4, #31
 8005a72:	da1c      	bge.n	8005aae <__adddf3+0x1d2>
 8005a74:	340c      	adds	r4, #12
 8005a76:	dc0e      	bgt.n	8005a96 <__adddf3+0x1ba>
 8005a78:	f104 0414 	add.w	r4, r4, #20
 8005a7c:	f1c4 0220 	rsb	r2, r4, #32
 8005a80:	fa20 f004 	lsr.w	r0, r0, r4
 8005a84:	fa01 f302 	lsl.w	r3, r1, r2
 8005a88:	ea40 0003 	orr.w	r0, r0, r3
 8005a8c:	fa21 f304 	lsr.w	r3, r1, r4
 8005a90:	ea45 0103 	orr.w	r1, r5, r3
 8005a94:	bd30      	pop	{r4, r5, pc}
 8005a96:	f1c4 040c 	rsb	r4, r4, #12
 8005a9a:	f1c4 0220 	rsb	r2, r4, #32
 8005a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8005aa2:	fa01 f304 	lsl.w	r3, r1, r4
 8005aa6:	ea40 0003 	orr.w	r0, r0, r3
 8005aaa:	4629      	mov	r1, r5
 8005aac:	bd30      	pop	{r4, r5, pc}
 8005aae:	fa21 f004 	lsr.w	r0, r1, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	bd30      	pop	{r4, r5, pc}
 8005ab6:	f094 0f00 	teq	r4, #0
 8005aba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005abe:	bf06      	itte	eq
 8005ac0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005ac4:	3401      	addeq	r4, #1
 8005ac6:	3d01      	subne	r5, #1
 8005ac8:	e74e      	b.n	8005968 <__adddf3+0x8c>
 8005aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005ace:	bf18      	it	ne
 8005ad0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005ad4:	d029      	beq.n	8005b2a <__adddf3+0x24e>
 8005ad6:	ea94 0f05 	teq	r4, r5
 8005ada:	bf08      	it	eq
 8005adc:	ea90 0f02 	teqeq	r0, r2
 8005ae0:	d005      	beq.n	8005aee <__adddf3+0x212>
 8005ae2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ae6:	bf04      	itt	eq
 8005ae8:	4619      	moveq	r1, r3
 8005aea:	4610      	moveq	r0, r2
 8005aec:	bd30      	pop	{r4, r5, pc}
 8005aee:	ea91 0f03 	teq	r1, r3
 8005af2:	bf1e      	ittt	ne
 8005af4:	2100      	movne	r1, #0
 8005af6:	2000      	movne	r0, #0
 8005af8:	bd30      	popne	{r4, r5, pc}
 8005afa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005afe:	d105      	bne.n	8005b0c <__adddf3+0x230>
 8005b00:	0040      	lsls	r0, r0, #1
 8005b02:	4149      	adcs	r1, r1
 8005b04:	bf28      	it	cs
 8005b06:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8005b10:	bf3c      	itt	cc
 8005b12:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8005b16:	bd30      	popcc	{r4, r5, pc}
 8005b18:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005b1c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8005b20:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	bd30      	pop	{r4, r5, pc}
 8005b2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005b2e:	bf1a      	itte	ne
 8005b30:	4619      	movne	r1, r3
 8005b32:	4610      	movne	r0, r2
 8005b34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005b38:	bf1c      	itt	ne
 8005b3a:	460b      	movne	r3, r1
 8005b3c:	4602      	movne	r2, r0
 8005b3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005b42:	bf06      	itte	eq
 8005b44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005b48:	ea91 0f03 	teqeq	r1, r3
 8005b4c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8005b50:	bd30      	pop	{r4, r5, pc}
 8005b52:	bf00      	nop

08005b54 <__aeabi_ui2d>:
 8005b54:	f090 0f00 	teq	r0, #0
 8005b58:	bf04      	itt	eq
 8005b5a:	2100      	moveq	r1, #0
 8005b5c:	4770      	bxeq	lr
 8005b5e:	b530      	push	{r4, r5, lr}
 8005b60:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005b64:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005b68:	f04f 0500 	mov.w	r5, #0
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	e750      	b.n	8005a14 <__adddf3+0x138>
 8005b72:	bf00      	nop

08005b74 <__aeabi_i2d>:
 8005b74:	f090 0f00 	teq	r0, #0
 8005b78:	bf04      	itt	eq
 8005b7a:	2100      	moveq	r1, #0
 8005b7c:	4770      	bxeq	lr
 8005b7e:	b530      	push	{r4, r5, lr}
 8005b80:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005b84:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005b88:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005b8c:	bf48      	it	mi
 8005b8e:	4240      	negmi	r0, r0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	e73e      	b.n	8005a14 <__adddf3+0x138>
 8005b96:	bf00      	nop

08005b98 <__aeabi_f2d>:
 8005b98:	0042      	lsls	r2, r0, #1
 8005b9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005b9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005ba2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005ba6:	bf1f      	itttt	ne
 8005ba8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005bac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005bb0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005bb4:	4770      	bxne	lr
 8005bb6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8005bba:	bf08      	it	eq
 8005bbc:	4770      	bxeq	lr
 8005bbe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8005bc2:	bf04      	itt	eq
 8005bc4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8005bc8:	4770      	bxeq	lr
 8005bca:	b530      	push	{r4, r5, lr}
 8005bcc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8005bd0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005bd4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005bd8:	e71c      	b.n	8005a14 <__adddf3+0x138>
 8005bda:	bf00      	nop

08005bdc <__aeabi_ul2d>:
 8005bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8005be0:	bf08      	it	eq
 8005be2:	4770      	bxeq	lr
 8005be4:	b530      	push	{r4, r5, lr}
 8005be6:	f04f 0500 	mov.w	r5, #0
 8005bea:	e00a      	b.n	8005c02 <__aeabi_l2d+0x16>

08005bec <__aeabi_l2d>:
 8005bec:	ea50 0201 	orrs.w	r2, r0, r1
 8005bf0:	bf08      	it	eq
 8005bf2:	4770      	bxeq	lr
 8005bf4:	b530      	push	{r4, r5, lr}
 8005bf6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8005bfa:	d502      	bpl.n	8005c02 <__aeabi_l2d+0x16>
 8005bfc:	4240      	negs	r0, r0
 8005bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c02:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005c06:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005c0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005c0e:	f43f aed8 	beq.w	80059c2 <__adddf3+0xe6>
 8005c12:	f04f 0203 	mov.w	r2, #3
 8005c16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005c1a:	bf18      	it	ne
 8005c1c:	3203      	addne	r2, #3
 8005c1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005c22:	bf18      	it	ne
 8005c24:	3203      	addne	r2, #3
 8005c26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005c2a:	f1c2 0320 	rsb	r3, r2, #32
 8005c2e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005c32:	fa20 f002 	lsr.w	r0, r0, r2
 8005c36:	fa01 fe03 	lsl.w	lr, r1, r3
 8005c3a:	ea40 000e 	orr.w	r0, r0, lr
 8005c3e:	fa21 f102 	lsr.w	r1, r1, r2
 8005c42:	4414      	add	r4, r2
 8005c44:	e6bd      	b.n	80059c2 <__adddf3+0xe6>
 8005c46:	bf00      	nop

08005c48 <__aeabi_dmul>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005c4e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8005c52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005c56:	bf1d      	ittte	ne
 8005c58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005c5c:	ea94 0f0c 	teqne	r4, ip
 8005c60:	ea95 0f0c 	teqne	r5, ip
 8005c64:	f000 f8de 	bleq	8005e24 <__aeabi_dmul+0x1dc>
 8005c68:	442c      	add	r4, r5
 8005c6a:	ea81 0603 	eor.w	r6, r1, r3
 8005c6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005c72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005c76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005c7a:	bf18      	it	ne
 8005c7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005c80:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c88:	d038      	beq.n	8005cfc <__aeabi_dmul+0xb4>
 8005c8a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005c8e:	f04f 0500 	mov.w	r5, #0
 8005c92:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005c96:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8005c9a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005c9e:	f04f 0600 	mov.w	r6, #0
 8005ca2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005ca6:	f09c 0f00 	teq	ip, #0
 8005caa:	bf18      	it	ne
 8005cac:	f04e 0e01 	orrne.w	lr, lr, #1
 8005cb0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8005cb4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8005cb8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005cbc:	d204      	bcs.n	8005cc8 <__aeabi_dmul+0x80>
 8005cbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005cc2:	416d      	adcs	r5, r5
 8005cc4:	eb46 0606 	adc.w	r6, r6, r6
 8005cc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005ccc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005cd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005cd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005cd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005cdc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005ce0:	bf88      	it	hi
 8005ce2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005ce6:	d81e      	bhi.n	8005d26 <__aeabi_dmul+0xde>
 8005ce8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8005cec:	bf08      	it	eq
 8005cee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005cf2:	f150 0000 	adcs.w	r0, r0, #0
 8005cf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8005d00:	ea46 0101 	orr.w	r1, r6, r1
 8005d04:	ea40 0002 	orr.w	r0, r0, r2
 8005d08:	ea81 0103 	eor.w	r1, r1, r3
 8005d0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005d10:	bfc2      	ittt	gt
 8005d12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005d16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005d1a:	bd70      	popgt	{r4, r5, r6, pc}
 8005d1c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005d20:	f04f 0e00 	mov.w	lr, #0
 8005d24:	3c01      	subs	r4, #1
 8005d26:	f300 80ab 	bgt.w	8005e80 <__aeabi_dmul+0x238>
 8005d2a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8005d2e:	bfde      	ittt	le
 8005d30:	2000      	movle	r0, #0
 8005d32:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8005d36:	bd70      	pople	{r4, r5, r6, pc}
 8005d38:	f1c4 0400 	rsb	r4, r4, #0
 8005d3c:	3c20      	subs	r4, #32
 8005d3e:	da35      	bge.n	8005dac <__aeabi_dmul+0x164>
 8005d40:	340c      	adds	r4, #12
 8005d42:	dc1b      	bgt.n	8005d7c <__aeabi_dmul+0x134>
 8005d44:	f104 0414 	add.w	r4, r4, #20
 8005d48:	f1c4 0520 	rsb	r5, r4, #32
 8005d4c:	fa00 f305 	lsl.w	r3, r0, r5
 8005d50:	fa20 f004 	lsr.w	r0, r0, r4
 8005d54:	fa01 f205 	lsl.w	r2, r1, r5
 8005d58:	ea40 0002 	orr.w	r0, r0, r2
 8005d5c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8005d60:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005d64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005d68:	fa21 f604 	lsr.w	r6, r1, r4
 8005d6c:	eb42 0106 	adc.w	r1, r2, r6
 8005d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005d74:	bf08      	it	eq
 8005d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f1c4 040c 	rsb	r4, r4, #12
 8005d80:	f1c4 0520 	rsb	r5, r4, #32
 8005d84:	fa00 f304 	lsl.w	r3, r0, r4
 8005d88:	fa20 f005 	lsr.w	r0, r0, r5
 8005d8c:	fa01 f204 	lsl.w	r2, r1, r4
 8005d90:	ea40 0002 	orr.w	r0, r0, r2
 8005d94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005d98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005d9c:	f141 0100 	adc.w	r1, r1, #0
 8005da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005da4:	bf08      	it	eq
 8005da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f1c4 0520 	rsb	r5, r4, #32
 8005db0:	fa00 f205 	lsl.w	r2, r0, r5
 8005db4:	ea4e 0e02 	orr.w	lr, lr, r2
 8005db8:	fa20 f304 	lsr.w	r3, r0, r4
 8005dbc:	fa01 f205 	lsl.w	r2, r1, r5
 8005dc0:	ea43 0302 	orr.w	r3, r3, r2
 8005dc4:	fa21 f004 	lsr.w	r0, r1, r4
 8005dc8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005dcc:	fa21 f204 	lsr.w	r2, r1, r4
 8005dd0:	ea20 0002 	bic.w	r0, r0, r2
 8005dd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005dd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005ddc:	bf08      	it	eq
 8005dde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f094 0f00 	teq	r4, #0
 8005de8:	d10f      	bne.n	8005e0a <__aeabi_dmul+0x1c2>
 8005dea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005dee:	0040      	lsls	r0, r0, #1
 8005df0:	eb41 0101 	adc.w	r1, r1, r1
 8005df4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005df8:	bf08      	it	eq
 8005dfa:	3c01      	subeq	r4, #1
 8005dfc:	d0f7      	beq.n	8005dee <__aeabi_dmul+0x1a6>
 8005dfe:	ea41 0106 	orr.w	r1, r1, r6
 8005e02:	f095 0f00 	teq	r5, #0
 8005e06:	bf18      	it	ne
 8005e08:	4770      	bxne	lr
 8005e0a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8005e0e:	0052      	lsls	r2, r2, #1
 8005e10:	eb43 0303 	adc.w	r3, r3, r3
 8005e14:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005e18:	bf08      	it	eq
 8005e1a:	3d01      	subeq	r5, #1
 8005e1c:	d0f7      	beq.n	8005e0e <__aeabi_dmul+0x1c6>
 8005e1e:	ea43 0306 	orr.w	r3, r3, r6
 8005e22:	4770      	bx	lr
 8005e24:	ea94 0f0c 	teq	r4, ip
 8005e28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005e2c:	bf18      	it	ne
 8005e2e:	ea95 0f0c 	teqne	r5, ip
 8005e32:	d00c      	beq.n	8005e4e <__aeabi_dmul+0x206>
 8005e34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005e38:	bf18      	it	ne
 8005e3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005e3e:	d1d1      	bne.n	8005de4 <__aeabi_dmul+0x19c>
 8005e40:	ea81 0103 	eor.w	r1, r1, r3
 8005e44:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005e52:	bf06      	itte	eq
 8005e54:	4610      	moveq	r0, r2
 8005e56:	4619      	moveq	r1, r3
 8005e58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005e5c:	d019      	beq.n	8005e92 <__aeabi_dmul+0x24a>
 8005e5e:	ea94 0f0c 	teq	r4, ip
 8005e62:	d102      	bne.n	8005e6a <__aeabi_dmul+0x222>
 8005e64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005e68:	d113      	bne.n	8005e92 <__aeabi_dmul+0x24a>
 8005e6a:	ea95 0f0c 	teq	r5, ip
 8005e6e:	d105      	bne.n	8005e7c <__aeabi_dmul+0x234>
 8005e70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005e74:	bf1c      	itt	ne
 8005e76:	4610      	movne	r0, r2
 8005e78:	4619      	movne	r1, r3
 8005e7a:	d10a      	bne.n	8005e92 <__aeabi_dmul+0x24a>
 8005e7c:	ea81 0103 	eor.w	r1, r1, r3
 8005e80:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005e84:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005e88:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e8c:	f04f 0000 	mov.w	r0, #0
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
 8005e92:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005e96:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}

08005e9c <__aeabi_ddiv>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005ea2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8005ea6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005eaa:	bf1d      	ittte	ne
 8005eac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005eb0:	ea94 0f0c 	teqne	r4, ip
 8005eb4:	ea95 0f0c 	teqne	r5, ip
 8005eb8:	f000 f8a7 	bleq	800600a <__aeabi_ddiv+0x16e>
 8005ebc:	eba4 0405 	sub.w	r4, r4, r5
 8005ec0:	ea81 0e03 	eor.w	lr, r1, r3
 8005ec4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005ec8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005ecc:	f000 8088 	beq.w	8005fe0 <__aeabi_ddiv+0x144>
 8005ed0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005ed4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005ed8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005edc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005ee0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005ee4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005ee8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005eec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005ef0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005ef4:	429d      	cmp	r5, r3
 8005ef6:	bf08      	it	eq
 8005ef8:	4296      	cmpeq	r6, r2
 8005efa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8005efe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8005f02:	d202      	bcs.n	8005f0a <__aeabi_ddiv+0x6e>
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	ea4f 0232 	mov.w	r2, r2, rrx
 8005f0a:	1ab6      	subs	r6, r6, r2
 8005f0c:	eb65 0503 	sbc.w	r5, r5, r3
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	ea4f 0232 	mov.w	r2, r2, rrx
 8005f16:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005f1a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8005f1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005f22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005f26:	bf22      	ittt	cs
 8005f28:	1ab6      	subcs	r6, r6, r2
 8005f2a:	4675      	movcs	r5, lr
 8005f2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	ea4f 0232 	mov.w	r2, r2, rrx
 8005f36:	ebb6 0e02 	subs.w	lr, r6, r2
 8005f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005f3e:	bf22      	ittt	cs
 8005f40:	1ab6      	subcs	r6, r6, r2
 8005f42:	4675      	movcs	r5, lr
 8005f44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8005f4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005f52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005f56:	bf22      	ittt	cs
 8005f58:	1ab6      	subcs	r6, r6, r2
 8005f5a:	4675      	movcs	r5, lr
 8005f5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	ea4f 0232 	mov.w	r2, r2, rrx
 8005f66:	ebb6 0e02 	subs.w	lr, r6, r2
 8005f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005f6e:	bf22      	ittt	cs
 8005f70:	1ab6      	subcs	r6, r6, r2
 8005f72:	4675      	movcs	r5, lr
 8005f74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005f78:	ea55 0e06 	orrs.w	lr, r5, r6
 8005f7c:	d018      	beq.n	8005fb0 <__aeabi_ddiv+0x114>
 8005f7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005f82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005f86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005f8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005f8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005f92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005f96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005f9a:	d1c0      	bne.n	8005f1e <__aeabi_ddiv+0x82>
 8005f9c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005fa0:	d10b      	bne.n	8005fba <__aeabi_ddiv+0x11e>
 8005fa2:	ea41 0100 	orr.w	r1, r1, r0
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005fae:	e7b6      	b.n	8005f1e <__aeabi_ddiv+0x82>
 8005fb0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005fb4:	bf04      	itt	eq
 8005fb6:	4301      	orreq	r1, r0
 8005fb8:	2000      	moveq	r0, #0
 8005fba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005fbe:	bf88      	it	hi
 8005fc0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005fc4:	f63f aeaf 	bhi.w	8005d26 <__aeabi_dmul+0xde>
 8005fc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8005fcc:	bf04      	itt	eq
 8005fce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005fd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005fd6:	f150 0000 	adcs.w	r0, r0, #0
 8005fda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005fe4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005fe8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005fec:	bfc2      	ittt	gt
 8005fee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005ff2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005ff6:	bd70      	popgt	{r4, r5, r6, pc}
 8005ff8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005ffc:	f04f 0e00 	mov.w	lr, #0
 8006000:	3c01      	subs	r4, #1
 8006002:	e690      	b.n	8005d26 <__aeabi_dmul+0xde>
 8006004:	ea45 0e06 	orr.w	lr, r5, r6
 8006008:	e68d      	b.n	8005d26 <__aeabi_dmul+0xde>
 800600a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800600e:	ea94 0f0c 	teq	r4, ip
 8006012:	bf08      	it	eq
 8006014:	ea95 0f0c 	teqeq	r5, ip
 8006018:	f43f af3b 	beq.w	8005e92 <__aeabi_dmul+0x24a>
 800601c:	ea94 0f0c 	teq	r4, ip
 8006020:	d10a      	bne.n	8006038 <__aeabi_ddiv+0x19c>
 8006022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006026:	f47f af34 	bne.w	8005e92 <__aeabi_dmul+0x24a>
 800602a:	ea95 0f0c 	teq	r5, ip
 800602e:	f47f af25 	bne.w	8005e7c <__aeabi_dmul+0x234>
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	e72c      	b.n	8005e92 <__aeabi_dmul+0x24a>
 8006038:	ea95 0f0c 	teq	r5, ip
 800603c:	d106      	bne.n	800604c <__aeabi_ddiv+0x1b0>
 800603e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006042:	f43f aefd 	beq.w	8005e40 <__aeabi_dmul+0x1f8>
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	e722      	b.n	8005e92 <__aeabi_dmul+0x24a>
 800604c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006050:	bf18      	it	ne
 8006052:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006056:	f47f aec5 	bne.w	8005de4 <__aeabi_dmul+0x19c>
 800605a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800605e:	f47f af0d 	bne.w	8005e7c <__aeabi_dmul+0x234>
 8006062:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006066:	f47f aeeb 	bne.w	8005e40 <__aeabi_dmul+0x1f8>
 800606a:	e712      	b.n	8005e92 <__aeabi_dmul+0x24a>

0800606c <__gedf2>:
 800606c:	f04f 3cff 	mov.w	ip, #4294967295
 8006070:	e006      	b.n	8006080 <__cmpdf2+0x4>
 8006072:	bf00      	nop

08006074 <__ledf2>:
 8006074:	f04f 0c01 	mov.w	ip, #1
 8006078:	e002      	b.n	8006080 <__cmpdf2+0x4>
 800607a:	bf00      	nop

0800607c <__cmpdf2>:
 800607c:	f04f 0c01 	mov.w	ip, #1
 8006080:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006084:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800608c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006090:	bf18      	it	ne
 8006092:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006096:	d01b      	beq.n	80060d0 <__cmpdf2+0x54>
 8006098:	b001      	add	sp, #4
 800609a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800609e:	bf0c      	ite	eq
 80060a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80060a4:	ea91 0f03 	teqne	r1, r3
 80060a8:	bf02      	ittt	eq
 80060aa:	ea90 0f02 	teqeq	r0, r2
 80060ae:	2000      	moveq	r0, #0
 80060b0:	4770      	bxeq	lr
 80060b2:	f110 0f00 	cmn.w	r0, #0
 80060b6:	ea91 0f03 	teq	r1, r3
 80060ba:	bf58      	it	pl
 80060bc:	4299      	cmppl	r1, r3
 80060be:	bf08      	it	eq
 80060c0:	4290      	cmpeq	r0, r2
 80060c2:	bf2c      	ite	cs
 80060c4:	17d8      	asrcs	r0, r3, #31
 80060c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80060ca:	f040 0001 	orr.w	r0, r0, #1
 80060ce:	4770      	bx	lr
 80060d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80060d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80060d8:	d102      	bne.n	80060e0 <__cmpdf2+0x64>
 80060da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80060de:	d107      	bne.n	80060f0 <__cmpdf2+0x74>
 80060e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80060e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80060e8:	d1d6      	bne.n	8006098 <__cmpdf2+0x1c>
 80060ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80060ee:	d0d3      	beq.n	8006098 <__cmpdf2+0x1c>
 80060f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop

080060f8 <__aeabi_cdrcmple>:
 80060f8:	4684      	mov	ip, r0
 80060fa:	4610      	mov	r0, r2
 80060fc:	4662      	mov	r2, ip
 80060fe:	468c      	mov	ip, r1
 8006100:	4619      	mov	r1, r3
 8006102:	4663      	mov	r3, ip
 8006104:	e000      	b.n	8006108 <__aeabi_cdcmpeq>
 8006106:	bf00      	nop

08006108 <__aeabi_cdcmpeq>:
 8006108:	b501      	push	{r0, lr}
 800610a:	f7ff ffb7 	bl	800607c <__cmpdf2>
 800610e:	2800      	cmp	r0, #0
 8006110:	bf48      	it	mi
 8006112:	f110 0f00 	cmnmi.w	r0, #0
 8006116:	bd01      	pop	{r0, pc}

08006118 <__aeabi_dcmpeq>:
 8006118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800611c:	f7ff fff4 	bl	8006108 <__aeabi_cdcmpeq>
 8006120:	bf0c      	ite	eq
 8006122:	2001      	moveq	r0, #1
 8006124:	2000      	movne	r0, #0
 8006126:	f85d fb08 	ldr.w	pc, [sp], #8
 800612a:	bf00      	nop

0800612c <__aeabi_dcmplt>:
 800612c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006130:	f7ff ffea 	bl	8006108 <__aeabi_cdcmpeq>
 8006134:	bf34      	ite	cc
 8006136:	2001      	movcc	r0, #1
 8006138:	2000      	movcs	r0, #0
 800613a:	f85d fb08 	ldr.w	pc, [sp], #8
 800613e:	bf00      	nop

08006140 <__aeabi_dcmple>:
 8006140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006144:	f7ff ffe0 	bl	8006108 <__aeabi_cdcmpeq>
 8006148:	bf94      	ite	ls
 800614a:	2001      	movls	r0, #1
 800614c:	2000      	movhi	r0, #0
 800614e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006152:	bf00      	nop

08006154 <__aeabi_dcmpge>:
 8006154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006158:	f7ff ffce 	bl	80060f8 <__aeabi_cdrcmple>
 800615c:	bf94      	ite	ls
 800615e:	2001      	movls	r0, #1
 8006160:	2000      	movhi	r0, #0
 8006162:	f85d fb08 	ldr.w	pc, [sp], #8
 8006166:	bf00      	nop

08006168 <__aeabi_dcmpgt>:
 8006168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800616c:	f7ff ffc4 	bl	80060f8 <__aeabi_cdrcmple>
 8006170:	bf34      	ite	cc
 8006172:	2001      	movcc	r0, #1
 8006174:	2000      	movcs	r0, #0
 8006176:	f85d fb08 	ldr.w	pc, [sp], #8
 800617a:	bf00      	nop

0800617c <__aeabi_dcmpun>:
 800617c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006184:	d102      	bne.n	800618c <__aeabi_dcmpun+0x10>
 8006186:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800618a:	d10a      	bne.n	80061a2 <__aeabi_dcmpun+0x26>
 800618c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006190:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006194:	d102      	bne.n	800619c <__aeabi_dcmpun+0x20>
 8006196:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800619a:	d102      	bne.n	80061a2 <__aeabi_dcmpun+0x26>
 800619c:	f04f 0000 	mov.w	r0, #0
 80061a0:	4770      	bx	lr
 80061a2:	f04f 0001 	mov.w	r0, #1
 80061a6:	4770      	bx	lr

080061a8 <__aeabi_d2iz>:
 80061a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80061ac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80061b0:	d215      	bcs.n	80061de <__aeabi_d2iz+0x36>
 80061b2:	d511      	bpl.n	80061d8 <__aeabi_d2iz+0x30>
 80061b4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80061b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80061bc:	d912      	bls.n	80061e4 <__aeabi_d2iz+0x3c>
 80061be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80061c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80061ca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80061ce:	fa23 f002 	lsr.w	r0, r3, r2
 80061d2:	bf18      	it	ne
 80061d4:	4240      	negne	r0, r0
 80061d6:	4770      	bx	lr
 80061d8:	f04f 0000 	mov.w	r0, #0
 80061dc:	4770      	bx	lr
 80061de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80061e2:	d105      	bne.n	80061f0 <__aeabi_d2iz+0x48>
 80061e4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80061e8:	bf08      	it	eq
 80061ea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80061ee:	4770      	bx	lr
 80061f0:	f04f 0000 	mov.w	r0, #0
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <__aeabi_d2uiz>:
 80061f8:	004a      	lsls	r2, r1, #1
 80061fa:	d211      	bcs.n	8006220 <__aeabi_d2uiz+0x28>
 80061fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8006200:	d211      	bcs.n	8006226 <__aeabi_d2uiz+0x2e>
 8006202:	d50d      	bpl.n	8006220 <__aeabi_d2uiz+0x28>
 8006204:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006208:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800620c:	d40e      	bmi.n	800622c <__aeabi_d2uiz+0x34>
 800620e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006216:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800621a:	fa23 f002 	lsr.w	r0, r3, r2
 800621e:	4770      	bx	lr
 8006220:	f04f 0000 	mov.w	r0, #0
 8006224:	4770      	bx	lr
 8006226:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800622a:	d102      	bne.n	8006232 <__aeabi_d2uiz+0x3a>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	4770      	bx	lr
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	4770      	bx	lr

08006238 <__aeabi_d2f>:
 8006238:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800623c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8006240:	bf24      	itt	cs
 8006242:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8006246:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800624a:	d90d      	bls.n	8006268 <__aeabi_d2f+0x30>
 800624c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8006250:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006254:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006258:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800625c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006260:	bf08      	it	eq
 8006262:	f020 0001 	biceq.w	r0, r0, #1
 8006266:	4770      	bx	lr
 8006268:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800626c:	d121      	bne.n	80062b2 <__aeabi_d2f+0x7a>
 800626e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8006272:	bfbc      	itt	lt
 8006274:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8006278:	4770      	bxlt	lr
 800627a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800627e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006282:	f1c2 0218 	rsb	r2, r2, #24
 8006286:	f1c2 0c20 	rsb	ip, r2, #32
 800628a:	fa10 f30c 	lsls.w	r3, r0, ip
 800628e:	fa20 f002 	lsr.w	r0, r0, r2
 8006292:	bf18      	it	ne
 8006294:	f040 0001 	orrne.w	r0, r0, #1
 8006298:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800629c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80062a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80062a4:	ea40 000c 	orr.w	r0, r0, ip
 80062a8:	fa23 f302 	lsr.w	r3, r3, r2
 80062ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062b0:	e7cc      	b.n	800624c <__aeabi_d2f+0x14>
 80062b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80062b6:	d107      	bne.n	80062c8 <__aeabi_d2f+0x90>
 80062b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80062bc:	bf1e      	ittt	ne
 80062be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80062c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80062c6:	4770      	bxne	lr
 80062c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80062cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80062d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop

080062d8 <__aeabi_frsub>:
 80062d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80062dc:	e002      	b.n	80062e4 <__addsf3>
 80062de:	bf00      	nop

080062e0 <__aeabi_fsub>:
 80062e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080062e4 <__addsf3>:
 80062e4:	0042      	lsls	r2, r0, #1
 80062e6:	bf1f      	itttt	ne
 80062e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80062ec:	ea92 0f03 	teqne	r2, r3
 80062f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80062f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80062f8:	d06a      	beq.n	80063d0 <__addsf3+0xec>
 80062fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80062fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006302:	bfc1      	itttt	gt
 8006304:	18d2      	addgt	r2, r2, r3
 8006306:	4041      	eorgt	r1, r0
 8006308:	4048      	eorgt	r0, r1
 800630a:	4041      	eorgt	r1, r0
 800630c:	bfb8      	it	lt
 800630e:	425b      	neglt	r3, r3
 8006310:	2b19      	cmp	r3, #25
 8006312:	bf88      	it	hi
 8006314:	4770      	bxhi	lr
 8006316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800631a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800631e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8006322:	bf18      	it	ne
 8006324:	4240      	negne	r0, r0
 8006326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800632a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800632e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8006332:	bf18      	it	ne
 8006334:	4249      	negne	r1, r1
 8006336:	ea92 0f03 	teq	r2, r3
 800633a:	d03f      	beq.n	80063bc <__addsf3+0xd8>
 800633c:	f1a2 0201 	sub.w	r2, r2, #1
 8006340:	fa41 fc03 	asr.w	ip, r1, r3
 8006344:	eb10 000c 	adds.w	r0, r0, ip
 8006348:	f1c3 0320 	rsb	r3, r3, #32
 800634c:	fa01 f103 	lsl.w	r1, r1, r3
 8006350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8006354:	d502      	bpl.n	800635c <__addsf3+0x78>
 8006356:	4249      	negs	r1, r1
 8006358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800635c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8006360:	d313      	bcc.n	800638a <__addsf3+0xa6>
 8006362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006366:	d306      	bcc.n	8006376 <__addsf3+0x92>
 8006368:	0840      	lsrs	r0, r0, #1
 800636a:	ea4f 0131 	mov.w	r1, r1, rrx
 800636e:	f102 0201 	add.w	r2, r2, #1
 8006372:	2afe      	cmp	r2, #254	@ 0xfe
 8006374:	d251      	bcs.n	800641a <__addsf3+0x136>
 8006376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800637a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800637e:	bf08      	it	eq
 8006380:	f020 0001 	biceq.w	r0, r0, #1
 8006384:	ea40 0003 	orr.w	r0, r0, r3
 8006388:	4770      	bx	lr
 800638a:	0049      	lsls	r1, r1, #1
 800638c:	eb40 0000 	adc.w	r0, r0, r0
 8006390:	3a01      	subs	r2, #1
 8006392:	bf28      	it	cs
 8006394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8006398:	d2ed      	bcs.n	8006376 <__addsf3+0x92>
 800639a:	fab0 fc80 	clz	ip, r0
 800639e:	f1ac 0c08 	sub.w	ip, ip, #8
 80063a2:	ebb2 020c 	subs.w	r2, r2, ip
 80063a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80063aa:	bfaa      	itet	ge
 80063ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80063b0:	4252      	neglt	r2, r2
 80063b2:	4318      	orrge	r0, r3
 80063b4:	bfbc      	itt	lt
 80063b6:	40d0      	lsrlt	r0, r2
 80063b8:	4318      	orrlt	r0, r3
 80063ba:	4770      	bx	lr
 80063bc:	f092 0f00 	teq	r2, #0
 80063c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80063c4:	bf06      	itte	eq
 80063c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80063ca:	3201      	addeq	r2, #1
 80063cc:	3b01      	subne	r3, #1
 80063ce:	e7b5      	b.n	800633c <__addsf3+0x58>
 80063d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80063d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80063d8:	bf18      	it	ne
 80063da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80063de:	d021      	beq.n	8006424 <__addsf3+0x140>
 80063e0:	ea92 0f03 	teq	r2, r3
 80063e4:	d004      	beq.n	80063f0 <__addsf3+0x10c>
 80063e6:	f092 0f00 	teq	r2, #0
 80063ea:	bf08      	it	eq
 80063ec:	4608      	moveq	r0, r1
 80063ee:	4770      	bx	lr
 80063f0:	ea90 0f01 	teq	r0, r1
 80063f4:	bf1c      	itt	ne
 80063f6:	2000      	movne	r0, #0
 80063f8:	4770      	bxne	lr
 80063fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80063fe:	d104      	bne.n	800640a <__addsf3+0x126>
 8006400:	0040      	lsls	r0, r0, #1
 8006402:	bf28      	it	cs
 8006404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8006408:	4770      	bx	lr
 800640a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800640e:	bf3c      	itt	cc
 8006410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8006414:	4770      	bxcc	lr
 8006416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800641a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800641e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006422:	4770      	bx	lr
 8006424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006428:	bf16      	itet	ne
 800642a:	4608      	movne	r0, r1
 800642c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006430:	4601      	movne	r1, r0
 8006432:	0242      	lsls	r2, r0, #9
 8006434:	bf06      	itte	eq
 8006436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800643a:	ea90 0f01 	teqeq	r0, r1
 800643e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8006442:	4770      	bx	lr

08006444 <__aeabi_ui2f>:
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e004      	b.n	8006454 <__aeabi_i2f+0x8>
 800644a:	bf00      	nop

0800644c <__aeabi_i2f>:
 800644c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8006450:	bf48      	it	mi
 8006452:	4240      	negmi	r0, r0
 8006454:	ea5f 0c00 	movs.w	ip, r0
 8006458:	bf08      	it	eq
 800645a:	4770      	bxeq	lr
 800645c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8006460:	4601      	mov	r1, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	e01c      	b.n	80064a2 <__aeabi_l2f+0x2a>

08006468 <__aeabi_ul2f>:
 8006468:	ea50 0201 	orrs.w	r2, r0, r1
 800646c:	bf08      	it	eq
 800646e:	4770      	bxeq	lr
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e00a      	b.n	800648c <__aeabi_l2f+0x14>
 8006476:	bf00      	nop

08006478 <__aeabi_l2f>:
 8006478:	ea50 0201 	orrs.w	r2, r0, r1
 800647c:	bf08      	it	eq
 800647e:	4770      	bxeq	lr
 8006480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8006484:	d502      	bpl.n	800648c <__aeabi_l2f+0x14>
 8006486:	4240      	negs	r0, r0
 8006488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800648c:	ea5f 0c01 	movs.w	ip, r1
 8006490:	bf02      	ittt	eq
 8006492:	4684      	moveq	ip, r0
 8006494:	4601      	moveq	r1, r0
 8006496:	2000      	moveq	r0, #0
 8006498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800649c:	bf08      	it	eq
 800649e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80064a6:	fabc f28c 	clz	r2, ip
 80064aa:	3a08      	subs	r2, #8
 80064ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80064b0:	db10      	blt.n	80064d4 <__aeabi_l2f+0x5c>
 80064b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80064b6:	4463      	add	r3, ip
 80064b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80064bc:	f1c2 0220 	rsb	r2, r2, #32
 80064c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80064c4:	fa20 f202 	lsr.w	r2, r0, r2
 80064c8:	eb43 0002 	adc.w	r0, r3, r2
 80064cc:	bf08      	it	eq
 80064ce:	f020 0001 	biceq.w	r0, r0, #1
 80064d2:	4770      	bx	lr
 80064d4:	f102 0220 	add.w	r2, r2, #32
 80064d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80064dc:	f1c2 0220 	rsb	r2, r2, #32
 80064e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80064e4:	fa21 f202 	lsr.w	r2, r1, r2
 80064e8:	eb43 0002 	adc.w	r0, r3, r2
 80064ec:	bf08      	it	eq
 80064ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80064f2:	4770      	bx	lr

080064f4 <__aeabi_fmul>:
 80064f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80064f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80064fc:	bf1e      	ittt	ne
 80064fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006502:	ea92 0f0c 	teqne	r2, ip
 8006506:	ea93 0f0c 	teqne	r3, ip
 800650a:	d06f      	beq.n	80065ec <__aeabi_fmul+0xf8>
 800650c:	441a      	add	r2, r3
 800650e:	ea80 0c01 	eor.w	ip, r0, r1
 8006512:	0240      	lsls	r0, r0, #9
 8006514:	bf18      	it	ne
 8006516:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800651a:	d01e      	beq.n	800655a <__aeabi_fmul+0x66>
 800651c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006520:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006524:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006528:	fba0 3101 	umull	r3, r1, r0, r1
 800652c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8006530:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8006534:	bf3e      	ittt	cc
 8006536:	0049      	lslcc	r1, r1, #1
 8006538:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800653c:	005b      	lslcc	r3, r3, #1
 800653e:	ea40 0001 	orr.w	r0, r0, r1
 8006542:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8006546:	2afd      	cmp	r2, #253	@ 0xfd
 8006548:	d81d      	bhi.n	8006586 <__aeabi_fmul+0x92>
 800654a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800654e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006552:	bf08      	it	eq
 8006554:	f020 0001 	biceq.w	r0, r0, #1
 8006558:	4770      	bx	lr
 800655a:	f090 0f00 	teq	r0, #0
 800655e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8006562:	bf08      	it	eq
 8006564:	0249      	lsleq	r1, r1, #9
 8006566:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800656a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800656e:	3a7f      	subs	r2, #127	@ 0x7f
 8006570:	bfc2      	ittt	gt
 8006572:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8006576:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800657a:	4770      	bxgt	lr
 800657c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	3a01      	subs	r2, #1
 8006586:	dc5d      	bgt.n	8006644 <__aeabi_fmul+0x150>
 8006588:	f112 0f19 	cmn.w	r2, #25
 800658c:	bfdc      	itt	le
 800658e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8006592:	4770      	bxle	lr
 8006594:	f1c2 0200 	rsb	r2, r2, #0
 8006598:	0041      	lsls	r1, r0, #1
 800659a:	fa21 f102 	lsr.w	r1, r1, r2
 800659e:	f1c2 0220 	rsb	r2, r2, #32
 80065a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80065a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80065aa:	f140 0000 	adc.w	r0, r0, #0
 80065ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80065b2:	bf08      	it	eq
 80065b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80065b8:	4770      	bx	lr
 80065ba:	f092 0f00 	teq	r2, #0
 80065be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80065c2:	bf02      	ittt	eq
 80065c4:	0040      	lsleq	r0, r0, #1
 80065c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80065ca:	3a01      	subeq	r2, #1
 80065cc:	d0f9      	beq.n	80065c2 <__aeabi_fmul+0xce>
 80065ce:	ea40 000c 	orr.w	r0, r0, ip
 80065d2:	f093 0f00 	teq	r3, #0
 80065d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80065da:	bf02      	ittt	eq
 80065dc:	0049      	lsleq	r1, r1, #1
 80065de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80065e2:	3b01      	subeq	r3, #1
 80065e4:	d0f9      	beq.n	80065da <__aeabi_fmul+0xe6>
 80065e6:	ea41 010c 	orr.w	r1, r1, ip
 80065ea:	e78f      	b.n	800650c <__aeabi_fmul+0x18>
 80065ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80065f0:	ea92 0f0c 	teq	r2, ip
 80065f4:	bf18      	it	ne
 80065f6:	ea93 0f0c 	teqne	r3, ip
 80065fa:	d00a      	beq.n	8006612 <__aeabi_fmul+0x11e>
 80065fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8006600:	bf18      	it	ne
 8006602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8006606:	d1d8      	bne.n	80065ba <__aeabi_fmul+0xc6>
 8006608:	ea80 0001 	eor.w	r0, r0, r1
 800660c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8006610:	4770      	bx	lr
 8006612:	f090 0f00 	teq	r0, #0
 8006616:	bf17      	itett	ne
 8006618:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800661c:	4608      	moveq	r0, r1
 800661e:	f091 0f00 	teqne	r1, #0
 8006622:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8006626:	d014      	beq.n	8006652 <__aeabi_fmul+0x15e>
 8006628:	ea92 0f0c 	teq	r2, ip
 800662c:	d101      	bne.n	8006632 <__aeabi_fmul+0x13e>
 800662e:	0242      	lsls	r2, r0, #9
 8006630:	d10f      	bne.n	8006652 <__aeabi_fmul+0x15e>
 8006632:	ea93 0f0c 	teq	r3, ip
 8006636:	d103      	bne.n	8006640 <__aeabi_fmul+0x14c>
 8006638:	024b      	lsls	r3, r1, #9
 800663a:	bf18      	it	ne
 800663c:	4608      	movne	r0, r1
 800663e:	d108      	bne.n	8006652 <__aeabi_fmul+0x15e>
 8006640:	ea80 0001 	eor.w	r0, r0, r1
 8006644:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8006648:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800664c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006650:	4770      	bx	lr
 8006652:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8006656:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800665a:	4770      	bx	lr

0800665c <__aeabi_fdiv>:
 800665c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006660:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006664:	bf1e      	ittt	ne
 8006666:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800666a:	ea92 0f0c 	teqne	r2, ip
 800666e:	ea93 0f0c 	teqne	r3, ip
 8006672:	d069      	beq.n	8006748 <__aeabi_fdiv+0xec>
 8006674:	eba2 0203 	sub.w	r2, r2, r3
 8006678:	ea80 0c01 	eor.w	ip, r0, r1
 800667c:	0249      	lsls	r1, r1, #9
 800667e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8006682:	d037      	beq.n	80066f4 <__aeabi_fdiv+0x98>
 8006684:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006688:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800668c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006690:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8006694:	428b      	cmp	r3, r1
 8006696:	bf38      	it	cc
 8006698:	005b      	lslcc	r3, r3, #1
 800669a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800669e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80066a2:	428b      	cmp	r3, r1
 80066a4:	bf24      	itt	cs
 80066a6:	1a5b      	subcs	r3, r3, r1
 80066a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80066ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80066b0:	bf24      	itt	cs
 80066b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80066b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80066ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80066be:	bf24      	itt	cs
 80066c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80066c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80066c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80066cc:	bf24      	itt	cs
 80066ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80066d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	bf18      	it	ne
 80066da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80066de:	d1e0      	bne.n	80066a2 <__aeabi_fdiv+0x46>
 80066e0:	2afd      	cmp	r2, #253	@ 0xfd
 80066e2:	f63f af50 	bhi.w	8006586 <__aeabi_fmul+0x92>
 80066e6:	428b      	cmp	r3, r1
 80066e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80066ec:	bf08      	it	eq
 80066ee:	f020 0001 	biceq.w	r0, r0, #1
 80066f2:	4770      	bx	lr
 80066f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80066f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80066fc:	327f      	adds	r2, #127	@ 0x7f
 80066fe:	bfc2      	ittt	gt
 8006700:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8006704:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006708:	4770      	bxgt	lr
 800670a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	3a01      	subs	r2, #1
 8006714:	e737      	b.n	8006586 <__aeabi_fmul+0x92>
 8006716:	f092 0f00 	teq	r2, #0
 800671a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800671e:	bf02      	ittt	eq
 8006720:	0040      	lsleq	r0, r0, #1
 8006722:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8006726:	3a01      	subeq	r2, #1
 8006728:	d0f9      	beq.n	800671e <__aeabi_fdiv+0xc2>
 800672a:	ea40 000c 	orr.w	r0, r0, ip
 800672e:	f093 0f00 	teq	r3, #0
 8006732:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8006736:	bf02      	ittt	eq
 8006738:	0049      	lsleq	r1, r1, #1
 800673a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800673e:	3b01      	subeq	r3, #1
 8006740:	d0f9      	beq.n	8006736 <__aeabi_fdiv+0xda>
 8006742:	ea41 010c 	orr.w	r1, r1, ip
 8006746:	e795      	b.n	8006674 <__aeabi_fdiv+0x18>
 8006748:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800674c:	ea92 0f0c 	teq	r2, ip
 8006750:	d108      	bne.n	8006764 <__aeabi_fdiv+0x108>
 8006752:	0242      	lsls	r2, r0, #9
 8006754:	f47f af7d 	bne.w	8006652 <__aeabi_fmul+0x15e>
 8006758:	ea93 0f0c 	teq	r3, ip
 800675c:	f47f af70 	bne.w	8006640 <__aeabi_fmul+0x14c>
 8006760:	4608      	mov	r0, r1
 8006762:	e776      	b.n	8006652 <__aeabi_fmul+0x15e>
 8006764:	ea93 0f0c 	teq	r3, ip
 8006768:	d104      	bne.n	8006774 <__aeabi_fdiv+0x118>
 800676a:	024b      	lsls	r3, r1, #9
 800676c:	f43f af4c 	beq.w	8006608 <__aeabi_fmul+0x114>
 8006770:	4608      	mov	r0, r1
 8006772:	e76e      	b.n	8006652 <__aeabi_fmul+0x15e>
 8006774:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8006778:	bf18      	it	ne
 800677a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800677e:	d1ca      	bne.n	8006716 <__aeabi_fdiv+0xba>
 8006780:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006784:	f47f af5c 	bne.w	8006640 <__aeabi_fmul+0x14c>
 8006788:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800678c:	f47f af3c 	bne.w	8006608 <__aeabi_fmul+0x114>
 8006790:	e75f      	b.n	8006652 <__aeabi_fmul+0x15e>
 8006792:	bf00      	nop

08006794 <__gesf2>:
 8006794:	f04f 3cff 	mov.w	ip, #4294967295
 8006798:	e006      	b.n	80067a8 <__cmpsf2+0x4>
 800679a:	bf00      	nop

0800679c <__lesf2>:
 800679c:	f04f 0c01 	mov.w	ip, #1
 80067a0:	e002      	b.n	80067a8 <__cmpsf2+0x4>
 80067a2:	bf00      	nop

080067a4 <__cmpsf2>:
 80067a4:	f04f 0c01 	mov.w	ip, #1
 80067a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80067ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80067b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80067b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80067b8:	bf18      	it	ne
 80067ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80067be:	d011      	beq.n	80067e4 <__cmpsf2+0x40>
 80067c0:	b001      	add	sp, #4
 80067c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80067c6:	bf18      	it	ne
 80067c8:	ea90 0f01 	teqne	r0, r1
 80067cc:	bf58      	it	pl
 80067ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80067d2:	bf88      	it	hi
 80067d4:	17c8      	asrhi	r0, r1, #31
 80067d6:	bf38      	it	cc
 80067d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80067dc:	bf18      	it	ne
 80067de:	f040 0001 	orrne.w	r0, r0, #1
 80067e2:	4770      	bx	lr
 80067e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80067e8:	d102      	bne.n	80067f0 <__cmpsf2+0x4c>
 80067ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80067ee:	d105      	bne.n	80067fc <__cmpsf2+0x58>
 80067f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80067f4:	d1e4      	bne.n	80067c0 <__cmpsf2+0x1c>
 80067f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80067fa:	d0e1      	beq.n	80067c0 <__cmpsf2+0x1c>
 80067fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <__aeabi_cfrcmple>:
 8006804:	4684      	mov	ip, r0
 8006806:	4608      	mov	r0, r1
 8006808:	4661      	mov	r1, ip
 800680a:	e7ff      	b.n	800680c <__aeabi_cfcmpeq>

0800680c <__aeabi_cfcmpeq>:
 800680c:	b50f      	push	{r0, r1, r2, r3, lr}
 800680e:	f7ff ffc9 	bl	80067a4 <__cmpsf2>
 8006812:	2800      	cmp	r0, #0
 8006814:	bf48      	it	mi
 8006816:	f110 0f00 	cmnmi.w	r0, #0
 800681a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800681c <__aeabi_fcmpeq>:
 800681c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006820:	f7ff fff4 	bl	800680c <__aeabi_cfcmpeq>
 8006824:	bf0c      	ite	eq
 8006826:	2001      	moveq	r0, #1
 8006828:	2000      	movne	r0, #0
 800682a:	f85d fb08 	ldr.w	pc, [sp], #8
 800682e:	bf00      	nop

08006830 <__aeabi_fcmplt>:
 8006830:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006834:	f7ff ffea 	bl	800680c <__aeabi_cfcmpeq>
 8006838:	bf34      	ite	cc
 800683a:	2001      	movcc	r0, #1
 800683c:	2000      	movcs	r0, #0
 800683e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006842:	bf00      	nop

08006844 <__aeabi_fcmple>:
 8006844:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006848:	f7ff ffe0 	bl	800680c <__aeabi_cfcmpeq>
 800684c:	bf94      	ite	ls
 800684e:	2001      	movls	r0, #1
 8006850:	2000      	movhi	r0, #0
 8006852:	f85d fb08 	ldr.w	pc, [sp], #8
 8006856:	bf00      	nop

08006858 <__aeabi_fcmpge>:
 8006858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800685c:	f7ff ffd2 	bl	8006804 <__aeabi_cfrcmple>
 8006860:	bf94      	ite	ls
 8006862:	2001      	movls	r0, #1
 8006864:	2000      	movhi	r0, #0
 8006866:	f85d fb08 	ldr.w	pc, [sp], #8
 800686a:	bf00      	nop

0800686c <__aeabi_fcmpgt>:
 800686c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006870:	f7ff ffc8 	bl	8006804 <__aeabi_cfrcmple>
 8006874:	bf34      	ite	cc
 8006876:	2001      	movcc	r0, #1
 8006878:	2000      	movcs	r0, #0
 800687a:	f85d fb08 	ldr.w	pc, [sp], #8
 800687e:	bf00      	nop

08006880 <__aeabi_f2iz>:
 8006880:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006884:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8006888:	d30f      	bcc.n	80068aa <__aeabi_f2iz+0x2a>
 800688a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800688e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8006892:	d90d      	bls.n	80068b0 <__aeabi_f2iz+0x30>
 8006894:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800689c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80068a0:	fa23 f002 	lsr.w	r0, r3, r2
 80068a4:	bf18      	it	ne
 80068a6:	4240      	negne	r0, r0
 80068a8:	4770      	bx	lr
 80068aa:	f04f 0000 	mov.w	r0, #0
 80068ae:	4770      	bx	lr
 80068b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80068b4:	d101      	bne.n	80068ba <__aeabi_f2iz+0x3a>
 80068b6:	0242      	lsls	r2, r0, #9
 80068b8:	d105      	bne.n	80068c6 <__aeabi_f2iz+0x46>
 80068ba:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80068be:	bf08      	it	eq
 80068c0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80068c4:	4770      	bx	lr
 80068c6:	f04f 0000 	mov.w	r0, #0
 80068ca:	4770      	bx	lr

080068cc <__aeabi_ldivmod>:
 80068cc:	b97b      	cbnz	r3, 80068ee <__aeabi_ldivmod+0x22>
 80068ce:	b972      	cbnz	r2, 80068ee <__aeabi_ldivmod+0x22>
 80068d0:	2900      	cmp	r1, #0
 80068d2:	bfbe      	ittt	lt
 80068d4:	2000      	movlt	r0, #0
 80068d6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80068da:	e006      	blt.n	80068ea <__aeabi_ldivmod+0x1e>
 80068dc:	bf08      	it	eq
 80068de:	2800      	cmpeq	r0, #0
 80068e0:	bf1c      	itt	ne
 80068e2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80068e6:	f04f 30ff 	movne.w	r0, #4294967295
 80068ea:	f000 ba1f 	b.w	8006d2c <__aeabi_idiv0>
 80068ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80068f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80068f6:	2900      	cmp	r1, #0
 80068f8:	db09      	blt.n	800690e <__aeabi_ldivmod+0x42>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db1a      	blt.n	8006934 <__aeabi_ldivmod+0x68>
 80068fe:	f000 f8b7 	bl	8006a70 <__udivmoddi4>
 8006902:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800690a:	b004      	add	sp, #16
 800690c:	4770      	bx	lr
 800690e:	4240      	negs	r0, r0
 8006910:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	db1b      	blt.n	8006950 <__aeabi_ldivmod+0x84>
 8006918:	f000 f8aa 	bl	8006a70 <__udivmoddi4>
 800691c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006924:	b004      	add	sp, #16
 8006926:	4240      	negs	r0, r0
 8006928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800692c:	4252      	negs	r2, r2
 800692e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006932:	4770      	bx	lr
 8006934:	4252      	negs	r2, r2
 8006936:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800693a:	f000 f899 	bl	8006a70 <__udivmoddi4>
 800693e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006946:	b004      	add	sp, #16
 8006948:	4240      	negs	r0, r0
 800694a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800694e:	4770      	bx	lr
 8006950:	4252      	negs	r2, r2
 8006952:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006956:	f000 f88b 	bl	8006a70 <__udivmoddi4>
 800695a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800695e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006962:	b004      	add	sp, #16
 8006964:	4252      	negs	r2, r2
 8006966:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800696a:	4770      	bx	lr

0800696c <__aeabi_uldivmod>:
 800696c:	b953      	cbnz	r3, 8006984 <__aeabi_uldivmod+0x18>
 800696e:	b94a      	cbnz	r2, 8006984 <__aeabi_uldivmod+0x18>
 8006970:	2900      	cmp	r1, #0
 8006972:	bf08      	it	eq
 8006974:	2800      	cmpeq	r0, #0
 8006976:	bf1c      	itt	ne
 8006978:	f04f 31ff 	movne.w	r1, #4294967295
 800697c:	f04f 30ff 	movne.w	r0, #4294967295
 8006980:	f000 b9d4 	b.w	8006d2c <__aeabi_idiv0>
 8006984:	f1ad 0c08 	sub.w	ip, sp, #8
 8006988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800698c:	f000 f870 	bl	8006a70 <__udivmoddi4>
 8006990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006998:	b004      	add	sp, #16
 800699a:	4770      	bx	lr

0800699c <__aeabi_f2lz>:
 800699c:	ee07 0a90 	vmov	s15, r0
 80069a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a8:	d401      	bmi.n	80069ae <__aeabi_f2lz+0x12>
 80069aa:	f000 b823 	b.w	80069f4 <__aeabi_f2ulz>
 80069ae:	eef1 7a67 	vneg.f32	s15, s15
 80069b2:	b508      	push	{r3, lr}
 80069b4:	ee17 0a90 	vmov	r0, s15
 80069b8:	f000 f81c 	bl	80069f4 <__aeabi_f2ulz>
 80069bc:	4240      	negs	r0, r0
 80069be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069c2:	bd08      	pop	{r3, pc}

080069c4 <__aeabi_d2lz>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	f7ff fbad 	bl	800612c <__aeabi_dcmplt>
 80069d2:	b928      	cbnz	r0, 80069e0 <__aeabi_d2lz+0x1c>
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069dc:	f000 b82a 	b.w	8006a34 <__aeabi_d2ulz>
 80069e0:	4620      	mov	r0, r4
 80069e2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80069e6:	f000 f825 	bl	8006a34 <__aeabi_d2ulz>
 80069ea:	4240      	negs	r0, r0
 80069ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	bf00      	nop

080069f4 <__aeabi_f2ulz>:
 80069f4:	b5d0      	push	{r4, r6, r7, lr}
 80069f6:	f7ff f8cf 	bl	8005b98 <__aeabi_f2d>
 80069fa:	4b0c      	ldr	r3, [pc, #48]	@ (8006a2c <__aeabi_f2ulz+0x38>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	4606      	mov	r6, r0
 8006a00:	460f      	mov	r7, r1
 8006a02:	f7ff f921 	bl	8005c48 <__aeabi_dmul>
 8006a06:	f7ff fbf7 	bl	80061f8 <__aeabi_d2uiz>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	f7ff f8a2 	bl	8005b54 <__aeabi_ui2d>
 8006a10:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <__aeabi_f2ulz+0x3c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7ff f918 	bl	8005c48 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7fe ff5a 	bl	80058d8 <__aeabi_dsub>
 8006a24:	f7ff fbe8 	bl	80061f8 <__aeabi_d2uiz>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	bdd0      	pop	{r4, r6, r7, pc}
 8006a2c:	3df00000 	.word	0x3df00000
 8006a30:	41f00000 	.word	0x41f00000

08006a34 <__aeabi_d2ulz>:
 8006a34:	b5d0      	push	{r4, r6, r7, lr}
 8006a36:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <__aeabi_d2ulz+0x34>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	f7ff f903 	bl	8005c48 <__aeabi_dmul>
 8006a42:	f7ff fbd9 	bl	80061f8 <__aeabi_d2uiz>
 8006a46:	4604      	mov	r4, r0
 8006a48:	f7ff f884 	bl	8005b54 <__aeabi_ui2d>
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <__aeabi_d2ulz+0x38>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f7ff f8fa 	bl	8005c48 <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4630      	mov	r0, r6
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7fe ff3c 	bl	80058d8 <__aeabi_dsub>
 8006a60:	f7ff fbca 	bl	80061f8 <__aeabi_d2uiz>
 8006a64:	4621      	mov	r1, r4
 8006a66:	bdd0      	pop	{r4, r6, r7, pc}
 8006a68:	3df00000 	.word	0x3df00000
 8006a6c:	41f00000 	.word	0x41f00000

08006a70 <__udivmoddi4>:
 8006a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	9d08      	ldr	r5, [sp, #32]
 8006a76:	460c      	mov	r4, r1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d14e      	bne.n	8006b1a <__udivmoddi4+0xaa>
 8006a7c:	4694      	mov	ip, r2
 8006a7e:	458c      	cmp	ip, r1
 8006a80:	4686      	mov	lr, r0
 8006a82:	fab2 f282 	clz	r2, r2
 8006a86:	d962      	bls.n	8006b4e <__udivmoddi4+0xde>
 8006a88:	b14a      	cbz	r2, 8006a9e <__udivmoddi4+0x2e>
 8006a8a:	f1c2 0320 	rsb	r3, r2, #32
 8006a8e:	4091      	lsls	r1, r2
 8006a90:	fa20 f303 	lsr.w	r3, r0, r3
 8006a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8006a98:	4319      	orrs	r1, r3
 8006a9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8006a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006aa2:	fa1f f68c 	uxth.w	r6, ip
 8006aa6:	fbb1 f4f7 	udiv	r4, r1, r7
 8006aaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006aae:	fb07 1114 	mls	r1, r7, r4, r1
 8006ab2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ab6:	fb04 f106 	mul.w	r1, r4, r6
 8006aba:	4299      	cmp	r1, r3
 8006abc:	d90a      	bls.n	8006ad4 <__udivmoddi4+0x64>
 8006abe:	eb1c 0303 	adds.w	r3, ip, r3
 8006ac2:	f104 30ff 	add.w	r0, r4, #4294967295
 8006ac6:	f080 8112 	bcs.w	8006cee <__udivmoddi4+0x27e>
 8006aca:	4299      	cmp	r1, r3
 8006acc:	f240 810f 	bls.w	8006cee <__udivmoddi4+0x27e>
 8006ad0:	3c02      	subs	r4, #2
 8006ad2:	4463      	add	r3, ip
 8006ad4:	1a59      	subs	r1, r3, r1
 8006ad6:	fa1f f38e 	uxth.w	r3, lr
 8006ada:	fbb1 f0f7 	udiv	r0, r1, r7
 8006ade:	fb07 1110 	mls	r1, r7, r0, r1
 8006ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ae6:	fb00 f606 	mul.w	r6, r0, r6
 8006aea:	429e      	cmp	r6, r3
 8006aec:	d90a      	bls.n	8006b04 <__udivmoddi4+0x94>
 8006aee:	eb1c 0303 	adds.w	r3, ip, r3
 8006af2:	f100 31ff 	add.w	r1, r0, #4294967295
 8006af6:	f080 80fc 	bcs.w	8006cf2 <__udivmoddi4+0x282>
 8006afa:	429e      	cmp	r6, r3
 8006afc:	f240 80f9 	bls.w	8006cf2 <__udivmoddi4+0x282>
 8006b00:	4463      	add	r3, ip
 8006b02:	3802      	subs	r0, #2
 8006b04:	1b9b      	subs	r3, r3, r6
 8006b06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	b11d      	cbz	r5, 8006b16 <__udivmoddi4+0xa6>
 8006b0e:	40d3      	lsrs	r3, r2
 8006b10:	2200      	movs	r2, #0
 8006b12:	e9c5 3200 	strd	r3, r2, [r5]
 8006b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	d905      	bls.n	8006b2a <__udivmoddi4+0xba>
 8006b1e:	b10d      	cbz	r5, 8006b24 <__udivmoddi4+0xb4>
 8006b20:	e9c5 0100 	strd	r0, r1, [r5]
 8006b24:	2100      	movs	r1, #0
 8006b26:	4608      	mov	r0, r1
 8006b28:	e7f5      	b.n	8006b16 <__udivmoddi4+0xa6>
 8006b2a:	fab3 f183 	clz	r1, r3
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d146      	bne.n	8006bc0 <__udivmoddi4+0x150>
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	d302      	bcc.n	8006b3c <__udivmoddi4+0xcc>
 8006b36:	4290      	cmp	r0, r2
 8006b38:	f0c0 80f0 	bcc.w	8006d1c <__udivmoddi4+0x2ac>
 8006b3c:	1a86      	subs	r6, r0, r2
 8006b3e:	eb64 0303 	sbc.w	r3, r4, r3
 8006b42:	2001      	movs	r0, #1
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	d0e6      	beq.n	8006b16 <__udivmoddi4+0xa6>
 8006b48:	e9c5 6300 	strd	r6, r3, [r5]
 8006b4c:	e7e3      	b.n	8006b16 <__udivmoddi4+0xa6>
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	f040 8090 	bne.w	8006c74 <__udivmoddi4+0x204>
 8006b54:	eba1 040c 	sub.w	r4, r1, ip
 8006b58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006b5c:	fa1f f78c 	uxth.w	r7, ip
 8006b60:	2101      	movs	r1, #1
 8006b62:	fbb4 f6f8 	udiv	r6, r4, r8
 8006b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006b6a:	fb08 4416 	mls	r4, r8, r6, r4
 8006b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b72:	fb07 f006 	mul.w	r0, r7, r6
 8006b76:	4298      	cmp	r0, r3
 8006b78:	d908      	bls.n	8006b8c <__udivmoddi4+0x11c>
 8006b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8006b7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8006b82:	d202      	bcs.n	8006b8a <__udivmoddi4+0x11a>
 8006b84:	4298      	cmp	r0, r3
 8006b86:	f200 80cd 	bhi.w	8006d24 <__udivmoddi4+0x2b4>
 8006b8a:	4626      	mov	r6, r4
 8006b8c:	1a1c      	subs	r4, r3, r0
 8006b8e:	fa1f f38e 	uxth.w	r3, lr
 8006b92:	fbb4 f0f8 	udiv	r0, r4, r8
 8006b96:	fb08 4410 	mls	r4, r8, r0, r4
 8006b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b9e:	fb00 f707 	mul.w	r7, r0, r7
 8006ba2:	429f      	cmp	r7, r3
 8006ba4:	d908      	bls.n	8006bb8 <__udivmoddi4+0x148>
 8006ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8006baa:	f100 34ff 	add.w	r4, r0, #4294967295
 8006bae:	d202      	bcs.n	8006bb6 <__udivmoddi4+0x146>
 8006bb0:	429f      	cmp	r7, r3
 8006bb2:	f200 80b0 	bhi.w	8006d16 <__udivmoddi4+0x2a6>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	1bdb      	subs	r3, r3, r7
 8006bba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006bbe:	e7a5      	b.n	8006b0c <__udivmoddi4+0x9c>
 8006bc0:	f1c1 0620 	rsb	r6, r1, #32
 8006bc4:	408b      	lsls	r3, r1
 8006bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8006bca:	431f      	orrs	r7, r3
 8006bcc:	fa20 fc06 	lsr.w	ip, r0, r6
 8006bd0:	fa04 f301 	lsl.w	r3, r4, r1
 8006bd4:	ea43 030c 	orr.w	r3, r3, ip
 8006bd8:	40f4      	lsrs	r4, r6
 8006bda:	fa00 f801 	lsl.w	r8, r0, r1
 8006bde:	0c38      	lsrs	r0, r7, #16
 8006be0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8006be4:	fbb4 fef0 	udiv	lr, r4, r0
 8006be8:	fa1f fc87 	uxth.w	ip, r7
 8006bec:	fb00 441e 	mls	r4, r0, lr, r4
 8006bf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006bf4:	fb0e f90c 	mul.w	r9, lr, ip
 8006bf8:	45a1      	cmp	r9, r4
 8006bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8006bfe:	d90a      	bls.n	8006c16 <__udivmoddi4+0x1a6>
 8006c00:	193c      	adds	r4, r7, r4
 8006c02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8006c06:	f080 8084 	bcs.w	8006d12 <__udivmoddi4+0x2a2>
 8006c0a:	45a1      	cmp	r9, r4
 8006c0c:	f240 8081 	bls.w	8006d12 <__udivmoddi4+0x2a2>
 8006c10:	f1ae 0e02 	sub.w	lr, lr, #2
 8006c14:	443c      	add	r4, r7
 8006c16:	eba4 0409 	sub.w	r4, r4, r9
 8006c1a:	fa1f f983 	uxth.w	r9, r3
 8006c1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8006c22:	fb00 4413 	mls	r4, r0, r3, r4
 8006c26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006c2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8006c2e:	45a4      	cmp	ip, r4
 8006c30:	d907      	bls.n	8006c42 <__udivmoddi4+0x1d2>
 8006c32:	193c      	adds	r4, r7, r4
 8006c34:	f103 30ff 	add.w	r0, r3, #4294967295
 8006c38:	d267      	bcs.n	8006d0a <__udivmoddi4+0x29a>
 8006c3a:	45a4      	cmp	ip, r4
 8006c3c:	d965      	bls.n	8006d0a <__udivmoddi4+0x29a>
 8006c3e:	3b02      	subs	r3, #2
 8006c40:	443c      	add	r4, r7
 8006c42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006c46:	fba0 9302 	umull	r9, r3, r0, r2
 8006c4a:	eba4 040c 	sub.w	r4, r4, ip
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	46ce      	mov	lr, r9
 8006c52:	469c      	mov	ip, r3
 8006c54:	d351      	bcc.n	8006cfa <__udivmoddi4+0x28a>
 8006c56:	d04e      	beq.n	8006cf6 <__udivmoddi4+0x286>
 8006c58:	b155      	cbz	r5, 8006c70 <__udivmoddi4+0x200>
 8006c5a:	ebb8 030e 	subs.w	r3, r8, lr
 8006c5e:	eb64 040c 	sbc.w	r4, r4, ip
 8006c62:	fa04 f606 	lsl.w	r6, r4, r6
 8006c66:	40cb      	lsrs	r3, r1
 8006c68:	431e      	orrs	r6, r3
 8006c6a:	40cc      	lsrs	r4, r1
 8006c6c:	e9c5 6400 	strd	r6, r4, [r5]
 8006c70:	2100      	movs	r1, #0
 8006c72:	e750      	b.n	8006b16 <__udivmoddi4+0xa6>
 8006c74:	f1c2 0320 	rsb	r3, r2, #32
 8006c78:	fa20 f103 	lsr.w	r1, r0, r3
 8006c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006c80:	fa24 f303 	lsr.w	r3, r4, r3
 8006c84:	4094      	lsls	r4, r2
 8006c86:	430c      	orrs	r4, r1
 8006c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006c8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8006c90:	fa1f f78c 	uxth.w	r7, ip
 8006c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8006c98:	fb08 3110 	mls	r1, r8, r0, r3
 8006c9c:	0c23      	lsrs	r3, r4, #16
 8006c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ca2:	fb00 f107 	mul.w	r1, r0, r7
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d908      	bls.n	8006cbc <__udivmoddi4+0x24c>
 8006caa:	eb1c 0303 	adds.w	r3, ip, r3
 8006cae:	f100 36ff 	add.w	r6, r0, #4294967295
 8006cb2:	d22c      	bcs.n	8006d0e <__udivmoddi4+0x29e>
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	d92a      	bls.n	8006d0e <__udivmoddi4+0x29e>
 8006cb8:	3802      	subs	r0, #2
 8006cba:	4463      	add	r3, ip
 8006cbc:	1a5b      	subs	r3, r3, r1
 8006cbe:	b2a4      	uxth	r4, r4
 8006cc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8006cc4:	fb08 3311 	mls	r3, r8, r1, r3
 8006cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006ccc:	fb01 f307 	mul.w	r3, r1, r7
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d908      	bls.n	8006ce6 <__udivmoddi4+0x276>
 8006cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8006cd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8006cdc:	d213      	bcs.n	8006d06 <__udivmoddi4+0x296>
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	d911      	bls.n	8006d06 <__udivmoddi4+0x296>
 8006ce2:	3902      	subs	r1, #2
 8006ce4:	4464      	add	r4, ip
 8006ce6:	1ae4      	subs	r4, r4, r3
 8006ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006cec:	e739      	b.n	8006b62 <__udivmoddi4+0xf2>
 8006cee:	4604      	mov	r4, r0
 8006cf0:	e6f0      	b.n	8006ad4 <__udivmoddi4+0x64>
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	e706      	b.n	8006b04 <__udivmoddi4+0x94>
 8006cf6:	45c8      	cmp	r8, r9
 8006cf8:	d2ae      	bcs.n	8006c58 <__udivmoddi4+0x1e8>
 8006cfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8006cfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8006d02:	3801      	subs	r0, #1
 8006d04:	e7a8      	b.n	8006c58 <__udivmoddi4+0x1e8>
 8006d06:	4631      	mov	r1, r6
 8006d08:	e7ed      	b.n	8006ce6 <__udivmoddi4+0x276>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	e799      	b.n	8006c42 <__udivmoddi4+0x1d2>
 8006d0e:	4630      	mov	r0, r6
 8006d10:	e7d4      	b.n	8006cbc <__udivmoddi4+0x24c>
 8006d12:	46d6      	mov	lr, sl
 8006d14:	e77f      	b.n	8006c16 <__udivmoddi4+0x1a6>
 8006d16:	4463      	add	r3, ip
 8006d18:	3802      	subs	r0, #2
 8006d1a:	e74d      	b.n	8006bb8 <__udivmoddi4+0x148>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	4623      	mov	r3, r4
 8006d20:	4608      	mov	r0, r1
 8006d22:	e70f      	b.n	8006b44 <__udivmoddi4+0xd4>
 8006d24:	3e02      	subs	r6, #2
 8006d26:	4463      	add	r3, ip
 8006d28:	e730      	b.n	8006b8c <__udivmoddi4+0x11c>
 8006d2a:	bf00      	nop

08006d2c <__aeabi_idiv0>:
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006d30:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d32:	4b16      	ldr	r3, [pc, #88]	@ (8006d8c <MX_GPIO_Init+0x5c>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	9200      	str	r2, [sp, #0]
 8006d38:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d3a:	f041 0104 	orr.w	r1, r1, #4
 8006d3e:	6319      	str	r1, [r3, #48]	@ 0x30
 8006d40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d42:	f001 0104 	and.w	r1, r1, #4
 8006d46:	9100      	str	r1, [sp, #0]
 8006d48:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d4a:	9201      	str	r2, [sp, #4]
 8006d4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d4e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006d52:	6319      	str	r1, [r3, #48]	@ 0x30
 8006d54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d56:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006d5a:	9101      	str	r1, [sp, #4]
 8006d5c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d62:	f041 0101 	orr.w	r1, r1, #1
 8006d66:	6319      	str	r1, [r3, #48]	@ 0x30
 8006d68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d6a:	f001 0101 	and.w	r1, r1, #1
 8006d6e:	9102      	str	r1, [sp, #8]
 8006d70:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d76:	f042 0202 	orr.w	r2, r2, #2
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	9303      	str	r3, [sp, #12]
 8006d84:	9b03      	ldr	r3, [sp, #12]

}
 8006d86:	b004      	add	sp, #16
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800

08006d90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006d90:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006d92:	480b      	ldr	r0, [pc, #44]	@ (8006dc0 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 400000;
 8006d94:	4a0b      	ldr	r2, [pc, #44]	@ (8006dc4 <MX_I2C1_Init+0x34>)
 8006d96:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <MX_I2C1_Init+0x38>)
 8006d98:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006d9c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8006da2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006da6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006daa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006dae:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006db0:	f004 f904 	bl	800afbc <HAL_I2C_Init>
 8006db4:	b118      	cbz	r0, 8006dbe <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006dba:	f000 b8bb 	b.w	8006f34 <Error_Handler>
}
 8006dbe:	bd08      	pop	{r3, pc}
 8006dc0:	20001240 	.word	0x20001240
 8006dc4:	40005400 	.word	0x40005400
 8006dc8:	00061a80 	.word	0x00061a80

08006dcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006dcc:	b530      	push	{r4, r5, lr}
 8006dce:	4604      	mov	r4, r0
 8006dd0:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd2:	2214      	movs	r2, #20
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	a803      	add	r0, sp, #12
 8006dd8:	f006 fa2c 	bl	800d234 <memset>
  if(i2cHandle->Instance==I2C1)
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <HAL_I2C_MspInit+0x60>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d121      	bne.n	8006e28 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006de4:	4c12      	ldr	r4, [pc, #72]	@ (8006e30 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de6:	4813      	ldr	r0, [pc, #76]	@ (8006e34 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006de8:	2500      	movs	r5, #0
 8006dea:	9501      	str	r5, [sp, #4]
 8006dec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006dee:	f043 0302 	orr.w	r3, r3, #2
 8006df2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006df4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dfe:	22c0      	movs	r2, #192	@ 0xc0
 8006e00:	2312      	movs	r3, #18
 8006e02:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e06:	2103      	movs	r1, #3
 8006e08:	2304      	movs	r3, #4
 8006e0a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e0e:	a903      	add	r1, sp, #12
 8006e10:	f003 fdfc 	bl	800aa0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e14:	9502      	str	r5, [sp, #8]
 8006e16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e1c:	6423      	str	r3, [r4, #64]	@ 0x40
 8006e1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006e28:	b009      	add	sp, #36	@ 0x24
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	40005400 	.word	0x40005400
 8006e30:	40023800 	.word	0x40023800
 8006e34:	40020400 	.word	0x40020400

08006e38 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8006e38:	b507      	push	{r0, r1, r2, lr}
HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8006e3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 8006e3e:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8006e40:	2201      	movs	r2, #1
 8006e42:	a901      	add	r1, sp, #4
 8006e44:	4803      	ldr	r0, [pc, #12]	@ (8006e54 <__io_putchar+0x1c>)
 8006e46:	f004 fe88 	bl	800bb5a <HAL_UART_Transmit>
return ch;
}
 8006e4a:	9801      	ldr	r0, [sp, #4]
 8006e4c:	b003      	add	sp, #12
 8006e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e52:	bf00      	nop
 8006e54:	20001298 	.word	0x20001298

08006e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e5c:	2214      	movs	r2, #20
 8006e5e:	2100      	movs	r1, #0
 8006e60:	a809      	add	r0, sp, #36	@ 0x24
 8006e62:	f006 f9e7 	bl	800d234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e66:	2214      	movs	r2, #20
 8006e68:	2100      	movs	r1, #0
 8006e6a:	a803      	add	r0, sp, #12
 8006e6c:	f006 f9e2 	bl	800d234 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	2300      	movs	r3, #0
 8006e72:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef0 <SystemClock_Config+0x98>)
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8006e78:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8006e7c:	6411      	str	r1, [r2, #64]	@ 0x40
 8006e7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006e80:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8006e84:	9201      	str	r2, [sp, #4]
 8006e86:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e88:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef4 <SystemClock_Config+0x9c>)
 8006e8a:	9302      	str	r3, [sp, #8]
 8006e8c:	6811      	ldr	r1, [r2, #0]
 8006e8e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006e92:	6011      	str	r1, [r2, #0]
 8006e94:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e96:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e98:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006e9c:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e9e:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea2:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006ea4:	23a8      	movs	r3, #168	@ 0xa8
 8006ea6:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eaa:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006eac:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006eae:	2101      	movs	r1, #1
 8006eb0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006eb2:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006eb4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006eb6:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006eba:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006ebc:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ebe:	f004 fac9 	bl	800b454 <HAL_RCC_OscConfig>
 8006ec2:	b108      	cbz	r0, 8006ec8 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ec4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ec6:	e7fe      	b.n	8006ec6 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ec8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006eca:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ece:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ed0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006ed8:	2105      	movs	r1, #5
 8006eda:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006edc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006ee0:	f004 fc94 	bl	800b80c <HAL_RCC_ClockConfig>
 8006ee4:	b108      	cbz	r0, 8006eea <SystemClock_Config+0x92>
 8006ee6:	b672      	cpsid	i
  while (1)
 8006ee8:	e7fe      	b.n	8006ee8 <SystemClock_Config+0x90>
}
 8006eea:	b014      	add	sp, #80	@ 0x50
 8006eec:	bd10      	pop	{r4, pc}
 8006eee:	bf00      	nop
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40007000 	.word	0x40007000

08006ef8 <main>:
{
 8006ef8:	b508      	push	{r3, lr}
  HAL_Init();
 8006efa:	f003 fcef 	bl	800a8dc <HAL_Init>
  SystemClock_Config();
 8006efe:	f7ff ffab 	bl	8006e58 <SystemClock_Config>
  MX_GPIO_Init();
 8006f02:	f7ff ff15 	bl	8006d30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006f06:	f7ff ff43 	bl	8006d90 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8006f0a:	f000 f89d 	bl	8007048 <MX_USART1_UART_Init>
  mpu = MPU1;
 8006f0e:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <main+0x30>)
	  mpu_dmp_get_data(&mpu1Data.Pitch_9AX,&mpu1Data.Roll_9AX,&mpu1Data.Yaw_9AX);
 8006f10:	4c06      	ldr	r4, [pc, #24]	@ (8006f2c <main+0x34>)
  mpu = MPU1;
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
  MPU9250_DMP_InitFunc();
 8006f16:	f004 ff61 	bl	800bddc <MPU9250_DMP_InitFunc>
	  mpu_dmp_get_data(&mpu1Data.Pitch_9AX,&mpu1Data.Roll_9AX,&mpu1Data.Yaw_9AX);
 8006f1a:	4905      	ldr	r1, [pc, #20]	@ (8006f30 <main+0x38>)
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	1f08      	subs	r0, r1, #4
 8006f20:	f004 ffae 	bl	800be80 <mpu_dmp_get_data>
  while (1)
 8006f24:	e7f9      	b.n	8006f1a <main+0x22>
 8006f26:	bf00      	nop
 8006f28:	20000066 	.word	0x20000066
 8006f2c:	2000193c 	.word	0x2000193c
 8006f30:	20001938 	.word	0x20001938

08006f34 <Error_Handler>:
 8006f34:	b672      	cpsid	i
  while (1)
 8006f36:	e7fe      	b.n	8006f36 <Error_Handler+0x2>

08006f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f38:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <HAL_MspInit+0x34>)
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	9100      	str	r1, [sp, #0]
 8006f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f46:	645a      	str	r2, [r3, #68]	@ 0x44
 8006f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f4a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f52:	9101      	str	r1, [sp, #4]
 8006f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f56:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006f5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f66:	b002      	add	sp, #8
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800

08006f70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f70:	e7fe      	b.n	8006f70 <NMI_Handler>

08006f72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f72:	e7fe      	b.n	8006f72 <HardFault_Handler>

08006f74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f74:	e7fe      	b.n	8006f74 <MemManage_Handler>

08006f76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f76:	e7fe      	b.n	8006f76 <BusFault_Handler>

08006f78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f78:	e7fe      	b.n	8006f78 <UsageFault_Handler>

08006f7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f7a:	4770      	bx	lr

08006f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8006f7c:	4770      	bx	lr

08006f7e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8006f7e:	4770      	bx	lr

08006f80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f80:	f003 bcc6 	b.w	800a910 <HAL_IncTick>

08006f84 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006f84:	2001      	movs	r0, #1
 8006f86:	4770      	bx	lr

08006f88 <_kill>:

int _kill(int pid, int sig)
{
 8006f88:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f8a:	f006 f9a5 	bl	800d2d8 <__errno>
 8006f8e:	2316      	movs	r3, #22
 8006f90:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	bd08      	pop	{r3, pc}

08006f98 <_exit>:

void _exit (int status)
{
 8006f98:	b508      	push	{r3, lr}
  errno = EINVAL;
 8006f9a:	f006 f99d 	bl	800d2d8 <__errno>
 8006f9e:	2316      	movs	r3, #22
 8006fa0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8006fa2:	e7fe      	b.n	8006fa2 <_exit+0xa>

08006fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006faa:	460e      	mov	r6, r1
 8006fac:	1b73      	subs	r3, r6, r5
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	dc01      	bgt.n	8006fb6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8006fb6:	f3af 8000 	nop.w
 8006fba:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fbe:	e7f5      	b.n	8006fac <_read+0x8>

08006fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fc6:	460e      	mov	r6, r1
 8006fc8:	1b73      	subs	r3, r6, r5
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	dc01      	bgt.n	8006fd2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8006fce:	4620      	mov	r0, r4
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8006fd2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8006fd6:	f7ff ff2f 	bl	8006e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fda:	e7f5      	b.n	8006fc8 <_write+0x8>

08006fdc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	4770      	bx	lr

08006fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fe6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4770      	bx	lr

08006fec <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006fec:	2001      	movs	r0, #1
 8006fee:	4770      	bx	lr

08006ff0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4770      	bx	lr

08006ff4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8007024 <_sbrk+0x30>)
 8006ff6:	6811      	ldr	r1, [r2, #0]
{
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8006ffc:	b909      	cbnz	r1, 8007002 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8006ffe:	490a      	ldr	r1, [pc, #40]	@ (8007028 <_sbrk+0x34>)
 8007000:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007002:	6810      	ldr	r0, [r2, #0]
 8007004:	4909      	ldr	r1, [pc, #36]	@ (800702c <_sbrk+0x38>)
 8007006:	4c0a      	ldr	r4, [pc, #40]	@ (8007030 <_sbrk+0x3c>)
 8007008:	4403      	add	r3, r0
 800700a:	1b09      	subs	r1, r1, r4
 800700c:	428b      	cmp	r3, r1
 800700e:	d906      	bls.n	800701e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8007010:	f006 f962 	bl	800d2d8 <__errno>
 8007014:	230c      	movs	r3, #12
 8007016:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007018:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800701c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800701e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8007020:	e7fc      	b.n	800701c <_sbrk+0x28>
 8007022:	bf00      	nop
 8007024:	20001294 	.word	0x20001294
 8007028:	20001a90 	.word	0x20001a90
 800702c:	20020000 	.word	0x20020000
 8007030:	00000400 	.word	0x00000400

08007034 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007034:	4a03      	ldr	r2, [pc, #12]	@ (8007044 <SystemInit+0x10>)
 8007036:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800703a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800703e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007042:	4770      	bx	lr
 8007044:	e000ed00 	.word	0xe000ed00

08007048 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007048:	480b      	ldr	r0, [pc, #44]	@ (8007078 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 800704a:	4a0c      	ldr	r2, [pc, #48]	@ (800707c <MX_USART1_UART_Init+0x34>)
{
 800704c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 800704e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007052:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007056:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007058:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800705a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800705e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007062:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007064:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007066:	f004 fd49 	bl	800bafc <HAL_UART_Init>
 800706a:	b118      	cbz	r0, 8007074 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800706c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007070:	f7ff bf60 	b.w	8006f34 <Error_Handler>
}
 8007074:	bd08      	pop	{r3, pc}
 8007076:	bf00      	nop
 8007078:	20001298 	.word	0x20001298
 800707c:	40011000 	.word	0x40011000

08007080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007086:	2214      	movs	r2, #20
 8007088:	2100      	movs	r1, #0
 800708a:	a803      	add	r0, sp, #12
 800708c:	f006 f8d2 	bl	800d234 <memset>
  if(uartHandle->Instance==USART1)
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <HAL_UART_MspInit+0x64>)
 8007094:	429a      	cmp	r2, r3
 8007096:	d123      	bne.n	80070e0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007098:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800709c:	2100      	movs	r1, #0
 800709e:	9101      	str	r1, [sp, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070a2:	4811      	ldr	r0, [pc, #68]	@ (80070e8 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80070a4:	f042 0210 	orr.w	r2, r2, #16
 80070a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80070aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ac:	f002 0210 	and.w	r2, r2, #16
 80070b0:	9201      	str	r2, [sp, #4]
 80070b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070b4:	9102      	str	r1, [sp, #8]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80070be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	9302      	str	r3, [sp, #8]
 80070c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80070cc:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070ce:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070d4:	2307      	movs	r3, #7
 80070d6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070da:	a903      	add	r1, sp, #12
 80070dc:	f003 fc96 	bl	800aa0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80070e0:	b008      	add	sp, #32
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	40011000 	.word	0x40011000
 80070e8:	40020000 	.word	0x40020000

080070ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80070ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007124 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80070f0:	f7ff ffa0 	bl	8007034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070f4:	480c      	ldr	r0, [pc, #48]	@ (8007128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80070f6:	490d      	ldr	r1, [pc, #52]	@ (800712c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80070f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80070fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070fc:	e002      	b.n	8007104 <LoopCopyDataInit>

080070fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007102:	3304      	adds	r3, #4

08007104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007108:	d3f9      	bcc.n	80070fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800710a:	4a0a      	ldr	r2, [pc, #40]	@ (8007134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800710c:	4c0a      	ldr	r4, [pc, #40]	@ (8007138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800710e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007110:	e001      	b.n	8007116 <LoopFillZerobss>

08007112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007114:	3204      	adds	r2, #4

08007116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007118:	d3fb      	bcc.n	8007112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800711a:	f006 f8e3 	bl	800d2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800711e:	f7ff feeb 	bl	8006ef8 <main>
  bx  lr    
 8007122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800712c:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8007130:	080156f8 	.word	0x080156f8
  ldr r2, =_sbss
 8007134:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8007138:	20001a90 	.word	0x20001a90

0800713c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800713c:	e7fe      	b.n	800713c <ADC_IRQHandler>
	...

08007140 <get_st_6500_biases>:
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8007148:	4c0d      	ldr	r4, [pc, #52]	@ (8007180 <get_st_6500_biases+0x40>)
{
 800714a:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800714e:	4605      	mov	r5, r0
 8007150:	460e      	mov	r6, r1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8007152:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x01;
 8007156:	2701      	movs	r7, #1
 8007158:	f8ad 7018 	strh.w	r7, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800715c:	7d49      	ldrb	r1, [r1, #21]
 800715e:	7800      	ldrb	r0, [r0, #0]
{
 8007160:	4691      	mov	r9, r2
 8007162:	469a      	mov	sl, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8007164:	2202      	movs	r2, #2
 8007166:	ab06      	add	r3, sp, #24
 8007168:	f004 ff6a 	bl	800c040 <MPU_Write_Len>
 800716c:	4680      	mov	r8, r0
 800716e:	b148      	cbz	r0, 8007184 <get_st_6500_biases+0x44>
        return -1;
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
    	log_i("Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, accel[0]/65536.f, accel[1]/65536.f, accel[2]/65536.f);
    	log_i("Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, gyro[0]/65536.f, gyro[1]/65536.f, gyro[2]/65536.f);
    }

    return 0;
}
 8007174:	f50d 7d07 	add.w	sp, sp, #540	@ 0x21c
 8007178:	ecbd 8b02 	vpop	{d8}
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	20000014 	.word	0x20000014
    delay_ms(200);
 8007184:	20c8      	movs	r0, #200	@ 0xc8
 8007186:	f003 fbd5 	bl	800a934 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800718a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0;
 800718e:	f88d 8018 	strb.w	r8, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8007192:	7c49      	ldrb	r1, [r1, #17]
 8007194:	7800      	ldrb	r0, [r0, #0]
 8007196:	ab06      	add	r3, sp, #24
 8007198:	463a      	mov	r2, r7
 800719a:	f004 ff51 	bl	800c040 <MPU_Write_Len>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d1e6      	bne.n	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80071a2:	e9d4 1000 	ldrd	r1, r0, [r4]
 80071a6:	ab06      	add	r3, sp, #24
 80071a8:	7949      	ldrb	r1, [r1, #5]
 80071aa:	7800      	ldrb	r0, [r0, #0]
 80071ac:	463a      	mov	r2, r7
 80071ae:	f004 ff47 	bl	800c040 <MPU_Write_Len>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1dc      	bne.n	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80071b6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80071ba:	ab06      	add	r3, sp, #24
 80071bc:	7d49      	ldrb	r1, [r1, #21]
 80071be:	7800      	ldrb	r0, [r0, #0]
 80071c0:	463a      	mov	r2, r7
 80071c2:	f004 ff3d 	bl	800c040 <MPU_Write_Len>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d1d2      	bne.n	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80071ca:	e9d4 1000 	ldrd	r1, r0, [r4]
 80071ce:	ab06      	add	r3, sp, #24
 80071d0:	7e89      	ldrb	r1, [r1, #26]
 80071d2:	7800      	ldrb	r0, [r0, #0]
 80071d4:	463a      	mov	r2, r7
 80071d6:	f004 ff33 	bl	800c040 <MPU_Write_Len>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d1c8      	bne.n	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80071de:	e9d4 1000 	ldrd	r1, r0, [r4]
 80071e2:	ab06      	add	r3, sp, #24
 80071e4:	7909      	ldrb	r1, [r1, #4]
 80071e6:	7800      	ldrb	r0, [r0, #0]
 80071e8:	463a      	mov	r2, r7
 80071ea:	f004 ff29 	bl	800c040 <MPU_Write_Len>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d1be      	bne.n	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80071f2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 80071f6:	230c      	movs	r3, #12
 80071f8:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80071fc:	7909      	ldrb	r1, [r1, #4]
 80071fe:	7800      	ldrb	r0, [r0, #0]
 8007200:	ab06      	add	r3, sp, #24
 8007202:	463a      	mov	r2, r7
 8007204:	f004 ff1c 	bl	800c040 <MPU_Write_Len>
 8007208:	2800      	cmp	r0, #0
 800720a:	d1b1      	bne.n	8007170 <get_st_6500_biases+0x30>
    delay_ms(15);
 800720c:	200f      	movs	r0, #15
 800720e:	f003 fb91 	bl	800a934 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8007212:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8007214:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.test->reg_lpf;
 8007218:	7a5b      	ldrb	r3, [r3, #9]
 800721a:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800721e:	7889      	ldrb	r1, [r1, #2]
 8007220:	7800      	ldrb	r0, [r0, #0]
 8007222:	ab06      	add	r3, sp, #24
 8007224:	463a      	mov	r2, r7
 8007226:	f004 ff0b 	bl	800c040 <MPU_Write_Len>
 800722a:	2800      	cmp	r0, #0
 800722c:	d1a0      	bne.n	8007170 <get_st_6500_biases+0x30>
    data[0] = st.test->reg_rate_div;
 800722e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8007230:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.test->reg_rate_div;
 8007234:	7a1b      	ldrb	r3, [r3, #8]
 8007236:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800723a:	7849      	ldrb	r1, [r1, #1]
 800723c:	7800      	ldrb	r0, [r0, #0]
 800723e:	ab06      	add	r3, sp, #24
 8007240:	463a      	mov	r2, r7
 8007242:	f004 fefd 	bl	800c040 <MPU_Write_Len>
 8007246:	2800      	cmp	r0, #0
 8007248:	d192      	bne.n	8007170 <get_st_6500_biases+0x30>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800724a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800724c:	7a9b      	ldrb	r3, [r3, #10]
    if (hw_test)
 800724e:	f1b9 0f00 	cmp.w	r9, #0
 8007252:	d001      	beq.n	8007258 <get_st_6500_biases+0x118>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8007254:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8007258:	e9d4 1000 	ldrd	r1, r0, [r4]
 800725c:	f88d 3018 	strb.w	r3, [sp, #24]
 8007260:	7989      	ldrb	r1, [r1, #6]
 8007262:	7800      	ldrb	r0, [r0, #0]
 8007264:	ab06      	add	r3, sp, #24
 8007266:	2201      	movs	r2, #1
 8007268:	f004 feea 	bl	800c040 <MPU_Write_Len>
 800726c:	2800      	cmp	r0, #0
 800726e:	f47f af7f 	bne.w	8007170 <get_st_6500_biases+0x30>
    if (hw_test)
 8007272:	f1b9 0f00 	cmp.w	r9, #0
 8007276:	f000 810c 	beq.w	8007492 <get_st_6500_biases+0x352>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800727a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800727c:	7adb      	ldrb	r3, [r3, #11]
 800727e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8007282:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007286:	f88d 3018 	strb.w	r3, [sp, #24]
 800728a:	79c9      	ldrb	r1, [r1, #7]
 800728c:	7800      	ldrb	r0, [r0, #0]
 800728e:	ab06      	add	r3, sp, #24
 8007290:	2201      	movs	r2, #1
 8007292:	f004 fed5 	bl	800c040 <MPU_Write_Len>
 8007296:	2800      	cmp	r0, #0
 8007298:	f47f af6a 	bne.w	8007170 <get_st_6500_biases+0x30>
    delay_ms(test.wait_ms);  //wait 200ms for sensors to stabilize
 800729c:	20c8      	movs	r0, #200	@ 0xc8
 800729e:	f003 fb49 	bl	800a934 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80072a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_FIFO_EN;
 80072a6:	2340      	movs	r3, #64	@ 0x40
 80072a8:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80072ac:	7909      	ldrb	r1, [r1, #4]
 80072ae:	7800      	ldrb	r0, [r0, #0]
 80072b0:	ab06      	add	r3, sp, #24
 80072b2:	2201      	movs	r2, #1
 80072b4:	f004 fec4 	bl	800c040 <MPU_Write_Len>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f47f af59 	bne.w	8007170 <get_st_6500_biases+0x30>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80072be:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80072c2:	2378      	movs	r3, #120	@ 0x78
 80072c4:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80072c8:	7949      	ldrb	r1, [r1, #5]
 80072ca:	7800      	ldrb	r0, [r0, #0]
 80072cc:	ab06      	add	r3, sp, #24
 80072ce:	2201      	movs	r2, #1
 80072d0:	f004 feb6 	bl	800c040 <MPU_Write_Len>
 80072d4:	4601      	mov	r1, r0
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f47f af4a 	bne.w	8007170 <get_st_6500_biases+0x30>
    gyro[0] = gyro[1] = gyro[2] = 0;
 80072dc:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80072e0:	6028      	str	r0, [r5, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80072e2:	e9c6 0001 	strd	r0, r0, [r6, #4]
 80072e6:	6030      	str	r0, [r6, #0]
    if(debug)
 80072e8:	f1ba 0f00 	cmp.w	sl, #0
 80072ec:	d003      	beq.n	80072f6 <get_st_6500_biases+0x1b6>
    	log_i("Starting Bias Loop Reads\n");
 80072ee:	4ab3      	ldr	r2, [pc, #716]	@ (80075bc <get_st_6500_biases+0x47c>)
 80072f0:	2004      	movs	r0, #4
 80072f2:	f002 f947 	bl	8009584 <_MLPrintLog>
        data[0] = test.reg_accel_fsr;
 80072f6:	f04f 0800 	mov.w	r8, #0
		packet_count = fifo_count / MAX_PACKET_LENGTH;
 80072fa:	f04f 0b0c 	mov.w	fp, #12
    	delay_ms(test.sample_wait_ms); //wait 10ms to fill FIFO
 80072fe:	200a      	movs	r0, #10
 8007300:	f003 fb18 	bl	800a934 <HAL_Delay>
		if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8007304:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007308:	ab06      	add	r3, sp, #24
 800730a:	7b09      	ldrb	r1, [r1, #12]
 800730c:	7800      	ldrb	r0, [r0, #0]
 800730e:	2202      	movs	r2, #2
 8007310:	f004 fe9e 	bl	800c050 <MPU_Read_Len>
 8007314:	2800      	cmp	r0, #0
 8007316:	f47f af2b 	bne.w	8007170 <get_st_6500_biases+0x30>
		packet_count = fifo_count / MAX_PACKET_LENGTH;
 800731a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800731e:	ba7f      	rev16	r7, r7
		if ((test.packet_thresh - s) < packet_count)
 8007320:	f1c8 03c8 	rsb	r3, r8, #200	@ 0xc8
		packet_count = fifo_count / MAX_PACKET_LENGTH;
 8007324:	b2bf      	uxth	r7, r7
 8007326:	fbb7 f7fb 	udiv	r7, r7, fp
 800732a:	b2ff      	uxtb	r7, r7
		if ((test.packet_thresh - s) < packet_count)
 800732c:	42bb      	cmp	r3, r7
		            packet_count = test.packet_thresh - s;
 800732e:	bfb8      	it	lt
 8007330:	b2df      	uxtblt	r7, r3
		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
 8007332:	e9d4 1000 	ldrd	r1, r0, [r4]
		read_size = packet_count * MAX_PACKET_LENGTH;
 8007336:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800733a:	0092      	lsls	r2, r2, #2
		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
 800733c:	7b49      	ldrb	r1, [r1, #13]
 800733e:	7800      	ldrb	r0, [r0, #0]
 8007340:	ab06      	add	r3, sp, #24
 8007342:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8007346:	f004 fe83 	bl	800c050 <MPU_Read_Len>
 800734a:	2800      	cmp	r0, #0
 800734c:	f47f af10 	bne.w	8007170 <get_st_6500_biases+0x30>
 8007350:	ab06      	add	r3, sp, #24
		for (ii = 0; ii < packet_count; ii++) {
 8007352:	b2c2      	uxtb	r2, r0
 8007354:	4297      	cmp	r7, r2
 8007356:	f103 030c 	add.w	r3, r3, #12
 800735a:	f200 809c 	bhi.w	8007496 <get_st_6500_biases+0x356>
		s += packet_count;
 800735e:	44b8      	add	r8, r7
    while (s < test.packet_thresh) {
 8007360:	f1b8 0fc7 	cmp.w	r8, #199	@ 0xc7
 8007364:	ddcb      	ble.n	80072fe <get_st_6500_biases+0x1be>
    if(debug)
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	d005      	beq.n	8007378 <get_st_6500_biases+0x238>
    	log_i("Samples: %d\n", s);
 800736c:	4a94      	ldr	r2, [pc, #592]	@ (80075c0 <get_st_6500_biases+0x480>)
 800736e:	4643      	mov	r3, r8
 8007370:	2100      	movs	r1, #0
 8007372:	2004      	movs	r0, #4
 8007374:	f002 f906 	bl	8009584 <_MLPrintLog>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8007378:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	f88d 3018 	strb.w	r3, [sp, #24]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8007382:	7949      	ldrb	r1, [r1, #5]
 8007384:	7800      	ldrb	r0, [r0, #0]
 8007386:	ab06      	add	r3, sp, #24
 8007388:	2201      	movs	r2, #1
 800738a:	f004 fe59 	bl	800c040 <MPU_Write_Len>
 800738e:	2800      	cmp	r0, #0
 8007390:	f47f aeee 	bne.w	8007170 <get_st_6500_biases+0x30>
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
 8007394:	682f      	ldr	r7, [r5, #0]
 8007396:	17f9      	asrs	r1, r7, #31
 8007398:	0409      	lsls	r1, r1, #16
 800739a:	ea4f 74e8 	mov.w	r4, r8, asr #31
 800739e:	2283      	movs	r2, #131	@ 0x83
 80073a0:	2300      	movs	r3, #0
 80073a2:	0438      	lsls	r0, r7, #16
 80073a4:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80073a8:	f7ff fa90 	bl	80068cc <__aeabi_ldivmod>
 80073ac:	4642      	mov	r2, r8
 80073ae:	4623      	mov	r3, r4
 80073b0:	f7ff fa8c 	bl	80068cc <__aeabi_ldivmod>
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
 80073b4:	686f      	ldr	r7, [r5, #4]
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
 80073b6:	6028      	str	r0, [r5, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
 80073b8:	17f9      	asrs	r1, r7, #31
 80073ba:	0409      	lsls	r1, r1, #16
 80073bc:	2283      	movs	r2, #131	@ 0x83
 80073be:	2300      	movs	r3, #0
 80073c0:	0438      	lsls	r0, r7, #16
 80073c2:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80073c6:	f7ff fa81 	bl	80068cc <__aeabi_ldivmod>
 80073ca:	4642      	mov	r2, r8
 80073cc:	4623      	mov	r3, r4
 80073ce:	f7ff fa7d 	bl	80068cc <__aeabi_ldivmod>
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
 80073d2:	68af      	ldr	r7, [r5, #8]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
 80073d4:	6068      	str	r0, [r5, #4]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
 80073d6:	17f9      	asrs	r1, r7, #31
 80073d8:	0409      	lsls	r1, r1, #16
 80073da:	2283      	movs	r2, #131	@ 0x83
 80073dc:	2300      	movs	r3, #0
 80073de:	0438      	lsls	r0, r7, #16
 80073e0:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80073e4:	f7ff fa72 	bl	80068cc <__aeabi_ldivmod>
 80073e8:	4623      	mov	r3, r4
 80073ea:	4642      	mov	r2, r8
 80073ec:	f7ff fa6e 	bl	80068cc <__aeabi_ldivmod>
 80073f0:	60a8      	str	r0, [r5, #8]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
 80073f2:	6833      	ldr	r3, [r6, #0]
 80073f4:	17d9      	asrs	r1, r3, #31
 80073f6:	0409      	lsls	r1, r1, #16
 80073f8:	ea51 4113 	orrs.w	r1, r1, r3, lsr #16
 80073fc:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8007400:	d504      	bpl.n	800740c <get_st_6500_biases+0x2cc>
 8007402:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8007406:	18c0      	adds	r0, r0, r3
 8007408:	f141 0100 	adc.w	r1, r1, #0
 800740c:	0b80      	lsrs	r0, r0, #14
 800740e:	4642      	mov	r2, r8
 8007410:	4623      	mov	r3, r4
 8007412:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
 8007416:	1389      	asrs	r1, r1, #14
 8007418:	f7ff fa58 	bl	80068cc <__aeabi_ldivmod>
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
 800741c:	6872      	ldr	r2, [r6, #4]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
 800741e:	6030      	str	r0, [r6, #0]
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
 8007420:	17d1      	asrs	r1, r2, #31
 8007422:	0409      	lsls	r1, r1, #16
 8007424:	ea51 4112 	orrs.w	r1, r1, r2, lsr #16
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
 8007428:	4683      	mov	fp, r0
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
 800742a:	ea4f 4302 	mov.w	r3, r2, lsl #16
 800742e:	d504      	bpl.n	800743a <get_st_6500_biases+0x2fa>
 8007430:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8007434:	189b      	adds	r3, r3, r2
 8007436:	f141 0100 	adc.w	r1, r1, #0
 800743a:	0b98      	lsrs	r0, r3, #14
 800743c:	4642      	mov	r2, r8
 800743e:	4623      	mov	r3, r4
 8007440:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
 8007444:	1389      	asrs	r1, r1, #14
 8007446:	f7ff fa41 	bl	80068cc <__aeabi_ldivmod>
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
 800744a:	68b2      	ldr	r2, [r6, #8]
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
 800744c:	6070      	str	r0, [r6, #4]
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
 800744e:	17d1      	asrs	r1, r2, #31
 8007450:	0409      	lsls	r1, r1, #16
 8007452:	ea51 4112 	orrs.w	r1, r1, r2, lsr #16
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
 8007456:	ee08 0a90 	vmov	s17, r0
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
 800745a:	ea4f 4302 	mov.w	r3, r2, lsl #16
 800745e:	d504      	bpl.n	800746a <get_st_6500_biases+0x32a>
 8007460:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8007464:	189b      	adds	r3, r3, r2
 8007466:	f141 0100 	adc.w	r1, r1, #0
 800746a:	0b98      	lsrs	r0, r3, #14
 800746c:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
 8007470:	4623      	mov	r3, r4
 8007472:	4642      	mov	r2, r8
 8007474:	1389      	asrs	r1, r1, #14
 8007476:	f7ff fa29 	bl	80068cc <__aeabi_ldivmod>
    if (accel[2] > 0L)
 800747a:	1e03      	subs	r3, r0, #0
        accel[2] -= 65536L;
 800747c:	bfcc      	ite	gt
 800747e:	f5a3 3380 	subgt.w	r3, r3, #65536	@ 0x10000
        accel[2] += 65536L;
 8007482:	f503 3380 	addle.w	r3, r3, #65536	@ 0x10000
 8007486:	60b3      	str	r3, [r6, #8]
    if(debug) {
 8007488:	f1ba 0f00 	cmp.w	sl, #0
 800748c:	d141      	bne.n	8007512 <get_st_6500_biases+0x3d2>
    return 0;
 800748e:	2000      	movs	r0, #0
 8007490:	e670      	b.n	8007174 <get_st_6500_biases+0x34>
        data[0] = test.reg_accel_fsr;
 8007492:	464b      	mov	r3, r9
 8007494:	e6f5      	b.n	8007282 <get_st_6500_biases+0x142>
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
 8007496:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 800749a:	f813 cc09 	ldrb.w	ip, [r3, #-9]
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
 800749e:	f813 1c08 	ldrb.w	r1, [r3, #-8]
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
 80074a2:	f813 ec0c 	ldrb.w	lr, [r3, #-12]
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
 80074a6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
 80074aa:	f813 2c07 	ldrb.w	r2, [r3, #-7]
 80074ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
 80074b2:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80074b6:	ea41 2e0e 	orr.w	lr, r1, lr, lsl #8
			accel[0] += (long)accel_cur[0];
 80074ba:	6831      	ldr	r1, [r6, #0]
 80074bc:	fa01 f18e 	sxtah	r1, r1, lr
 80074c0:	6031      	str	r1, [r6, #0]
			accel[1] += (long)accel_cur[1];
 80074c2:	6871      	ldr	r1, [r6, #4]
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
 80074c4:	f813 ec06 	ldrb.w	lr, [r3, #-6]
			accel[1] += (long)accel_cur[1];
 80074c8:	fa01 f18c 	sxtah	r1, r1, ip
 80074cc:	6071      	str	r1, [r6, #4]
			accel[2] += (long)accel_cur[2];
 80074ce:	68b1      	ldr	r1, [r6, #8]
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
 80074d0:	f813 cc03 	ldrb.w	ip, [r3, #-3]
			accel[2] += (long)accel_cur[2];
 80074d4:	fa01 f282 	sxtah	r2, r1, r2
 80074d8:	60b2      	str	r2, [r6, #8]
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
 80074da:	f813 2c04 	ldrb.w	r2, [r3, #-4]
			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
 80074de:	f813 1c02 	ldrb.w	r1, [r3, #-2]
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
 80074e2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
 80074e6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80074ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
 80074ee:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 80074f2:	ea41 2e0e 	orr.w	lr, r1, lr, lsl #8
			gyro[0] += (long)gyro_cur[0];
 80074f6:	6829      	ldr	r1, [r5, #0]
 80074f8:	fa01 f18e 	sxtah	r1, r1, lr
 80074fc:	6029      	str	r1, [r5, #0]
			gyro[1] += (long)gyro_cur[1];
 80074fe:	6869      	ldr	r1, [r5, #4]
 8007500:	fa01 f18c 	sxtah	r1, r1, ip
 8007504:	6069      	str	r1, [r5, #4]
			gyro[2] += (long)gyro_cur[2];
 8007506:	68a9      	ldr	r1, [r5, #8]
 8007508:	fa01 f282 	sxtah	r2, r1, r2
 800750c:	60aa      	str	r2, [r5, #8]
		for (ii = 0; ii < packet_count; ii++) {
 800750e:	3001      	adds	r0, #1
 8007510:	e71f      	b.n	8007352 <get_st_6500_biases+0x212>
    	log_i("Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, accel[0]/65536.f, accel[1]/65536.f, accel[2]/65536.f);
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 80075c4 <get_st_6500_biases+0x484>
 800751a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800751e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8007522:	ee67 7a88 	vmul.f32	s15, s15, s16
 8007526:	ee17 0a90 	vmov	r0, s15
 800752a:	f7fe fb35 	bl	8005b98 <__aeabi_f2d>
 800752e:	ee68 7a88 	vmul.f32	s15, s17, s16
 8007532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007536:	ee17 0a90 	vmov	r0, s15
 800753a:	f7fe fb2d 	bl	8005b98 <__aeabi_f2d>
 800753e:	ee07 ba90 	vmov	s15, fp
 8007542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800754e:	ee17 0a90 	vmov	r0, s15
 8007552:	f7fe fb21 	bl	8005b98 <__aeabi_f2d>
 8007556:	464b      	mov	r3, r9
 8007558:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <get_st_6500_biases+0x488>)
 800755a:	e9cd 0100 	strd	r0, r1, [sp]
 800755e:	2100      	movs	r1, #0
 8007560:	2004      	movs	r0, #4
 8007562:	f002 f80f 	bl	8009584 <_MLPrintLog>
    	log_i("Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, gyro[0]/65536.f, gyro[1]/65536.f, gyro[2]/65536.f);
 8007566:	edd5 7a02 	vldr	s15, [r5, #8]
 800756a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800756e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8007572:	ee17 0a90 	vmov	r0, s15
 8007576:	f7fe fb0f 	bl	8005b98 <__aeabi_f2d>
 800757a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800757e:	edd5 7a01 	vldr	s15, [r5, #4]
 8007582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007586:	ee67 7a88 	vmul.f32	s15, s15, s16
 800758a:	ee17 0a90 	vmov	r0, s15
 800758e:	f7fe fb03 	bl	8005b98 <__aeabi_f2d>
 8007592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007596:	edd5 7a00 	vldr	s15, [r5]
 800759a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800759e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80075a2:	ee17 0a90 	vmov	r0, s15
 80075a6:	f7fe faf7 	bl	8005b98 <__aeabi_f2d>
 80075aa:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <get_st_6500_biases+0x48c>)
 80075ac:	e9cd 0100 	strd	r0, r1, [sp]
 80075b0:	464b      	mov	r3, r9
 80075b2:	2100      	movs	r1, #0
 80075b4:	2004      	movs	r0, #4
 80075b6:	f001 ffe5 	bl	8009584 <_MLPrintLog>
 80075ba:	e768      	b.n	800748e <get_st_6500_biases+0x34e>
 80075bc:	080138c8 	.word	0x080138c8
 80075c0:	080138e2 	.word	0x080138e2
 80075c4:	37800000 	.word	0x37800000
 80075c8:	080138ef 	.word	0x080138ef
 80075cc:	08013922 	.word	0x08013922

080075d0 <set_int_enable.isra.0>:
static int set_int_enable(unsigned char enable)
 80075d0:	b513      	push	{r0, r1, r4, lr}
    if (st.chip_cfg.dmp_on) {
 80075d2:	4c0f      	ldr	r4, [pc, #60]	@ (8007610 <set_int_enable.isra.0+0x40>)
 80075d4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80075d8:	b183      	cbz	r3, 80075fc <set_int_enable.isra.0+0x2c>
        if (enable)
 80075da:	0040      	lsls	r0, r0, #1
            tmp = BIT_DATA_RDY_EN;
 80075dc:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80075e0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80075e4:	f10d 0307 	add.w	r3, sp, #7
 80075e8:	7c49      	ldrb	r1, [r1, #17]
 80075ea:	7800      	ldrb	r0, [r0, #0]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f004 fd27 	bl	800c040 <MPU_Write_Len>
 80075f2:	b950      	cbnz	r0, 800760a <set_int_enable.isra.0+0x3a>
        st.chip_cfg.int_enable = tmp;
 80075f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80075f8:	7463      	strb	r3, [r4, #17]
 80075fa:	e006      	b.n	800760a <set_int_enable.isra.0+0x3a>
        if (!st.chip_cfg.sensors)
 80075fc:	7aa3      	ldrb	r3, [r4, #10]
 80075fe:	b123      	cbz	r3, 800760a <set_int_enable.isra.0+0x3a>
        if (enable && st.chip_cfg.int_enable)
 8007600:	2800      	cmp	r0, #0
 8007602:	d0eb      	beq.n	80075dc <set_int_enable.isra.0+0xc>
 8007604:	7c63      	ldrb	r3, [r4, #17]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0e8      	beq.n	80075dc <set_int_enable.isra.0+0xc>
}
 800760a:	b002      	add	sp, #8
 800760c:	bd10      	pop	{r4, pc}
 800760e:	bf00      	nop
 8007610:	20000014 	.word	0x20000014

08007614 <mpu_reset_fifo>:
{
 8007614:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 8007616:	4c59      	ldr	r4, [pc, #356]	@ (800777c <mpu_reset_fifo+0x168>)
 8007618:	7aa3      	ldrb	r3, [r4, #10]
 800761a:	b91b      	cbnz	r3, 8007624 <mpu_reset_fifo+0x10>
        return -1;
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007620:	b002      	add	sp, #8
 8007622:	bd10      	pop	{r4, pc}
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007624:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800762e:	7c49      	ldrb	r1, [r1, #17]
 8007630:	7800      	ldrb	r0, [r0, #0]
 8007632:	f10d 0307 	add.w	r3, sp, #7
 8007636:	2201      	movs	r2, #1
 8007638:	f004 fd02 	bl	800c040 <MPU_Write_Len>
 800763c:	2800      	cmp	r0, #0
 800763e:	d1ed      	bne.n	800761c <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8007640:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007644:	f10d 0307 	add.w	r3, sp, #7
 8007648:	7949      	ldrb	r1, [r1, #5]
 800764a:	7800      	ldrb	r0, [r0, #0]
 800764c:	2201      	movs	r2, #1
 800764e:	f004 fcf7 	bl	800c040 <MPU_Write_Len>
 8007652:	2800      	cmp	r0, #0
 8007654:	d1e2      	bne.n	800761c <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007656:	e9d4 1000 	ldrd	r1, r0, [r4]
 800765a:	f10d 0307 	add.w	r3, sp, #7
 800765e:	7909      	ldrb	r1, [r1, #4]
 8007660:	7800      	ldrb	r0, [r0, #0]
 8007662:	2201      	movs	r2, #1
 8007664:	f004 fcec 	bl	800c040 <MPU_Write_Len>
 8007668:	2800      	cmp	r0, #0
 800766a:	d1d7      	bne.n	800761c <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800766c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8007670:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8007672:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d043      	beq.n	8007702 <mpu_reset_fifo+0xee>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800767a:	230c      	movs	r3, #12
 800767c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007680:	7800      	ldrb	r0, [r0, #0]
 8007682:	f10d 0307 	add.w	r3, sp, #7
 8007686:	2201      	movs	r2, #1
 8007688:	f004 fcda 	bl	800c040 <MPU_Write_Len>
 800768c:	2800      	cmp	r0, #0
 800768e:	d1c5      	bne.n	800761c <mpu_reset_fifo+0x8>
        delay_ms(50);
 8007690:	2032      	movs	r0, #50	@ 0x32
 8007692:	f003 f94f 	bl	800a934 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8007696:	23c0      	movs	r3, #192	@ 0xc0
 8007698:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800769c:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800769e:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80076a2:	07db      	lsls	r3, r3, #31
            data |= BIT_AUX_IF_EN;
 80076a4:	bf44      	itt	mi
 80076a6:	23e0      	movmi	r3, #224	@ 0xe0
 80076a8:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80076ac:	7909      	ldrb	r1, [r1, #4]
 80076ae:	7800      	ldrb	r0, [r0, #0]
 80076b0:	f10d 0307 	add.w	r3, sp, #7
 80076b4:	2201      	movs	r2, #1
 80076b6:	f004 fcc3 	bl	800c040 <MPU_Write_Len>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d1ae      	bne.n	800761c <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 80076be:	7c63      	ldrb	r3, [r4, #17]
 80076c0:	3b00      	subs	r3, #0
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80076c2:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.int_enable)
 80076c6:	bf18      	it	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80076d0:	7c49      	ldrb	r1, [r1, #17]
 80076d2:	7800      	ldrb	r0, [r0, #0]
 80076d4:	f10d 0307 	add.w	r3, sp, #7
 80076d8:	2201      	movs	r2, #1
 80076da:	f004 fcb1 	bl	800c040 <MPU_Write_Len>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d19c      	bne.n	800761c <mpu_reset_fifo+0x8>
        data = 0;
 80076e2:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80076e6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80076ea:	f10d 0307 	add.w	r3, sp, #7
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80076ee:	7949      	ldrb	r1, [r1, #5]
 80076f0:	7800      	ldrb	r0, [r0, #0]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f004 fca4 	bl	800c040 <MPU_Write_Len>
 80076f8:	3800      	subs	r0, #0
 80076fa:	bf18      	it	ne
 80076fc:	2001      	movne	r0, #1
 80076fe:	4240      	negs	r0, r0
 8007700:	e78e      	b.n	8007620 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8007702:	2304      	movs	r3, #4
 8007704:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007708:	7800      	ldrb	r0, [r0, #0]
 800770a:	f10d 0307 	add.w	r3, sp, #7
 800770e:	2201      	movs	r2, #1
 8007710:	f004 fc96 	bl	800c040 <MPU_Write_Len>
 8007714:	2800      	cmp	r0, #0
 8007716:	d181      	bne.n	800761c <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8007718:	7ca3      	ldrb	r3, [r4, #18]
 800771a:	bb63      	cbnz	r3, 8007776 <mpu_reset_fifo+0x162>
 800771c:	7aa3      	ldrb	r3, [r4, #10]
            data = BIT_FIFO_EN;
 800771e:	f013 0f01 	tst.w	r3, #1
 8007722:	bf14      	ite	ne
 8007724:	2360      	movne	r3, #96	@ 0x60
 8007726:	2340      	moveq	r3, #64	@ 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007728:	e9d4 1000 	ldrd	r1, r0, [r4]
 800772c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007730:	7909      	ldrb	r1, [r1, #4]
 8007732:	7800      	ldrb	r0, [r0, #0]
 8007734:	f10d 0307 	add.w	r3, sp, #7
 8007738:	2201      	movs	r2, #1
 800773a:	f004 fc81 	bl	800c040 <MPU_Write_Len>
 800773e:	2800      	cmp	r0, #0
 8007740:	f47f af6c 	bne.w	800761c <mpu_reset_fifo+0x8>
        delay_ms(50);
 8007744:	2032      	movs	r0, #50	@ 0x32
 8007746:	f003 f8f5 	bl	800a934 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800774a:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800774c:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.int_enable)
 8007750:	3b00      	subs	r3, #0
 8007752:	bf18      	it	ne
 8007754:	2301      	movne	r3, #1
 8007756:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800775a:	7c49      	ldrb	r1, [r1, #17]
 800775c:	7800      	ldrb	r0, [r0, #0]
 800775e:	f10d 0307 	add.w	r3, sp, #7
 8007762:	2201      	movs	r2, #1
 8007764:	f004 fc6c 	bl	800c040 <MPU_Write_Len>
 8007768:	2800      	cmp	r0, #0
 800776a:	f47f af57 	bne.w	800761c <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800776e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007772:	4b03      	ldr	r3, [pc, #12]	@ (8007780 <mpu_reset_fifo+0x16c>)
 8007774:	e7bb      	b.n	80076ee <mpu_reset_fifo+0xda>
            data = BIT_FIFO_EN;
 8007776:	2340      	movs	r3, #64	@ 0x40
 8007778:	e7d6      	b.n	8007728 <mpu_reset_fifo+0x114>
 800777a:	bf00      	nop
 800777c:	20000014 	.word	0x20000014
 8007780:	20000024 	.word	0x20000024

08007784 <mpu_get_gyro_fsr>:
    switch (st.chip_cfg.gyro_fsr) {
 8007784:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <mpu_get_gyro_fsr+0x30>)
 8007786:	7a1b      	ldrb	r3, [r3, #8]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d80e      	bhi.n	80077aa <mpu_get_gyro_fsr+0x26>
 800778c:	e8df f003 	tbb	[pc, r3]
 8007790:	0a07020f 	.word	0x0a07020f
 8007794:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
        fsr[0] = 250;
 8007798:	8003      	strh	r3, [r0, #0]
}
 800779a:	2000      	movs	r0, #0
 800779c:	4770      	bx	lr
        break;
 800779e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077a2:	e7f9      	b.n	8007798 <mpu_get_gyro_fsr+0x14>
        break;
 80077a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80077a8:	e7f6      	b.n	8007798 <mpu_get_gyro_fsr+0x14>
        break;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e7f4      	b.n	8007798 <mpu_get_gyro_fsr+0x14>
    switch (st.chip_cfg.gyro_fsr) {
 80077ae:	23fa      	movs	r3, #250	@ 0xfa
 80077b0:	e7f2      	b.n	8007798 <mpu_get_gyro_fsr+0x14>
 80077b2:	bf00      	nop
 80077b4:	20000014 	.word	0x20000014

080077b8 <mpu_set_gyro_fsr>:
{
 80077b8:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 80077ba:	4c18      	ldr	r4, [pc, #96]	@ (800781c <mpu_set_gyro_fsr+0x64>)
 80077bc:	7aa3      	ldrb	r3, [r4, #10]
 80077be:	b143      	cbz	r3, 80077d2 <mpu_set_gyro_fsr+0x1a>
    switch (fsr) {
 80077c0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80077c4:	d00e      	beq.n	80077e4 <mpu_set_gyro_fsr+0x2c>
 80077c6:	d808      	bhi.n	80077da <mpu_set_gyro_fsr+0x22>
 80077c8:	28fa      	cmp	r0, #250	@ 0xfa
 80077ca:	d023      	beq.n	8007814 <mpu_set_gyro_fsr+0x5c>
 80077cc:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80077d0:	d022      	beq.n	8007818 <mpu_set_gyro_fsr+0x60>
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077d6:	b002      	add	sp, #8
 80077d8:	bd10      	pop	{r4, pc}
    switch (fsr) {
 80077da:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80077de:	d1f8      	bne.n	80077d2 <mpu_set_gyro_fsr+0x1a>
 80077e0:	2318      	movs	r3, #24
 80077e2:	e000      	b.n	80077e6 <mpu_set_gyro_fsr+0x2e>
 80077e4:	2310      	movs	r3, #16
    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80077e6:	7a22      	ldrb	r2, [r4, #8]
        data = INV_FSR_250DPS << 3;
 80077e8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80077ec:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
 80077f0:	d00e      	beq.n	8007810 <mpu_set_gyro_fsr+0x58>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80077f2:	e9d4 1000 	ldrd	r1, r0, [r4]
 80077f6:	f10d 0307 	add.w	r3, sp, #7
 80077fa:	7989      	ldrb	r1, [r1, #6]
 80077fc:	7800      	ldrb	r0, [r0, #0]
 80077fe:	2201      	movs	r2, #1
 8007800:	f004 fc1e 	bl	800c040 <MPU_Write_Len>
 8007804:	2800      	cmp	r0, #0
 8007806:	d1e4      	bne.n	80077d2 <mpu_set_gyro_fsr+0x1a>
    st.chip_cfg.gyro_fsr = data >> 3;
 8007808:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800780c:	08db      	lsrs	r3, r3, #3
 800780e:	7223      	strb	r3, [r4, #8]
        return 0;
 8007810:	2000      	movs	r0, #0
 8007812:	e7e0      	b.n	80077d6 <mpu_set_gyro_fsr+0x1e>
    switch (fsr) {
 8007814:	2300      	movs	r3, #0
 8007816:	e7e6      	b.n	80077e6 <mpu_set_gyro_fsr+0x2e>
 8007818:	2308      	movs	r3, #8
 800781a:	e7e4      	b.n	80077e6 <mpu_set_gyro_fsr+0x2e>
 800781c:	20000014 	.word	0x20000014

08007820 <mpu_get_accel_fsr>:
    switch (st.chip_cfg.accel_fsr) {
 8007820:	4a0c      	ldr	r2, [pc, #48]	@ (8007854 <mpu_get_accel_fsr+0x34>)
 8007822:	7a53      	ldrb	r3, [r2, #9]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d812      	bhi.n	800784e <mpu_get_accel_fsr+0x2e>
 8007828:	e8df f003 	tbb	[pc, r3]
 800782c:	0a08020c 	.word	0x0a08020c
 8007830:	2304      	movs	r3, #4
        fsr[0] = 2;
 8007832:	7003      	strb	r3, [r0, #0]
    if (st.chip_cfg.accel_half)
 8007834:	7cd2      	ldrb	r2, [r2, #19]
 8007836:	b93a      	cbnz	r2, 8007848 <mpu_get_accel_fsr+0x28>
    return 0;
 8007838:	2000      	movs	r0, #0
 800783a:	4770      	bx	lr
        break;
 800783c:	2308      	movs	r3, #8
 800783e:	e7f8      	b.n	8007832 <mpu_get_accel_fsr+0x12>
        break;
 8007840:	2310      	movs	r3, #16
 8007842:	e7f6      	b.n	8007832 <mpu_get_accel_fsr+0x12>
    switch (st.chip_cfg.accel_fsr) {
 8007844:	2302      	movs	r3, #2
 8007846:	e7f4      	b.n	8007832 <mpu_get_accel_fsr+0x12>
        fsr[0] <<= 1;
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	7003      	strb	r3, [r0, #0]
 800784c:	e7f4      	b.n	8007838 <mpu_get_accel_fsr+0x18>
    switch (st.chip_cfg.accel_fsr) {
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007852:	4770      	bx	lr
 8007854:	20000014 	.word	0x20000014

08007858 <mpu_set_accel_fsr>:
{
 8007858:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 800785a:	4c17      	ldr	r4, [pc, #92]	@ (80078b8 <mpu_set_accel_fsr+0x60>)
 800785c:	7aa3      	ldrb	r3, [r4, #10]
 800785e:	b133      	cbz	r3, 800786e <mpu_set_accel_fsr+0x16>
    switch (fsr) {
 8007860:	2808      	cmp	r0, #8
 8007862:	d00c      	beq.n	800787e <mpu_set_accel_fsr+0x26>
 8007864:	d807      	bhi.n	8007876 <mpu_set_accel_fsr+0x1e>
 8007866:	2802      	cmp	r0, #2
 8007868:	d021      	beq.n	80078ae <mpu_set_accel_fsr+0x56>
 800786a:	2804      	cmp	r0, #4
 800786c:	d021      	beq.n	80078b2 <mpu_set_accel_fsr+0x5a>
 800786e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007872:	b002      	add	sp, #8
 8007874:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8007876:	2810      	cmp	r0, #16
 8007878:	d1f9      	bne.n	800786e <mpu_set_accel_fsr+0x16>
 800787a:	2318      	movs	r3, #24
 800787c:	e000      	b.n	8007880 <mpu_set_accel_fsr+0x28>
 800787e:	2310      	movs	r3, #16
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8007880:	7a62      	ldrb	r2, [r4, #9]
        data = INV_FSR_2G << 3;
 8007882:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8007886:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
 800788a:	d00e      	beq.n	80078aa <mpu_set_accel_fsr+0x52>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800788c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007890:	f10d 0307 	add.w	r3, sp, #7
 8007894:	79c9      	ldrb	r1, [r1, #7]
 8007896:	7800      	ldrb	r0, [r0, #0]
 8007898:	2201      	movs	r2, #1
 800789a:	f004 fbd1 	bl	800c040 <MPU_Write_Len>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1e5      	bne.n	800786e <mpu_set_accel_fsr+0x16>
    st.chip_cfg.accel_fsr = data >> 3;
 80078a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	7263      	strb	r3, [r4, #9]
        return 0;
 80078aa:	2000      	movs	r0, #0
 80078ac:	e7e1      	b.n	8007872 <mpu_set_accel_fsr+0x1a>
    switch (fsr) {
 80078ae:	2300      	movs	r3, #0
 80078b0:	e7e6      	b.n	8007880 <mpu_set_accel_fsr+0x28>
 80078b2:	2308      	movs	r3, #8
 80078b4:	e7e4      	b.n	8007880 <mpu_set_accel_fsr+0x28>
 80078b6:	bf00      	nop
 80078b8:	20000014 	.word	0x20000014

080078bc <mpu_get_lpf>:
    switch (st.chip_cfg.lpf) {
 80078bc:	4b0c      	ldr	r3, [pc, #48]	@ (80078f0 <mpu_get_lpf+0x34>)
 80078be:	7adb      	ldrb	r3, [r3, #11]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d810      	bhi.n	80078e8 <mpu_get_lpf+0x2c>
 80078c6:	e8df f003 	tbb	[pc, r3]
 80078ca:	0311      	.short	0x0311
 80078cc:	0d0b0907 	.word	0x0d0b0907
 80078d0:	2362      	movs	r3, #98	@ 0x62
        lpf[0] = 188;
 80078d2:	8003      	strh	r3, [r0, #0]
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	4770      	bx	lr
        break;
 80078d8:	232a      	movs	r3, #42	@ 0x2a
 80078da:	e7fa      	b.n	80078d2 <mpu_get_lpf+0x16>
        break;
 80078dc:	2314      	movs	r3, #20
 80078de:	e7f8      	b.n	80078d2 <mpu_get_lpf+0x16>
        break;
 80078e0:	230a      	movs	r3, #10
 80078e2:	e7f6      	b.n	80078d2 <mpu_get_lpf+0x16>
        break;
 80078e4:	2305      	movs	r3, #5
 80078e6:	e7f4      	b.n	80078d2 <mpu_get_lpf+0x16>
        break;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e7f2      	b.n	80078d2 <mpu_get_lpf+0x16>
    switch (st.chip_cfg.lpf) {
 80078ec:	23bc      	movs	r3, #188	@ 0xbc
 80078ee:	e7f0      	b.n	80078d2 <mpu_get_lpf+0x16>
 80078f0:	20000014 	.word	0x20000014

080078f4 <mpu_set_lpf>:
{
 80078f4:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 80078f6:	4c18      	ldr	r4, [pc, #96]	@ (8007958 <mpu_set_lpf+0x64>)
 80078f8:	7aa3      	ldrb	r3, [r4, #10]
 80078fa:	b91b      	cbnz	r3, 8007904 <mpu_set_lpf+0x10>
        return -1;
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007900:	b002      	add	sp, #8
 8007902:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8007904:	28bb      	cmp	r0, #187	@ 0xbb
 8007906:	d810      	bhi.n	800792a <mpu_set_lpf+0x36>
    else if (lpf >= 98)
 8007908:	2861      	cmp	r0, #97	@ 0x61
 800790a:	d810      	bhi.n	800792e <mpu_set_lpf+0x3a>
    else if (lpf >= 42)
 800790c:	2829      	cmp	r0, #41	@ 0x29
 800790e:	d810      	bhi.n	8007932 <mpu_set_lpf+0x3e>
    else if (lpf >= 20)
 8007910:	2813      	cmp	r0, #19
 8007912:	d810      	bhi.n	8007936 <mpu_set_lpf+0x42>
    else if (lpf >= 10)
 8007914:	2809      	cmp	r0, #9
 8007916:	bf8c      	ite	hi
 8007918:	2305      	movhi	r3, #5
 800791a:	2306      	movls	r3, #6
    if (st.chip_cfg.lpf == data)
 800791c:	7ae2      	ldrb	r2, [r4, #11]
        data = INV_FILTER_188HZ;
 800791e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8007922:	429a      	cmp	r2, r3
 8007924:	d109      	bne.n	800793a <mpu_set_lpf+0x46>
        return 0;
 8007926:	2000      	movs	r0, #0
 8007928:	e7ea      	b.n	8007900 <mpu_set_lpf+0xc>
 800792a:	2301      	movs	r3, #1
 800792c:	e7f6      	b.n	800791c <mpu_set_lpf+0x28>
 800792e:	2302      	movs	r3, #2
 8007930:	e7f4      	b.n	800791c <mpu_set_lpf+0x28>
 8007932:	2303      	movs	r3, #3
 8007934:	e7f2      	b.n	800791c <mpu_set_lpf+0x28>
 8007936:	2304      	movs	r3, #4
 8007938:	e7f0      	b.n	800791c <mpu_set_lpf+0x28>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800793a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800793e:	f10d 0307 	add.w	r3, sp, #7
 8007942:	7889      	ldrb	r1, [r1, #2]
 8007944:	7800      	ldrb	r0, [r0, #0]
 8007946:	2201      	movs	r2, #1
 8007948:	f004 fb7a 	bl	800c040 <MPU_Write_Len>
 800794c:	2800      	cmp	r0, #0
 800794e:	d1d5      	bne.n	80078fc <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8007950:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007954:	72e3      	strb	r3, [r4, #11]
    return 0;
 8007956:	e7e6      	b.n	8007926 <mpu_set_lpf+0x32>
 8007958:	20000014 	.word	0x20000014

0800795c <mpu_get_sample_rate>:
    if (st.chip_cfg.dmp_on)
 800795c:	4a05      	ldr	r2, [pc, #20]	@ (8007974 <mpu_get_sample_rate+0x18>)
{
 800795e:	4603      	mov	r3, r0
    if (st.chip_cfg.dmp_on)
 8007960:	f892 0024 	ldrb.w	r0, [r2, #36]	@ 0x24
 8007964:	b910      	cbnz	r0, 800796c <mpu_get_sample_rate+0x10>
        rate[0] = st.chip_cfg.sample_rate;
 8007966:	89d2      	ldrh	r2, [r2, #14]
 8007968:	801a      	strh	r2, [r3, #0]
    return 0;
 800796a:	4770      	bx	lr
        return -1;
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000014 	.word	0x20000014

08007978 <mpu_set_compass_sample_rate>:
{
 8007978:	b513      	push	{r0, r1, r4, lr}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800797a:	b918      	cbnz	r0, 8007984 <mpu_set_compass_sample_rate+0xc>
        return -1;
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007980:	b002      	add	sp, #8
 8007982:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8007984:	4c0f      	ldr	r4, [pc, #60]	@ (80079c4 <mpu_set_compass_sample_rate+0x4c>)
 8007986:	89e3      	ldrh	r3, [r4, #14]
 8007988:	4283      	cmp	r3, r0
 800798a:	d3f7      	bcc.n	800797c <mpu_set_compass_sample_rate+0x4>
 800798c:	2864      	cmp	r0, #100	@ 0x64
 800798e:	d8f5      	bhi.n	800797c <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8007990:	fbb3 f3f0 	udiv	r3, r3, r0
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8007994:	e9d4 1000 	ldrd	r1, r0, [r4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8007998:	3b01      	subs	r3, #1
 800799a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800799e:	f891 1024 	ldrb.w	r1, [r1, #36]	@ 0x24
 80079a2:	7800      	ldrb	r0, [r0, #0]
 80079a4:	f10d 0307 	add.w	r3, sp, #7
 80079a8:	2201      	movs	r2, #1
 80079aa:	f004 fb49 	bl	800c040 <MPU_Write_Len>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d1e4      	bne.n	800797c <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80079b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80079b6:	89e3      	ldrh	r3, [r4, #14]
 80079b8:	3201      	adds	r2, #1
 80079ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80079be:	8523      	strh	r3, [r4, #40]	@ 0x28
    return 0;
 80079c0:	e7de      	b.n	8007980 <mpu_set_compass_sample_rate+0x8>
 80079c2:	bf00      	nop
 80079c4:	20000014 	.word	0x20000014

080079c8 <mpu_get_gyro_sens>:
    switch (st.chip_cfg.gyro_fsr) {
 80079c8:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <mpu_get_gyro_sens+0x2c>)
 80079ca:	7a1b      	ldrb	r3, [r3, #8]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d80d      	bhi.n	80079ec <mpu_get_gyro_sens+0x24>
 80079d0:	e8df f003 	tbb	[pc, r3]
 80079d4:	0a080602 	.word	0x0a080602
 80079d8:	4b07      	ldr	r3, [pc, #28]	@ (80079f8 <mpu_get_gyro_sens+0x30>)
        sens[0] = 131.f;
 80079da:	6003      	str	r3, [r0, #0]
    return 0;
 80079dc:	2000      	movs	r0, #0
 80079de:	4770      	bx	lr
    switch (st.chip_cfg.gyro_fsr) {
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <mpu_get_gyro_sens+0x34>)
 80079e2:	e7fa      	b.n	80079da <mpu_get_gyro_sens+0x12>
        break;
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <mpu_get_gyro_sens+0x38>)
 80079e6:	e7f8      	b.n	80079da <mpu_get_gyro_sens+0x12>
        break;
 80079e8:	4b06      	ldr	r3, [pc, #24]	@ (8007a04 <mpu_get_gyro_sens+0x3c>)
 80079ea:	e7f6      	b.n	80079da <mpu_get_gyro_sens+0x12>
    switch (st.chip_cfg.gyro_fsr) {
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000014 	.word	0x20000014
 80079f8:	43030000 	.word	0x43030000
 80079fc:	42830000 	.word	0x42830000
 8007a00:	42033333 	.word	0x42033333
 8007a04:	41833333 	.word	0x41833333

08007a08 <mpu_get_accel_sens>:
    switch (st.chip_cfg.accel_fsr) {
 8007a08:	4a0e      	ldr	r2, [pc, #56]	@ (8007a44 <mpu_get_accel_sens+0x3c>)
 8007a0a:	7a53      	ldrb	r3, [r2, #9]
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d816      	bhi.n	8007a3e <mpu_get_accel_sens+0x36>
 8007a10:	e8df f003 	tbb	[pc, r3]
 8007a14:	0c09020f 	.word	0x0c09020f
 8007a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
        sens[0] = 16384;
 8007a1c:	8003      	strh	r3, [r0, #0]
    if (st.chip_cfg.accel_half)
 8007a1e:	7cd2      	ldrb	r2, [r2, #19]
 8007a20:	b952      	cbnz	r2, 8007a38 <mpu_get_accel_sens+0x30>
    return 0;
 8007a22:	2000      	movs	r0, #0
 8007a24:	4770      	bx	lr
        break;
 8007a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a2a:	e7f7      	b.n	8007a1c <mpu_get_accel_sens+0x14>
        break;
 8007a2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a30:	e7f4      	b.n	8007a1c <mpu_get_accel_sens+0x14>
    switch (st.chip_cfg.accel_fsr) {
 8007a32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007a36:	e7f1      	b.n	8007a1c <mpu_get_accel_sens+0x14>
        sens[0] >>= 1;
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	8003      	strh	r3, [r0, #0]
 8007a3c:	e7f1      	b.n	8007a22 <mpu_get_accel_sens+0x1a>
    switch (st.chip_cfg.accel_fsr) {
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a42:	4770      	bx	lr
 8007a44:	20000014 	.word	0x20000014

08007a48 <mpu_configure_fifo>:
{
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (st.chip_cfg.dmp_on)
 8007a4a:	4e12      	ldr	r6, [pc, #72]	@ (8007a94 <mpu_configure_fifo+0x4c>)
 8007a4c:	f896 3024 	ldrb.w	r3, [r6, #36]	@ 0x24
 8007a50:	b9eb      	cbnz	r3, 8007a8e <mpu_configure_fifo+0x46>
        if (!(st.chip_cfg.sensors))
 8007a52:	7ab4      	ldrb	r4, [r6, #10]
 8007a54:	b1c4      	cbz	r4, 8007a88 <mpu_configure_fifo+0x40>
    sensors &= ~INV_XYZ_COMPASS;
 8007a56:	f000 05fe 	and.w	r5, r0, #254	@ 0xfe
        if (sensors || st.chip_cfg.lp_accel_mode)
 8007a5a:	7d30      	ldrb	r0, [r6, #20]
        prev = st.chip_cfg.fifo_enable;
 8007a5c:	7c37      	ldrb	r7, [r6, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8007a5e:	402c      	ands	r4, r5
        if (sensors || st.chip_cfg.lp_accel_mode)
 8007a60:	4328      	orrs	r0, r5
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8007a62:	7434      	strb	r4, [r6, #16]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8007a64:	d008      	beq.n	8007a78 <mpu_configure_fifo+0x30>
            set_int_enable(1);
 8007a66:	2001      	movs	r0, #1
 8007a68:	f7ff fdb2 	bl	80075d0 <set_int_enable.isra.0>
        if (sensors) {
 8007a6c:	b93d      	cbnz	r5, 8007a7e <mpu_configure_fifo+0x36>
        if (st.chip_cfg.fifo_enable != sensors)
 8007a6e:	1b60      	subs	r0, r4, r5
 8007a70:	bf18      	it	ne
 8007a72:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            set_int_enable(0);
 8007a78:	f7ff fdaa 	bl	80075d0 <set_int_enable.isra.0>
        if (sensors) {
 8007a7c:	e7f7      	b.n	8007a6e <mpu_configure_fifo+0x26>
            if (mpu_reset_fifo()) {
 8007a7e:	f7ff fdc9 	bl	8007614 <mpu_reset_fifo>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0f3      	beq.n	8007a6e <mpu_configure_fifo+0x26>
                st.chip_cfg.fifo_enable = prev;
 8007a86:	7437      	strb	r7, [r6, #16]
            return -1;
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	e7f3      	b.n	8007a76 <mpu_configure_fifo+0x2e>
        return 0;
 8007a8e:	2000      	movs	r0, #0
 8007a90:	e7f1      	b.n	8007a76 <mpu_configure_fifo+0x2e>
 8007a92:	bf00      	nop
 8007a94:	20000014 	.word	0x20000014

08007a98 <mpu_read_fifo_stream>:
{
 8007a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (!st.chip_cfg.dmp_on)
 8007a9c:	4f21      	ldr	r7, [pc, #132]	@ (8007b24 <mpu_read_fifo_stream+0x8c>)
 8007a9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
{
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	4688      	mov	r8, r1
 8007aa6:	4615      	mov	r5, r2
    if (!st.chip_cfg.dmp_on)
 8007aa8:	b18b      	cbz	r3, 8007ace <mpu_read_fifo_stream+0x36>
    if (!st.chip_cfg.sensors)
 8007aaa:	7abb      	ldrb	r3, [r7, #10]
 8007aac:	b17b      	cbz	r3, 8007ace <mpu_read_fifo_stream+0x36>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8007aae:	e9d7 1000 	ldrd	r1, r0, [r7]
 8007ab2:	ab01      	add	r3, sp, #4
 8007ab4:	7b09      	ldrb	r1, [r1, #12]
 8007ab6:	7800      	ldrb	r0, [r0, #0]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f004 fac9 	bl	800c050 <MPU_Read_Len>
 8007abe:	b930      	cbnz	r0, 8007ace <mpu_read_fifo_stream+0x36>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8007ac0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8007ac4:	ba64      	rev16	r4, r4
 8007ac6:	b2a4      	uxth	r4, r4
    if (fifo_count < length) {
 8007ac8:	42a6      	cmp	r6, r4
 8007aca:	d905      	bls.n	8007ad8 <mpu_read_fifo_stream+0x40>
        more[0] = 0;
 8007acc:	7028      	strb	r0, [r5, #0]
        return -1;
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ad2:	b002      	add	sp, #8
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	7818      	ldrb	r0, [r3, #0]
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8007ade:	885b      	ldrh	r3, [r3, #2]
 8007ae0:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8007ae4:	d90f      	bls.n	8007b06 <mpu_read_fifo_stream+0x6e>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8007ae6:	7cc9      	ldrb	r1, [r1, #19]
 8007ae8:	ab01      	add	r3, sp, #4
 8007aea:	2201      	movs	r2, #1
 8007aec:	f004 fab0 	bl	800c050 <MPU_Read_Len>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1ec      	bne.n	8007ace <mpu_read_fifo_stream+0x36>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8007af4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007af8:	06db      	lsls	r3, r3, #27
 8007afa:	d504      	bpl.n	8007b06 <mpu_read_fifo_stream+0x6e>
            mpu_reset_fifo();
 8007afc:	f7ff fd8a 	bl	8007614 <mpu_reset_fifo>
            return -2;
 8007b00:	f06f 0001 	mvn.w	r0, #1
 8007b04:	e7e5      	b.n	8007ad2 <mpu_read_fifo_stream+0x3a>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8007b06:	e9d7 1000 	ldrd	r1, r0, [r7]
 8007b0a:	4643      	mov	r3, r8
 8007b0c:	7b49      	ldrb	r1, [r1, #13]
 8007b0e:	7800      	ldrb	r0, [r0, #0]
 8007b10:	b2f2      	uxtb	r2, r6
 8007b12:	f004 fa9d 	bl	800c050 <MPU_Read_Len>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d1d9      	bne.n	8007ace <mpu_read_fifo_stream+0x36>
    more[0] = fifo_count / length - 1;
 8007b1a:	fbb4 f4f6 	udiv	r4, r4, r6
 8007b1e:	3c01      	subs	r4, #1
 8007b20:	702c      	strb	r4, [r5, #0]
    return 0;
 8007b22:	e7d6      	b.n	8007ad2 <mpu_read_fifo_stream+0x3a>
 8007b24:	20000014 	.word	0x20000014

08007b28 <mpu_set_bypass>:
{
 8007b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.bypass_mode == bypass_on)
 8007b2a:	4c39      	ldr	r4, [pc, #228]	@ (8007c10 <mpu_set_bypass+0xe8>)
 8007b2c:	7ca3      	ldrb	r3, [r4, #18]
 8007b2e:	4283      	cmp	r3, r0
{
 8007b30:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8007b32:	d06a      	beq.n	8007c0a <mpu_set_bypass+0xe2>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007b34:	6863      	ldr	r3, [r4, #4]
 8007b36:	7818      	ldrb	r0, [r3, #0]
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	7919      	ldrb	r1, [r3, #4]
 8007b3e:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8007b42:	b36d      	cbz	r5, 8007ba0 <mpu_set_bypass+0x78>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007b44:	f004 fa84 	bl	800c050 <MPU_Read_Len>
 8007b48:	b118      	cbz	r0, 8007b52 <mpu_set_bypass+0x2a>
            return -1;
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b4e:	b003      	add	sp, #12
 8007b50:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8007b52:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007b56:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 8007b5a:	f023 0320 	bic.w	r3, r3, #32
 8007b5e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007b62:	7909      	ldrb	r1, [r1, #4]
 8007b64:	7800      	ldrb	r0, [r0, #0]
 8007b66:	f10d 0307 	add.w	r3, sp, #7
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f004 fa68 	bl	800c040 <MPU_Write_Len>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1ea      	bne.n	8007b4a <mpu_set_bypass+0x22>
        delay_ms(3);
 8007b74:	2003      	movs	r0, #3
 8007b76:	f002 fedd 	bl	800a934 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8007b80:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8007b84:	b113      	cbz	r3, 8007b8c <mpu_set_bypass+0x64>
            tmp |= BIT_ACTL;
 8007b86:	2382      	movs	r3, #130	@ 0x82
 8007b88:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8007b8c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8007b90:	b37b      	cbz	r3, 8007bf2 <mpu_set_bypass+0xca>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007b96:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8007b9a:	f88d 3007 	strb.w	r3, [sp, #7]
 8007b9e:	e028      	b.n	8007bf2 <mpu_set_bypass+0xca>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007ba0:	f004 fa56 	bl	800c050 <MPU_Read_Len>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1d0      	bne.n	8007b4a <mpu_set_bypass+0x22>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007ba8:	7aa2      	ldrb	r2, [r4, #10]
        tmp &= ~BIT_AUX_IF_EN;
 8007baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007bae:	07d2      	lsls	r2, r2, #31
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007bb0:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp |= BIT_AUX_IF_EN;
 8007bb4:	bf4c      	ite	mi
 8007bb6:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8007bba:	f003 03df 	andpl.w	r3, r3, #223	@ 0xdf
 8007bbe:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007bc2:	7909      	ldrb	r1, [r1, #4]
 8007bc4:	7800      	ldrb	r0, [r0, #0]
 8007bc6:	f10d 0307 	add.w	r3, sp, #7
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f004 fa38 	bl	800c040 <MPU_Write_Len>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d1ba      	bne.n	8007b4a <mpu_set_bypass+0x22>
        delay_ms(3);
 8007bd4:	2003      	movs	r0, #3
 8007bd6:	f002 fead 	bl	800a934 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8007bda:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
        if (st.chip_cfg.latched_int)
 8007bde:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
        if (st.chip_cfg.active_low_int)
 8007be2:	3b00      	subs	r3, #0
 8007be4:	bf18      	it	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	01db      	lsls	r3, r3, #7
 8007bea:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8007bee:	2a00      	cmp	r2, #0
 8007bf0:	d1d1      	bne.n	8007b96 <mpu_set_bypass+0x6e>
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8007bf2:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007bf6:	f10d 0307 	add.w	r3, sp, #7
 8007bfa:	7dc9      	ldrb	r1, [r1, #23]
 8007bfc:	7800      	ldrb	r0, [r0, #0]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f004 fa1e 	bl	800c040 <MPU_Write_Len>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d1a0      	bne.n	8007b4a <mpu_set_bypass+0x22>
    st.chip_cfg.bypass_mode = bypass_on;
 8007c08:	74a5      	strb	r5, [r4, #18]
        return 0;
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e79f      	b.n	8007b4e <mpu_set_bypass+0x26>
 8007c0e:	bf00      	nop
 8007c10:	20000014 	.word	0x20000014

08007c14 <mpu_set_int_latched>:
{
 8007c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.latched_int == enable)
 8007c16:	4c16      	ldr	r4, [pc, #88]	@ (8007c70 <mpu_set_int_latched+0x5c>)
 8007c18:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8007c1c:	4283      	cmp	r3, r0
{
 8007c1e:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8007c20:	d020      	beq.n	8007c64 <mpu_set_int_latched+0x50>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007c22:	2800      	cmp	r0, #0
    if (st.chip_cfg.bypass_mode)
 8007c24:	7ca2      	ldrb	r2, [r4, #18]
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007c26:	bf0c      	ite	eq
 8007c28:	2300      	moveq	r3, #0
 8007c2a:	2330      	movne	r3, #48	@ 0x30
 8007c2c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 8007c30:	b11a      	cbz	r2, 8007c3a <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8007c32:	f043 0302 	orr.w	r3, r3, #2
 8007c36:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8007c3a:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8007c3e:	b12b      	cbz	r3, 8007c4c <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8007c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c48:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8007c4c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007c50:	f10d 0307 	add.w	r3, sp, #7
 8007c54:	7dc9      	ldrb	r1, [r1, #23]
 8007c56:	7800      	ldrb	r0, [r0, #0]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f004 f9f1 	bl	800c040 <MPU_Write_Len>
 8007c5e:	b920      	cbnz	r0, 8007c6a <mpu_set_int_latched+0x56>
    st.chip_cfg.latched_int = enable;
 8007c60:	f884 5023 	strb.w	r5, [r4, #35]	@ 0x23
        return 0;
 8007c64:	2000      	movs	r0, #0
}
 8007c66:	b003      	add	sp, #12
 8007c68:	bd30      	pop	{r4, r5, pc}
        return -1;
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	e7fa      	b.n	8007c66 <mpu_set_int_latched+0x52>
 8007c70:	20000014 	.word	0x20000014

08007c74 <mpu_lp_accel_mode>:
    if (rate > 40)
 8007c74:	2828      	cmp	r0, #40	@ 0x28
{
 8007c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c78:	4605      	mov	r5, r0
    if (rate > 40)
 8007c7a:	d903      	bls.n	8007c84 <mpu_lp_accel_mode+0x10>
        return -1;
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c80:	b003      	add	sp, #12
 8007c82:	bd30      	pop	{r4, r5, pc}
    if (!rate) {
 8007c84:	4c26      	ldr	r4, [pc, #152]	@ (8007d20 <mpu_lp_accel_mode+0xac>)
 8007c86:	b990      	cbnz	r0, 8007cae <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
 8007c88:	f7ff ffc4 	bl	8007c14 <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007c8c:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 8007c90:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007c94:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007c98:	7d49      	ldrb	r1, [r1, #21]
 8007c9a:	7800      	ldrb	r0, [r0, #0]
 8007c9c:	ab01      	add	r3, sp, #4
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f004 f9ce 	bl	800c040 <MPU_Write_Len>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d1e9      	bne.n	8007c7c <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8007ca8:	7520      	strb	r0, [r4, #20]
        return 0;
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7e8      	b.n	8007c80 <mpu_lp_accel_mode+0xc>
    mpu_set_int_latched(1);
 8007cae:	2001      	movs	r0, #1
 8007cb0:	f7ff ffb0 	bl	8007c14 <mpu_set_int_latched>
    if (rate == 1)
 8007cb4:	2d01      	cmp	r5, #1
 8007cb6:	d02a      	beq.n	8007d0e <mpu_lp_accel_mode+0x9a>
    else if (rate == 2)
 8007cb8:	2d02      	cmp	r5, #2
 8007cba:	d02a      	beq.n	8007d12 <mpu_lp_accel_mode+0x9e>
    else if (rate <= 5)
 8007cbc:	2d05      	cmp	r5, #5
 8007cbe:	d92a      	bls.n	8007d16 <mpu_lp_accel_mode+0xa2>
    else if (rate <= 10)
 8007cc0:	2d0a      	cmp	r5, #10
 8007cc2:	d92a      	bls.n	8007d1a <mpu_lp_accel_mode+0xa6>
    else if (rate <= 20)
 8007cc4:	2d15      	cmp	r5, #21
 8007cc6:	bf34      	ite	cc
 8007cc8:	2306      	movcc	r3, #6
 8007cca:	2307      	movcs	r3, #7
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8007ccc:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_1_25HZ;
 8007cd0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8007cd4:	7a49      	ldrb	r1, [r1, #9]
 8007cd6:	7800      	ldrb	r0, [r0, #0]
 8007cd8:	ab01      	add	r3, sp, #4
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f004 f9b0 	bl	800c040 <MPU_Write_Len>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d1cb      	bne.n	8007c7c <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8007ce4:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8007cee:	7d49      	ldrb	r1, [r1, #21]
 8007cf0:	7800      	ldrb	r0, [r0, #0]
 8007cf2:	ab01      	add	r3, sp, #4
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f004 f9a3 	bl	800c040 <MPU_Write_Len>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d1be      	bne.n	8007c7c <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8007cfe:	2208      	movs	r2, #8
    st.chip_cfg.lp_accel_mode = 1;
 8007d00:	2301      	movs	r3, #1
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8007d02:	72a2      	strb	r2, [r4, #10]
    st.chip_cfg.clk_src = 0;
 8007d04:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8007d06:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 8007d08:	f7ff fe9e 	bl	8007a48 <mpu_configure_fifo>
    return 0;
 8007d0c:	e7cd      	b.n	8007caa <mpu_lp_accel_mode+0x36>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e7dc      	b.n	8007ccc <mpu_lp_accel_mode+0x58>
 8007d12:	2303      	movs	r3, #3
 8007d14:	e7da      	b.n	8007ccc <mpu_lp_accel_mode+0x58>
 8007d16:	2304      	movs	r3, #4
 8007d18:	e7d8      	b.n	8007ccc <mpu_lp_accel_mode+0x58>
 8007d1a:	2305      	movs	r3, #5
 8007d1c:	e7d6      	b.n	8007ccc <mpu_lp_accel_mode+0x58>
 8007d1e:	bf00      	nop
 8007d20:	20000014 	.word	0x20000014

08007d24 <mpu_set_sample_rate>:
{
 8007d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8007d26:	4d21      	ldr	r5, [pc, #132]	@ (8007dac <mpu_set_sample_rate+0x88>)
 8007d28:	7aab      	ldrb	r3, [r5, #10]
{
 8007d2a:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 8007d2c:	b91b      	cbnz	r3, 8007d36 <mpu_set_sample_rate+0x12>
        return -1;
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d32:	b002      	add	sp, #8
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 8007d36:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f7      	bne.n	8007d2e <mpu_set_sample_rate+0xa>
        if (st.chip_cfg.lp_accel_mode) {
 8007d3e:	7d2a      	ldrb	r2, [r5, #20]
 8007d40:	b14a      	cbz	r2, 8007d56 <mpu_set_sample_rate+0x32>
            if (rate && (rate <= 40)) {
 8007d42:	1e42      	subs	r2, r0, #1
 8007d44:	2a27      	cmp	r2, #39	@ 0x27
 8007d46:	d803      	bhi.n	8007d50 <mpu_set_sample_rate+0x2c>
                mpu_lp_accel_mode(rate);
 8007d48:	f7ff ff94 	bl	8007c74 <mpu_lp_accel_mode>
                return 0;
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7f0      	b.n	8007d32 <mpu_set_sample_rate+0xe>
            mpu_lp_accel_mode(0);
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff ff8f 	bl	8007c74 <mpu_lp_accel_mode>
        data = 1000 / rate - 1;
 8007d56:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8007d5a:	bf28      	it	cs
 8007d5c:	f44f 747a 	movcs.w	r4, #1000	@ 0x3e8
 8007d60:	2c04      	cmp	r4, #4
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8007d62:	e9d5 1000 	ldrd	r1, r0, [r5]
        data = 1000 / rate - 1;
 8007d66:	bf38      	it	cc
 8007d68:	2404      	movcc	r4, #4
 8007d6a:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 8007d6e:	fbb6 f4f4 	udiv	r4, r6, r4
 8007d72:	3c01      	subs	r4, #1
 8007d74:	f88d 4007 	strb.w	r4, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8007d78:	7849      	ldrb	r1, [r1, #1]
 8007d7a:	7800      	ldrb	r0, [r0, #0]
 8007d7c:	f10d 0307 	add.w	r3, sp, #7
 8007d80:	2201      	movs	r2, #1
 8007d82:	f004 f95d 	bl	800c040 <MPU_Write_Len>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d1d1      	bne.n	8007d2e <mpu_set_sample_rate+0xa>
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8007d8a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8007d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8007d90:	2864      	cmp	r0, #100	@ 0x64
 8007d92:	bf28      	it	cs
 8007d94:	2064      	movcs	r0, #100	@ 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8007d96:	3301      	adds	r3, #1
 8007d98:	fbb6 f6f3 	udiv	r6, r6, r3
 8007d9c:	81ee      	strh	r6, [r5, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8007d9e:	f7ff fdeb 	bl	8007978 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8007da2:	89e8      	ldrh	r0, [r5, #14]
 8007da4:	0840      	lsrs	r0, r0, #1
 8007da6:	f7ff fda5 	bl	80078f4 <mpu_set_lpf>
        return 0;
 8007daa:	e7cf      	b.n	8007d4c <mpu_set_sample_rate+0x28>
 8007dac:	20000014 	.word	0x20000014

08007db0 <mpu_set_sensors>:
{
 8007db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (sensors & INV_XYZ_GYRO)
 8007db2:	f010 0f70 	tst.w	r0, #112	@ 0x70
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8007db6:	4c48      	ldr	r4, [pc, #288]	@ (8007ed8 <mpu_set_sensors+0x128>)
    else if (sensors)
 8007db8:	bf04      	itt	eq
 8007dba:	fab0 f380 	clzeq	r3, r0
 8007dbe:	095b      	lsreq	r3, r3, #5
{
 8007dc0:	4605      	mov	r5, r0
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8007dc2:	e9d4 1000 	ldrd	r1, r0, [r4]
    else if (sensors)
 8007dc6:	bf0c      	ite	eq
 8007dc8:	019b      	lsleq	r3, r3, #6
 8007dca:	2301      	movne	r3, #1
        data = INV_CLK_PLL;
 8007dcc:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8007dd0:	7d49      	ldrb	r1, [r1, #21]
 8007dd2:	7800      	ldrb	r0, [r0, #0]
 8007dd4:	f10d 0306 	add.w	r3, sp, #6
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f004 f931 	bl	800c040 <MPU_Write_Len>
 8007dde:	b128      	cbz	r0, 8007dec <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	72a3      	strb	r3, [r4, #10]
        return -1;
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007de8:	b002      	add	sp, #8
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8007dec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df4:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8007df6:	f085 0340 	eor.w	r3, r5, #64	@ 0x40
 8007dfa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007dfe:	009b      	lsls	r3, r3, #2
    if (!(sensors & INV_Y_GYRO))
 8007e00:	06ae      	lsls	r6, r5, #26
    data = 0;
 8007e02:	f88d 3006 	strb.w	r3, [sp, #6]
        data |= BIT_STBY_YG;
 8007e06:	bf5e      	ittt	pl
 8007e08:	b2db      	uxtbpl	r3, r3
 8007e0a:	f043 0302 	orrpl.w	r3, r3, #2
 8007e0e:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 8007e12:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 8007e14:	bf5e      	ittt	pl
 8007e16:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8007e1a:	f043 0301 	orrpl.w	r3, r3, #1
 8007e1e:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 8007e22:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 8007e24:	bf58      	it	pl
 8007e26:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8007e2a:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 8007e2e:	bf5c      	itt	pl
 8007e30:	f043 0338 	orrpl.w	r3, r3, #56	@ 0x38
 8007e34:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8007e38:	7d89      	ldrb	r1, [r1, #22]
 8007e3a:	7800      	ldrb	r0, [r0, #0]
 8007e3c:	f10d 0306 	add.w	r3, sp, #6
 8007e40:	2201      	movs	r2, #1
 8007e42:	f004 f8fd 	bl	800c040 <MPU_Write_Len>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1ca      	bne.n	8007de0 <mpu_set_sensors+0x30>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8007e4a:	f015 0ff7 	tst.w	r5, #247	@ 0xf7
 8007e4e:	d001      	beq.n	8007e54 <mpu_set_sensors+0xa4>
        mpu_set_int_latched(0);
 8007e50:	f7ff fee0 	bl	8007c14 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8007e54:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007e58:	f10d 0307 	add.w	r3, sp, #7
 8007e5c:	7909      	ldrb	r1, [r1, #4]
 8007e5e:	7800      	ldrb	r0, [r0, #0]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f004 f8f5 	bl	800c050 <MPU_Read_Len>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1bc      	bne.n	8007de4 <mpu_set_sensors+0x34>
    if (sensors & INV_XYZ_COMPASS) {
 8007e6a:	07ea      	lsls	r2, r5, #31
        user_ctrl |= BIT_AUX_IF_EN;
 8007e6c:	bf4c      	ite	mi
 8007e6e:	2211      	movmi	r2, #17
        user_ctrl &= ~BIT_AUX_IF_EN;
 8007e70:	2210      	movpl	r2, #16
        user_ctrl |= BIT_AUX_IF_EN;
 8007e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 8007e76:	f88d 2006 	strb.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 8007e7a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
        user_ctrl |= BIT_AUX_IF_EN;
 8007e7e:	bf4c      	ite	mi
 8007e80:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 8007e84:	f003 03df 	andpl.w	r3, r3, #223	@ 0xdf
    if (st.chip_cfg.dmp_on)
 8007e88:	b312      	cbz	r2, 8007ed0 <mpu_set_sensors+0x120>
        user_ctrl |= BIT_DMP_EN;
 8007e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8007e8e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007e92:	f88d 3007 	strb.w	r3, [sp, #7]
 8007e96:	f891 1026 	ldrb.w	r1, [r1, #38]	@ 0x26
 8007e9a:	7800      	ldrb	r0, [r0, #0]
 8007e9c:	f10d 0306 	add.w	r3, sp, #6
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f004 f8cd 	bl	800c040 <MPU_Write_Len>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d19c      	bne.n	8007de4 <mpu_set_sensors+0x34>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8007eaa:	e9d4 1000 	ldrd	r1, r0, [r4]
 8007eae:	f10d 0307 	add.w	r3, sp, #7
 8007eb2:	7909      	ldrb	r1, [r1, #4]
 8007eb4:	7800      	ldrb	r0, [r0, #0]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f004 f8c2 	bl	800c040 <MPU_Write_Len>
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d190      	bne.n	8007de4 <mpu_set_sensors+0x34>
    st.chip_cfg.lp_accel_mode = 0;
 8007ec2:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 8007ec4:	2032      	movs	r0, #50	@ 0x32
    st.chip_cfg.sensors = sensors;
 8007ec6:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 8007ec8:	f002 fd34 	bl	800a934 <HAL_Delay>
    return 0;
 8007ecc:	4630      	mov	r0, r6
 8007ece:	e78b      	b.n	8007de8 <mpu_set_sensors+0x38>
        user_ctrl &= ~BIT_DMP_EN;
 8007ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ed4:	e7db      	b.n	8007e8e <mpu_set_sensors+0xde>
 8007ed6:	bf00      	nop
 8007ed8:	20000014 	.word	0x20000014

08007edc <mpu_init>:
{
 8007edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007ede:	4ca3      	ldr	r4, [pc, #652]	@ (800816c <mpu_init+0x290>)
 8007ee0:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_RESET;
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007eea:	7d49      	ldrb	r1, [r1, #21]
 8007eec:	7800      	ldrb	r0, [r0, #0]
 8007eee:	ab02      	add	r3, sp, #8
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f004 f8a5 	bl	800c040 <MPU_Write_Len>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b120      	cbz	r0, 8007f04 <mpu_init+0x28>
        return -1;
 8007efa:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007efe:	4620      	mov	r0, r4
 8007f00:	b004      	add	sp, #16
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8007f04:	2064      	movs	r0, #100	@ 0x64
 8007f06:	f002 fd15 	bl	800a934 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007f0a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 8007f0e:	f88d 5008 	strb.w	r5, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007f12:	7d49      	ldrb	r1, [r1, #21]
 8007f14:	7800      	ldrb	r0, [r0, #0]
 8007f16:	ab02      	add	r3, sp, #8
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f004 f891 	bl	800c040 <MPU_Write_Len>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d1eb      	bne.n	8007efa <mpu_init+0x1e>
   st.chip_cfg.accel_half = 0;
 8007f22:	74e0      	strb	r0, [r4, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8007f24:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8007f28:	2348      	movs	r3, #72	@ 0x48
 8007f2a:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8007f2e:	7a09      	ldrb	r1, [r1, #8]
 8007f30:	7800      	ldrb	r0, [r0, #0]
 8007f32:	ab02      	add	r3, sp, #8
 8007f34:	2201      	movs	r2, #1
 8007f36:	f004 f883 	bl	800c040 <MPU_Write_Len>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1dd      	bne.n	8007efa <mpu_init+0x1e>
    st.chip_cfg.sample_rate = 0xFFFF;
 8007f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f42:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8007f44:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8007f46:	23ff      	movs	r3, #255	@ 0xff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8007f48:	2501      	movs	r5, #1
    st.chip_cfg.bypass_mode = 0xFF;
 8007f4a:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.lp_accel_mode = 0;
 8007f4c:	82a0      	strh	r0, [r4, #20]
    st.chip_cfg.gyro_fsr = 0xFF;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8007f52:	f8c4 0016 	str.w	r0, [r4, #22]
 8007f56:	f8c4 001a 	str.w	r0, [r4, #26]
 8007f5a:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 8007f5e:	6260      	str	r0, [r4, #36]	@ 0x24
    if (mpu_set_gyro_fsr(2000))
 8007f60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
    st.chip_cfg.gyro_fsr = 0xFF;
 8007f64:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8007f66:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 8007f68:	8465      	strh	r5, [r4, #34]	@ 0x22
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8007f6a:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (mpu_set_gyro_fsr(2000))
 8007f6c:	f7ff fc24 	bl	80077b8 <mpu_set_gyro_fsr>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1c2      	bne.n	8007efa <mpu_init+0x1e>
    if (mpu_set_accel_fsr(2))
 8007f74:	2002      	movs	r0, #2
 8007f76:	f7ff fc6f 	bl	8007858 <mpu_set_accel_fsr>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1bd      	bne.n	8007efa <mpu_init+0x1e>
    if (mpu_set_lpf(42))
 8007f7e:	202a      	movs	r0, #42	@ 0x2a
 8007f80:	f7ff fcb8 	bl	80078f4 <mpu_set_lpf>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1b8      	bne.n	8007efa <mpu_init+0x1e>
    if (mpu_set_sample_rate(50))
 8007f88:	2032      	movs	r0, #50	@ 0x32
 8007f8a:	f7ff fecb 	bl	8007d24 <mpu_set_sample_rate>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d1b3      	bne.n	8007efa <mpu_init+0x1e>
    if (mpu_configure_fifo(0))
 8007f92:	f7ff fd59 	bl	8007a48 <mpu_configure_fifo>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d1af      	bne.n	8007efa <mpu_init+0x1e>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fdc4 	bl	8007b28 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8007fa0:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8007fa2:	ab01      	add	r3, sp, #4
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f004 f851 	bl	800c050 <MPU_Read_Len>
        if (!result && (data[0] == AKM_WHOAMI))
 8007fae:	b918      	cbnz	r0, 8007fb8 <mpu_init+0xdc>
 8007fb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007fb4:	2b48      	cmp	r3, #72	@ 0x48
 8007fb6:	d009      	beq.n	8007fcc <mpu_init+0xf0>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8007fb8:	3501      	adds	r5, #1
 8007fba:	b2ed      	uxtb	r5, r5
 8007fbc:	2d10      	cmp	r5, #16
 8007fbe:	d1f0      	bne.n	8007fa2 <mpu_init+0xc6>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
 8007fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8008170 <mpu_init+0x294>)
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	2006      	movs	r0, #6
 8007fc6:	f001 fadd 	bl	8009584 <_MLPrintLog>
        return -1;
 8007fca:	e00b      	b.n	8007fe4 <mpu_init+0x108>
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8007fcc:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8007fce:	ab01      	add	r3, sp, #4
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	210a      	movs	r1, #10
 8007fd4:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8007fd6:	f884 502a 	strb.w	r5, [r4, #42]	@ 0x2a
    data[0] = AKM_POWER_DOWN;
 8007fda:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8007fde:	f004 f82f 	bl	800c040 <MPU_Write_Len>
 8007fe2:	b140      	cbz	r0, 8007ff6 <mpu_init+0x11a>
    if (mpu_set_compass_sample_rate(10))
 8007fe4:	200a      	movs	r0, #10
 8007fe6:	f7ff fcc7 	bl	8007978 <mpu_set_compass_sample_rate>
 8007fea:	4604      	mov	r4, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d184      	bne.n	8007efa <mpu_init+0x1e>
    mpu_set_sensors(0);
 8007ff0:	f7ff fede 	bl	8007db0 <mpu_set_sensors>
    return 0;
 8007ff4:	e783      	b.n	8007efe <mpu_init+0x22>
        return -1;
    delay_ms(1);
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	f002 fc9c 	bl	800a934 <HAL_Delay>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8007ffc:	231f      	movs	r3, #31
 8007ffe:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8008002:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8008006:	ab01      	add	r3, sp, #4
 8008008:	2201      	movs	r2, #1
 800800a:	210a      	movs	r1, #10
 800800c:	f004 f818 	bl	800c040 <MPU_Write_Len>
 8008010:	2800      	cmp	r0, #0
 8008012:	d1e7      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;
    delay_ms(1);
 8008014:	2001      	movs	r0, #1
 8008016:	f002 fc8d 	bl	800a934 <HAL_Delay>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 800801a:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800801e:	ab01      	add	r3, sp, #4
 8008020:	2203      	movs	r2, #3
 8008022:	4631      	mov	r1, r6
 8008024:	f004 f814 	bl	800c050 <MPU_Read_Len>
 8008028:	2800      	cmp	r0, #0
 800802a:	d1db      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800802c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8008030:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
    data[0] = AKM_POWER_DOWN;
 8008034:	f88d 6004 	strb.w	r6, [sp, #4]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8008038:	3380      	adds	r3, #128	@ 0x80
 800803a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800803c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008040:	3380      	adds	r3, #128	@ 0x80
 8008042:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8008044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008048:	3380      	adds	r3, #128	@ 0x80
 800804a:	8623      	strh	r3, [r4, #48]	@ 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800804c:	2201      	movs	r2, #1
 800804e:	ab01      	add	r3, sp, #4
 8008050:	210a      	movs	r1, #10
 8008052:	f003 fff5 	bl	800c040 <MPU_Write_Len>
 8008056:	4605      	mov	r5, r0
 8008058:	2800      	cmp	r0, #0
 800805a:	d1c3      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;
    delay_ms(1);
 800805c:	2001      	movs	r0, #1
 800805e:	f002 fc69 	bl	800a934 <HAL_Delay>

    mpu_set_bypass(0);
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff fd60 	bl	8007b28 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8008068:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 800806c:	2340      	movs	r3, #64	@ 0x40
 800806e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8008072:	7e89      	ldrb	r1, [r1, #26]
 8008074:	7800      	ldrb	r0, [r0, #0]
 8008076:	ab01      	add	r3, sp, #4
 8008078:	2201      	movs	r2, #1
 800807a:	f003 ffe1 	bl	800c040 <MPU_Write_Len>
 800807e:	2800      	cmp	r0, #0
 8008080:	d1b0      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8008082:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8008086:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 800808a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800808e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8008092:	7f89      	ldrb	r1, [r1, #30]
 8008094:	7800      	ldrb	r0, [r0, #0]
 8008096:	ab01      	add	r3, sp, #4
 8008098:	2201      	movs	r2, #1
 800809a:	f003 ffd1 	bl	800c040 <MPU_Write_Len>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d1a0      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80080a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 80080a6:	2302      	movs	r3, #2
 80080a8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80080ac:	7fc9      	ldrb	r1, [r1, #31]
 80080ae:	7800      	ldrb	r0, [r0, #0]
 80080b0:	ab01      	add	r3, sp, #4
 80080b2:	2201      	movs	r2, #1
 80080b4:	f003 ffc4 	bl	800c040 <MPU_Write_Len>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d193      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80080bc:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 80080c0:	2388      	movs	r3, #136	@ 0x88
 80080c2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80080c6:	f891 1020 	ldrb.w	r1, [r1, #32]
 80080ca:	7800      	ldrb	r0, [r0, #0]
 80080cc:	ab01      	add	r3, sp, #4
 80080ce:	2201      	movs	r2, #1
 80080d0:	f003 ffb6 	bl	800c040 <MPU_Write_Len>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d185      	bne.n	8007fe4 <mpu_init+0x108>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80080d8:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 80080dc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80080e0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80080e4:	f891 1021 	ldrb.w	r1, [r1, #33]	@ 0x21
 80080e8:	7800      	ldrb	r0, [r0, #0]
 80080ea:	ab01      	add	r3, sp, #4
 80080ec:	2201      	movs	r2, #1
 80080ee:	f003 ffa7 	bl	800c040 <MPU_Write_Len>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f47f af76 	bne.w	8007fe4 <mpu_init+0x108>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80080f8:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 80080fc:	230a      	movs	r3, #10
 80080fe:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8008102:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8008106:	7800      	ldrb	r0, [r0, #0]
 8008108:	ab01      	add	r3, sp, #4
 800810a:	2201      	movs	r2, #1
 800810c:	f003 ff98 	bl	800c040 <MPU_Write_Len>
 8008110:	2800      	cmp	r0, #0
 8008112:	f47f af67 	bne.w	8007fe4 <mpu_init+0x108>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8008116:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 800811a:	2381      	movs	r3, #129	@ 0x81
 800811c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8008120:	f891 1023 	ldrb.w	r1, [r1, #35]	@ 0x23
 8008124:	7800      	ldrb	r0, [r0, #0]
 8008126:	ab01      	add	r3, sp, #4
 8008128:	2201      	movs	r2, #1
 800812a:	f003 ff89 	bl	800c040 <MPU_Write_Len>
 800812e:	2800      	cmp	r0, #0
 8008130:	f47f af58 	bne.w	8007fe4 <mpu_init+0x108>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8008134:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8008138:	2311      	movs	r3, #17
 800813a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800813e:	f891 1026 	ldrb.w	r1, [r1, #38]	@ 0x26
 8008142:	7800      	ldrb	r0, [r0, #0]
 8008144:	ab01      	add	r3, sp, #4
 8008146:	2201      	movs	r2, #1
 8008148:	f003 ff7a 	bl	800c040 <MPU_Write_Len>
 800814c:	2800      	cmp	r0, #0
 800814e:	f47f af49 	bne.w	8007fe4 <mpu_init+0x108>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8008152:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 8008156:	2303      	movs	r3, #3
 8008158:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800815c:	f891 1027 	ldrb.w	r1, [r1, #39]	@ 0x27
 8008160:	7800      	ldrb	r0, [r0, #0]
 8008162:	ab01      	add	r3, sp, #4
 8008164:	2201      	movs	r2, #1
 8008166:	f003 ff6b 	bl	800c040 <MPU_Write_Len>
 800816a:	e73b      	b.n	8007fe4 <mpu_init+0x108>
 800816c:	20000014 	.word	0x20000014
 8008170:	08013954 	.word	0x08013954

08008174 <mpu_write_mem>:
{
 8008174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008176:	460d      	mov	r5, r1
    if (!data)
 8008178:	4616      	mov	r6, r2
 800817a:	b91a      	cbnz	r2, 8008184 <mpu_write_mem+0x10>
        return -1;
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008180:	b003      	add	sp, #12
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8008184:	4c11      	ldr	r4, [pc, #68]	@ (80081cc <mpu_write_mem+0x58>)
 8008186:	7aa3      	ldrb	r3, [r4, #10]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f7      	beq.n	800817c <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 800818c:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800818e:	ba43      	rev16	r3, r0
 8008190:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 8008194:	897b      	ldrh	r3, [r7, #10]
 8008196:	fa51 f080 	uxtab	r0, r1, r0
 800819a:	4298      	cmp	r0, r3
 800819c:	dcee      	bgt.n	800817c <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800819e:	6821      	ldr	r1, [r4, #0]
 80081a0:	7838      	ldrb	r0, [r7, #0]
 80081a2:	7ec9      	ldrb	r1, [r1, #27]
 80081a4:	ab01      	add	r3, sp, #4
 80081a6:	2202      	movs	r2, #2
 80081a8:	f003 ff4a 	bl	800c040 <MPU_Write_Len>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1e5      	bne.n	800817c <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80081b0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80081b4:	4633      	mov	r3, r6
 80081b6:	7e09      	ldrb	r1, [r1, #24]
 80081b8:	7800      	ldrb	r0, [r0, #0]
 80081ba:	b2ea      	uxtb	r2, r5
 80081bc:	f003 ff40 	bl	800c040 <MPU_Write_Len>
 80081c0:	3800      	subs	r0, #0
 80081c2:	bf18      	it	ne
 80081c4:	2001      	movne	r0, #1
 80081c6:	4240      	negs	r0, r0
 80081c8:	e7da      	b.n	8008180 <mpu_write_mem+0xc>
 80081ca:	bf00      	nop
 80081cc:	20000014 	.word	0x20000014

080081d0 <mpu_read_mem>:
{
 80081d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081d2:	460d      	mov	r5, r1
    if (!data)
 80081d4:	4616      	mov	r6, r2
 80081d6:	b91a      	cbnz	r2, 80081e0 <mpu_read_mem+0x10>
        return -1;
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80081dc:	b003      	add	sp, #12
 80081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80081e0:	4c11      	ldr	r4, [pc, #68]	@ (8008228 <mpu_read_mem+0x58>)
 80081e2:	7aa3      	ldrb	r3, [r4, #10]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0f7      	beq.n	80081d8 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80081e8:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80081ea:	ba43      	rev16	r3, r0
 80081ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 80081f0:	897b      	ldrh	r3, [r7, #10]
 80081f2:	fa51 f080 	uxtab	r0, r1, r0
 80081f6:	4298      	cmp	r0, r3
 80081f8:	dcee      	bgt.n	80081d8 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80081fa:	6821      	ldr	r1, [r4, #0]
 80081fc:	7838      	ldrb	r0, [r7, #0]
 80081fe:	7ec9      	ldrb	r1, [r1, #27]
 8008200:	ab01      	add	r3, sp, #4
 8008202:	2202      	movs	r2, #2
 8008204:	f003 ff1c 	bl	800c040 <MPU_Write_Len>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1e5      	bne.n	80081d8 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800820c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8008210:	4633      	mov	r3, r6
 8008212:	7e09      	ldrb	r1, [r1, #24]
 8008214:	7800      	ldrb	r0, [r0, #0]
 8008216:	b2ea      	uxtb	r2, r5
 8008218:	f003 ff1a 	bl	800c050 <MPU_Read_Len>
 800821c:	3800      	subs	r0, #0
 800821e:	bf18      	it	ne
 8008220:	2001      	movne	r0, #1
 8008222:	4240      	negs	r0, r0
 8008224:	e7da      	b.n	80081dc <mpu_read_mem+0xc>
 8008226:	bf00      	nop
 8008228:	20000014 	.word	0x20000014

0800822c <mpu_load_firmware>:
{
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8008230:	4d24      	ldr	r5, [pc, #144]	@ (80082c4 <mpu_load_firmware+0x98>)
{
 8008232:	b089      	sub	sp, #36	@ 0x24
    if (st.chip_cfg.dmp_loaded)
 8008234:	f895 4025 	ldrb.w	r4, [r5, #37]	@ 0x25
{
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	4681      	mov	r9, r0
 800823c:	468a      	mov	sl, r1
 800823e:	4616      	mov	r6, r2
    if (st.chip_cfg.dmp_loaded)
 8008240:	b124      	cbz	r4, 800824c <mpu_load_firmware+0x20>
        return -1;
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008246:	b009      	add	sp, #36	@ 0x24
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 800824c:	2900      	cmp	r1, #0
 800824e:	d0f8      	beq.n	8008242 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 8008250:	454c      	cmp	r4, r9
 8008252:	d312      	bcc.n	800827a <mpu_load_firmware+0x4e>
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8008254:	e9d5 1000 	ldrd	r1, r0, [r5]
    tmp[0] = start_addr >> 8;
 8008258:	ba76      	rev16	r6, r6
 800825a:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800825e:	7f49      	ldrb	r1, [r1, #29]
 8008260:	7800      	ldrb	r0, [r0, #0]
 8008262:	ab03      	add	r3, sp, #12
 8008264:	2202      	movs	r2, #2
 8008266:	f003 feeb 	bl	800c040 <MPU_Write_Len>
 800826a:	2800      	cmp	r0, #0
 800826c:	d1e9      	bne.n	8008242 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 800826e:	2301      	movs	r3, #1
 8008270:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	84eb      	strh	r3, [r5, #38]	@ 0x26
    return 0;
 8008278:	e7e5      	b.n	8008246 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 800827a:	eba9 0804 	sub.w	r8, r9, r4
 800827e:	f1b8 0f10 	cmp.w	r8, #16
 8008282:	bfa8      	it	ge
 8008284:	f04f 0810 	movge.w	r8, #16
 8008288:	fa1f f788 	uxth.w	r7, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800828c:	eb0a 0b04 	add.w	fp, sl, r4
 8008290:	465a      	mov	r2, fp
 8008292:	4639      	mov	r1, r7
 8008294:	4620      	mov	r0, r4
 8008296:	f7ff ff6d 	bl	8008174 <mpu_write_mem>
 800829a:	2800      	cmp	r0, #0
 800829c:	d1d1      	bne.n	8008242 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 800829e:	aa04      	add	r2, sp, #16
 80082a0:	4639      	mov	r1, r7
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7ff ff94 	bl	80081d0 <mpu_read_mem>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d1ca      	bne.n	8008242 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 80082ac:	463a      	mov	r2, r7
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4658      	mov	r0, fp
 80082b2:	f004 ff95 	bl	800d1e0 <memcmp>
 80082b6:	b910      	cbnz	r0, 80082be <mpu_load_firmware+0x92>
    for (ii = 0; ii < length; ii += this_write) {
 80082b8:	4427      	add	r7, r4
 80082ba:	b2bc      	uxth	r4, r7
 80082bc:	e7c8      	b.n	8008250 <mpu_load_firmware+0x24>
            return -2;
 80082be:	f06f 0001 	mvn.w	r0, #1
 80082c2:	e7c0      	b.n	8008246 <mpu_load_firmware+0x1a>
 80082c4:	20000014 	.word	0x20000014

080082c8 <mpu_set_dmp_state>:
{
 80082c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 80082ca:	4c1d      	ldr	r4, [pc, #116]	@ (8008340 <mpu_set_dmp_state+0x78>)
 80082cc:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80082d0:	4283      	cmp	r3, r0
{
 80082d2:	4605      	mov	r5, r0
    if (st.chip_cfg.dmp_on == enable)
 80082d4:	d01e      	beq.n	8008314 <mpu_set_dmp_state+0x4c>
    if (enable) {
 80082d6:	b300      	cbz	r0, 800831a <mpu_set_dmp_state+0x52>
        if (!st.chip_cfg.dmp_loaded)
 80082d8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80082dc:	b36b      	cbz	r3, 800833a <mpu_set_dmp_state+0x72>
        set_int_enable(0);
 80082de:	2000      	movs	r0, #0
 80082e0:	f7ff f976 	bl	80075d0 <set_int_enable.isra.0>
        mpu_set_bypass(0);
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7ff fc1f 	bl	8007b28 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80082ea:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 80082ec:	f7ff fd1a 	bl	8007d24 <mpu_set_sample_rate>
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80082f0:	6860      	ldr	r0, [r4, #4]
        tmp = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f88d 3007 	strb.w	r3, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80082f8:	7800      	ldrb	r0, [r0, #0]
 80082fa:	f10d 0307 	add.w	r3, sp, #7
 80082fe:	2201      	movs	r2, #1
 8008300:	2123      	movs	r1, #35	@ 0x23
 8008302:	f003 fe9d 	bl	800c040 <MPU_Write_Len>
        st.chip_cfg.dmp_on = 1;
 8008306:	2001      	movs	r0, #1
 8008308:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
        set_int_enable(1);
 800830c:	f7ff f960 	bl	80075d0 <set_int_enable.isra.0>
        mpu_reset_fifo();
 8008310:	f7ff f980 	bl	8007614 <mpu_reset_fifo>
        return 0;
 8008314:	2000      	movs	r0, #0
}
 8008316:	b003      	add	sp, #12
 8008318:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 800831a:	f7ff f959 	bl	80075d0 <set_int_enable.isra.0>
        tmp = st.chip_cfg.fifo_enable;
 800831e:	7c23      	ldrb	r3, [r4, #16]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8008320:	6860      	ldr	r0, [r4, #4]
        tmp = st.chip_cfg.fifo_enable;
 8008322:	f88d 3007 	strb.w	r3, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8008326:	7800      	ldrb	r0, [r0, #0]
 8008328:	f10d 0307 	add.w	r3, sp, #7
 800832c:	2201      	movs	r2, #1
 800832e:	2123      	movs	r1, #35	@ 0x23
 8008330:	f003 fe86 	bl	800c040 <MPU_Write_Len>
        st.chip_cfg.dmp_on = 0;
 8008334:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
 8008338:	e7ea      	b.n	8008310 <mpu_set_dmp_state+0x48>
            return -1;
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	e7ea      	b.n	8008316 <mpu_set_dmp_state+0x4e>
 8008340:	20000014 	.word	0x20000014
 8008344:	00000000 	.word	0x00000000

08008348 <mpu_run_6500_self_test>:
{
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	ed2d 8b04 	vpush	{d8-d9}
 8008350:	b09b      	sub	sp, #108	@ 0x6c
 8008352:	460f      	mov	r7, r1
 8008354:	9006      	str	r0, [sp, #24]
    if(debug)
 8008356:	4614      	mov	r4, r2
 8008358:	b122      	cbz	r2, 8008364 <mpu_run_6500_self_test+0x1c>
    	log_i("Starting MPU6500 HWST!\r\n");
 800835a:	4a80      	ldr	r2, [pc, #512]	@ (800855c <mpu_run_6500_self_test+0x214>)
 800835c:	2100      	movs	r1, #0
 800835e:	2004      	movs	r0, #4
 8008360:	f001 f910 	bl	8009584 <_MLPrintLog>
    if (st.chip_cfg.dmp_on) {
 8008364:	4e7e      	ldr	r6, [pc, #504]	@ (8008560 <mpu_run_6500_self_test+0x218>)
 8008366:	f896 3024 	ldrb.w	r3, [r6, #36]	@ 0x24
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	b123      	cbz	r3, 8008378 <mpu_run_6500_self_test+0x30>
        mpu_set_dmp_state(0);
 800836e:	2000      	movs	r0, #0
 8008370:	f7ff ffaa 	bl	80082c8 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8008374:	2301      	movs	r3, #1
 8008376:	9307      	str	r3, [sp, #28]
    mpu_get_gyro_fsr(&gyro_fsr);
 8008378:	f10d 003a 	add.w	r0, sp, #58	@ 0x3a
 800837c:	f7ff fa02 	bl	8007784 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8008380:	f10d 0039 	add.w	r0, sp, #57	@ 0x39
 8008384:	f7ff fa4c 	bl	8007820 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8008388:	f10d 003e 	add.w	r0, sp, #62	@ 0x3e
 800838c:	f7ff fa96 	bl	80078bc <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8008390:	a80f      	add	r0, sp, #60	@ 0x3c
 8008392:	f7ff fae3 	bl	800795c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8008396:	7ab3      	ldrb	r3, [r6, #10]
 8008398:	930c      	str	r3, [sp, #48]	@ 0x30
    sensors[0] = st.chip_cfg.fifo_enable;
 800839a:	7c33      	ldrb	r3, [r6, #16]
 800839c:	930d      	str	r3, [sp, #52]	@ 0x34
    if(debug)
 800839e:	b124      	cbz	r4, 80083aa <mpu_run_6500_self_test+0x62>
    	log_i("Retrieving Biases\r\n");
 80083a0:	4a70      	ldr	r2, [pc, #448]	@ (8008564 <mpu_run_6500_self_test+0x21c>)
 80083a2:	2100      	movs	r1, #0
 80083a4:	2004      	movs	r0, #4
 80083a6:	f001 f8ed 	bl	8009584 <_MLPrintLog>
        if (!get_st_6500_biases(gyro, accel, 0, debug))
 80083aa:	9806      	ldr	r0, [sp, #24]
 80083ac:	4623      	mov	r3, r4
 80083ae:	2200      	movs	r2, #0
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7fe fec5 	bl	8007140 <get_st_6500_biases>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d03e      	beq.n	8008438 <mpu_run_6500_self_test+0xf0>
 80083ba:	9806      	ldr	r0, [sp, #24]
 80083bc:	4623      	mov	r3, r4
 80083be:	2200      	movs	r2, #0
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7fe febd 	bl	8007140 <get_st_6500_biases>
 80083c6:	b3b8      	cbz	r0, 8008438 <mpu_run_6500_self_test+0xf0>
        if(debug)
 80083c8:	bb54      	cbnz	r4, 8008420 <mpu_run_6500_self_test+0xd8>
        result = 0;
 80083ca:	2500      	movs	r5, #0
	st.chip_cfg.sample_rate = 0xFFFF;
 80083cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083d0:	81f3      	strh	r3, [r6, #14]
	st.chip_cfg.fifo_enable = 0xFF;
 80083d2:	7433      	strb	r3, [r6, #16]
	mpu_set_gyro_fsr(gyro_fsr);
 80083d4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
	st.chip_cfg.gyro_fsr = 0xFF;
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
	st.chip_cfg.clk_src = INV_CLK_PLL;
 80083dc:	2401      	movs	r4, #1
	st.chip_cfg.gyro_fsr = 0xFF;
 80083de:	60b3      	str	r3, [r6, #8]
	st.chip_cfg.clk_src = INV_CLK_PLL;
 80083e0:	7334      	strb	r4, [r6, #12]
	mpu_set_gyro_fsr(gyro_fsr);
 80083e2:	f7ff f9e9 	bl	80077b8 <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(accel_fsr);
 80083e6:	f89d 0039 	ldrb.w	r0, [sp, #57]	@ 0x39
 80083ea:	f7ff fa35 	bl	8007858 <mpu_set_accel_fsr>
	mpu_set_lpf(lpf);
 80083ee:	f8bd 003e 	ldrh.w	r0, [sp, #62]	@ 0x3e
 80083f2:	f7ff fa7f 	bl	80078f4 <mpu_set_lpf>
	mpu_set_sample_rate(sample_rate);
 80083f6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80083fa:	f7ff fc93 	bl	8007d24 <mpu_set_sample_rate>
	mpu_set_sensors(sensors_on);
 80083fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008400:	f7ff fcd6 	bl	8007db0 <mpu_set_sensors>
	mpu_configure_fifo(fifo_sensors);
 8008404:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008406:	f7ff fb1f 	bl	8007a48 <mpu_configure_fifo>
	if (dmp_was_on)
 800840a:	9b07      	ldr	r3, [sp, #28]
 800840c:	b113      	cbz	r3, 8008414 <mpu_run_6500_self_test+0xcc>
		mpu_set_dmp_state(1);
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff ff5a 	bl	80082c8 <mpu_set_dmp_state>
}
 8008414:	4628      	mov	r0, r5
 8008416:	b01b      	add	sp, #108	@ 0x6c
 8008418:	ecbd 8b04 	vpop	{d8-d9}
 800841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	log_i("Retrieving Biases Error - possible I2C error\n");
 8008420:	4a51      	ldr	r2, [pc, #324]	@ (8008568 <mpu_run_6500_self_test+0x220>)
 8008422:	2100      	movs	r1, #0
 8008424:	2004      	movs	r0, #4
 8008426:	f001 f8ad 	bl	8009584 <_MLPrintLog>
        result = 0;
 800842a:	2500      	movs	r5, #0
		log_i("Exiting HWST\n");
 800842c:	4a4f      	ldr	r2, [pc, #316]	@ (800856c <mpu_run_6500_self_test+0x224>)
 800842e:	2100      	movs	r1, #0
 8008430:	2004      	movs	r0, #4
 8008432:	f001 f8a7 	bl	8009584 <_MLPrintLog>
 8008436:	e7c9      	b.n	80083cc <mpu_run_6500_self_test+0x84>
    if(debug)
 8008438:	b124      	cbz	r4, 8008444 <mpu_run_6500_self_test+0xfc>
    	log_i("Retrieving ST Biases\n");
 800843a:	4a4d      	ldr	r2, [pc, #308]	@ (8008570 <mpu_run_6500_self_test+0x228>)
 800843c:	2100      	movs	r1, #0
 800843e:	2004      	movs	r0, #4
 8008440:	f001 f8a0 	bl	8009584 <_MLPrintLog>
        if (!get_st_6500_biases(gyro_st, accel_st, 1, debug))
 8008444:	4623      	mov	r3, r4
 8008446:	2201      	movs	r2, #1
 8008448:	a914      	add	r1, sp, #80	@ 0x50
 800844a:	a811      	add	r0, sp, #68	@ 0x44
 800844c:	f7fe fe78 	bl	8007140 <get_st_6500_biases>
 8008450:	b150      	cbz	r0, 8008468 <mpu_run_6500_self_test+0x120>
 8008452:	4623      	mov	r3, r4
 8008454:	2201      	movs	r2, #1
 8008456:	a914      	add	r1, sp, #80	@ 0x50
 8008458:	a811      	add	r0, sp, #68	@ 0x44
 800845a:	f7fe fe71 	bl	8007140 <get_st_6500_biases>
 800845e:	b118      	cbz	r0, 8008468 <mpu_run_6500_self_test+0x120>
        if(debug)
 8008460:	2c00      	cmp	r4, #0
 8008462:	d0b2      	beq.n	80083ca <mpu_run_6500_self_test+0x82>
        	log_i("Retrieving ST Biases Error - possible I2C error\n");
 8008464:	4a43      	ldr	r2, [pc, #268]	@ (8008574 <mpu_run_6500_self_test+0x22c>)
 8008466:	e7dc      	b.n	8008422 <mpu_run_6500_self_test+0xda>
    if (i2c_read(st.hw->addr, REG_6500_XA_ST_DATA, 3, regs)) {
 8008468:	6870      	ldr	r0, [r6, #4]
 800846a:	210d      	movs	r1, #13
 800846c:	7800      	ldrb	r0, [r0, #0]
 800846e:	ab10      	add	r3, sp, #64	@ 0x40
 8008470:	2203      	movs	r2, #3
 8008472:	f003 fded 	bl	800c050 <MPU_Read_Len>
 8008476:	4601      	mov	r1, r0
 8008478:	2800      	cmp	r0, #0
 800847a:	f000 8083 	beq.w	8008584 <mpu_run_6500_self_test+0x23c>
    	if(debug)
 800847e:	2c00      	cmp	r4, #0
 8008480:	d15e      	bne.n	8008540 <mpu_run_6500_self_test+0x1f8>
    accel_result = accel_6500_self_test(accel, accel_st, debug);
 8008482:	f04f 0807 	mov.w	r8, #7
    if (i2c_read(st.hw->addr, REG_6500_XG_ST_DATA, 3, regs)) {
 8008486:	6870      	ldr	r0, [r6, #4]
 8008488:	2100      	movs	r1, #0
 800848a:	7800      	ldrb	r0, [r0, #0]
 800848c:	ab10      	add	r3, sp, #64	@ 0x40
 800848e:	2203      	movs	r2, #3
 8008490:	f003 fdde 	bl	800c050 <MPU_Read_Len>
 8008494:	4601      	mov	r1, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	f000 8200 	beq.w	800889c <mpu_run_6500_self_test+0x554>
    	if(debug)
 800849c:	2c00      	cmp	r4, #0
 800849e:	f040 81b7 	bne.w	8008810 <mpu_run_6500_self_test+0x4c8>
    gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
 80084a2:	2707      	movs	r7, #7
    if (!gyro_result)
 80084a4:	fab7 f587 	clz	r5, r7
 80084a8:	096d      	lsrs	r5, r5, #5
    if (!accel_result)
 80084aa:	f1b8 0f00 	cmp.w	r8, #0
 80084ae:	d101      	bne.n	80084b4 <mpu_run_6500_self_test+0x16c>
        result |= 0x02;
 80084b0:	f045 0502 	orr.w	r5, r5, #2
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
 80084b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8008560 <mpu_run_6500_self_test+0x218>
    mpu_set_bypass(1);
 80084b8:	2001      	movs	r0, #1
 80084ba:	f7ff fb35 	bl	8007b28 <mpu_set_bypass>
    tmp[0] = AKM_POWER_DOWN;
 80084be:	2310      	movs	r3, #16
 80084c0:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
 80084c4:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
 80084c8:	ab17      	add	r3, sp, #92	@ 0x5c
 80084ca:	2201      	movs	r2, #1
 80084cc:	210a      	movs	r1, #10
 80084ce:	f003 fdb7 	bl	800c040 <MPU_Write_Len>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f040 8362 	bne.w	8008b9c <mpu_run_6500_self_test+0x854>
    tmp[0] = AKM_BIT_SELF_TEST;
 80084d8:	2340      	movs	r3, #64	@ 0x40
 80084da:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
 80084de:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
 80084e2:	ab17      	add	r3, sp, #92	@ 0x5c
 80084e4:	2201      	movs	r2, #1
 80084e6:	210c      	movs	r1, #12
 80084e8:	f003 fdaa 	bl	800c040 <MPU_Write_Len>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f000 8305 	beq.w	8008afc <mpu_run_6500_self_test+0x7b4>
    int result = 0x07;
 80084f2:	2707      	movs	r7, #7
    tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
 80084f4:	f04f 0910 	mov.w	r9, #16
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
 80084f8:	ab17      	add	r3, sp, #92	@ 0x5c
 80084fa:	2201      	movs	r2, #1
 80084fc:	210c      	movs	r1, #12
 80084fe:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
    tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
 8008502:	f88d 905c 	strb.w	r9, [sp, #92]	@ 0x5c
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
 8008506:	f003 fd9b 	bl	800c040 <MPU_Write_Len>
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp);
 800850a:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
    tmp[0] = SUPPORTS_AK89xx_HIGH_SENS;
 800850e:	f88d 905c 	strb.w	r9, [sp, #92]	@ 0x5c
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp);
 8008512:	ab17      	add	r3, sp, #92	@ 0x5c
 8008514:	2201      	movs	r2, #1
 8008516:	210a      	movs	r1, #10
 8008518:	f003 fd92 	bl	800c040 <MPU_Write_Len>
    mpu_set_bypass(0);
 800851c:	2000      	movs	r0, #0
 800851e:	f7ff fb03 	bl	8007b28 <mpu_set_bypass>
    if(debug)
 8008522:	2c00      	cmp	r4, #0
 8008524:	f000 833c 	beq.w	8008ba0 <mpu_run_6500_self_test+0x858>
    	log_i("Compass Self Test Results: %d\n", compass_result);
 8008528:	4a13      	ldr	r2, [pc, #76]	@ (8008578 <mpu_run_6500_self_test+0x230>)
 800852a:	463b      	mov	r3, r7
 800852c:	2100      	movs	r1, #0
 800852e:	2004      	movs	r0, #4
 8008530:	f001 f828 	bl	8009584 <_MLPrintLog>
    if (!compass_result)
 8008534:	2f00      	cmp	r7, #0
 8008536:	f47f af79 	bne.w	800842c <mpu_run_6500_self_test+0xe4>
        result |= 0x04;
 800853a:	f045 0504 	orr.w	r5, r5, #4
	if(debug)
 800853e:	e775      	b.n	800842c <mpu_run_6500_self_test+0xe4>
    		log_i("Reading OTP Register Error.\n");
 8008540:	4a0e      	ldr	r2, [pc, #56]	@ (800857c <mpu_run_6500_self_test+0x234>)
 8008542:	2100      	movs	r1, #0
 8008544:	2004      	movs	r0, #4
 8008546:	f001 f81d 	bl	8009584 <_MLPrintLog>
    	return 0x07;
 800854a:	2507      	movs	r5, #7
    accel_result = accel_6500_self_test(accel, accel_st, debug);
 800854c:	46a8      	mov	r8, r5
    	log_i("Accel Self Test Results: %d\n", accel_result);
 800854e:	4a0c      	ldr	r2, [pc, #48]	@ (8008580 <mpu_run_6500_self_test+0x238>)
 8008550:	462b      	mov	r3, r5
 8008552:	2100      	movs	r1, #0
 8008554:	2004      	movs	r0, #4
 8008556:	f001 f815 	bl	8009584 <_MLPrintLog>
 800855a:	e794      	b.n	8008486 <mpu_run_6500_self_test+0x13e>
 800855c:	08013968 	.word	0x08013968
 8008560:	20000014 	.word	0x20000014
 8008564:	08013981 	.word	0x08013981
 8008568:	08013995 	.word	0x08013995
 800856c:	08013cc3 	.word	0x08013cc3
 8008570:	080139c3 	.word	0x080139c3
 8008574:	080139d9 	.word	0x080139d9
 8008578:	08013ca4 	.word	0x08013ca4
 800857c:	08013a0a 	.word	0x08013a0a
 8008580:	08013b9b 	.word	0x08013b9b
    if(debug)
 8008584:	b15c      	cbz	r4, 800859e <mpu_run_6500_self_test+0x256>
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
 8008586:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	f89d 3041 	ldrb.w	r3, [sp, #65]	@ 0x41
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4aab      	ldr	r2, [pc, #684]	@ (8008840 <mpu_run_6500_self_test+0x4f8>)
 8008594:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8008598:	2004      	movs	r0, #4
 800859a:	f000 fff3 	bl	8009584 <_MLPrintLog>
	for (i = 0; i < 3; i++) {
 800859e:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
        dmp_was_on = 1;
 80085a2:	2500      	movs	r5, #0
			ct_shift_prod[i] = 0;
 80085a4:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8008844 <mpu_run_6500_self_test+0x4fc>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
 80085a8:	f8df c2e0 	ldr.w	ip, [pc, #736]	@ 800888c <mpu_run_6500_self_test+0x544>
			ct_shift_prod[i] *= 65536.f;
 80085ac:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8008848 <mpu_run_6500_self_test+0x500>
			ct_shift_prod[i] /= test.accel_sens;
 80085b0:	ed9f 6aa6 	vldr	s12, [pc, #664]	@ 800884c <mpu_run_6500_self_test+0x504>
 80085b4:	ab10      	add	r3, sp, #64	@ 0x40
        dmp_was_on = 1;
 80085b6:	4640      	mov	r0, r8
 80085b8:	4629      	mov	r1, r5
		if (regs[i] != 0) {
 80085ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085be:	2a00      	cmp	r2, #0
 80085c0:	f000 80bd 	beq.w	800873e <mpu_run_6500_self_test+0x3f6>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
 80085c4:	3a01      	subs	r2, #1
 80085c6:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
 80085ca:	ee07 2a90 	vmov	s15, r2
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
			ct_shift_prod[i] *= 65536.f;
 80085d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
			ct_shift_prod[i] /= test.accel_sens;
 80085d6:	ee67 7a86 	vmul.f32	s15, s15, s12
	for (i = 0; i < 3; i++) {
 80085da:	3101      	adds	r1, #1
 80085dc:	2903      	cmp	r1, #3
 80085de:	ece0 7a01 	vstmia	r0!, {s15}
 80085e2:	d1ea      	bne.n	80085ba <mpu_run_6500_self_test+0x272>
	if(otp_value_zero == 0) {
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	f040 80ae 	bne.w	8008746 <mpu_run_6500_self_test+0x3fe>
		if(debug)
 80085ea:	b124      	cbz	r4, 80085f6 <mpu_run_6500_self_test+0x2ae>
			log_i("ACCEL:CRITERIA A\n");
 80085ec:	4a98      	ldr	r2, [pc, #608]	@ (8008850 <mpu_run_6500_self_test+0x508>)
 80085ee:	4629      	mov	r1, r5
 80085f0:	2004      	movs	r0, #4
 80085f2:	f000 ffc7 	bl	8009584 <_MLPrintLog>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
 80085f6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8008830 <mpu_run_6500_self_test+0x4e8>
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
 80085fa:	f8df 9294 	ldr.w	r9, [pc, #660]	@ 8008890 <mpu_run_6500_self_test+0x548>
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
 80085fe:	f8df a294 	ldr.w	sl, [pc, #660]	@ 8008894 <mpu_run_6500_self_test+0x54c>
			otp_value_zero = 1;
 8008602:	f04f 0b00 	mov.w	fp, #0
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
 8008606:	ab14      	add	r3, sp, #80	@ 0x50
 8008608:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800860c:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8008610:	ed93 8a00 	vldr	s16, [r3]
 8008614:	ee18 3a10 	vmov	r3, s16
 8008618:	1ac3      	subs	r3, r0, r3
 800861a:	ee08 3a90 	vmov	s17, r3
 800861e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
			if(debug) {
 8008622:	b33c      	cbz	r4, 8008674 <mpu_run_6500_self_test+0x32c>
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
 8008624:	ee07 0a90 	vmov	s15, r0
 8008628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800862c:	ee17 0a90 	vmov	r0, s15
 8008630:	f7fd fab2 	bl	8005b98 <__aeabi_f2d>
 8008634:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8008638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800863c:	ee17 0a90 	vmov	r0, s15
 8008640:	f7fd faaa 	bl	8005b98 <__aeabi_f2d>
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	ee18 0a90 	vmov	r0, s17
 800864c:	f7fd faa4 	bl	8005b98 <__aeabi_f2d>
 8008650:	464a      	mov	r2, r9
 8008652:	e9cd 0100 	strd	r0, r1, [sp]
 8008656:	2100      	movs	r1, #0
 8008658:	2004      	movs	r0, #4
 800865a:	f000 ff93 	bl	8009584 <_MLPrintLog>
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
 800865e:	f8d8 0000 	ldr.w	r0, [r8]
 8008662:	f7fd fa99 	bl	8005b98 <__aeabi_f2d>
 8008666:	4652      	mov	r2, sl
 8008668:	e9cd 0100 	strd	r0, r1, [sp]
 800866c:	2100      	movs	r1, #0
 800866e:	2004      	movs	r0, #4
 8008670:	f000 ff88 	bl	8009584 <_MLPrintLog>
			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i] - 1.f;
 8008674:	ecf8 7a01 	vldmia	r8!, {s15}
 8008678:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800867c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008680:	ee38 8a67 	vsub.f32	s16, s16, s15
			if(debug)
 8008684:	b164      	cbz	r4, 80086a0 <mpu_run_6500_self_test+0x358>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
 8008686:	ee18 0a10 	vmov	r0, s16
 800868a:	ed8d 9b02 	vstr	d9, [sp, #8]
 800868e:	f7fd fa83 	bl	8005b98 <__aeabi_f2d>
 8008692:	4a70      	ldr	r2, [pc, #448]	@ (8008854 <mpu_run_6500_self_test+0x50c>)
 8008694:	e9cd 0100 	strd	r0, r1, [sp]
 8008698:	2100      	movs	r1, #0
 800869a:	2004      	movs	r0, #4
 800869c:	f000 ff72 	bl	8009584 <_MLPrintLog>
			if (fabs(st_shift_ratio[i]) > test.max_accel_var) {
 80086a0:	eeb0 8ac8 	vabs.f32	s16, s16
 80086a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80086a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80086ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b0:	dd0a      	ble.n	80086c8 <mpu_run_6500_self_test+0x380>
				if(debug)
 80086b2:	b12c      	cbz	r4, 80086c0 <mpu_run_6500_self_test+0x378>
					log_i("ACCEL Fail Axis = %d\n", i);
 80086b4:	4a68      	ldr	r2, [pc, #416]	@ (8008858 <mpu_run_6500_self_test+0x510>)
 80086b6:	465b      	mov	r3, fp
 80086b8:	2100      	movs	r1, #0
 80086ba:	2004      	movs	r0, #4
 80086bc:	f000 ff62 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 80086c0:	2301      	movs	r3, #1
 80086c2:	fa03 f30b 	lsl.w	r3, r3, fp
 80086c6:	431d      	orrs	r5, r3
		for (i = 0; i < 3; i++) {
 80086c8:	f10b 0b01 	add.w	fp, fp, #1
 80086cc:	f1bb 0f03 	cmp.w	fp, #3
 80086d0:	d199      	bne.n	8008606 <mpu_run_6500_self_test+0x2be>
	if(result == 0) {
 80086d2:	bb75      	cbnz	r5, 8008732 <mpu_run_6500_self_test+0x3ea>
		if(debug)
 80086d4:	b144      	cbz	r4, 80086e8 <mpu_run_6500_self_test+0x3a0>
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
 80086d6:	4b61      	ldr	r3, [pc, #388]	@ (800885c <mpu_run_6500_self_test+0x514>)
 80086d8:	2200      	movs	r2, #0
 80086da:	e9cd 2300 	strd	r2, r3, [sp]
 80086de:	4629      	mov	r1, r5
 80086e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008860 <mpu_run_6500_self_test+0x518>)
 80086e2:	2004      	movs	r0, #4
 80086e4:	f000 ff4e 	bl	8009584 <_MLPrintLog>
			otp_value_zero = 1;
 80086e8:	f04f 0800 	mov.w	r8, #0
				result |= 1 << i;	//Error condition
 80086ec:	f04f 0a01 	mov.w	sl, #1
			if(fabs(bias_regular[i]) > accel_offset_max) {
 80086f0:	f857 9028 	ldr.w	r9, [r7, r8, lsl #2]
 80086f4:	4648      	mov	r0, r9
 80086f6:	f7fd fa3d 	bl	8005b74 <__aeabi_i2d>
 80086fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80086fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008700:	9008      	str	r0, [sp, #32]
 8008702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008706:	4b55      	ldr	r3, [pc, #340]	@ (800885c <mpu_run_6500_self_test+0x514>)
 8008708:	2200      	movs	r2, #0
 800870a:	f7fd fd2d 	bl	8006168 <__aeabi_dcmpgt>
 800870e:	b158      	cbz	r0, 8008728 <mpu_run_6500_self_test+0x3e0>
				if(debug)
 8008710:	b13c      	cbz	r4, 8008722 <mpu_run_6500_self_test+0x3da>
					log_i("FAILED: Accel axis:%d = %ld > 500mg\n", i, bias_regular[i]);
 8008712:	4a54      	ldr	r2, [pc, #336]	@ (8008864 <mpu_run_6500_self_test+0x51c>)
 8008714:	f8cd 9000 	str.w	r9, [sp]
 8008718:	4643      	mov	r3, r8
 800871a:	2100      	movs	r1, #0
 800871c:	2004      	movs	r0, #4
 800871e:	f000 ff31 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 8008722:	fa0a f308 	lsl.w	r3, sl, r8
 8008726:	431d      	orrs	r5, r3
		for (i = 0; i < 3; i++) {
 8008728:	f108 0801 	add.w	r8, r8, #1
 800872c:	f1b8 0f03 	cmp.w	r8, #3
 8008730:	d1de      	bne.n	80086f0 <mpu_run_6500_self_test+0x3a8>
    accel_result = accel_6500_self_test(accel, accel_st, debug);
 8008732:	fa5f f885 	uxtb.w	r8, r5
    if(debug)
 8008736:	2c00      	cmp	r4, #0
 8008738:	f43f aea5 	beq.w	8008486 <mpu_run_6500_self_test+0x13e>
 800873c:	e707      	b.n	800854e <mpu_run_6500_self_test+0x206>
			ct_shift_prod[i] = 0;
 800873e:	eef0 7a47 	vmov.f32	s15, s14
			otp_value_zero = 1;
 8008742:	2501      	movs	r5, #1
 8008744:	e749      	b.n	80085da <mpu_run_6500_self_test+0x292>
		if(debug) {
 8008746:	b1c4      	cbz	r4, 800877a <mpu_run_6500_self_test+0x432>
			log_i("ACCEL:CRITERIA B\r\n");
 8008748:	4a47      	ldr	r2, [pc, #284]	@ (8008868 <mpu_run_6500_self_test+0x520>)
 800874a:	2100      	movs	r1, #0
 800874c:	2004      	movs	r0, #4
 800874e:	f000 ff19 	bl	8009584 <_MLPrintLog>
			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
 8008752:	4b46      	ldr	r3, [pc, #280]	@ (800886c <mpu_run_6500_self_test+0x524>)
 8008754:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8008758:	e9cd 2300 	strd	r2, r3, [sp]
 800875c:	2100      	movs	r1, #0
 800875e:	4a44      	ldr	r2, [pc, #272]	@ (8008870 <mpu_run_6500_self_test+0x528>)
 8008760:	2004      	movs	r0, #4
 8008762:	f000 ff0f 	bl	8009584 <_MLPrintLog>
			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
 8008766:	a334      	add	r3, pc, #208	@ (adr r3, 8008838 <mpu_run_6500_self_test+0x4f0>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	2100      	movs	r1, #0
 800876e:	e9cd 2300 	strd	r2, r3, [sp]
 8008772:	2004      	movs	r0, #4
 8008774:	4a3f      	ldr	r2, [pc, #252]	@ (8008874 <mpu_run_6500_self_test+0x52c>)
 8008776:	f000 ff05 	bl	8009584 <_MLPrintLog>
			otp_value_zero = 1;
 800877a:	2500      	movs	r5, #0
 800877c:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8008878 <mpu_run_6500_self_test+0x530>
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
 8008780:	ed9f 9a3e 	vldr	s18, [pc, #248]	@ 800887c <mpu_run_6500_self_test+0x534>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
 8008784:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8008898 <mpu_run_6500_self_test+0x550>
			otp_value_zero = 1;
 8008788:	46a9      	mov	r9, r5
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
 800878a:	ab14      	add	r3, sp, #80	@ 0x50
 800878c:	f857 0029 	ldr.w	r0, [r7, r9, lsl #2]
 8008790:	f853 a029 	ldr.w	sl, [r3, r9, lsl #2]
 8008794:	ebaa 0300 	sub.w	r3, sl, r0
 8008798:	ee08 3a10 	vmov	s16, r3
 800879c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			if(debug)
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	f000 8238 	beq.w	8008c16 <mpu_run_6500_self_test+0x8ce>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
 80087a6:	ee07 0a90 	vmov	s15, r0
 80087aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087ae:	ee17 0a90 	vmov	r0, s15
 80087b2:	f7fd f9f1 	bl	8005b98 <__aeabi_f2d>
 80087b6:	ee07 aa90 	vmov	s15, sl
 80087ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c2:	ee17 0a90 	vmov	r0, s15
 80087c6:	f7fd f9e7 	bl	8005b98 <__aeabi_f2d>
 80087ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ce:	ee18 0a10 	vmov	r0, s16
 80087d2:	f7fd f9e1 	bl	8005b98 <__aeabi_f2d>
 80087d6:	4642      	mov	r2, r8
 80087d8:	e9cd 0100 	strd	r0, r1, [sp]
 80087dc:	2100      	movs	r1, #0
 80087de:	2004      	movs	r0, #4
 80087e0:	f000 fed0 	bl	8009584 <_MLPrintLog>
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
 80087e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	f140 8220 	bpl.w	8008c30 <mpu_run_6500_self_test+0x8e8>
					log_i("Accel FAIL axis:%d <= 225mg or >= 675mg\n", i);
 80087f0:	4a23      	ldr	r2, [pc, #140]	@ (8008880 <mpu_run_6500_self_test+0x538>)
 80087f2:	464b      	mov	r3, r9
 80087f4:	2100      	movs	r1, #0
 80087f6:	2004      	movs	r0, #4
 80087f8:	f000 fec4 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 80087fc:	2301      	movs	r3, #1
 80087fe:	fa03 f309 	lsl.w	r3, r3, r9
 8008802:	431d      	orrs	r5, r3
		for (i = 0; i < 3; i++) {
 8008804:	f109 0901 	add.w	r9, r9, #1
 8008808:	f1b9 0f03 	cmp.w	r9, #3
 800880c:	d1bd      	bne.n	800878a <mpu_run_6500_self_test+0x442>
 800880e:	e760      	b.n	80086d2 <mpu_run_6500_self_test+0x38a>
    		log_i("Reading OTP Register Error.\n");
 8008810:	4a1c      	ldr	r2, [pc, #112]	@ (8008884 <mpu_run_6500_self_test+0x53c>)
 8008812:	2100      	movs	r1, #0
 8008814:	2004      	movs	r0, #4
 8008816:	f000 feb5 	bl	8009584 <_MLPrintLog>
        return 0x07;
 800881a:	2507      	movs	r5, #7
    gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
 800881c:	462f      	mov	r7, r5
    	log_i("Gyro Self Test Results: %d\n", gyro_result);
 800881e:	4a1a      	ldr	r2, [pc, #104]	@ (8008888 <mpu_run_6500_self_test+0x540>)
 8008820:	462b      	mov	r3, r5
 8008822:	2100      	movs	r1, #0
 8008824:	2004      	movs	r0, #4
 8008826:	f000 fead 	bl	8009584 <_MLPrintLog>
 800882a:	e63b      	b.n	80084a4 <mpu_run_6500_self_test+0x15c>
 800882c:	f3af 8000 	nop.w
 8008830:	00000000 	.word	0x00000000
 8008834:	3fe00000 	.word	0x3fe00000
 8008838:	a0000000 	.word	0xa0000000
 800883c:	40e59999 	.word	0x40e59999
 8008840:	08013a27 	.word	0x08013a27
 8008844:	00000000 	.word	0x00000000
 8008848:	47800000 	.word	0x47800000
 800884c:	38800000 	.word	0x38800000
 8008850:	08013a3d 	.word	0x08013a3d
 8008854:	08013a96 	.word	0x08013a96
 8008858:	08013ab5 	.word	0x08013ab5
 800885c:	40e00000 	.word	0x40e00000
 8008860:	08013b4e 	.word	0x08013b4e
 8008864:	08013b76 	.word	0x08013b76
 8008868:	08013acb 	.word	0x08013acb
 800886c:	40cccccc 	.word	0x40cccccc
 8008870:	08013ade 	.word	0x08013ade
 8008874:	08013aee 	.word	0x08013aee
 8008878:	46666666 	.word	0x46666666
 800887c:	472ccccd 	.word	0x472ccccd
 8008880:	08013b25 	.word	0x08013b25
 8008884:	08013a0a 	.word	0x08013a0a
 8008888:	08013c88 	.word	0x08013c88
 800888c:	08013cd2 	.word	0x08013cd2
 8008890:	08013a4f 	.word	0x08013a4f
 8008894:	08013a83 	.word	0x08013a83
 8008898:	08013afe 	.word	0x08013afe
    if(debug)
 800889c:	b15c      	cbz	r4, 80088b6 <mpu_run_6500_self_test+0x56e>
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);
 800889e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	f89d 3041 	ldrb.w	r3, [sp, #65]	@ 0x41
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	4ac3      	ldr	r2, [pc, #780]	@ (8008bb8 <mpu_run_6500_self_test+0x870>)
 80088ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80088b0:	2004      	movs	r0, #4
 80088b2:	f000 fe67 	bl	8009584 <_MLPrintLog>
	for (i = 0; i < 3; i++) {
 80088b6:	af17      	add	r7, sp, #92	@ 0x5c
			ct_shift_prod[i] = 0;
 80088b8:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8008bbc <mpu_run_6500_self_test+0x874>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
 80088bc:	48c0      	ldr	r0, [pc, #768]	@ (8008bc0 <mpu_run_6500_self_test+0x878>)
			ct_shift_prod[i] *= 65536.f;
 80088be:	ed9f 6ac1 	vldr	s12, [pc, #772]	@ 8008bc4 <mpu_run_6500_self_test+0x87c>
			ct_shift_prod[i] /= test.gyro_sens;
 80088c2:	eddf 5ac1 	vldr	s11, [pc, #772]	@ 8008bc8 <mpu_run_6500_self_test+0x880>
 80088c6:	ab10      	add	r3, sp, #64	@ 0x40
    accel_result = accel_6500_self_test(accel, accel_st, debug);
 80088c8:	4639      	mov	r1, r7
 80088ca:	f04f 0a03 	mov.w	sl, #3
 80088ce:	2500      	movs	r5, #0
		if (regs[i] != 0) {
 80088d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	f000 80b5 	beq.w	8008a44 <mpu_run_6500_self_test+0x6fc>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
 80088da:	3a01      	subs	r2, #1
 80088dc:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80088e0:	ee07 2a90 	vmov	s15, r2
 80088e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
			ct_shift_prod[i] *= 65536.f;
 80088e8:	ee67 7a86 	vmul.f32	s15, s15, s12
			ct_shift_prod[i] /= test.gyro_sens;
 80088ec:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	for (i = 0; i < 3; i++) {
 80088f0:	f1ba 0a01 	subs.w	sl, sl, #1
 80088f4:	eca1 7a01 	vstmia	r1!, {s14}
 80088f8:	d1ea      	bne.n	80088d0 <mpu_run_6500_self_test+0x588>
	if(otp_value_zero == 0) {
 80088fa:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80088fe:	2d00      	cmp	r5, #0
 8008900:	f040 80a4 	bne.w	8008a4c <mpu_run_6500_self_test+0x704>
		if(debug)
 8008904:	b124      	cbz	r4, 8008910 <mpu_run_6500_self_test+0x5c8>
			log_i("GYRO:CRITERIA A\n");
 8008906:	4ab1      	ldr	r2, [pc, #708]	@ (8008bcc <mpu_run_6500_self_test+0x884>)
 8008908:	4629      	mov	r1, r5
 800890a:	2004      	movs	r0, #4
 800890c:	f000 fe3a 	bl	8009584 <_MLPrintLog>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
 8008910:	ed9f 9ba7 	vldr	d9, [pc, #668]	@ 8008bb0 <mpu_run_6500_self_test+0x868>
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
 8008914:	f8df b2e4 	ldr.w	fp, [pc, #740]	@ 8008bfc <mpu_run_6500_self_test+0x8b4>
			otp_value_zero = 1;
 8008918:	f04f 0a00 	mov.w	sl, #0
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
 800891c:	9b06      	ldr	r3, [sp, #24]
 800891e:	f859 002a 	ldr.w	r0, [r9, sl, lsl #2]
 8008922:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008926:	ed93 8a00 	vldr	s16, [r3]
 800892a:	ee18 3a10 	vmov	r3, s16
 800892e:	1ac3      	subs	r3, r0, r3
 8008930:	ee08 3a90 	vmov	s17, r3
 8008934:	eef8 8ae8 	vcvt.f32.s32	s17, s17
			if(debug) {
 8008938:	b334      	cbz	r4, 8008988 <mpu_run_6500_self_test+0x640>
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
 800893a:	ee07 0a90 	vmov	s15, r0
 800893e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008942:	ee17 0a90 	vmov	r0, s15
 8008946:	f7fd f927 	bl	8005b98 <__aeabi_f2d>
 800894a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 800894e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008952:	ee17 0a90 	vmov	r0, s15
 8008956:	f7fd f91f 	bl	8005b98 <__aeabi_f2d>
 800895a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800895e:	ee18 0a90 	vmov	r0, s17
 8008962:	f7fd f919 	bl	8005b98 <__aeabi_f2d>
 8008966:	4a9a      	ldr	r2, [pc, #616]	@ (8008bd0 <mpu_run_6500_self_test+0x888>)
 8008968:	e9cd 0100 	strd	r0, r1, [sp]
 800896c:	2100      	movs	r1, #0
 800896e:	2004      	movs	r0, #4
 8008970:	f000 fe08 	bl	8009584 <_MLPrintLog>
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
 8008974:	6838      	ldr	r0, [r7, #0]
 8008976:	f7fd f90f 	bl	8005b98 <__aeabi_f2d>
 800897a:	465a      	mov	r2, fp
 800897c:	e9cd 0100 	strd	r0, r1, [sp]
 8008980:	2100      	movs	r1, #0
 8008982:	2004      	movs	r0, #4
 8008984:	f000 fdfe 	bl	8009584 <_MLPrintLog>
			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i];
 8008988:	ecf7 7a01 	vldmia	r7!, {s15}
 800898c:	ee88 8aa7 	vdiv.f32	s16, s17, s15
			if(debug)
 8008990:	b164      	cbz	r4, 80089ac <mpu_run_6500_self_test+0x664>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
 8008992:	ee18 0a10 	vmov	r0, s16
 8008996:	ed8d 9b02 	vstr	d9, [sp, #8]
 800899a:	f7fd f8fd 	bl	8005b98 <__aeabi_f2d>
 800899e:	4a8d      	ldr	r2, [pc, #564]	@ (8008bd4 <mpu_run_6500_self_test+0x88c>)
 80089a0:	e9cd 0100 	strd	r0, r1, [sp]
 80089a4:	2100      	movs	r1, #0
 80089a6:	2004      	movs	r0, #4
 80089a8:	f000 fdec 	bl	8009584 <_MLPrintLog>
			if (fabs(st_shift_ratio[i]) < test.max_gyro_var) {
 80089ac:	eeb0 8ac8 	vabs.f32	s16, s16
 80089b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80089b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d50a      	bpl.n	80089d4 <mpu_run_6500_self_test+0x68c>
				if(debug)
 80089be:	b12c      	cbz	r4, 80089cc <mpu_run_6500_self_test+0x684>
					log_i("Gyro Fail Axis = %d\n", i);
 80089c0:	4a85      	ldr	r2, [pc, #532]	@ (8008bd8 <mpu_run_6500_self_test+0x890>)
 80089c2:	4653      	mov	r3, sl
 80089c4:	2100      	movs	r1, #0
 80089c6:	2004      	movs	r0, #4
 80089c8:	f000 fddc 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 80089cc:	2201      	movs	r2, #1
 80089ce:	fa02 f20a 	lsl.w	r2, r2, sl
 80089d2:	4315      	orrs	r5, r2
		for (i = 0; i < 3; i++) {
 80089d4:	f10a 0a01 	add.w	sl, sl, #1
 80089d8:	f1ba 0f03 	cmp.w	sl, #3
 80089dc:	d19e      	bne.n	800891c <mpu_run_6500_self_test+0x5d4>
	if(result == 0) {
 80089de:	bb65      	cbnz	r5, 8008a3a <mpu_run_6500_self_test+0x6f2>
		if(debug)
 80089e0:	b144      	cbz	r4, 80089f4 <mpu_run_6500_self_test+0x6ac>
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
 80089e2:	4b7e      	ldr	r3, [pc, #504]	@ (8008bdc <mpu_run_6500_self_test+0x894>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	e9cd 2300 	strd	r2, r3, [sp]
 80089ea:	4629      	mov	r1, r5
 80089ec:	4a7c      	ldr	r2, [pc, #496]	@ (8008be0 <mpu_run_6500_self_test+0x898>)
 80089ee:	2004      	movs	r0, #4
 80089f0:	f000 fdc8 	bl	8009584 <_MLPrintLog>
			otp_value_zero = 1;
 80089f4:	2700      	movs	r7, #0
				result |= 1 << i;	//Error condition
 80089f6:	f04f 0a01 	mov.w	sl, #1
			if(fabs(bias_regular[i]) > gyro_offset_max) {
 80089fa:	9b06      	ldr	r3, [sp, #24]
 80089fc:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
 8008a00:	4648      	mov	r0, r9
 8008a02:	f7fd f8b7 	bl	8005b74 <__aeabi_i2d>
 8008a06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a12:	4b72      	ldr	r3, [pc, #456]	@ (8008bdc <mpu_run_6500_self_test+0x894>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7fd fba7 	bl	8006168 <__aeabi_dcmpgt>
 8008a1a:	b158      	cbz	r0, 8008a34 <mpu_run_6500_self_test+0x6ec>
				if(debug)
 8008a1c:	b13c      	cbz	r4, 8008a2e <mpu_run_6500_self_test+0x6e6>
					log_i("FAILED: Gyro axis:%d = %ld > 20dps\n", i, bias_regular[i]);
 8008a1e:	4a71      	ldr	r2, [pc, #452]	@ (8008be4 <mpu_run_6500_self_test+0x89c>)
 8008a20:	f8cd 9000 	str.w	r9, [sp]
 8008a24:	463b      	mov	r3, r7
 8008a26:	2100      	movs	r1, #0
 8008a28:	2004      	movs	r0, #4
 8008a2a:	f000 fdab 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 8008a2e:	fa0a f307 	lsl.w	r3, sl, r7
 8008a32:	431d      	orrs	r5, r3
		for (i = 0; i < 3; i++) {
 8008a34:	3701      	adds	r7, #1
 8008a36:	2f03      	cmp	r7, #3
 8008a38:	d1df      	bne.n	80089fa <mpu_run_6500_self_test+0x6b2>
    gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
 8008a3a:	b2ef      	uxtb	r7, r5
    if(debug)
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	f43f ad31 	beq.w	80084a4 <mpu_run_6500_self_test+0x15c>
 8008a42:	e6ec      	b.n	800881e <mpu_run_6500_self_test+0x4d6>
			ct_shift_prod[i] = 0;
 8008a44:	eeb0 7a66 	vmov.f32	s14, s13
			otp_value_zero = 1;
 8008a48:	2501      	movs	r5, #1
 8008a4a:	e751      	b.n	80088f0 <mpu_run_6500_self_test+0x5a8>
		if(debug) {
 8008a4c:	b16c      	cbz	r4, 8008a6a <mpu_run_6500_self_test+0x722>
			log_i("GYRO:CRITERIA B\r\n");
 8008a4e:	4a66      	ldr	r2, [pc, #408]	@ (8008be8 <mpu_run_6500_self_test+0x8a0>)
 8008a50:	4651      	mov	r1, sl
 8008a52:	2004      	movs	r0, #4
 8008a54:	f000 fd96 	bl	8009584 <_MLPrintLog>
			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
 8008a58:	4b64      	ldr	r3, [pc, #400]	@ (8008bec <mpu_run_6500_self_test+0x8a4>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	e9cd 2300 	strd	r2, r3, [sp]
 8008a60:	4651      	mov	r1, sl
 8008a62:	4a63      	ldr	r2, [pc, #396]	@ (8008bf0 <mpu_run_6500_self_test+0x8a8>)
 8008a64:	2004      	movs	r0, #4
 8008a66:	f000 fd8d 	bl	8009584 <_MLPrintLog>
			otp_value_zero = 1;
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	eddf 8a61 	vldr	s17, [pc, #388]	@ 8008bf4 <mpu_run_6500_self_test+0x8ac>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
 8008a70:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8008c00 <mpu_run_6500_self_test+0x8b8>
			otp_value_zero = 1;
 8008a74:	46ab      	mov	fp, r5
				result |= 1 << i;	//Error condition
 8008a76:	2701      	movs	r7, #1
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
 8008a78:	eb09 038b 	add.w	r3, r9, fp, lsl #2
 8008a7c:	ed93 9a00 	vldr	s18, [r3]
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a86:	ee19 3a10 	vmov	r3, s18
 8008a8a:	1a1b      	subs	r3, r3, r0
 8008a8c:	ee08 3a10 	vmov	s16, r3
 8008a90:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			if(debug)
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	f000 80b7 	beq.w	8008c08 <mpu_run_6500_self_test+0x8c0>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
 8008a9a:	ee07 0a90 	vmov	s15, r0
 8008a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aa2:	ee17 0a90 	vmov	r0, s15
 8008aa6:	f7fd f877 	bl	8005b98 <__aeabi_f2d>
 8008aaa:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 8008aae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab2:	ee17 0a90 	vmov	r0, s15
 8008ab6:	f7fd f86f 	bl	8005b98 <__aeabi_f2d>
 8008aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008abe:	ee18 0a10 	vmov	r0, s16
 8008ac2:	f7fd f869 	bl	8005b98 <__aeabi_f2d>
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8008acc:	2100      	movs	r1, #0
 8008ace:	2004      	movs	r0, #4
 8008ad0:	f000 fd58 	bl	8009584 <_MLPrintLog>
			if(st_shift_cust[i] < gyro_st_al_max) {
 8008ad4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008adc:	d508      	bpl.n	8008af0 <mpu_run_6500_self_test+0x7a8>
					log_i("GYRO FAIL axis:%d greater than 60dps\n", i);
 8008ade:	4a46      	ldr	r2, [pc, #280]	@ (8008bf8 <mpu_run_6500_self_test+0x8b0>)
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	2004      	movs	r0, #4
 8008ae6:	f000 fd4d 	bl	8009584 <_MLPrintLog>
				result |= 1 << i;	//Error condition
 8008aea:	fa07 f30b 	lsl.w	r3, r7, fp
 8008aee:	431d      	orrs	r5, r3
		for (i = 0; i < 3; i++) {
 8008af0:	f10b 0b01 	add.w	fp, fp, #1
 8008af4:	f1bb 0f03 	cmp.w	fp, #3
 8008af8:	d1be      	bne.n	8008a78 <mpu_run_6500_self_test+0x730>
 8008afa:	e770      	b.n	80089de <mpu_run_6500_self_test+0x696>
    tmp[0] = AKM_MODE_SELF_TEST;
 8008afc:	2318      	movs	r3, #24
 8008afe:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
 8008b02:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
 8008b06:	ab17      	add	r3, sp, #92	@ 0x5c
 8008b08:	2201      	movs	r2, #1
 8008b0a:	210a      	movs	r1, #10
 8008b0c:	f003 fa98 	bl	800c040 <MPU_Write_Len>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f47f acee 	bne.w	80084f2 <mpu_run_6500_self_test+0x1aa>
 8008b16:	270b      	movs	r7, #11
        delay_ms(10);
 8008b18:	200a      	movs	r0, #10
 8008b1a:	f001 ff0b 	bl	800a934 <HAL_Delay>
        if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 1, tmp))
 8008b1e:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
 8008b22:	ab17      	add	r3, sp, #92	@ 0x5c
 8008b24:	2201      	movs	r2, #1
 8008b26:	2102      	movs	r1, #2
 8008b28:	f003 fa92 	bl	800c050 <MPU_Read_Len>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f47f ace0 	bne.w	80084f2 <mpu_run_6500_self_test+0x1aa>
        if (tmp[0] & AKM_DATA_READY)
 8008b32:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 8008b36:	f013 0301 	ands.w	r3, r3, #1
 8008b3a:	d12d      	bne.n	8008b98 <mpu_run_6500_self_test+0x850>
    } while (tries--);
 8008b3c:	3f01      	subs	r7, #1
 8008b3e:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 8008b42:	d1e9      	bne.n	8008b18 <mpu_run_6500_self_test+0x7d0>
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_HXL, 6, tmp))
 8008b44:	f898 002a 	ldrb.w	r0, [r8, #42]	@ 0x2a
    if (!(tmp[0] & AKM_DATA_READY))
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f43f acd2 	beq.w	80084f2 <mpu_run_6500_self_test+0x1aa>
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_HXL, 6, tmp))
 8008b4e:	ab17      	add	r3, sp, #92	@ 0x5c
 8008b50:	2206      	movs	r2, #6
 8008b52:	2103      	movs	r1, #3
 8008b54:	f003 fa7c 	bl	800c050 <MPU_Read_Len>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f47f acca 	bne.w	80084f2 <mpu_run_6500_self_test+0x1aa>
    if ((data > 200) || (data < -200))  
 8008b5e:	f8bd 705c 	ldrh.w	r7, [sp, #92]	@ 0x5c
    if ((data > 200) || (data < -200))  
 8008b62:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
    if ((data > 200) || (data < -200))  
 8008b66:	37c8      	adds	r7, #200	@ 0xc8
 8008b68:	b2bf      	uxth	r7, r7
    if ((data > 200) || (data < -200))  
 8008b6a:	33c8      	adds	r3, #200	@ 0xc8
    if ((data > 200) || (data < -200))  
 8008b6c:	f5b7 7fc8 	cmp.w	r7, #400	@ 0x190
    if ((data > 200) || (data < -200))  
 8008b70:	b29b      	uxth	r3, r3
    if ((data > 200) || (data < -200))  
 8008b72:	bf8c      	ite	hi
 8008b74:	2701      	movhi	r7, #1
 8008b76:	2700      	movls	r7, #0
    if ((data > 200) || (data < -200))  
 8008b78:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
    if ((data > -800) || (data < -3200))  
 8008b7c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8008b80:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8008b84:	b29b      	uxth	r3, r3
        result |= 0x02;
 8008b86:	bf88      	it	hi
 8008b88:	f047 0702 	orrhi.w	r7, r7, #2
    if ((data > -800) || (data < -3200))  
 8008b8c:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
        result |= 0x04;
 8008b90:	bf88      	it	hi
 8008b92:	f047 0704 	orrhi.w	r7, r7, #4
 8008b96:	e4ad      	b.n	80084f4 <mpu_run_6500_self_test+0x1ac>
 8008b98:	461f      	mov	r7, r3
 8008b9a:	e7d3      	b.n	8008b44 <mpu_run_6500_self_test+0x7fc>
        return 0x07;
 8008b9c:	2707      	movs	r7, #7
 8008b9e:	e4c0      	b.n	8008522 <mpu_run_6500_self_test+0x1da>
    if (!compass_result)
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	f47f ac13 	bne.w	80083cc <mpu_run_6500_self_test+0x84>
        result |= 0x04;
 8008ba6:	f045 0504 	orr.w	r5, r5, #4
	if(debug)
 8008baa:	e40f      	b.n	80083cc <mpu_run_6500_self_test+0x84>
 8008bac:	f3af 8000 	nop.w
 8008bb0:	00000000 	.word	0x00000000
 8008bb4:	3fe00000 	.word	0x3fe00000
 8008bb8:	08013bb8 	.word	0x08013bb8
 8008bbc:	00000000 	.word	0x00000000
 8008bc0:	08013cd2 	.word	0x08013cd2
 8008bc4:	47800000 	.word	0x47800000
 8008bc8:	43030000 	.word	0x43030000
 8008bcc:	08013bce 	.word	0x08013bce
 8008bd0:	08013a4f 	.word	0x08013a4f
 8008bd4:	08013a96 	.word	0x08013a96
 8008bd8:	08013bdf 	.word	0x08013bdf
 8008bdc:	41340000 	.word	0x41340000
 8008be0:	08013c3d 	.word	0x08013c3d
 8008be4:	08013c64 	.word	0x08013c64
 8008be8:	08013bf4 	.word	0x08013bf4
 8008bec:	414e0000 	.word	0x414e0000
 8008bf0:	08013c06 	.word	0x08013c06
 8008bf4:	4a700000 	.word	0x4a700000
 8008bf8:	08013c17 	.word	0x08013c17
 8008bfc:	08013a83 	.word	0x08013a83
 8008c00:	08013afe 	.word	0x08013afe
 8008c04:	472ccccd 	.word	0x472ccccd
			if(st_shift_cust[i] < gyro_st_al_max) {
 8008c08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	f53f af6b 	bmi.w	8008aea <mpu_run_6500_self_test+0x7a2>
 8008c14:	e76c      	b.n	8008af0 <mpu_run_6500_self_test+0x7a8>
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
 8008c16:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1e:	f53f aded 	bmi.w	80087fc <mpu_run_6500_self_test+0x4b4>
 8008c22:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8008c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2a:	f73f ade7 	bgt.w	80087fc <mpu_run_6500_self_test+0x4b4>
 8008c2e:	e5e9      	b.n	8008804 <mpu_run_6500_self_test+0x4bc>
 8008c30:	ed5f 7a0c 	vldr	s15, [pc, #-48]	@ 8008c04 <mpu_run_6500_self_test+0x8bc>
 8008c34:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c3c:	f73f add8 	bgt.w	80087f0 <mpu_run_6500_self_test+0x4a8>
 8008c40:	e5e0      	b.n	8008804 <mpu_run_6500_self_test+0x4bc>
 8008c42:	bf00      	nop

08008c44 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
 8008c44:	4b02      	ldr	r3, [pc, #8]	@ (8008c50 <mpu_get_compass_fsr+0xc>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4770      	bx	lr
 8008c50:	20000014 	.word	0x20000014

08008c54 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8008c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8008c56:	4a08      	ldr	r2, [pc, #32]	@ (8008c78 <dmp_enable_gyro_cal.part.0+0x24>)
 8008c58:	6810      	ldr	r0, [r2, #0]
 8008c5a:	6851      	ldr	r1, [r2, #4]
 8008c5c:	7a12      	ldrb	r2, [r2, #8]
 8008c5e:	ab01      	add	r3, sp, #4
 8008c60:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008c62:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8008c64:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008c66:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8008c6a:	aa01      	add	r2, sp, #4
 8008c6c:	f7ff fa82 	bl	8008174 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8008c70:	b005      	add	sp, #20
 8008c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c76:	bf00      	nop
 8008c78:	08013f3c 	.word	0x08013f3c

08008c7c <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8008c7c:	4903      	ldr	r1, [pc, #12]	@ (8008c8c <dmp_load_motion_driver_firmware+0x10>)
 8008c7e:	23c8      	movs	r3, #200	@ 0xc8
 8008c80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008c84:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8008c88:	f7ff bad0 	b.w	800822c <mpu_load_firmware>
 8008c8c:	08013f6d 	.word	0x08013f6d

08008c90 <dmp_set_orientation>:
{
 8008c90:	b510      	push	{r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8008c92:	4b4a      	ldr	r3, [pc, #296]	@ (8008dbc <dmp_set_orientation+0x12c>)
{
 8008c94:	b086      	sub	sp, #24
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8008c96:	881a      	ldrh	r2, [r3, #0]
 8008c98:	789b      	ldrb	r3, [r3, #2]
 8008c9a:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8008c9e:	4b48      	ldr	r3, [pc, #288]	@ (8008dc0 <dmp_set_orientation+0x130>)
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8008ca0:	f8ad 2008 	strh.w	r2, [sp, #8]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	789b      	ldrb	r3, [r3, #2]
 8008ca8:	f88d 300e 	strb.w	r3, [sp, #14]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8008cac:	4b45      	ldr	r3, [pc, #276]	@ (8008dc4 <dmp_set_orientation+0x134>)
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8008cae:	f8ad 200c 	strh.w	r2, [sp, #12]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8008cb2:	881a      	ldrh	r2, [r3, #0]
 8008cb4:	789b      	ldrb	r3, [r3, #2]
 8008cb6:	f88d 3012 	strb.w	r3, [sp, #18]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8008cba:	4b43      	ldr	r3, [pc, #268]	@ (8008dc8 <dmp_set_orientation+0x138>)
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8008cbc:	f8ad 2010 	strh.w	r2, [sp, #16]
    gyro_regs[0] = gyro_axes[orient & 3];
 8008cc0:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8008cc4:	881a      	ldrh	r2, [r3, #0]
 8008cc6:	789b      	ldrb	r3, [r3, #2]
 8008cc8:	f88d 3016 	strb.w	r3, [sp, #22]
    gyro_regs[0] = gyro_axes[orient & 3];
 8008ccc:	f101 0318 	add.w	r3, r1, #24
 8008cd0:	eb0d 0103 	add.w	r1, sp, r3
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8008cd4:	f8ad 2014 	strh.w	r2, [sp, #20]
    gyro_regs[0] = gyro_axes[orient & 3];
 8008cd8:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8008cdc:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8008ce0:	f3c0 02c1 	ubfx	r2, r0, #3, #2
 8008ce4:	f102 0318 	add.w	r3, r2, #24
 8008ce8:	eb0d 0203 	add.w	r2, sp, r3
    accel_regs[0] = accel_axes[orient & 3];
 8008cec:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8008cf0:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8008cf4:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8008cf8:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8008cfc:	3318      	adds	r3, #24
 8008cfe:	446b      	add	r3, sp
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8008d00:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    accel_regs[0] = accel_axes[orient & 3];
 8008d04:	f88d 1004 	strb.w	r1, [sp, #4]
{
 8008d08:	4604      	mov	r4, r0
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8008d0a:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8008d0e:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8008d12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8008d16:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8008d1a:	2103      	movs	r1, #3
 8008d1c:	466a      	mov	r2, sp
 8008d1e:	f240 4026 	movw	r0, #1062	@ 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8008d22:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8008d26:	f7ff fa25 	bl	8008174 <mpu_write_mem>
 8008d2a:	b118      	cbz	r0, 8008d34 <dmp_set_orientation+0xa4>
        return -1;
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d30:	b006      	add	sp, #24
 8008d32:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8008d34:	aa01      	add	r2, sp, #4
 8008d36:	2103      	movs	r1, #3
 8008d38:	f240 402a 	movw	r0, #1066	@ 0x42a
 8008d3c:	f7ff fa1a 	bl	8008174 <mpu_write_mem>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1f3      	bne.n	8008d2c <dmp_set_orientation+0x9c>
    memcpy(gyro_regs, gyro_sign, 3);
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	f8ad 3000 	strh.w	r3, [sp]
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8008d50:	9b05      	ldr	r3, [sp, #20]
 8008d52:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (orient & 4) {
 8008d56:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8008d58:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008d5c:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8008d60:	bf41      	itttt	mi
 8008d62:	2337      	movmi	r3, #55	@ 0x37
 8008d64:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8008d68:	2327      	movmi	r3, #39	@ 0x27
 8008d6a:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8008d6e:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8008d70:	bf41      	itttt	mi
 8008d72:	2357      	movmi	r3, #87	@ 0x57
 8008d74:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8008d78:	2347      	movmi	r3, #71	@ 0x47
 8008d7a:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8008d7e:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8008d80:	bf44      	itt	mi
 8008d82:	2377      	movmi	r3, #119	@ 0x77
 8008d84:	f88d 3002 	strbmi.w	r3, [sp, #2]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8008d88:	466a      	mov	r2, sp
        accel_regs[2] |= 1;
 8008d8a:	bf48      	it	mi
 8008d8c:	2367      	movmi	r3, #103	@ 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8008d8e:	f04f 0103 	mov.w	r1, #3
 8008d92:	f44f 6088 	mov.w	r0, #1088	@ 0x440
        accel_regs[2] |= 1;
 8008d96:	bf48      	it	mi
 8008d98:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8008d9c:	f7ff f9ea 	bl	8008174 <mpu_write_mem>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1c3      	bne.n	8008d2c <dmp_set_orientation+0x9c>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8008da4:	aa01      	add	r2, sp, #4
 8008da6:	2103      	movs	r1, #3
 8008da8:	f240 4031 	movw	r0, #1073	@ 0x431
 8008dac:	f7ff f9e2 	bl	8008174 <mpu_write_mem>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1bb      	bne.n	8008d2c <dmp_set_orientation+0x9c>
    dmp.orient = orient;
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <dmp_set_orientation+0x13c>)
 8008db6:	811c      	strh	r4, [r3, #8]
    return 0;
 8008db8:	e7ba      	b.n	8008d30 <dmp_set_orientation+0xa0>
 8008dba:	bf00      	nop
 8008dbc:	08013f46 	.word	0x08013f46
 8008dc0:	08013f4a 	.word	0x08013f4a
 8008dc4:	08013f4e 	.word	0x08013f4e
 8008dc8:	08013f52 	.word	0x08013f52
 8008dcc:	200012e0 	.word	0x200012e0

08008dd0 <dmp_set_gyro_bias>:
    gyro_bias_body[0] = bias[dmp.orient & 3];
 8008dd0:	4b23      	ldr	r3, [pc, #140]	@ (8008e60 <dmp_set_gyro_bias+0x90>)
{
 8008dd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    gyro_bias_body[0] = bias[dmp.orient & 3];
 8008dd4:	891a      	ldrh	r2, [r3, #8]
 8008dd6:	f002 0303 	and.w	r3, r2, #3
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8008dda:	f3c2 01c1 	ubfx	r1, r2, #3, #2
    gyro_bias_body[0] = bias[dmp.orient & 3];
 8008dde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8008de2:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    if (dmp.orient & 4)
 8008de6:	0754      	lsls	r4, r2, #29
        gyro_bias_body[0] *= -1;
 8008de8:	bf48      	it	mi
 8008dea:	425b      	negmi	r3, r3
    if (dmp.orient & 0x20)
 8008dec:	0691      	lsls	r1, r2, #26
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8008dee:	f3c2 1181 	ubfx	r1, r2, #6, #2
        gyro_bias_body[1] *= -1;
 8008df2:	bf48      	it	mi
 8008df4:	426d      	negmi	r5, r5
    if (dmp.orient & 0x100)
 8008df6:	05d2      	lsls	r2, r2, #23
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8008df8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e64 <dmp_set_gyro_bias+0x94>)
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8008dfa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8008dfe:	fb85 5002 	smull	r5, r0, r5, r2
        gyro_bias_body[2] *= -1;
 8008e02:	bf48      	it	mi
 8008e04:	4249      	negmi	r1, r1
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8008e06:	0fad      	lsrs	r5, r5, #30
 8008e08:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8008e0c:	fb81 1002 	smull	r1, r0, r1, r2
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8008e10:	fb83 3202 	smull	r3, r2, r3, r2
 8008e14:	0f9b      	lsrs	r3, r3, #30
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8008e16:	0f8c      	lsrs	r4, r1, #30
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8008e18:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8008e1c:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8008e20:	ba1b      	rev	r3, r3
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8008e22:	aa01      	add	r2, sp, #4
 8008e24:	2104      	movs	r1, #4
 8008e26:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8008e2a:	9301      	str	r3, [sp, #4]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8008e2c:	f7ff f9a2 	bl	8008174 <mpu_write_mem>
 8008e30:	b118      	cbz	r0, 8008e3a <dmp_set_gyro_bias+0x6a>
        return -1;
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e36:	b003      	add	sp, #12
 8008e38:	bd30      	pop	{r4, r5, pc}
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8008e3a:	ba2d      	rev	r5, r5
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8008e3c:	aa01      	add	r2, sp, #4
 8008e3e:	2104      	movs	r1, #4
 8008e40:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8008e44:	9501      	str	r5, [sp, #4]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8008e46:	f7ff f995 	bl	8008174 <mpu_write_mem>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1f1      	bne.n	8008e32 <dmp_set_gyro_bias+0x62>
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8008e4e:	ba24      	rev	r4, r4
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8008e50:	aa01      	add	r2, sp, #4
 8008e52:	2104      	movs	r1, #4
 8008e54:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8008e58:	9401      	str	r4, [sp, #4]
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8008e5a:	f7ff f98b 	bl	8008174 <mpu_write_mem>
 8008e5e:	e7ea      	b.n	8008e36 <dmp_set_gyro_bias+0x66>
 8008e60:	200012e0 	.word	0x200012e0
 8008e64:	02cae309 	.word	0x02cae309

08008e68 <dmp_set_accel_bias>:
{
 8008e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008e6a:	4606      	mov	r6, r0
    mpu_get_accel_sens(&accel_sens);
 8008e6c:	f10d 0002 	add.w	r0, sp, #2
 8008e70:	f7fe fdca 	bl	8007a08 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8008e74:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8008e78:	03e4      	lsls	r4, r4, #15
    __NOP();
 8008e7a:	bf00      	nop
    accel_bias_body[0] = bias[dmp.orient & 3];
 8008e7c:	4b20      	ldr	r3, [pc, #128]	@ (8008f00 <dmp_set_accel_bias+0x98>)
 8008e7e:	891d      	ldrh	r5, [r3, #8]
 8008e80:	f005 0303 	and.w	r3, r5, #3
    if (dmp.orient & 4)
 8008e84:	076a      	lsls	r2, r5, #29
    accel_bias_body[0] = bias[dmp.orient & 3];
 8008e86:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8008e8a:	f3c5 03c1 	ubfx	r3, r5, #3, #2
        accel_bias_body[0] *= -1;
 8008e8e:	bf48      	it	mi
 8008e90:	4249      	negmi	r1, r1
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8008e92:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    if (dmp.orient & 0x20)
 8008e96:	06ab      	lsls	r3, r5, #26
        accel_bias_body[1] *= -1;
 8008e98:	bf48      	it	mi
 8008e9a:	4252      	negmi	r2, r2
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8008e9c:	f3c5 1381 	ubfx	r3, r5, #6, #2
    if (dmp.orient & 0x100)
 8008ea0:	05e8      	lsls	r0, r5, #23
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8008ea2:	ea4f 75e1 	mov.w	r5, r1, asr #31
 8008ea6:	fba1 1004 	umull	r1, r0, r1, r4
 8008eaa:	fb04 0005 	mla	r0, r4, r5, r0
 8008eae:	ea4f 7191 	mov.w	r1, r1, lsr #30
 8008eb2:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
 8008eb6:	ba09      	rev	r1, r1
    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8008eb8:	9101      	str	r1, [sp, #4]
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8008eba:	ea4f 70e2 	mov.w	r0, r2, asr #31
 8008ebe:	fba2 2104 	umull	r2, r1, r2, r4
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8008ec2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8008ec6:	fb04 1100 	mla	r1, r4, r0, r1
 8008eca:	ea4f 7292 	mov.w	r2, r2, lsr #30
 8008ece:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
        accel_bias_body[2] *= -1;
 8008ed2:	bf48      	it	mi
 8008ed4:	425b      	negmi	r3, r3
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8008ed6:	ba12      	rev	r2, r2
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8008ed8:	9202      	str	r2, [sp, #8]
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8008eda:	17d9      	asrs	r1, r3, #31
 8008edc:	fba3 3204 	umull	r3, r2, r3, r4
 8008ee0:	fb04 2201 	mla	r2, r4, r1, r2
 8008ee4:	0f9b      	lsrs	r3, r3, #30
 8008ee6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8008eea:	ba1b      	rev	r3, r3
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8008eec:	aa01      	add	r2, sp, #4
 8008eee:	210c      	movs	r1, #12
 8008ef0:	f44f 7025 	mov.w	r0, #660	@ 0x294
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8008ef4:	9303      	str	r3, [sp, #12]
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8008ef6:	f7ff f93d 	bl	8008174 <mpu_write_mem>
}
 8008efa:	b004      	add	sp, #16
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	bf00      	nop
 8008f00:	200012e0 	.word	0x200012e0

08008f04 <dmp_set_fifo_rate>:
{
 8008f04:	b510      	push	{r4, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008f06:	4a15      	ldr	r2, [pc, #84]	@ (8008f5c <dmp_set_fifo_rate+0x58>)
{
 8008f08:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008f0a:	6851      	ldr	r1, [r2, #4]
 8008f0c:	6810      	ldr	r0, [r2, #0]
{
 8008f0e:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	c303      	stmia	r3!, {r0, r1}
    if (rate > DMP_SAMPLE_RATE)
 8008f14:	2cc8      	cmp	r4, #200	@ 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008f16:	6890      	ldr	r0, [r2, #8]
 8008f18:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8008f1a:	d903      	bls.n	8008f24 <dmp_set_fifo_rate+0x20>
        return -1;
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f20:	b006      	add	sp, #24
 8008f22:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8008f24:	2300      	movs	r3, #0
 8008f26:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008f2a:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8008f2c:	23c8      	movs	r3, #200	@ 0xc8
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008f2e:	2102      	movs	r1, #2
    div = DMP_SAMPLE_RATE / rate - 1;
 8008f30:	fbb3 f3f4 	udiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008f34:	f240 2016 	movw	r0, #534	@ 0x216
    div = DMP_SAMPLE_RATE / rate - 1;
 8008f38:	3b01      	subs	r3, #1
    tmp[1] = (unsigned char)(div & 0xFF);
 8008f3a:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008f3e:	f7ff f919 	bl	8008174 <mpu_write_mem>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d1ea      	bne.n	8008f1c <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8008f46:	aa03      	add	r2, sp, #12
 8008f48:	210c      	movs	r1, #12
 8008f4a:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8008f4e:	f7ff f911 	bl	8008174 <mpu_write_mem>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d1e2      	bne.n	8008f1c <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8008f56:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <dmp_set_fifo_rate+0x5c>)
 8008f58:	819c      	strh	r4, [r3, #12]
    return 0;
 8008f5a:	e7e1      	b.n	8008f20 <dmp_set_fifo_rate+0x1c>
 8008f5c:	08013f56 	.word	0x08013f56
 8008f60:	200012e0 	.word	0x200012e0

08008f64 <dmp_set_tap_thresh>:
{
 8008f64:	b510      	push	{r4, lr}
 8008f66:	ed2d 8b02 	vpush	{d8}
 8008f6a:	4604      	mov	r4, r0
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8008f6c:	0760      	lsls	r0, r4, #29
{
 8008f6e:	b082      	sub	sp, #8
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8008f70:	d017      	beq.n	8008fa2 <dmp_set_tap_thresh+0x3e>
 8008f72:	f5b1 6fc8 	cmp.w	r1, #1600	@ 0x640
 8008f76:	d814      	bhi.n	8008fa2 <dmp_set_tap_thresh+0x3e>
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8008f78:	ee07 1a90 	vmov	s15, r1
 8008f7c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80090a8 <dmp_set_tap_thresh+0x144>
 8008f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
    mpu_get_accel_fsr(&accel_fsr);
 8008f84:	f10d 0003 	add.w	r0, sp, #3
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8008f88:	ee87 8a87 	vdiv.f32	s16, s15, s14
    mpu_get_accel_fsr(&accel_fsr);
 8008f8c:	f7fe fc48 	bl	8007820 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8008f90:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d068      	beq.n	800906a <dmp_set_tap_thresh+0x106>
 8008f98:	d809      	bhi.n	8008fae <dmp_set_tap_thresh+0x4a>
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d015      	beq.n	8008fca <dmp_set_tap_thresh+0x66>
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d057      	beq.n	8009052 <dmp_set_tap_thresh+0xee>
{
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008fa6:	b002      	add	sp, #8
 8008fa8:	ecbd 8b02 	vpop	{d8}
 8008fac:	bd10      	pop	{r4, pc}
    switch (accel_fsr) {
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d1f7      	bne.n	8008fa2 <dmp_set_tap_thresh+0x3e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8008fb2:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 80090ac <dmp_set_tap_thresh+0x148>
 8008fb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fbe:	ee17 3a90 	vmov	r3, s15
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8008fc2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80090b0 <dmp_set_tap_thresh+0x14c>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8008fc6:	b29a      	uxth	r2, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8008fc8:	e00a      	b.n	8008fe0 <dmp_set_tap_thresh+0x7c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8008fca:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80090b4 <dmp_set_tap_thresh+0x150>
 8008fce:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd6:	ee17 3a90 	vmov	r3, s15
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8008fda:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80090b8 <dmp_set_tap_thresh+0x154>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8008fde:	b29a      	uxth	r2, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8008fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8008fe4:	ba52      	rev16	r2, r2
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8008fe6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8008fea:	f8ad 2004 	strh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8008fee:	ee18 3a10 	vmov	r3, s16
 8008ff2:	b29b      	uxth	r3, r3
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8008ff4:	ba5b      	rev16	r3, r3
    if (axis & TAP_X) {
 8008ff6:	07e2      	lsls	r2, r4, #31
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8008ff8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (axis & TAP_X) {
 8008ffc:	d441      	bmi.n	8009082 <dmp_set_tap_thresh+0x11e>
    if (axis & TAP_Y) {
 8008ffe:	07a3      	lsls	r3, r4, #30
 8009000:	d510      	bpl.n	8009024 <dmp_set_tap_thresh+0xc0>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8009002:	aa01      	add	r2, sp, #4
 8009004:	2102      	movs	r1, #2
 8009006:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 800900a:	f7ff f8b3 	bl	8008174 <mpu_write_mem>
 800900e:	2800      	cmp	r0, #0
 8009010:	d1c7      	bne.n	8008fa2 <dmp_set_tap_thresh+0x3e>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8009012:	f10d 0206 	add.w	r2, sp, #6
 8009016:	2102      	movs	r1, #2
 8009018:	f44f 7094 	mov.w	r0, #296	@ 0x128
 800901c:	f7ff f8aa 	bl	8008174 <mpu_write_mem>
 8009020:	2800      	cmp	r0, #0
 8009022:	d1be      	bne.n	8008fa2 <dmp_set_tap_thresh+0x3e>
    if (axis & TAP_Z) {
 8009024:	f014 0004 	ands.w	r0, r4, #4
 8009028:	d0bd      	beq.n	8008fa6 <dmp_set_tap_thresh+0x42>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800902a:	aa01      	add	r2, sp, #4
 800902c:	2102      	movs	r1, #2
 800902e:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8009032:	f7ff f89f 	bl	8008174 <mpu_write_mem>
 8009036:	2800      	cmp	r0, #0
 8009038:	d1b3      	bne.n	8008fa2 <dmp_set_tap_thresh+0x3e>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800903a:	f10d 0206 	add.w	r2, sp, #6
 800903e:	2102      	movs	r1, #2
 8009040:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009044:	f7ff f896 	bl	8008174 <mpu_write_mem>
 8009048:	3800      	subs	r0, #0
 800904a:	bf18      	it	ne
 800904c:	2001      	movne	r0, #1
 800904e:	4240      	negs	r0, r0
 8009050:	e7a9      	b.n	8008fa6 <dmp_set_tap_thresh+0x42>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8009052:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80090bc <dmp_set_tap_thresh+0x158>
 8009056:	ee68 7a27 	vmul.f32	s15, s16, s15
 800905a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800905e:	ee17 3a90 	vmov	r3, s15
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8009062:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80090c0 <dmp_set_tap_thresh+0x15c>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8009066:	b29a      	uxth	r2, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8009068:	e7ba      	b.n	8008fe0 <dmp_set_tap_thresh+0x7c>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800906a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80090c4 <dmp_set_tap_thresh+0x160>
 800906e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009076:	ee17 3a90 	vmov	r3, s15
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800907a:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80090c8 <dmp_set_tap_thresh+0x164>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800907e:	b29a      	uxth	r2, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8009080:	e7ae      	b.n	8008fe0 <dmp_set_tap_thresh+0x7c>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8009082:	aa01      	add	r2, sp, #4
 8009084:	2102      	movs	r1, #2
 8009086:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 800908a:	f7ff f873 	bl	8008174 <mpu_write_mem>
 800908e:	2800      	cmp	r0, #0
 8009090:	d187      	bne.n	8008fa2 <dmp_set_tap_thresh+0x3e>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8009092:	f10d 0206 	add.w	r2, sp, #6
 8009096:	2102      	movs	r1, #2
 8009098:	f44f 7092 	mov.w	r0, #292	@ 0x124
 800909c:	f7ff f86a 	bl	8008174 <mpu_write_mem>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0ac      	beq.n	8008ffe <dmp_set_tap_thresh+0x9a>
 80090a4:	e77d      	b.n	8008fa2 <dmp_set_tap_thresh+0x3e>
 80090a6:	bf00      	nop
 80090a8:	43480000 	.word	0x43480000
 80090ac:	45000000 	.word	0x45000000
 80090b0:	44c00000 	.word	0x44c00000
 80090b4:	46800000 	.word	0x46800000
 80090b8:	46400000 	.word	0x46400000
 80090bc:	46000000 	.word	0x46000000
 80090c0:	45c00000 	.word	0x45c00000
 80090c4:	45800000 	.word	0x45800000
 80090c8:	45400000 	.word	0x45400000

080090cc <dmp_set_tap_axes>:
{
 80090cc:	b507      	push	{r0, r1, r2, lr}
 80090ce:	f010 0301 	ands.w	r3, r0, #1
 80090d2:	bf18      	it	ne
 80090d4:	2330      	movne	r3, #48	@ 0x30
    if (axis & TAP_Y)
 80090d6:	0782      	lsls	r2, r0, #30
    unsigned char tmp = 0;
 80090d8:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp |= 0x0C;
 80090dc:	bf42      	ittt	mi
 80090de:	b2db      	uxtbmi	r3, r3
 80090e0:	f043 030c 	orrmi.w	r3, r3, #12
 80090e4:	f88d 3007 	strbmi.w	r3, [sp, #7]
    if (axis & TAP_Z)
 80090e8:	0743      	lsls	r3, r0, #29
        tmp |= 0x03;
 80090ea:	bf48      	it	mi
 80090ec:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80090f0:	f10d 0207 	add.w	r2, sp, #7
        tmp |= 0x03;
 80090f4:	bf48      	it	mi
 80090f6:	f043 0303 	orrmi.w	r3, r3, #3
    return mpu_write_mem(D_1_72, 1, &tmp);
 80090fa:	f04f 0101 	mov.w	r1, #1
 80090fe:	f44f 70a4 	mov.w	r0, #328	@ 0x148
        tmp |= 0x03;
 8009102:	bf48      	it	mi
 8009104:	f88d 3007 	strbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8009108:	f7ff f834 	bl	8008174 <mpu_write_mem>
}
 800910c:	b003      	add	sp, #12
 800910e:	f85d fb04 	ldr.w	pc, [sp], #4

08009112 <dmp_set_tap_count>:
{
 8009112:	b507      	push	{r0, r1, r2, lr}
    tmp = min_taps - 1;
 8009114:	2804      	cmp	r0, #4
 8009116:	bf28      	it	cs
 8009118:	2004      	movcs	r0, #4
 800911a:	2801      	cmp	r0, #1
 800911c:	bf38      	it	cc
 800911e:	2001      	movcc	r0, #1
 8009120:	3801      	subs	r0, #1
 8009122:	f88d 0007 	strb.w	r0, [sp, #7]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8009126:	f10d 0207 	add.w	r2, sp, #7
 800912a:	2101      	movs	r1, #1
 800912c:	f240 104f 	movw	r0, #335	@ 0x14f
 8009130:	f7ff f820 	bl	8008174 <mpu_write_mem>
}
 8009134:	b003      	add	sp, #12
 8009136:	f85d fb04 	ldr.w	pc, [sp], #4

0800913a <dmp_set_tap_time>:
{
 800913a:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800913c:	2305      	movs	r3, #5
 800913e:	fbb0 f0f3 	udiv	r0, r0, r3
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8009142:	ba40      	rev16	r0, r0
 8009144:	f8ad 0004 	strh.w	r0, [sp, #4]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8009148:	aa01      	add	r2, sp, #4
 800914a:	2102      	movs	r1, #2
 800914c:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8009150:	f7ff f810 	bl	8008174 <mpu_write_mem>
}
 8009154:	b003      	add	sp, #12
 8009156:	f85d fb04 	ldr.w	pc, [sp], #4

0800915a <dmp_set_tap_time_multi>:
{
 800915a:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800915c:	2305      	movs	r3, #5
 800915e:	fbb0 f0f3 	udiv	r0, r0, r3
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8009162:	ba40      	rev16	r0, r0
 8009164:	f8ad 0004 	strh.w	r0, [sp, #4]
    return mpu_write_mem(D_1_218, 2, tmp);
 8009168:	aa01      	add	r2, sp, #4
 800916a:	2102      	movs	r1, #2
 800916c:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8009170:	f7ff f800 	bl	8008174 <mpu_write_mem>
}
 8009174:	b003      	add	sp, #12
 8009176:	f85d fb04 	ldr.w	pc, [sp], #4

0800917a <dmp_set_shake_reject_thresh>:
{
 800917a:	b507      	push	{r0, r1, r2, lr}
    long thresh_scaled = sf / 1000 * thresh;
 800917c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009180:	fb90 f0f3 	sdiv	r0, r0, r3
 8009184:	4348      	muls	r0, r1
 8009186:	ba00      	rev	r0, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8009188:	9001      	str	r0, [sp, #4]
    return mpu_write_mem(D_1_92, 4, tmp);
 800918a:	aa01      	add	r2, sp, #4
 800918c:	2104      	movs	r1, #4
 800918e:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8009192:	f7fe ffef 	bl	8008174 <mpu_write_mem>
}
 8009196:	b003      	add	sp, #12
 8009198:	f85d fb04 	ldr.w	pc, [sp], #4

0800919c <dmp_set_shake_reject_time>:
{
 800919c:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 800919e:	2305      	movs	r3, #5
 80091a0:	fbb0 f0f3 	udiv	r0, r0, r3
    tmp[0] = time >> 8;
 80091a4:	ba40      	rev16	r0, r0
 80091a6:	f8ad 0004 	strh.w	r0, [sp, #4]
    return mpu_write_mem(D_1_90,2,tmp);
 80091aa:	aa01      	add	r2, sp, #4
 80091ac:	2102      	movs	r1, #2
 80091ae:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 80091b2:	f7fe ffdf 	bl	8008174 <mpu_write_mem>
}
 80091b6:	b003      	add	sp, #12
 80091b8:	f85d fb04 	ldr.w	pc, [sp], #4

080091bc <dmp_set_shake_reject_timeout>:
{
 80091bc:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 80091be:	2305      	movs	r3, #5
 80091c0:	fbb0 f0f3 	udiv	r0, r0, r3
    tmp[0] = time >> 8;
 80091c4:	ba40      	rev16	r0, r0
 80091c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    return mpu_write_mem(D_1_88,2,tmp);
 80091ca:	aa01      	add	r2, sp, #4
 80091cc:	2102      	movs	r1, #2
 80091ce:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 80091d2:	f7fe ffcf 	bl	8008174 <mpu_write_mem>
}
 80091d6:	b003      	add	sp, #12
 80091d8:	f85d fb04 	ldr.w	pc, [sp], #4

080091dc <dmp_enable_gyro_cal>:
{
 80091dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 80091de:	b120      	cbz	r0, 80091ea <dmp_enable_gyro_cal+0xe>
}
 80091e0:	b005      	add	sp, #20
 80091e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e6:	f7ff bd35 	b.w	8008c54 <dmp_enable_gyro_cal.part.0>
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80091ea:	4a08      	ldr	r2, [pc, #32]	@ (800920c <dmp_enable_gyro_cal+0x30>)
 80091ec:	6810      	ldr	r0, [r2, #0]
 80091ee:	6851      	ldr	r1, [r2, #4]
 80091f0:	7a12      	ldrb	r2, [r2, #8]
 80091f2:	ab01      	add	r3, sp, #4
 80091f4:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80091f6:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80091f8:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80091fa:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80091fe:	aa01      	add	r2, sp, #4
 8009200:	f7fe ffb8 	bl	8008174 <mpu_write_mem>
}
 8009204:	b005      	add	sp, #20
 8009206:	f85d fb04 	ldr.w	pc, [sp], #4
 800920a:	bf00      	nop
 800920c:	08013f63 	.word	0x08013f63

08009210 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8009210:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8009212:	b160      	cbz	r0, 800922e <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8009214:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <dmp_enable_lp_quat+0x24>)
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
 8009216:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8009218:	aa01      	add	r2, sp, #4
 800921a:	2104      	movs	r1, #4
 800921c:	f640 2098 	movw	r0, #2712	@ 0xa98
 8009220:	f7fe ffa8 	bl	8008174 <mpu_write_mem>

    return mpu_reset_fifo();
 8009224:	f7fe f9f6 	bl	8007614 <mpu_reset_fifo>
}
 8009228:	b003      	add	sp, #12
 800922a:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 800922e:	f04f 338b 	mov.w	r3, #2341178251	@ 0x8b8b8b8b
 8009232:	e7f0      	b.n	8009216 <dmp_enable_lp_quat+0x6>
 8009234:	c6c4c2c0 	.word	0xc6c4c2c0

08009238 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8009238:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 800923a:	b160      	cbz	r0, 8009256 <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <dmp_enable_6x_lp_quat+0x24>)
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
 800923e:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
 8009240:	aa01      	add	r2, sp, #4
 8009242:	2104      	movs	r1, #4
 8009244:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8009248:	f7fe ff94 	bl	8008174 <mpu_write_mem>

    return mpu_reset_fifo();
 800924c:	f7fe f9e2 	bl	8007614 <mpu_reset_fifo>
}
 8009250:	b003      	add	sp, #12
 8009252:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8009256:	f04f 33a3 	mov.w	r3, #2745410467	@ 0xa3a3a3a3
 800925a:	e7f0      	b.n	800923e <dmp_enable_6x_lp_quat+0x6>
 800925c:	38302820 	.word	0x38302820

08009260 <dmp_enable_feature>:
{
 8009260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    mpu_write_mem(D_0_104, 4, tmp);
 8009264:	2104      	movs	r1, #4
 8009266:	aa01      	add	r2, sp, #4
{
 8009268:	4604      	mov	r4, r0
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800926a:	4b66      	ldr	r3, [pc, #408]	@ (8009404 <dmp_enable_feature+0x1a4>)
 800926c:	9301      	str	r3, [sp, #4]
    mpu_write_mem(D_0_104, 4, tmp);
 800926e:	2068      	movs	r0, #104	@ 0x68
 8009270:	f7fe ff80 	bl	8008174 <mpu_write_mem>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8009274:	23a3      	movs	r3, #163	@ 0xa3
 8009276:	f014 0840 	ands.w	r8, r4, #64	@ 0x40
 800927a:	bf03      	ittte	eq
 800927c:	4619      	moveq	r1, r3
 800927e:	461a      	moveq	r2, r3
 8009280:	4618      	moveq	r0, r3
 8009282:	21c8      	movne	r1, #200	@ 0xc8
 8009284:	bf1c      	itt	ne
 8009286:	22c2      	movne	r2, #194	@ 0xc2
 8009288:	20c0      	movne	r0, #192	@ 0xc0
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800928a:	f414 76c0 	ands.w	r6, r4, #384	@ 0x180
    tmp[0] = 0xA3;
 800928e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8009292:	bf0c      	ite	eq
 8009294:	23a3      	moveq	r3, #163	@ 0xa3
 8009296:	23c4      	movne	r3, #196	@ 0xc4
        tmp[2] = 0xC8;
 8009298:	f88d 1006 	strb.w	r1, [sp, #6]
        tmp[3] = 0xC2;
 800929c:	f88d 2007 	strb.w	r2, [sp, #7]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80092a0:	bf07      	ittee	eq
 80092a2:	4619      	moveq	r1, r3
 80092a4:	461a      	moveq	r2, r3
 80092a6:	21cc      	movne	r1, #204	@ 0xcc
 80092a8:	22c6      	movne	r2, #198	@ 0xc6
        tmp[4] = 0xC4;
 80092aa:	f88d 3008 	strb.w	r3, [sp, #8]
    tmp[7] = 0xA3;
 80092ae:	23a3      	movs	r3, #163	@ 0xa3
        tmp[1] = 0xC0;
 80092b0:	f88d 0005 	strb.w	r0, [sp, #5]
        tmp[5] = 0xCC;
 80092b4:	f88d 1009 	strb.w	r1, [sp, #9]
        tmp[6] = 0xC6;
 80092b8:	f88d 200a 	strb.w	r2, [sp, #10]
    tmp[7] = 0xA3;
 80092bc:	f88d 300b 	strb.w	r3, [sp, #11]
    mpu_write_mem(CFG_15,10,tmp);
 80092c0:	aa01      	add	r2, sp, #4
    tmp[8] = 0xA3;
 80092c2:	f24a 33a3 	movw	r3, #41891	@ 0xa3a3
    mpu_write_mem(CFG_15,10,tmp);
 80092c6:	210a      	movs	r1, #10
 80092c8:	f640 20a7 	movw	r0, #2727	@ 0xaa7
    tmp[8] = 0xA3;
 80092cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    mpu_write_mem(CFG_15,10,tmp);
 80092d0:	f7fe ff50 	bl	8008174 <mpu_write_mem>
        tmp[0] = DINA20;
 80092d4:	f014 0703 	ands.w	r7, r4, #3
 80092d8:	bf0c      	ite	eq
 80092da:	23d8      	moveq	r3, #216	@ 0xd8
 80092dc:	2320      	movne	r3, #32
    mpu_write_mem(CFG_27,1,tmp);
 80092de:	aa01      	add	r2, sp, #4
 80092e0:	2101      	movs	r1, #1
 80092e2:	f640 20b6 	movw	r0, #2742	@ 0xab6
 80092e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80092ea:	f7fe ff43 	bl	8008174 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 80092ee:	f014 0020 	ands.w	r0, r4, #32
 80092f2:	d077      	beq.n	80093e4 <dmp_enable_feature+0x184>
    if (enable) {
 80092f4:	f7ff fcae 	bl	8008c54 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80092f8:	b1d6      	cbz	r6, 8009330 <dmp_enable_feature+0xd0>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80092fa:	f404 7380 	and.w	r3, r4, #256	@ 0x100
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf15      	itete	ne
 8009302:	20b2      	movne	r0, #178	@ 0xb2
 8009304:	20b0      	moveq	r0, #176	@ 0xb0
 8009306:	218b      	movne	r1, #139	@ 0x8b
 8009308:	2180      	moveq	r1, #128	@ 0x80
 800930a:	bf15      	itete	ne
 800930c:	22b6      	movne	r2, #182	@ 0xb6
 800930e:	22b4      	moveq	r2, #180	@ 0xb4
 8009310:	239b      	movne	r3, #155	@ 0x9b
 8009312:	2390      	moveq	r3, #144	@ 0x90
            tmp[0] = 0xB2;
 8009314:	f88d 0004 	strb.w	r0, [sp, #4]
            tmp[1] = 0x8B;
 8009318:	f88d 1005 	strb.w	r1, [sp, #5]
            tmp[2] = 0xB6;
 800931c:	f88d 2006 	strb.w	r2, [sp, #6]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8009320:	2104      	movs	r1, #4
 8009322:	aa01      	add	r2, sp, #4
 8009324:	f640 20a2 	movw	r0, #2722	@ 0xaa2
            tmp[3] = 0x9B;
 8009328:	f88d 3007 	strb.w	r3, [sp, #7]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800932c:	f7fe ff22 	bl	8008174 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 8009330:	07e3      	lsls	r3, r4, #31
 8009332:	d55a      	bpl.n	80093ea <dmp_enable_feature+0x18a>
        tmp[0] = 0xF8;
 8009334:	23f8      	movs	r3, #248	@ 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
 8009336:	aa01      	add	r2, sp, #4
 8009338:	2101      	movs	r1, #1
 800933a:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
        tmp[0] = 0xF8;
 800933e:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8009342:	f7fe ff17 	bl	8008174 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8009346:	21fa      	movs	r1, #250	@ 0xfa
 8009348:	2007      	movs	r0, #7
 800934a:	f7ff fe0b 	bl	8008f64 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800934e:	2007      	movs	r0, #7
 8009350:	f7ff febc 	bl	80090cc <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8009354:	2001      	movs	r0, #1
 8009356:	f7ff fedc 	bl	8009112 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800935a:	2064      	movs	r0, #100	@ 0x64
 800935c:	f7ff feed 	bl	800913a <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8009360:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009364:	f7ff fef9 	bl	800915a <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8009368:	21c8      	movs	r1, #200	@ 0xc8
 800936a:	4827      	ldr	r0, [pc, #156]	@ (8009408 <dmp_enable_feature+0x1a8>)
 800936c:	f7ff ff05 	bl	800917a <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8009370:	2028      	movs	r0, #40	@ 0x28
 8009372:	f7ff ff13 	bl	800919c <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8009376:	200a      	movs	r0, #10
 8009378:	f7ff ff20 	bl	80091bc <dmp_set_shake_reject_timeout>
        tmp[0] = 0xD9;
 800937c:	f014 0f02 	tst.w	r4, #2
 8009380:	bf0c      	ite	eq
 8009382:	23d8      	moveq	r3, #216	@ 0xd8
 8009384:	23d9      	movne	r3, #217	@ 0xd9
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8009386:	aa01      	add	r2, sp, #4
 8009388:	2101      	movs	r1, #1
 800938a:	f240 703d 	movw	r0, #1853	@ 0x73d
 800938e:	f88d 3004 	strb.w	r3, [sp, #4]
 8009392:	f7fe feef 	bl	8008174 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8009396:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 800939a:	bf18      	it	ne
 800939c:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 800939e:	f7ff ff37 	bl	8009210 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80093a2:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 80093a6:	bf18      	it	ne
 80093a8:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80093aa:	4d18      	ldr	r5, [pc, #96]	@ (800940c <dmp_enable_feature+0x1ac>)
        dmp_enable_6x_lp_quat(0);
 80093ac:	f7ff ff44 	bl	8009238 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80093b0:	f044 0308 	orr.w	r3, r4, #8
 80093b4:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 80093b6:	f7fe f92d 	bl	8007614 <mpu_reset_fifo>
        dmp.packet_length += 6;
 80093ba:	f1b8 0f00 	cmp.w	r8, #0
 80093be:	bf0c      	ite	eq
 80093c0:	2300      	moveq	r3, #0
 80093c2:	2306      	movne	r3, #6
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80093c4:	b9de      	cbnz	r6, 80093fe <dmp_enable_feature+0x19e>
        dmp.packet_length += 6;
 80093c6:	73ab      	strb	r3, [r5, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80093c8:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 80093cc:	bf1e      	ittt	ne
 80093ce:	7bab      	ldrbne	r3, [r5, #14]
 80093d0:	3310      	addne	r3, #16
 80093d2:	73ab      	strbne	r3, [r5, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80093d4:	b117      	cbz	r7, 80093dc <dmp_enable_feature+0x17c>
        dmp.packet_length += 4;
 80093d6:	7bab      	ldrb	r3, [r5, #14]
 80093d8:	3304      	adds	r3, #4
 80093da:	73ab      	strb	r3, [r5, #14]
}
 80093dc:	2000      	movs	r0, #0
 80093de:	b004      	add	sp, #16
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 80093e4:	f7ff fefa 	bl	80091dc <dmp_enable_gyro_cal>
 80093e8:	e786      	b.n	80092f8 <dmp_enable_feature+0x98>
        tmp[0] = 0xD8;
 80093ea:	23d8      	movs	r3, #216	@ 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
 80093ec:	aa01      	add	r2, sp, #4
 80093ee:	2101      	movs	r1, #1
 80093f0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
        tmp[0] = 0xD8;
 80093f4:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 80093f8:	f7fe febc 	bl	8008174 <mpu_write_mem>
 80093fc:	e7be      	b.n	800937c <dmp_enable_feature+0x11c>
        dmp.packet_length += 6;
 80093fe:	3306      	adds	r3, #6
 8009400:	e7e1      	b.n	80093c6 <dmp_enable_feature+0x166>
 8009402:	bf00      	nop
 8009404:	09e3ca02 	.word	0x09e3ca02
 8009408:	02cae309 	.word	0x02cae309
 800940c:	200012e0 	.word	0x200012e0

08009410 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	b089      	sub	sp, #36	@ 0x24
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8009416:	f8df b148 	ldr.w	fp, [pc, #328]	@ 8009560 <dmp_read_fifo+0x150>
{
 800941a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 800941c:	469a      	mov	sl, r3
    sensors[0] = 0;
 800941e:	2300      	movs	r3, #0
{
 8009420:	4680      	mov	r8, r0
 8009422:	4689      	mov	r9, r1
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8009424:	f89b 000e 	ldrb.w	r0, [fp, #14]
    sensors[0] = 0;
 8009428:	802b      	strh	r3, [r5, #0]
{
 800942a:	4617      	mov	r7, r2
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800942c:	4669      	mov	r1, sp
 800942e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009430:	f7fe fb32 	bl	8007a98 <mpu_read_fifo_stream>
 8009434:	4606      	mov	r6, r0
 8009436:	bb08      	cbnz	r0, 800947c <dmp_read_fifo+0x6c>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8009438:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 800943c:	f011 0f14 	tst.w	r1, #20
 8009440:	f000 808b 	beq.w	800955a <dmp_read_fifo+0x14a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8009444:	9801      	ldr	r0, [sp, #4]
 8009446:	9a00      	ldr	r2, [sp, #0]
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	9c03      	ldr	r4, [sp, #12]
 800944c:	ba00      	rev	r0, r0
 800944e:	ba12      	rev	r2, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8009450:	6078      	str	r0, [r7, #4]
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8009452:	fb10 f030 	smultt	r0, r0, r0
 8009456:	ba1b      	rev	r3, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8009458:	603a      	str	r2, [r7, #0]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800945a:	fb12 0232 	smlatt	r2, r2, r2, r0
 800945e:	ba24      	rev	r4, r4
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8009460:	60bb      	str	r3, [r7, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8009462:	fb13 2333 	smlatt	r3, r3, r3, r2
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8009466:	60fc      	str	r4, [r7, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8009468:	fb14 3434 	smlatt	r4, r4, r4, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800946c:	f104 4471 	add.w	r4, r4, #4043309056	@ 0xf1000000
 8009470:	f1b4 7f00 	cmp.w	r4, #33554432	@ 0x2000000
 8009474:	d908      	bls.n	8009488 <dmp_read_fifo+0x78>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8009476:	f7fe f8cd 	bl	8007614 <mpu_reset_fifo>
            sensors[0] = 0;
 800947a:	802e      	strh	r6, [r5, #0]
        return -1;
 800947c:	f04f 36ff 	mov.w	r6, #4294967295
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        decode_gesture(fifo_data + ii);

    get_ms(timestamp);
    return 0;
}
 8009480:	4630      	mov	r0, r6
 8009482:	b009      	add	sp, #36	@ 0x24
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sensors[0] |= INV_WXYZ_QUAT;
 8009488:	882b      	ldrh	r3, [r5, #0]
 800948a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800948e:	802b      	strh	r3, [r5, #0]
        ii += 16;
 8009490:	2210      	movs	r2, #16
    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8009492:	0648      	lsls	r0, r1, #25
 8009494:	d520      	bpl.n	80094d8 <dmp_read_fifo+0xc8>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8009496:	f102 0320 	add.w	r3, r2, #32
 800949a:	446b      	add	r3, sp
        ii += 6;
 800949c:	3206      	adds	r2, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800949e:	f813 4c20 	ldrb.w	r4, [r3, #-32]
 80094a2:	f813 0c1f 	ldrb.w	r0, [r3, #-31]
 80094a6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80094aa:	f8a9 0000 	strh.w	r0, [r9]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80094ae:	f813 4c1e 	ldrb.w	r4, [r3, #-30]
 80094b2:	f813 0c1d 	ldrb.w	r0, [r3, #-29]
 80094b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80094ba:	f8a9 0002 	strh.w	r0, [r9, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80094be:	f813 0c1c 	ldrb.w	r0, [r3, #-28]
 80094c2:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 80094c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80094ca:	f8a9 3004 	strh.w	r3, [r9, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 80094ce:	882b      	ldrh	r3, [r5, #0]
 80094d0:	f043 0308 	orr.w	r3, r3, #8
        ii += 6;
 80094d4:	b2d2      	uxtb	r2, r2
        sensors[0] |= INV_XYZ_ACCEL;
 80094d6:	802b      	strh	r3, [r5, #0]
    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80094d8:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 80094dc:	d020      	beq.n	8009520 <dmp_read_fifo+0x110>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80094de:	f102 0320 	add.w	r3, r2, #32
 80094e2:	446b      	add	r3, sp
        ii += 6;
 80094e4:	3206      	adds	r2, #6
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80094e6:	f813 4c20 	ldrb.w	r4, [r3, #-32]
 80094ea:	f813 0c1f 	ldrb.w	r0, [r3, #-31]
 80094ee:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80094f2:	f8a8 0000 	strh.w	r0, [r8]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80094f6:	f813 4c1e 	ldrb.w	r4, [r3, #-30]
 80094fa:	f813 0c1d 	ldrb.w	r0, [r3, #-29]
 80094fe:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8009502:	f8a8 0002 	strh.w	r0, [r8, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8009506:	f813 0c1c 	ldrb.w	r0, [r3, #-28]
 800950a:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 800950e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009512:	f8a8 3004 	strh.w	r3, [r8, #4]
        sensors[0] |= INV_XYZ_GYRO;
 8009516:	882b      	ldrh	r3, [r5, #0]
 8009518:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
        ii += 6;
 800951c:	b2d2      	uxtb	r2, r2
        sensors[0] |= INV_XYZ_GYRO;
 800951e:	802b      	strh	r3, [r5, #0]
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8009520:	0789      	lsls	r1, r1, #30
 8009522:	d016      	beq.n	8009552 <dmp_read_fifo+0x142>
        decode_gesture(fifo_data + ii);
 8009524:	eb0d 0402 	add.w	r4, sp, r2
    if (gesture[1] & INT_SRC_TAP) {
 8009528:	7863      	ldrb	r3, [r4, #1]
    android_orient = gesture[3] & 0xC0;
 800952a:	78e5      	ldrb	r5, [r4, #3]
    if (gesture[1] & INT_SRC_TAP) {
 800952c:	07da      	lsls	r2, r3, #31
 800952e:	d508      	bpl.n	8009542 <dmp_read_fifo+0x132>
        if (dmp.tap_cb)
 8009530:	f8db 3000 	ldr.w	r3, [fp]
 8009534:	b12b      	cbz	r3, 8009542 <dmp_read_fifo+0x132>
        count = (tap % 8) + 1;
 8009536:	f005 0107 	and.w	r1, r5, #7
            dmp.tap_cb(direction, count);
 800953a:	3101      	adds	r1, #1
 800953c:	f3c5 00c2 	ubfx	r0, r5, #3, #3
 8009540:	4798      	blx	r3
    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8009542:	7863      	ldrb	r3, [r4, #1]
 8009544:	071b      	lsls	r3, r3, #28
 8009546:	d504      	bpl.n	8009552 <dmp_read_fifo+0x142>
        if (dmp.android_orient_cb)
 8009548:	f8db 3004 	ldr.w	r3, [fp, #4]
 800954c:	b10b      	cbz	r3, 8009552 <dmp_read_fifo+0x142>
            dmp.android_orient_cb(android_orient >> 6);
 800954e:	09a8      	lsrs	r0, r5, #6
 8009550:	4798      	blx	r3
    get_ms(timestamp);
 8009552:	4650      	mov	r0, sl
 8009554:	f002 fd84 	bl	800c060 <mget_ms>
    return 0;
 8009558:	e792      	b.n	8009480 <dmp_read_fifo+0x70>
    unsigned char ii = 0;
 800955a:	4602      	mov	r2, r0
 800955c:	e799      	b.n	8009492 <dmp_read_fifo+0x82>
 800955e:	bf00      	nop
 8009560:	200012e0 	.word	0x200012e0

08009564 <fputc>:
#define PACKET_QUAT     (2)
#define PACKET_DATA     (3)

/*添加fputc函数体*/
int fputc(int ch, FILE *f)
{
 8009564:	b513      	push	{r0, r1, r4, lr}
  uint8_t temp[1] = {ch};
  HAL_UART_Transmit(&huart1, temp, 1, 2);//
 8009566:	2302      	movs	r3, #2
{
 8009568:	4604      	mov	r4, r0
  uint8_t temp[1] = {ch};
 800956a:	f88d 0004 	strb.w	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, temp, 1, 2);//
 800956e:	2201      	movs	r2, #1
 8009570:	a901      	add	r1, sp, #4
 8009572:	4803      	ldr	r0, [pc, #12]	@ (8009580 <fputc+0x1c>)
 8009574:	f002 faf1 	bl	800bb5a <HAL_UART_Transmit>
  return ch;
}
 8009578:	4620      	mov	r0, r4
 800957a:	b002      	add	sp, #8
 800957c:	bd10      	pop	{r4, pc}
 800957e:	bf00      	nop
 8009580:	20001298 	.word	0x20001298

08009584 <_MLPrintLog>:
 *  @param[in]  fmt         String of text with optional format tags.
 *
 *  @return     0 if successful.
 */
int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 8009584:	b40c      	push	{r2, r3}
 8009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    va_list args;
    int length, ii, i;
    char buf[BUF_SIZE], out[PACKET_LENGTH], this_length;

    /* This can be modified to exit for unsupported priorities. */
    switch (priority) {
 800958a:	2806      	cmp	r0, #6
{
 800958c:	b0c8      	sub	sp, #288	@ 0x120
 800958e:	4605      	mov	r5, r0
    switch (priority) {
 8009590:	dc37      	bgt.n	8009602 <_MLPrintLog+0x7e>
 8009592:	2800      	cmp	r0, #0
 8009594:	db37      	blt.n	8009606 <_MLPrintLog+0x82>
        break;
    default:
        return 0;
    }

    va_start(args, fmt);
 8009596:	aa4f      	add	r2, sp, #316	@ 0x13c

    length = vsprintf(buf, fmt, args);
 8009598:	994e      	ldr	r1, [sp, #312]	@ 0x138
    va_start(args, fmt);
 800959a:	9201      	str	r2, [sp, #4]
    length = vsprintf(buf, fmt, args);
 800959c:	a808      	add	r0, sp, #32
 800959e:	f003 fd81 	bl	800d0a4 <vsiprintf>
    if (length <= 0) {
 80095a2:	1e04      	subs	r4, r0, #0
 80095a4:	dd30      	ble.n	8009608 <_MLPrintLog+0x84>
        va_end(args);
        return length;
    }

    memset(out, 0, PACKET_LENGTH);
    out[0] = '$';
 80095a6:	f44f 7392 	mov.w	r3, #292	@ 0x124
 80095aa:	f8ad 3008 	strh.w	r3, [sp, #8]
    out[1] = PACKET_DEBUG;
    out[2] = priority;
    out[21] = '\r';
 80095ae:	230d      	movs	r3, #13
 80095b0:	f88d 301d 	strb.w	r3, [sp, #29]
#define min(a,b) ((a < b) ? a : b)
        this_length = min(length-ii, PACKET_LENGTH-5);
        memset(out+3, 0, 18);
        memcpy(out+3, buf+ii, this_length);
        for (i=0; i<PACKET_LENGTH; i++) {
        	fputc(out[i],noUse);
 80095b4:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8009614 <_MLPrintLog+0x90>
    out[2] = priority;
 80095b8:	f88d 500a 	strb.w	r5, [sp, #10]
    out[22] = '\n';
 80095bc:	230a      	movs	r3, #10
 80095be:	f88d 301e 	strb.w	r3, [sp, #30]
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 80095c2:	2500      	movs	r5, #0
        memset(out+3, 0, 18);
 80095c4:	2212      	movs	r2, #18
 80095c6:	2100      	movs	r1, #0
 80095c8:	f10d 000b 	add.w	r0, sp, #11
 80095cc:	f003 fe32 	bl	800d234 <memset>
        this_length = min(length-ii, PACKET_LENGTH-5);
 80095d0:	1b62      	subs	r2, r4, r5
        memcpy(out+3, buf+ii, this_length);
 80095d2:	2a12      	cmp	r2, #18
 80095d4:	ab08      	add	r3, sp, #32
 80095d6:	bfa8      	it	ge
 80095d8:	2212      	movge	r2, #18
 80095da:	1959      	adds	r1, r3, r5
 80095dc:	f10d 000b 	add.w	r0, sp, #11
 80095e0:	f003 feac 	bl	800d33c <memcpy>
        for (i=0; i<PACKET_LENGTH; i++) {
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	2600      	movs	r6, #0
        	fputc(out[i],noUse);
 80095e8:	f8d8 1000 	ldr.w	r1, [r8]
 80095ec:	f817 0b01 	ldrb.w	r0, [r7], #1
        for (i=0; i<PACKET_LENGTH; i++) {
 80095f0:	3601      	adds	r6, #1
        	fputc(out[i],noUse);
 80095f2:	f7ff ffb7 	bl	8009564 <fputc>
        for (i=0; i<PACKET_LENGTH; i++) {
 80095f6:	2e17      	cmp	r6, #23
 80095f8:	d1f6      	bne.n	80095e8 <_MLPrintLog+0x64>
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 80095fa:	3512      	adds	r5, #18
 80095fc:	42ac      	cmp	r4, r5
 80095fe:	dce1      	bgt.n	80095c4 <_MLPrintLog+0x40>
 8009600:	e001      	b.n	8009606 <_MLPrintLog+0x82>
    switch (priority) {
 8009602:	2808      	cmp	r0, #8
 8009604:	d0c7      	beq.n	8009596 <_MLPrintLog+0x12>
        return 0;
 8009606:	2400      	movs	r4, #0
    
            
    va_end(args);

    return 0;
}
 8009608:	4620      	mov	r0, r4
 800960a:	b048      	add	sp, #288	@ 0x120
 800960c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	b002      	add	sp, #8
 8009612:	4770      	bx	lr
 8009614:	200012f0 	.word	0x200012f0

08009618 <inv_start_eMPL_outputs>:
    return INV_SUCCESS;
}

static inv_error_t inv_start_eMPL_outputs(void)
{
    return inv_register_data_cb(inv_generate_eMPL_outputs,
 8009618:	4802      	ldr	r0, [pc, #8]	@ (8009624 <inv_start_eMPL_outputs+0xc>)
 800961a:	2207      	movs	r2, #7
 800961c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8009620:	f000 ba14 	b.w	8009a4c <inv_register_data_cb>
 8009624:	08009629 	.word	0x08009629

08009628 <inv_generate_eMPL_outputs>:
{
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800962a:	4d26      	ldr	r5, [pc, #152]	@ (80096c4 <inv_generate_eMPL_outputs+0x9c>)
{
 800962c:	4604      	mov	r4, r0
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800962e:	f105 0224 	add.w	r2, r5, #36	@ 0x24
 8009632:	f105 0110 	add.w	r1, r5, #16
 8009636:	4628      	mov	r0, r5
 8009638:	f001 f804 	bl	800a644 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 800963c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    eMPL_out.accel_status = sensor_cal->accel.status;
 800963e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    eMPL_out.compass_status = sensor_cal->compass.status;
 8009640:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 8009644:	6168      	str	r0, [r5, #20]
    if (sensor_cal->gyro.status & INV_SENSOR_ON) {
 8009646:	05c2      	lsls	r2, r0, #23
        sr = sensor_cal->gyro.sample_rate_ms;
 8009648:	bf48      	it	mi
 800964a:	6ae2      	ldrmi	r2, [r4, #44]	@ 0x2c
    eMPL_out.accel_status = sensor_cal->accel.status;
 800964c:	61ab      	str	r3, [r5, #24]
    long sr = 1000;
 800964e:	bf58      	it	pl
 8009650:	f44f 727a 	movpl.w	r2, #1000	@ 0x3e8
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
 8009654:	f413 7680 	ands.w	r6, r3, #256	@ 0x100
    eMPL_out.compass_status = sensor_cal->compass.status;
 8009658:	61e9      	str	r1, [r5, #28]
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
 800965a:	d005      	beq.n	8009668 <inv_generate_eMPL_outputs+0x40>
 800965c:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 800965e:	4296      	cmp	r6, r2
 8009660:	bfb6      	itet	lt
 8009662:	4632      	movlt	r2, r6
 8009664:	2600      	movge	r6, #0
        use_sensor = 1;
 8009666:	2601      	movlt	r6, #1
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms)) {
 8009668:	05cf      	lsls	r7, r1, #23
 800966a:	d505      	bpl.n	8009678 <inv_generate_eMPL_outputs+0x50>
 800966c:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 8009670:	4297      	cmp	r7, r2
 8009672:	bfbc      	itt	lt
 8009674:	463a      	movlt	r2, r7
        use_sensor = 2;
 8009676:	2602      	movlt	r6, #2
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms)) {
 8009678:	f8d4 c120 	ldr.w	ip, [r4, #288]	@ 0x120
 800967c:	f41c 7f80 	tst.w	ip, #256	@ 0x100
 8009680:	d003      	beq.n	800968a <inv_generate_eMPL_outputs+0x62>
 8009682:	f8d4 712c 	ldr.w	r7, [r4, #300]	@ 0x12c
 8009686:	4297      	cmp	r7, r2
 8009688:	db15      	blt.n	80096b6 <inv_generate_eMPL_outputs+0x8e>
    switch (use_sensor) {
 800968a:	2e01      	cmp	r6, #1
 800968c:	d008      	beq.n	80096a0 <inv_generate_eMPL_outputs+0x78>
 800968e:	2e02      	cmp	r6, #2
 8009690:	d00b      	beq.n	80096aa <inv_generate_eMPL_outputs+0x82>
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 8009692:	f3c0 1080 	ubfx	r0, r0, #6, #1
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 8009696:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 8009698:	6228      	str	r0, [r5, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 800969a:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800969c:	2000      	movs	r0, #0
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 80096a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80096a4:	622b      	str	r3, [r5, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
 80096a6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
        break;
 80096a8:	e7f7      	b.n	800969a <inv_generate_eMPL_outputs+0x72>
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 80096aa:	f3c1 1180 	ubfx	r1, r1, #6, #1
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
 80096ae:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 80096b2:	6229      	str	r1, [r5, #32]
        break;
 80096b4:	e7f1      	b.n	800969a <inv_generate_eMPL_outputs+0x72>
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 80096b6:	f3cc 1380 	ubfx	r3, ip, #6, #1
 80096ba:	622b      	str	r3, [r5, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
 80096bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
        break;
 80096c0:	e7eb      	b.n	800969a <inv_generate_eMPL_outputs+0x72>
 80096c2:	bf00      	nop
 80096c4:	200012f4 	.word	0x200012f4

080096c8 <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
 80096c8:	b508      	push	{r3, lr}
    memset(&eMPL_out, 0, sizeof(eMPL_out));
 80096ca:	4805      	ldr	r0, [pc, #20]	@ (80096e0 <inv_enable_eMPL_outputs+0x18>)
 80096cc:	2228      	movs	r2, #40	@ 0x28
 80096ce:	2100      	movs	r1, #0
 80096d0:	f003 fdb0 	bl	800d234 <memset>
    inv_error_t result;
    result = inv_init_eMPL_outputs();
    if (result)
        return result;
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
}
 80096d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
 80096d8:	4802      	ldr	r0, [pc, #8]	@ (80096e4 <inv_enable_eMPL_outputs+0x1c>)
 80096da:	f001 b879 	b.w	800a7d0 <inv_register_mpl_start_notification>
 80096de:	bf00      	nop
 80096e0:	200012f4 	.word	0x200012f4
 80096e4:	08009619 	.word	0x08009619

080096e8 <inv_db_save_func>:
    return INV_SUCCESS;
}

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
 80096e8:	b508      	push	{r3, lr}
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
 80096ea:	4903      	ldr	r1, [pc, #12]	@ (80096f8 <inv_db_save_func+0x10>)
 80096ec:	2248      	movs	r2, #72	@ 0x48
 80096ee:	f003 fe25 	bl	800d33c <memcpy>
    return INV_SUCCESS;
}
 80096f2:	2000      	movs	r0, #0
 80096f4:	bd08      	pop	{r3, pc}
 80096f6:	bf00      	nop
 80096f8:	200015a8 	.word	0x200015a8

080096fc <inv_db_load_func>:
{
 80096fc:	4601      	mov	r1, r0
 80096fe:	b508      	push	{r3, lr}
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
 8009700:	2248      	movs	r2, #72	@ 0x48
 8009702:	480b      	ldr	r0, [pc, #44]	@ (8009730 <inv_db_load_func+0x34>)
 8009704:	f003 fe1a 	bl	800d33c <memcpy>
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
 8009708:	4a0a      	ldr	r2, [pc, #40]	@ (8009734 <inv_db_load_func+0x38>)
 800970a:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <inv_db_load_func+0x3c>)
 800970c:	f8d2 1130 	ldr.w	r1, [r2, #304]	@ 0x130
 8009710:	6359      	str	r1, [r3, #52]	@ 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 8009712:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 8009716:	f8d2 2138 	ldr.w	r2, [r2, #312]	@ 0x138
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 800971a:	6799      	str	r1, [r3, #120]	@ 0x78
    if (sensors.compass.accuracy == 3) {
 800971c:	2a03      	cmp	r2, #3
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 800971e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (sensors.compass.accuracy == 3) {
 8009722:	d102      	bne.n	800972a <inv_db_load_func+0x2e>
        inv_set_compass_bias_found(1);
 8009724:	2001      	movs	r0, #1
 8009726:	f000 ffdb 	bl	800a6e0 <inv_set_compass_bias_found>
}
 800972a:	2000      	movs	r0, #0
 800972c:	bd08      	pop	{r3, pc}
 800972e:	bf00      	nop
 8009730:	200015a8 	.word	0x200015a8
 8009734:	200014b4 	.word	0x200014b4
 8009738:	2000131c 	.word	0x2000131c

0800973c <inv_set_gyro_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
 800973c:	4b01      	ldr	r3, [pc, #4]	@ (8009744 <inv_set_gyro_orientation_and_scale+0x8>)
 800973e:	6259      	str	r1, [r3, #36]	@ 0x24
    sensor->orientation = orientation;
 8009740:	6018      	str	r0, [r3, #0]
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
                                     sensitivity);
}
 8009742:	4770      	bx	lr
 8009744:	2000131c 	.word	0x2000131c

08009748 <inv_set_gyro_sample_rate>:
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
 8009748:	4b06      	ldr	r3, [pc, #24]	@ (8009764 <inv_set_gyro_sample_rate+0x1c>)
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
 800974a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800974e:	fb90 f2f2 	sdiv	r2, r0, r2
 8009752:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (sensors.gyro.bandwidth == 0) {
 8009754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    sensors.gyro.sample_rate_us = sample_rate_us;
 8009756:	6298      	str	r0, [r3, #40]	@ 0x28
    if (sensors.gyro.bandwidth == 0) {
 8009758:	b91a      	cbnz	r2, 8009762 <inv_set_gyro_sample_rate+0x1a>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
 800975a:	4a03      	ldr	r2, [pc, #12]	@ (8009768 <inv_set_gyro_sample_rate+0x20>)
 800975c:	fb92 f2f0 	sdiv	r2, r2, r0
 8009760:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 8009762:	4770      	bx	lr
 8009764:	2000131c 	.word	0x2000131c
 8009768:	000f4240 	.word	0x000f4240

0800976c <inv_set_accel_sample_rate>:
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
 800976c:	4b07      	ldr	r3, [pc, #28]	@ (800978c <inv_set_accel_sample_rate+0x20>)
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
 800976e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009772:	fb90 f2f2 	sdiv	r2, r0, r2
 8009776:	671a      	str	r2, [r3, #112]	@ 0x70
    if (sensors.accel.bandwidth == 0) {
 8009778:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
    sensors.accel.sample_rate_us = sample_rate_us;
 800977c:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (sensors.accel.bandwidth == 0) {
 800977e:	b922      	cbnz	r2, 800978a <inv_set_accel_sample_rate+0x1e>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
 8009780:	4a03      	ldr	r2, [pc, #12]	@ (8009790 <inv_set_accel_sample_rate+0x24>)
 8009782:	fb92 f2f0 	sdiv	r2, r2, r0
 8009786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }
}
 800978a:	4770      	bx	lr
 800978c:	2000131c 	.word	0x2000131c
 8009790:	000f4240 	.word	0x000f4240

08009794 <inv_set_compass_sample_rate>:
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
 8009794:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <inv_set_compass_sample_rate+0x24>)
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
 8009796:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800979a:	fb90 f2f2 	sdiv	r2, r0, r2
 800979e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (sensors.compass.bandwidth == 0) {
 80097a2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
    sensors.compass.sample_rate_us = sample_rate_us;
 80097a6:	f8c3 00b0 	str.w	r0, [r3, #176]	@ 0xb0
    if (sensors.compass.bandwidth == 0) {
 80097aa:	b922      	cbnz	r2, 80097b6 <inv_set_compass_sample_rate+0x22>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
 80097ac:	4a03      	ldr	r2, [pc, #12]	@ (80097bc <inv_set_compass_sample_rate+0x28>)
 80097ae:	fb92 f2f0 	sdiv	r2, r2, r0
 80097b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    }
}
 80097b6:	4770      	bx	lr
 80097b8:	2000131c 	.word	0x2000131c
 80097bc:	000f4240 	.word	0x000f4240

080097c0 <inv_get_compass_on>:
/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
*/
int inv_get_compass_on()
{
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 80097c0:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <inv_get_compass_on+0xc>)
 80097c2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
}
 80097c6:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80097ca:	4770      	bx	lr
 80097cc:	2000131c 	.word	0x2000131c

080097d0 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 80097d0:	4b02      	ldr	r3, [pc, #8]	@ (80097dc <inv_get_gyro_on+0xc>)
 80097d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
}
 80097d4:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	2000131c 	.word	0x2000131c

080097e0 <inv_get_accel_on>:
/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
*/
int inv_get_accel_on()
{
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 80097e0:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <inv_get_accel_on+0xc>)
 80097e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
}
 80097e4:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	2000131c 	.word	0x2000131c

080097f0 <inv_get_last_timestamp>:
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_time_t inv_get_last_timestamp()
{
    inv_time_t timestamp = 0;
    if (sensors.accel.status & INV_SENSOR_ON) {
 80097f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <inv_get_last_timestamp+0x40>)
 80097f2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
        timestamp = sensors.accel.timestamp;
    }
    if (sensors.gyro.status & INV_SENSOR_ON) {
 80097f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    if (sensors.accel.status & INV_SENSOR_ON) {
 80097f6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
        timestamp = sensors.accel.timestamp;
 80097fa:	bf18      	it	ne
 80097fc:	6fd8      	ldrne	r0, [r3, #124]	@ 0x7c
    if (sensors.gyro.status & INV_SENSOR_ON) {
 80097fe:	05d2      	lsls	r2, r2, #23
 8009800:	d503      	bpl.n	800980a <inv_get_last_timestamp+0x1a>
        if (timestamp < sensors.gyro.timestamp) {
 8009802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009804:	4290      	cmp	r0, r2
 8009806:	bf38      	it	cc
 8009808:	4610      	movcc	r0, r2
            timestamp = sensors.gyro.timestamp;
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON) {
 800980a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800980e:	05d1      	lsls	r1, r2, #23
 8009810:	d504      	bpl.n	800981c <inv_get_last_timestamp+0x2c>
        if (timestamp < sensors.compass.timestamp) {
 8009812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009816:	4290      	cmp	r0, r2
 8009818:	bf38      	it	cc
 800981a:	4610      	movcc	r0, r2
            timestamp = sensors.compass.timestamp;
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON) {
 800981c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8009820:	05d2      	lsls	r2, r2, #23
 8009822:	d504      	bpl.n	800982e <inv_get_last_timestamp+0x3e>
        if (timestamp < sensors.temp.timestamp)
 8009824:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009828:	4298      	cmp	r0, r3
 800982a:	bf38      	it	cc
 800982c:	4618      	movcc	r0, r3
            timestamp = sensors.temp.timestamp;
    }
    return timestamp;
}
 800982e:	4770      	bx	lr
 8009830:	2000131c 	.word	0x2000131c

08009834 <inv_set_accel_orientation_and_scale>:
    sensor->sensitivity = sensitivity;
 8009834:	4b01      	ldr	r3, [pc, #4]	@ (800983c <inv_set_accel_orientation_and_scale+0x8>)
 8009836:	6699      	str	r1, [r3, #104]	@ 0x68
    sensor->orientation = orientation;
 8009838:	6458      	str	r0, [r3, #68]	@ 0x44
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
                                     sensitivity);
}
 800983a:	4770      	bx	lr
 800983c:	2000131c 	.word	0x2000131c

08009840 <inv_set_compass_orientation_and_scale>:
    sensor->sensitivity = sensitivity;
 8009840:	4b02      	ldr	r3, [pc, #8]	@ (800984c <inv_set_compass_orientation_and_scale+0xc>)
 8009842:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    sensor->orientation = orientation;
 8009846:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
}
 800984a:	4770      	bx	lr
 800984c:	2000131c 	.word	0x2000131c

08009850 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
 8009850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
 8009852:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009856:	03db      	lsls	r3, r3, #15
 8009858:	9301      	str	r3, [sp, #4]
    raw32[1] = (long)sensor->raw[1] << 15;
 800985a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800985e:	03db      	lsls	r3, r3, #15
 8009860:	9302      	str	r3, [sp, #8]
    raw32[2] = (long)sensor->raw[2] << 15;
 8009862:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
{
 8009866:	460d      	mov	r5, r1

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 8009868:	4606      	mov	r6, r0
 800986a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
    raw32[2] = (long)sensor->raw[2] << 15;
 800986c:	03db      	lsls	r3, r3, #15
{
 800986e:	4604      	mov	r4, r0
    raw32[2] = (long)sensor->raw[2] << 15;
 8009870:	9303      	str	r3, [sp, #12]
    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 8009872:	aa01      	add	r2, sp, #4
 8009874:	f100 030c 	add.w	r3, r0, #12
 8009878:	0049      	lsls	r1, r1, #1
 800987a:	f836 0b18 	ldrh.w	r0, [r6], #24
 800987e:	f000 fd4a 	bl	800a316 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
 8009882:	682a      	ldr	r2, [r5, #0]
 8009884:	9b01      	ldr	r3, [sp, #4]
    raw32[1] -= bias[1] >> 1;
    raw32[2] -= bias[2] >> 1;

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 8009886:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009888:	8820      	ldrh	r0, [r4, #0]
    raw32[0] -= bias[0] >> 1;
 800988a:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 800988e:	9301      	str	r3, [sp, #4]
    raw32[1] -= bias[1] >> 1;
 8009890:	686a      	ldr	r2, [r5, #4]
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8009898:	9302      	str	r3, [sp, #8]
    raw32[2] -= bias[2] >> 1;
 800989a:	68aa      	ldr	r2, [r5, #8]
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80098a2:	9303      	str	r3, [sp, #12]
    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 80098a4:	aa01      	add	r2, sp, #4
 80098a6:	4633      	mov	r3, r6
 80098a8:	0049      	lsls	r1, r1, #1
 80098aa:	f000 fd34 	bl	800a316 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
 80098ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098b0:	f043 0320 	orr.w	r3, r3, #32
 80098b4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80098b6:	b004      	add	sp, #16
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080098bc <inv_get_compass_bias>:
* @param[out] bias Compass bias in hardware units scaled by 2^16. In mounting frame.
*             Length 3.
*/
void inv_get_compass_bias(long *bias)
{
    if (bias != NULL) {
 80098bc:	4603      	mov	r3, r0
 80098be:	b128      	cbz	r0, 80098cc <inv_get_compass_bias+0x10>
        memcpy(bias, inv_data_builder.save.compass_bias, sizeof(inv_data_builder.save.compass_bias));
 80098c0:	4a03      	ldr	r2, [pc, #12]	@ (80098d0 <inv_get_compass_bias+0x14>)
 80098c2:	ca03      	ldmia	r2!, {r0, r1}
 80098c4:	6018      	str	r0, [r3, #0]
 80098c6:	6059      	str	r1, [r3, #4]
 80098c8:	6810      	ldr	r0, [r2, #0]
 80098ca:	6098      	str	r0, [r3, #8]
    }
}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	200015a8 	.word	0x200015a8

080098d4 <inv_set_compass_bias>:

void inv_set_compass_bias(const long *bias, int accuracy)
{
 80098d4:	b538      	push	{r3, r4, r5, lr}
    if (memcmp(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias))) {
 80098d6:	220c      	movs	r2, #12
{
 80098d8:	4604      	mov	r4, r0
 80098da:	460d      	mov	r5, r1
    if (memcmp(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias))) {
 80098dc:	4601      	mov	r1, r0
 80098de:	480e      	ldr	r0, [pc, #56]	@ (8009918 <inv_set_compass_bias+0x44>)
 80098e0:	f003 fc7e 	bl	800d1e0 <memcmp>
 80098e4:	b150      	cbz	r0, 80098fc <inv_set_compass_bias+0x28>
        memcpy(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias));
 80098e6:	6820      	ldr	r0, [r4, #0]
 80098e8:	6861      	ldr	r1, [r4, #4]
 80098ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <inv_set_compass_bias+0x44>)
 80098ec:	c303      	stmia	r3!, {r0, r1}
 80098ee:	4619      	mov	r1, r3
 80098f0:	68a0      	ldr	r0, [r4, #8]
 80098f2:	f841 0908 	str.w	r0, [r1], #-8
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
 80098f6:	4809      	ldr	r0, [pc, #36]	@ (800991c <inv_set_compass_bias+0x48>)
 80098f8:	f7ff ffaa 	bl	8009850 <inv_apply_calibration>
    }
    sensors.compass.accuracy = accuracy;
 80098fc:	4b08      	ldr	r3, [pc, #32]	@ (8009920 <inv_set_compass_bias+0x4c>)
 80098fe:	f8c3 50bc 	str.w	r5, [r3, #188]	@ 0xbc
    inv_data_builder.save.compass_accuracy = accuracy;
 8009902:	4b08      	ldr	r3, [pc, #32]	@ (8009924 <inv_set_compass_bias+0x50>)
    inv_set_message(INV_MSG_NEW_CB_EVENT, INV_MSG_NEW_CB_EVENT, 0);
 8009904:	2108      	movs	r1, #8
    inv_data_builder.save.compass_accuracy = accuracy;
 8009906:	f8c3 5138 	str.w	r5, [r3, #312]	@ 0x138
    inv_set_message(INV_MSG_NEW_CB_EVENT, INV_MSG_NEW_CB_EVENT, 0);
 800990a:	2200      	movs	r2, #0
}
 800990c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    inv_set_message(INV_MSG_NEW_CB_EVENT, INV_MSG_NEW_CB_EVENT, 0);
 8009910:	4608      	mov	r0, r1
 8009912:	f000 b9cb 	b.w	8009cac <inv_set_message>
 8009916:	bf00      	nop
 8009918:	200015a8 	.word	0x200015a8
 800991c:	200013a4 	.word	0x200013a4
 8009920:	2000131c 	.word	0x2000131c
 8009924:	200014b4 	.word	0x200014b4

08009928 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
 8009928:	4b01      	ldr	r3, [pc, #4]	@ (8009930 <inv_set_compass_disturbance+0x8>)
 800992a:	f8c3 013c 	str.w	r0, [r3, #316]	@ 0x13c
}
 800992e:	4770      	bx	lr
 8009930:	200014b4 	.word	0x200014b4

08009934 <inv_set_accel_accuracy>:
/** Sets the accel accuracy.
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
*/
void inv_set_accel_accuracy(int accuracy)
{
    sensors.accel.accuracy = accuracy;
 8009934:	4b04      	ldr	r3, [pc, #16]	@ (8009948 <inv_set_accel_accuracy+0x14>)
 8009936:	6798      	str	r0, [r3, #120]	@ 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
 8009938:	4b04      	ldr	r3, [pc, #16]	@ (800994c <inv_set_accel_accuracy+0x18>)
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 800993a:	2110      	movs	r1, #16
    inv_data_builder.save.accel_accuracy = accuracy;
 800993c:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 8009940:	2200      	movs	r2, #0
 8009942:	4608      	mov	r0, r1
 8009944:	f000 b9b2 	b.w	8009cac <inv_set_message>
 8009948:	2000131c 	.word	0x2000131c
 800994c:	200014b4 	.word	0x200014b4

08009950 <inv_set_accel_bias_mask>:
* @param[in] bias Accel bias, length 3. In HW units scaled by 2^16 in body frame
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
* @param[in] mask Mask to select axis to apply bias set.
*/
void inv_set_accel_bias_mask(const long *bias, int accuracy, int mask)
{
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4c11      	ldr	r4, [pc, #68]	@ (8009998 <inv_set_accel_bias_mask+0x48>)
 8009954:	460d      	mov	r5, r1
    if (bias) {
 8009956:	b198      	cbz	r0, 8009980 <inv_set_accel_bias_mask+0x30>
        if (mask & 1){
 8009958:	07d3      	lsls	r3, r2, #31
            inv_data_builder.save.accel_bias[0] = bias[0];
 800995a:	bf44      	itt	mi
 800995c:	6803      	ldrmi	r3, [r0, #0]
 800995e:	f8c4 3114 	strmi.w	r3, [r4, #276]	@ 0x114
        }
        if (mask & 2){
 8009962:	0791      	lsls	r1, r2, #30
            inv_data_builder.save.accel_bias[1] = bias[1];
 8009964:	bf44      	itt	mi
 8009966:	6843      	ldrmi	r3, [r0, #4]
 8009968:	f8c4 3118 	strmi.w	r3, [r4, #280]	@ 0x118
        }
        if (mask & 4){
 800996c:	0753      	lsls	r3, r2, #29
            inv_data_builder.save.accel_bias[2] = bias[2];
 800996e:	bf48      	it	mi
 8009970:	6883      	ldrmi	r3, [r0, #8]
        }

        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 8009972:	490a      	ldr	r1, [pc, #40]	@ (800999c <inv_set_accel_bias_mask+0x4c>)
 8009974:	480a      	ldr	r0, [pc, #40]	@ (80099a0 <inv_set_accel_bias_mask+0x50>)
            inv_data_builder.save.accel_bias[2] = bias[2];
 8009976:	bf48      	it	mi
 8009978:	f8c4 311c 	strmi.w	r3, [r4, #284]	@ 0x11c
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800997c:	f7ff ff68 	bl	8009850 <inv_apply_calibration>
    }
    sensors.accel.accuracy = accuracy;
 8009980:	4b08      	ldr	r3, [pc, #32]	@ (80099a4 <inv_set_accel_bias_mask+0x54>)
    inv_data_builder.save.accel_accuracy = accuracy;
 8009982:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 8009986:	2110      	movs	r1, #16
    sensors.accel.accuracy = accuracy;
 8009988:	679d      	str	r5, [r3, #120]	@ 0x78
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 800998a:	2200      	movs	r2, #0
}
 800998c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 8009990:	4608      	mov	r0, r1
 8009992:	f000 b98b 	b.w	8009cac <inv_set_message>
 8009996:	bf00      	nop
 8009998:	200014b4 	.word	0x200014b4
 800999c:	200015c8 	.word	0x200015c8
 80099a0:	20001360 	.word	0x20001360
 80099a4:	2000131c 	.word	0x2000131c

080099a8 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	460d      	mov	r5, r1
    if (bias != NULL) {
 80099ac:	4604      	mov	r4, r0
 80099ae:	b180      	cbz	r0, 80099d2 <inv_set_gyro_bias+0x2a>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
 80099b0:	4601      	mov	r1, r0
 80099b2:	220c      	movs	r2, #12
 80099b4:	4812      	ldr	r0, [pc, #72]	@ (8009a00 <inv_set_gyro_bias+0x58>)
 80099b6:	f003 fc13 	bl	800d1e0 <memcmp>
 80099ba:	b150      	cbz	r0, 80099d2 <inv_set_gyro_bias+0x2a>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	6861      	ldr	r1, [r4, #4]
 80099c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a00 <inv_set_gyro_bias+0x58>)
 80099c2:	c303      	stmia	r3!, {r0, r1}
 80099c4:	4619      	mov	r1, r3
 80099c6:	68a0      	ldr	r0, [r4, #8]
 80099c8:	f841 0908 	str.w	r0, [r1], #-8
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 80099cc:	480d      	ldr	r0, [pc, #52]	@ (8009a04 <inv_set_gyro_bias+0x5c>)
 80099ce:	f7ff ff3f 	bl	8009850 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
 80099d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a04 <inv_set_gyro_bias+0x5c>)
    inv_data_builder.save.gyro_accuracy = accuracy;
 80099d4:	4c0c      	ldr	r4, [pc, #48]	@ (8009a08 <inv_set_gyro_bias+0x60>)
    sensors.gyro.accuracy = accuracy;
 80099d6:	635d      	str	r5, [r3, #52]	@ 0x34

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
 80099d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
    inv_data_builder.save.gyro_accuracy = accuracy;
 80099dc:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
 80099e0:	2b00      	cmp	r3, #0
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 80099e2:	f04f 0104 	mov.w	r1, #4
        inv_data_builder.save.gyro_temp = 1769472L;
 80099e6:	bf08      	it	eq
 80099e8:	f44f 13d8 	moveq.w	r3, #1769472	@ 0x1b0000
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 80099ec:	2200      	movs	r2, #0
 80099ee:	4608      	mov	r0, r1
 80099f0:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 80099f4:	f000 f95a 	bl	8009cac <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
}
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200015b4 	.word	0x200015b4
 8009a04:	2000131c 	.word	0x2000131c
 8009a08:	200014b4 	.word	0x200014b4

08009a0c <inv_get_gyro_bias_tc_set>:
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
 8009a0c:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <inv_get_gyro_bias_tc_set+0x14>)
 8009a0e:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
    inv_data_builder.save.gyro_bias_tc_set = false;
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    return flag;
}
 8009a18:	1e43      	subs	r3, r0, #1
 8009a1a:	4258      	negs	r0, r3
 8009a1c:	4158      	adcs	r0, r3
 8009a1e:	4770      	bx	lr
 8009a20:	200014b4 	.word	0x200014b4

08009a24 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
 8009a24:	b510      	push	{r4, lr}
    if (bias != NULL)
 8009a26:	4603      	mov	r3, r0
{
 8009a28:	460c      	mov	r4, r1
    if (bias != NULL)
 8009a2a:	b128      	cbz	r0, 8009a38 <inv_get_gyro_bias+0x14>
        memcpy(bias, inv_data_builder.save.gyro_bias,
 8009a2c:	4a05      	ldr	r2, [pc, #20]	@ (8009a44 <inv_get_gyro_bias+0x20>)
 8009a2e:	ca03      	ldmia	r2!, {r0, r1}
 8009a30:	6018      	str	r0, [r3, #0]
 8009a32:	6059      	str	r1, [r3, #4]
 8009a34:	6810      	ldr	r0, [r2, #0]
 8009a36:	6098      	str	r0, [r3, #8]
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
 8009a38:	b11c      	cbz	r4, 8009a42 <inv_get_gyro_bias+0x1e>
        temp[0] = inv_data_builder.save.gyro_temp;
 8009a3a:	4b03      	ldr	r3, [pc, #12]	@ (8009a48 <inv_get_gyro_bias+0x24>)
 8009a3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8009a40:	6023      	str	r3, [r4, #0]
}
 8009a42:	bd10      	pop	{r4, pc}
 8009a44:	200015b4 	.word	0x200015b4
 8009a48:	200014b4 	.word	0x200014b4

08009a4c <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 8009a50:	4b29      	ldr	r3, [pc, #164]	@ (8009af8 <inv_register_data_cb+0xac>)
 8009a52:	681c      	ldr	r4, [r3, #0]
{
 8009a54:	4680      	mov	r8, r0
 8009a56:	4691      	mov	r9, r2
 8009a58:	460e      	mov	r6, r1
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	461f      	mov	r7, r3
 8009a60:	4284      	cmp	r4, r0
 8009a62:	dc0f      	bgt.n	8009a84 <inv_register_data_cb+0x38>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
 8009a64:	2c14      	cmp	r4, #20
 8009a66:	d03d      	beq.n	8009ae4 <inv_register_data_cb+0x98>
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
 8009a68:	b9b4      	cbnz	r4, 8009a98 <inv_register_data_cb+0x4c>
        kk = 0;
 8009a6a:	4625      	mov	r5, r4
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	fb03 7505 	mla	r5, r3, r5, r7
        inv_data_builder.process[kk].priority = priority;
 8009a72:	e9c5 8601 	strd	r8, r6, [r5, #4]
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
 8009a76:	3401      	adds	r4, #1
        inv_data_builder.process[kk].data_required = sensor_type;
 8009a78:	f8c5 900c 	str.w	r9, [r5, #12]
        inv_data_builder.num_cb++;
 8009a7c:	603c      	str	r4, [r7, #0]
    inv_error_t result = INV_SUCCESS;
 8009a7e:	2000      	movs	r0, #0
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
 8009a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ((inv_data_builder.process[kk].func == func) ||
 8009a84:	6851      	ldr	r1, [r2, #4]
 8009a86:	4541      	cmp	r1, r8
 8009a88:	d033      	beq.n	8009af2 <inv_register_data_cb+0xa6>
 8009a8a:	6891      	ldr	r1, [r2, #8]
 8009a8c:	42b1      	cmp	r1, r6
 8009a8e:	f102 020c 	add.w	r2, r2, #12
 8009a92:	d02e      	beq.n	8009af2 <inv_register_data_cb+0xa6>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 8009a94:	3001      	adds	r0, #1
 8009a96:	e7e3      	b.n	8009a60 <inv_register_data_cb+0x14>
        kk = 0;
 8009a98:	2500      	movs	r5, #0
 8009a9a:	e005      	b.n	8009aa8 <inv_register_data_cb+0x5c>
            while ((kk < inv_data_builder.num_cb) &&
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	42b2      	cmp	r2, r6
 8009aa0:	f103 030c 	add.w	r3, r3, #12
 8009aa4:	da03      	bge.n	8009aae <inv_register_data_cb+0x62>
                kk++;
 8009aa6:	3501      	adds	r5, #1
            while ((kk < inv_data_builder.num_cb) &&
 8009aa8:	42ac      	cmp	r4, r5
 8009aaa:	dcf7      	bgt.n	8009a9c <inv_register_data_cb+0x50>
            if (kk != inv_data_builder.num_cb) {
 8009aac:	d0de      	beq.n	8009a6c <inv_register_data_cb+0x20>
                    inv_data_builder.process[nn] =
 8009aae:	210c      	movs	r1, #12
 8009ab0:	fb01 f004 	mul.w	r0, r1, r4
 8009ab4:	42ac      	cmp	r4, r5
 8009ab6:	eba5 0304 	sub.w	r3, r5, r4
 8009aba:	eba4 0205 	sub.w	r2, r4, r5
 8009abe:	fb03 1301 	mla	r3, r3, r1, r1
 8009ac2:	fb01 f202 	mul.w	r2, r1, r2
 8009ac6:	bfb8      	it	lt
 8009ac8:	460b      	movlt	r3, r1
 8009aca:	f1a0 0108 	sub.w	r1, r0, #8
 8009ace:	f100 0004 	add.w	r0, r0, #4
 8009ad2:	4419      	add	r1, r3
 8009ad4:	4418      	add	r0, r3
 8009ad6:	bfb8      	it	lt
 8009ad8:	2200      	movlt	r2, #0
 8009ada:	4439      	add	r1, r7
 8009adc:	4438      	add	r0, r7
 8009ade:	f003 fb8f 	bl	800d200 <memmove>
 8009ae2:	e7c3      	b.n	8009a6c <inv_register_data_cb+0x20>
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
 8009ae4:	4a05      	ldr	r2, [pc, #20]	@ (8009afc <inv_register_data_cb+0xb0>)
 8009ae6:	4906      	ldr	r1, [pc, #24]	@ (8009b00 <inv_register_data_cb+0xb4>)
 8009ae8:	2006      	movs	r0, #6
 8009aea:	f7ff fd4b 	bl	8009584 <_MLPrintLog>
        result = INV_ERROR_MEMORY_EXAUSTED;
 8009aee:	200c      	movs	r0, #12
 8009af0:	e7c6      	b.n	8009a80 <inv_register_data_cb+0x34>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
 8009af2:	2016      	movs	r0, #22
 8009af4:	e7c4      	b.n	8009a80 <inv_register_data_cb+0x34>
 8009af6:	bf00      	nop
 8009af8:	200014b4 	.word	0x200014b4
 8009afc:	08014b63 	.word	0x08014b63
 8009b00:	08014ba7 	.word	0x08014ba7

08009b04 <inv_unregister_data_cb>:
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 8009b04:	4a10      	ldr	r2, [pc, #64]	@ (8009b48 <inv_unregister_data_cb+0x44>)
{
 8009b06:	b570      	push	{r4, r5, r6, lr}
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 8009b08:	6814      	ldr	r4, [r2, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4615      	mov	r5, r2
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	dd16      	ble.n	8009b40 <inv_unregister_data_cb+0x3c>
        if (inv_data_builder.process[kk].func == func) {
 8009b12:	6851      	ldr	r1, [r2, #4]
 8009b14:	4281      	cmp	r1, r0
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 8009b16:	f103 0601 	add.w	r6, r3, #1
        if (inv_data_builder.process[kk].func == func) {
 8009b1a:	f102 020c 	add.w	r2, r2, #12
 8009b1e:	d111      	bne.n	8009b44 <inv_unregister_data_cb+0x40>
 8009b20:	210c      	movs	r1, #12
 8009b22:	434b      	muls	r3, r1
                inv_data_builder.process[nn - 1] =
 8009b24:	1ba2      	subs	r2, r4, r6
 8009b26:	434a      	muls	r2, r1
 8009b28:	f103 0110 	add.w	r1, r3, #16
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	bfc8      	it	gt
 8009b32:	2200      	movgt	r2, #0
 8009b34:	4429      	add	r1, r5
 8009b36:	18e8      	adds	r0, r5, r3
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
 8009b38:	3c01      	subs	r4, #1
                inv_data_builder.process[nn - 1] =
 8009b3a:	f003 fb61 	bl	800d200 <memmove>
            inv_data_builder.num_cb--;
 8009b3e:	602c      	str	r4, [r5, #0]
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
 8009b40:	2000      	movs	r0, #0
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 8009b44:	4633      	mov	r3, r6
 8009b46:	e7e2      	b.n	8009b0e <inv_unregister_data_cb+0xa>
 8009b48:	200014b4 	.word	0x200014b4

08009b4c <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 8009b4c:	b530      	push	{r4, r5, lr}
    if (data != NULL) {
 8009b4e:	4603      	mov	r3, r0
{
 8009b50:	460d      	mov	r5, r1
    if (data != NULL) {
 8009b52:	b128      	cbz	r0, 8009b60 <inv_get_accel_set+0x14>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
 8009b54:	4c07      	ldr	r4, [pc, #28]	@ (8009b74 <inv_get_accel_set+0x28>)
 8009b56:	cc03      	ldmia	r4!, {r0, r1}
 8009b58:	6018      	str	r0, [r3, #0]
 8009b5a:	6059      	str	r1, [r3, #4]
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	6098      	str	r0, [r3, #8]
    }
    if (timestamp != NULL) {
 8009b60:	b112      	cbz	r2, 8009b68 <inv_get_accel_set+0x1c>
        *timestamp = sensors.accel.timestamp;
 8009b62:	4b05      	ldr	r3, [pc, #20]	@ (8009b78 <inv_get_accel_set+0x2c>)
 8009b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b66:	6013      	str	r3, [r2, #0]
    }
    if (accuracy != NULL) {
 8009b68:	b115      	cbz	r5, 8009b70 <inv_get_accel_set+0x24>
        *accuracy = sensors.accel.accuracy;
 8009b6a:	4b03      	ldr	r3, [pc, #12]	@ (8009b78 <inv_get_accel_set+0x2c>)
 8009b6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b6e:	702b      	strb	r3, [r5, #0]
    }
}
 8009b70:	bd30      	pop	{r4, r5, pc}
 8009b72:	bf00      	nop
 8009b74:	20001378 	.word	0x20001378
 8009b78:	2000131c 	.word	0x2000131c

08009b7c <inv_get_gyro>:
/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 8009b7c:	4a03      	ldr	r2, [pc, #12]	@ (8009b8c <inv_get_gyro+0x10>)
{
 8009b7e:	4603      	mov	r3, r0
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 8009b80:	ca03      	ldmia	r2!, {r0, r1}
 8009b82:	6018      	str	r0, [r3, #0]
 8009b84:	6059      	str	r1, [r3, #4]
 8009b86:	6810      	ldr	r0, [r2, #0]
 8009b88:	6098      	str	r0, [r3, #8]
}
 8009b8a:	4770      	bx	lr
 8009b8c:	20001334 	.word	0x20001334

08009b90 <inv_get_gyro_accuracy>:
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_gyro_accuracy(void)
{
    return sensors.gyro.accuracy;
}
 8009b90:	4b01      	ldr	r3, [pc, #4]	@ (8009b98 <inv_get_gyro_accuracy+0x8>)
 8009b92:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000131c 	.word	0x2000131c

08009b9c <inv_get_mag_accuracy>:
/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_mag_accuracy(void)
{
    if (inv_data_builder.compass_disturbance)
 8009b9c:	4b04      	ldr	r3, [pc, #16]	@ (8009bb0 <inv_get_mag_accuracy+0x14>)
 8009b9e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8009ba2:	b91b      	cbnz	r3, 8009bac <inv_get_mag_accuracy+0x10>
        return 0;
    return sensors.compass.accuracy;
 8009ba4:	4b03      	ldr	r3, [pc, #12]	@ (8009bb4 <inv_get_mag_accuracy+0x18>)
 8009ba6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8009baa:	4770      	bx	lr
        return 0;
 8009bac:	2000      	movs	r0, #0
}
 8009bae:	4770      	bx	lr
 8009bb0:	200014b4 	.word	0x200014b4
 8009bb4:	2000131c 	.word	0x2000131c

08009bb8 <inv_get_accel_accuracy>:
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_accel_accuracy(void)
{
    return sensors.accel.accuracy;
}
 8009bb8:	4b01      	ldr	r3, [pc, #4]	@ (8009bc0 <inv_get_accel_accuracy+0x8>)
 8009bba:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	2000131c 	.word	0x2000131c

08009bc4 <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
 8009bc4:	b538      	push	{r3, r4, r5, lr}
    int i;
    for (i=0; i<9; i++) {
        sensors.soft_iron.matrix_f[i] = 0.0f;
 8009bc6:	4c0f      	ldr	r4, [pc, #60]	@ (8009c04 <inv_reset_compass_soft_iron_matrix+0x40>)
 8009bc8:	251c      	movs	r5, #28
 8009bca:	462a      	mov	r2, r5
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f003 fb30 	bl	800d234 <memset>
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	f1a4 0024 	sub.w	r0, r4, #36	@ 0x24
 8009bdc:	f003 fb2a 	bl	800d234 <memset>

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
 8009be0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
        sensors.soft_iron.matrix_f[i*4] = 1.0;
 8009be4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
 8009be8:	f844 3c28 	str.w	r3, [r4, #-40]
 8009bec:	f844 3c18 	str.w	r3, [r4, #-24]
 8009bf0:	f844 3c08 	str.w	r3, [r4, #-8]
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
    sensors.soft_iron.enable = 0;
 8009bf4:	2300      	movs	r3, #0
        sensors.soft_iron.matrix_f[i*4] = 1.0;
 8009bf6:	f844 2c04 	str.w	r2, [r4, #-4]
 8009bfa:	60e2      	str	r2, [r4, #12]
 8009bfc:	61e2      	str	r2, [r4, #28]
    sensors.soft_iron.enable = 0;
 8009bfe:	6223      	str	r3, [r4, #32]
}
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	2000148c 	.word	0x2000148c

08009c08 <inv_init_data_builder>:
{
 8009c08:	b510      	push	{r4, lr}
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
 8009c0a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4809      	ldr	r0, [pc, #36]	@ (8009c38 <inv_init_data_builder+0x30>)
 8009c12:	f003 fb0f 	bl	800d234 <memset>
    memset(&sensors, 0, sizeof(sensors));
 8009c16:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4807      	ldr	r0, [pc, #28]	@ (8009c3c <inv_init_data_builder+0x34>)
 8009c1e:	f003 fb09 	bl	800d234 <memset>
    inv_reset_compass_soft_iron_matrix();
 8009c22:	f7ff ffcf 	bl	8009bc4 <inv_reset_compass_soft_iron_matrix>
}
 8009c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
 8009c2a:	4905      	ldr	r1, [pc, #20]	@ (8009c40 <inv_init_data_builder+0x38>)
 8009c2c:	4805      	ldr	r0, [pc, #20]	@ (8009c44 <inv_init_data_builder+0x3c>)
 8009c2e:	f24d 0393 	movw	r3, #53395	@ 0xd093
 8009c32:	2248      	movs	r2, #72	@ 0x48
 8009c34:	f000 be00 	b.w	800a838 <inv_register_load_store>
 8009c38:	200014b4 	.word	0x200014b4
 8009c3c:	2000131c 	.word	0x2000131c
 8009c40:	080096e9 	.word	0x080096e9
 8009c44:	080096fd 	.word	0x080096fd

08009c48 <inv_get_sensor_type_gravity>:
*             inv_build_accel().
* @return     Returns 1 if the data was updated or 0 if it was not updated.
*/
int inv_get_sensor_type_gravity(float *values, int8_t *accuracy,
                                 inv_time_t * timestamp)
{
 8009c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    long gravity[3];

    *accuracy = (int8_t) hal_out.accuracy_quat;
 8009c4a:	4b16      	ldr	r3, [pc, #88]	@ (8009ca4 <inv_get_sensor_type_gravity+0x5c>)
{
 8009c4c:	4604      	mov	r4, r0
    *accuracy = (int8_t) hal_out.accuracy_quat;
 8009c4e:	6858      	ldr	r0, [r3, #4]
 8009c50:	7008      	strb	r0, [r1, #0]
    *timestamp = hal_out.nav_timestamp;
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	6013      	str	r3, [r2, #0]
    inv_get_gravity(gravity);
 8009c56:	a801      	add	r0, sp, #4
 8009c58:	f000 fc7a 	bl	800a550 <inv_get_gravity>
    values[0] = (gravity[0] >> 14) * ACCEL_CONVERSION;
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8009ca8 <inv_get_sensor_type_gravity+0x60>
 8009c62:	139b      	asrs	r3, r3, #14
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 8009c6c:	9b02      	ldr	r3, [sp, #8]
    values[0] = (gravity[0] >> 14) * ACCEL_CONVERSION;
 8009c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 8009c72:	139b      	asrs	r3, r3, #14
    values[0] = (gravity[0] >> 14) * ACCEL_CONVERSION;
 8009c74:	edc4 7a00 	vstr	s15, [r4]
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 8009c80:	9b03      	ldr	r3, [sp, #12]
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 8009c82:	ee67 7a87 	vmul.f32	s15, s15, s14
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 8009c86:	139b      	asrs	r3, r3, #14
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 8009c88:	edc4 7a01 	vstr	s15, [r4, #4]
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    return 1;
}
 8009c94:	2001      	movs	r0, #1
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 8009c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c9a:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8009c9e:	b004      	add	sp, #16
 8009ca0:	bd10      	pop	{r4, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200015f4 	.word	0x200015f4
 8009ca8:	391ce80a 	.word	0x391ce80a

08009cac <inv_set_message>:
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
    if (level == 0) {
 8009cac:	b92a      	cbnz	r2, 8009cba <inv_set_message+0xe>
        mh.message &= ~clear;
        mh.message |= set;
 8009cae:	4a03      	ldr	r2, [pc, #12]	@ (8009cbc <inv_set_message+0x10>)
        mh.message &= ~clear;
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	ea23 0301 	bic.w	r3, r3, r1
        mh.message |= set;
 8009cb6:	4318      	orrs	r0, r3
 8009cb8:	6010      	str	r0, [r2, #0]
    }
}
 8009cba:	4770      	bx	lr
 8009cbc:	200016b8 	.word	0x200016b8

08009cc0 <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
 8009cc0:	f990 3000 	ldrsb.w	r3, [r0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dc0c      	bgt.n	8009ce2 <inv_row_2_scale+0x22>
        b = 0;
    else if (row[0] < 0)
 8009cc8:	d10d      	bne.n	8009ce6 <inv_row_2_scale+0x26>
        b = 4;
    else if (row[1] > 0)
 8009cca:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dc0b      	bgt.n	8009cea <inv_row_2_scale+0x2a>
        b = 1;
    else if (row[1] < 0)
 8009cd2:	d10c      	bne.n	8009cee <inv_row_2_scale+0x2e>
        b = 5;
    else if (row[2] > 0)
 8009cd4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dc0a      	bgt.n	8009cf2 <inv_row_2_scale+0x32>
        b = 2;
    else if (row[2] < 0)
 8009cdc:	d00b      	beq.n	8009cf6 <inv_row_2_scale+0x36>
        b = 6;
 8009cde:	2006      	movs	r0, #6
 8009ce0:	4770      	bx	lr
        b = 0;
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	4770      	bx	lr
        b = 4;
 8009ce6:	2004      	movs	r0, #4
 8009ce8:	4770      	bx	lr
        b = 1;
 8009cea:	2001      	movs	r0, #1
 8009cec:	4770      	bx	lr
        b = 5;
 8009cee:	2005      	movs	r0, #5
 8009cf0:	4770      	bx	lr
        b = 2;
 8009cf2:	2002      	movs	r0, #2
 8009cf4:	4770      	bx	lr
    else
        b = 7;		// error
 8009cf6:	2007      	movs	r0, #7
    return b;
}
 8009cf8:	4770      	bx	lr

08009cfa <inv_get_gyro_sum_of_sqr>:
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 8009cfa:	6802      	ldr	r2, [r0, #0]
 8009cfc:	6883      	ldr	r3, [r0, #8]
 8009cfe:	6841      	ldr	r1, [r0, #4]
 8009d00:	1352      	asrs	r2, r2, #13
        gmag += temp * temp;
 8009d02:	4352      	muls	r2, r2
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 8009d04:	135b      	asrs	r3, r3, #13
 8009d06:	1349      	asrs	r1, r1, #13
        gmag += temp * temp;
 8009d08:	fb03 2303 	mla	r3, r3, r3, r2
}
 8009d0c:	fb01 3001 	mla	r0, r1, r1, r3
 8009d10:	4770      	bx	lr

08009d12 <inv_q29_mult>:
    temp = (long long)a * b;
 8009d12:	fb80 0101 	smull	r0, r1, r0, r1
    result = (long)(temp >> 29);
 8009d16:	0f40      	lsrs	r0, r0, #29
}
 8009d18:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 8009d1c:	4770      	bx	lr

08009d1e <inv_q30_mult>:
    temp = (long long)a * b;
 8009d1e:	fb80 0101 	smull	r0, r1, r0, r1
    result = (long)(temp >> 30);
 8009d22:	0f80      	lsrs	r0, r0, #30
}
 8009d24:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8009d28:	4770      	bx	lr

08009d2a <inv_q_mult>:
    temp = (long long)a * b;
 8009d2a:	6803      	ldr	r3, [r0, #0]
{
 8009d2c:	b530      	push	{r4, r5, lr}
    temp = (long long)a * b;
 8009d2e:	680c      	ldr	r4, [r1, #0]
 8009d30:	684d      	ldr	r5, [r1, #4]
 8009d32:	fb83 3404 	smull	r3, r4, r3, r4
    result = (long)(temp >> 30);
 8009d36:	0f9b      	lsrs	r3, r3, #30
 8009d38:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    temp = (long long)a * b;
 8009d3c:	6844      	ldr	r4, [r0, #4]
 8009d3e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009d42:	0fa4      	lsrs	r4, r4, #30
 8009d44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 8009d48:	1b1b      	subs	r3, r3, r4
    temp = (long long)a * b;
 8009d4a:	688d      	ldr	r5, [r1, #8]
 8009d4c:	6884      	ldr	r4, [r0, #8]
 8009d4e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009d52:	0fa4      	lsrs	r4, r4, #30
 8009d54:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 8009d58:	1b1b      	subs	r3, r3, r4
    temp = (long long)a * b;
 8009d5a:	68cd      	ldr	r5, [r1, #12]
 8009d5c:	68c4      	ldr	r4, [r0, #12]
 8009d5e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009d62:	0fa4      	lsrs	r4, r4, #30
 8009d64:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 8009d68:	1b1b      	subs	r3, r3, r4
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 8009d6a:	6013      	str	r3, [r2, #0]
    temp = (long long)a * b;
 8009d6c:	6843      	ldr	r3, [r0, #4]
 8009d6e:	680c      	ldr	r4, [r1, #0]
 8009d70:	684d      	ldr	r5, [r1, #4]
 8009d72:	fb83 3404 	smull	r3, r4, r3, r4
    result = (long)(temp >> 30);
 8009d76:	0f9b      	lsrs	r3, r3, #30
 8009d78:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    temp = (long long)a * b;
 8009d7c:	6804      	ldr	r4, [r0, #0]
 8009d7e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009d82:	0fa4      	lsrs	r4, r4, #30
 8009d84:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 8009d88:	4423      	add	r3, r4
    temp = (long long)a * b;
 8009d8a:	68cd      	ldr	r5, [r1, #12]
 8009d8c:	6884      	ldr	r4, [r0, #8]
 8009d8e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009d92:	0fa4      	lsrs	r4, r4, #30
 8009d94:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 8009d98:	4423      	add	r3, r4
    temp = (long long)a * b;
 8009d9a:	688d      	ldr	r5, [r1, #8]
 8009d9c:	68c4      	ldr	r4, [r0, #12]
 8009d9e:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009da2:	0fa4      	lsrs	r4, r4, #30
 8009da4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 8009da8:	1b1b      	subs	r3, r3, r4
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 8009daa:	6053      	str	r3, [r2, #4]
    temp = (long long)a * b;
 8009dac:	6803      	ldr	r3, [r0, #0]
 8009dae:	688c      	ldr	r4, [r1, #8]
 8009db0:	68cd      	ldr	r5, [r1, #12]
 8009db2:	fb83 3404 	smull	r3, r4, r3, r4
    result = (long)(temp >> 30);
 8009db6:	0f9b      	lsrs	r3, r3, #30
 8009db8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    temp = (long long)a * b;
 8009dbc:	6844      	ldr	r4, [r0, #4]
 8009dbe:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009dc2:	0fa4      	lsrs	r4, r4, #30
 8009dc4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 8009dc8:	1b1b      	subs	r3, r3, r4
    temp = (long long)a * b;
 8009dca:	680d      	ldr	r5, [r1, #0]
 8009dcc:	6884      	ldr	r4, [r0, #8]
 8009dce:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009dd2:	0fa4      	lsrs	r4, r4, #30
 8009dd4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 8009dd8:	4423      	add	r3, r4
    temp = (long long)a * b;
 8009dda:	684d      	ldr	r5, [r1, #4]
 8009ddc:	68c4      	ldr	r4, [r0, #12]
 8009dde:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009de2:	0fa4      	lsrs	r4, r4, #30
 8009de4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 8009de8:	4423      	add	r3, r4
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 8009dea:	6093      	str	r3, [r2, #8]
    temp = (long long)a * b;
 8009dec:	688b      	ldr	r3, [r1, #8]
 8009dee:	6844      	ldr	r4, [r0, #4]
 8009df0:	68cd      	ldr	r5, [r1, #12]
 8009df2:	fb83 3404 	smull	r3, r4, r3, r4
    result = (long)(temp >> 30);
 8009df6:	0f9b      	lsrs	r3, r3, #30
 8009df8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    temp = (long long)a * b;
 8009dfc:	6804      	ldr	r4, [r0, #0]
 8009dfe:	fb84 4505 	smull	r4, r5, r4, r5
    result = (long)(temp >> 30);
 8009e02:	0fa4      	lsrs	r4, r4, #30
 8009e04:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 8009e08:	4423      	add	r3, r4
    temp = (long long)a * b;
 8009e0a:	684c      	ldr	r4, [r1, #4]
 8009e0c:	6885      	ldr	r5, [r0, #8]
 8009e0e:	6809      	ldr	r1, [r1, #0]
 8009e10:	68c0      	ldr	r0, [r0, #12]
 8009e12:	fb84 4505 	smull	r4, r5, r4, r5
 8009e16:	fb81 1000 	smull	r1, r0, r1, r0
    result = (long)(temp >> 30);
 8009e1a:	0fa4      	lsrs	r4, r4, #30
 8009e1c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8009e20:	0f89      	lsrs	r1, r1, #30
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 8009e22:	1b1b      	subs	r3, r3, r4
    result = (long)(temp >> 30);
 8009e24:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 8009e28:	440b      	add	r3, r1
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 8009e2a:	60d3      	str	r3, [r2, #12]
}
 8009e2c:	bd30      	pop	{r4, r5, pc}

08009e2e <inv_q_add>:
    qSum[0] = q1[0] + q2[0];
 8009e2e:	6803      	ldr	r3, [r0, #0]
{
 8009e30:	b510      	push	{r4, lr}
    qSum[0] = q1[0] + q2[0];
 8009e32:	680c      	ldr	r4, [r1, #0]
 8009e34:	4423      	add	r3, r4
 8009e36:	6013      	str	r3, [r2, #0]
    qSum[1] = q1[1] + q2[1];
 8009e38:	684c      	ldr	r4, [r1, #4]
 8009e3a:	6843      	ldr	r3, [r0, #4]
 8009e3c:	4423      	add	r3, r4
 8009e3e:	6053      	str	r3, [r2, #4]
    qSum[2] = q1[2] + q2[2];
 8009e40:	688c      	ldr	r4, [r1, #8]
 8009e42:	6883      	ldr	r3, [r0, #8]
 8009e44:	4423      	add	r3, r4
 8009e46:	6093      	str	r3, [r2, #8]
    qSum[3] = q1[3] + q2[3];
 8009e48:	68c3      	ldr	r3, [r0, #12]
 8009e4a:	68c9      	ldr	r1, [r1, #12]
 8009e4c:	440b      	add	r3, r1
 8009e4e:	60d3      	str	r3, [r2, #12]
}
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <inv_q_invert>:
    qInverted[0] = q[0];
 8009e52:	6803      	ldr	r3, [r0, #0]
 8009e54:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
 8009e56:	6843      	ldr	r3, [r0, #4]
 8009e58:	425b      	negs	r3, r3
 8009e5a:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
 8009e5c:	6883      	ldr	r3, [r0, #8]
 8009e5e:	425b      	negs	r3, r3
 8009e60:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
 8009e62:	68c3      	ldr	r3, [r0, #12]
 8009e64:	425b      	negs	r3, r3
 8009e66:	60cb      	str	r3, [r1, #12]
}
 8009e68:	4770      	bx	lr
	...

08009e6c <inv_compass_angle>:
{
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 8009e6e:	6846      	ldr	r6, [r0, #4]
 8009e70:	684f      	ldr	r7, [r1, #4]
 8009e72:	6884      	ldr	r4, [r0, #8]
{
 8009e74:	b091      	sub	sp, #68	@ 0x44
 8009e76:	4615      	mov	r5, r2
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 8009e78:	688a      	ldr	r2, [r1, #8]
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 8009e7a:	6809      	ldr	r1, [r1, #0]
    cgcross[0] = 0L;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9300      	str	r3, [sp, #0]
    temp = (long long)a * b;
 8009e80:	fb86 3c02 	smull	r3, ip, r6, r2
    result = (long)(temp >> 30);
 8009e84:	0f9b      	lsrs	r3, r3, #30
 8009e86:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
    temp = (long long)a * b;
 8009e8a:	fb84 ce07 	smull	ip, lr, r4, r7
    result = (long)(temp >> 30);
 8009e8e:	ea4f 7c9c 	mov.w	ip, ip, lsr #30
 8009e92:	ea4c 0c8e 	orr.w	ip, ip, lr, lsl #2
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 8009e96:	eba3 030c 	sub.w	r3, r3, ip
 8009e9a:	9301      	str	r3, [sp, #4]
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 8009e9c:	6803      	ldr	r3, [r0, #0]
    temp = (long long)a * b;
 8009e9e:	fb81 4004 	smull	r4, r0, r1, r4
    result = (long)(temp >> 30);
 8009ea2:	0fa4      	lsrs	r4, r4, #30
 8009ea4:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
    temp = (long long)a * b;
 8009ea8:	fb81 1606 	smull	r1, r6, r1, r6
 8009eac:	fb83 2002 	smull	r2, r0, r3, r2
 8009eb0:	fb83 3707 	smull	r3, r7, r3, r7
    result = (long)(temp >> 30);
 8009eb4:	0f92      	lsrs	r2, r2, #30
 8009eb6:	0f9b      	lsrs	r3, r3, #30
 8009eb8:	0f89      	lsrs	r1, r1, #30
 8009eba:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8009ebe:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 8009ec2:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 8009ec6:	1a5b      	subs	r3, r3, r1
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 8009ec8:	1aa4      	subs	r4, r4, r2
    inv_q_mult(quat, cgcross, q1);
 8009eca:	4669      	mov	r1, sp
 8009ecc:	aa04      	add	r2, sp, #16
 8009ece:	4628      	mov	r0, r5
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 8009ed0:	9303      	str	r3, [sp, #12]
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 8009ed2:	9402      	str	r4, [sp, #8]
    inv_q_mult(quat, cgcross, q1);
 8009ed4:	f7ff ff29 	bl	8009d2a <inv_q_mult>
    inv_q_invert(quat, qi);
 8009ed8:	a90c      	add	r1, sp, #48	@ 0x30
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7ff ffb9 	bl	8009e52 <inv_q_invert>
    inv_q_mult(q1, qi, q2);
 8009ee0:	aa08      	add	r2, sp, #32
 8009ee2:	a804      	add	r0, sp, #16
 8009ee4:	f7ff ff21 	bl	8009d2a <inv_q_mult>
    if ((q2[2] == 0L) && (q2[1] == 0L))
 8009ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8009eec:	ea53 0102 	orrs.w	r1, r3, r2
 8009ef0:	d013      	beq.n	8009f1a <inv_compass_angle+0xae>
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
        return (float) q30 / ((float)(1L << 30));
 8009ef2:	ee07 2a90 	vmov	s15, r2
 8009ef6:	ee07 3a10 	vmov	s14, r3
 8009efa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009efe:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8009f02:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8009f20 <inv_compass_angle+0xb4>
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
 8009f06:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009f0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f0e:	f006 ff83 	bl	8010e18 <atan2f>
 8009f12:	eeb1 0a40 	vneg.f32	s0, s0
}
 8009f16:	b011      	add	sp, #68	@ 0x44
 8009f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0.f;
 8009f1a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8009f24 <inv_compass_angle+0xb8>
 8009f1e:	e7fa      	b.n	8009f16 <inv_compass_angle+0xaa>
 8009f20:	30800000 	.word	0x30800000
 8009f24:	00000000 	.word	0x00000000

08009f28 <inv_q_rotate>:
{
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	b090      	sub	sp, #64	@ 0x40
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460d      	mov	r5, r1
    memcpy(&in4[1], in, 3 * sizeof(long));
 8009f30:	6808      	ldr	r0, [r1, #0]
 8009f32:	6849      	ldr	r1, [r1, #4]
    in4[0] = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	9308      	str	r3, [sp, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
 8009f38:	ab09      	add	r3, sp, #36	@ 0x24
 8009f3a:	c303      	stmia	r3!, {r0, r1}
 8009f3c:	68a8      	ldr	r0, [r5, #8]
 8009f3e:	6018      	str	r0, [r3, #0]
{
 8009f40:	4614      	mov	r4, r2
    inv_q_mult(q, in4, q_temp1);
 8009f42:	a908      	add	r1, sp, #32
 8009f44:	466a      	mov	r2, sp
 8009f46:	4630      	mov	r0, r6
 8009f48:	f7ff feef 	bl	8009d2a <inv_q_mult>
    inv_q_invert(q, q_temp2);
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff ff7f 	bl	8009e52 <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
 8009f54:	aa0c      	add	r2, sp, #48	@ 0x30
 8009f56:	4668      	mov	r0, sp
 8009f58:	f7ff fee7 	bl	8009d2a <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
 8009f5c:	ab0d      	add	r3, sp, #52	@ 0x34
 8009f5e:	cb03      	ldmia	r3!, {r0, r1}
 8009f60:	6020      	str	r0, [r4, #0]
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	6061      	str	r1, [r4, #4]
 8009f66:	60a0      	str	r0, [r4, #8]
}
 8009f68:	b010      	add	sp, #64	@ 0x40
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}

08009f6c <inv_q_multf>:
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
 8009f6c:	ed90 7a01 	vldr	s14, [r0, #4]
 8009f70:	edd1 7a01 	vldr	s15, [r1, #4]
 8009f74:	edd0 6a00 	vldr	s13, [r0]
 8009f78:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009f7c:	ed91 7a00 	vldr	s14, [r1]
 8009f80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f84:	edd0 6a02 	vldr	s13, [r0, #8]
 8009f88:	ed91 7a02 	vldr	s14, [r1, #8]
 8009f8c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009f90:	edd0 6a03 	vldr	s13, [r0, #12]
 8009f94:	ed91 7a03 	vldr	s14, [r1, #12]
 8009f98:	eee6 7ac7 	vfms.f32	s15, s13, s14
    qProd[0] =
 8009f9c:	edc2 7a00 	vstr	s15, [r2]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 8009fa0:	ed91 7a00 	vldr	s14, [r1]
 8009fa4:	edd0 7a01 	vldr	s15, [r0, #4]
 8009fa8:	edd0 6a00 	vldr	s13, [r0]
 8009fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fb0:	ed91 7a01 	vldr	s14, [r1, #4]
 8009fb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009fb8:	edd0 6a02 	vldr	s13, [r0, #8]
 8009fbc:	ed91 7a03 	vldr	s14, [r1, #12]
 8009fc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009fc4:	edd0 6a03 	vldr	s13, [r0, #12]
 8009fc8:	ed91 7a02 	vldr	s14, [r1, #8]
 8009fcc:	eee6 7ac7 	vfms.f32	s15, s13, s14
    qProd[1] =
 8009fd0:	edc2 7a01 	vstr	s15, [r2, #4]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 8009fd4:	ed90 7a01 	vldr	s14, [r0, #4]
 8009fd8:	edd1 7a03 	vldr	s15, [r1, #12]
 8009fdc:	edd0 6a00 	vldr	s13, [r0]
 8009fe0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009fe4:	ed91 7a02 	vldr	s14, [r1, #8]
 8009fe8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009fec:	edd0 6a02 	vldr	s13, [r0, #8]
 8009ff0:	ed91 7a00 	vldr	s14, [r1]
 8009ff4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ff8:	edd0 6a03 	vldr	s13, [r0, #12]
 8009ffc:	ed91 7a01 	vldr	s14, [r1, #4]
 800a000:	eee6 7a87 	vfma.f32	s15, s13, s14
    qProd[2] =
 800a004:	edc2 7a02 	vstr	s15, [r2, #8]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800a008:	ed91 7a02 	vldr	s14, [r1, #8]
 800a00c:	edd0 7a01 	vldr	s15, [r0, #4]
 800a010:	edd0 6a00 	vldr	s13, [r0]
 800a014:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a018:	ed91 7a03 	vldr	s14, [r1, #12]
 800a01c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a020:	edd0 6a02 	vldr	s13, [r0, #8]
 800a024:	ed91 7a01 	vldr	s14, [r1, #4]
 800a028:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a02c:	edd0 6a03 	vldr	s13, [r0, #12]
 800a030:	ed91 7a00 	vldr	s14, [r1]
 800a034:	eee6 7a87 	vfma.f32	s15, s13, s14
    qProd[3] =
 800a038:	edc2 7a03 	vstr	s15, [r2, #12]
}
 800a03c:	4770      	bx	lr

0800a03e <inv_q_addf>:
    qSum[0] = q1[0] + q2[0];
 800a03e:	ed91 7a00 	vldr	s14, [r1]
 800a042:	edd0 7a00 	vldr	s15, [r0]
 800a046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a04a:	edc2 7a00 	vstr	s15, [r2]
    qSum[1] = q1[1] + q2[1];
 800a04e:	ed91 7a01 	vldr	s14, [r1, #4]
 800a052:	edd0 7a01 	vldr	s15, [r0, #4]
 800a056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a05a:	edc2 7a01 	vstr	s15, [r2, #4]
    qSum[2] = q1[2] + q2[2];
 800a05e:	ed91 7a02 	vldr	s14, [r1, #8]
 800a062:	edd0 7a02 	vldr	s15, [r0, #8]
 800a066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a06a:	edc2 7a02 	vstr	s15, [r2, #8]
    qSum[3] = q1[3] + q2[3];
 800a06e:	edd0 7a03 	vldr	s15, [r0, #12]
 800a072:	ed91 7a03 	vldr	s14, [r1, #12]
 800a076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a07a:	edc2 7a03 	vstr	s15, [r2, #12]
}
 800a07e:	4770      	bx	lr

0800a080 <inv_q_normalizef>:
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800a080:	edd0 6a01 	vldr	s13, [r0, #4]
 800a084:	edd0 4a00 	vldr	s9, [r0]
 800a088:	ed90 5a02 	vldr	s10, [r0, #8]
 800a08c:	edd0 5a03 	vldr	s11, [r0, #12]
 800a090:	ee26 7aa6 	vmul.f32	s14, s13, s13
    if (normSF < 2) {
 800a094:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800a098:	eea4 7aa4 	vfma.f32	s14, s9, s9
 800a09c:	eea5 7a05 	vfma.f32	s14, s10, s10
 800a0a0:	eea5 7aa5 	vfma.f32	s14, s11, s11
    if (normSF < 2) {
 800a0a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ac:	d534      	bpl.n	800a118 <inv_q_normalizef+0x98>
        xHalf = 0.5f * normSF;
 800a0ae:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a0b2:	ee27 6a06 	vmul.f32	s12, s14, s12
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800a0b6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a0ba:	ee66 3a47 	vnmul.f32	s7, s12, s14
 800a0be:	eeb0 4a67 	vmov.f32	s8, s15
 800a0c2:	eea7 4a23 	vfma.f32	s8, s14, s7
 800a0c6:	ee24 7a07 	vmul.f32	s14, s8, s14
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800a0ca:	eeb0 4a67 	vmov.f32	s8, s15
 800a0ce:	ee67 3a46 	vnmul.f32	s7, s14, s12
 800a0d2:	eea3 4a87 	vfma.f32	s8, s7, s14
 800a0d6:	ee24 4a07 	vmul.f32	s8, s8, s14
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800a0da:	eeb0 7a67 	vmov.f32	s14, s15
 800a0de:	ee64 3a46 	vnmul.f32	s7, s8, s12
 800a0e2:	eea4 7a23 	vfma.f32	s14, s8, s7
 800a0e6:	ee27 7a04 	vmul.f32	s14, s14, s8
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800a0ea:	ee27 6a46 	vnmul.f32	s12, s14, s12
 800a0ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a0f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        q[0] *= normSF;
 800a0f6:	ee64 4aa7 	vmul.f32	s9, s9, s15
        q[1] *= normSF;
 800a0fa:	ee26 7aa7 	vmul.f32	s14, s13, s15
        q[2] *= normSF;
 800a0fe:	ee25 5a27 	vmul.f32	s10, s10, s15
        q[3] *= normSF;
 800a102:	ee65 5aa7 	vmul.f32	s11, s11, s15
        q[0] *= normSF;
 800a106:	edc0 4a00 	vstr	s9, [r0]
        q[1] *= normSF;
 800a10a:	ed80 7a01 	vstr	s14, [r0, #4]
        q[2] *= normSF;
 800a10e:	ed80 5a02 	vstr	s10, [r0, #8]
        q[3] *= normSF;
 800a112:	edc0 5a03 	vstr	s11, [r0, #12]
}
 800a116:	4770      	bx	lr
 800a118:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 800a12c <inv_q_normalizef+0xac>
 800a11c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800a120:	eeb0 5a47 	vmov.f32	s10, s14
 800a124:	eef0 5a47 	vmov.f32	s11, s14
 800a128:	e7ed      	b.n	800a106 <inv_q_normalizef+0x86>
 800a12a:	bf00      	nop
 800a12c:	00000000 	.word	0x00000000

0800a130 <inv_q_norm4>:
{
 800a130:	b510      	push	{r4, lr}
 800a132:	ed2d 8b04 	vpush	{d8-d9}
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800a136:	ed90 9a01 	vldr	s18, [r0, #4]
 800a13a:	edd0 9a00 	vldr	s19, [r0]
 800a13e:	edd0 8a02 	vldr	s17, [r0, #8]
 800a142:	ed90 8a03 	vldr	s16, [r0, #12]
 800a146:	ee29 0a09 	vmul.f32	s0, s18, s18
{
 800a14a:	4604      	mov	r4, r0
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800a14c:	eea9 0aa9 	vfma.f32	s0, s19, s19
 800a150:	eea8 0aa8 	vfma.f32	s0, s17, s17
 800a154:	eea8 0a08 	vfma.f32	s0, s16, s16
 800a158:	f006 fe60 	bl	8010e1c <sqrtf>
    if (mag) {
 800a15c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        q[0] /= mag;
 800a164:	bf1f      	itttt	ne
 800a166:	ee89 6a80 	vdivne.f32	s12, s19, s0
        q[1] /= mag;
 800a16a:	eec9 7a00 	vdivne.f32	s15, s18, s0
        q[2] /= mag;
 800a16e:	eec8 6a80 	vdivne.f32	s13, s17, s0
        q[3] /= mag;
 800a172:	ee88 7a00 	vdivne.f32	s14, s16, s0
}
 800a176:	ecbd 8b04 	vpop	{d8-d9}
 800a17a:	bf01      	itttt	eq
 800a17c:	eddf 7a08 	vldreq	s15, [pc, #32]	@ 800a1a0 <inv_q_norm4+0x70>
 800a180:	eeb7 6a00 	vmoveq.f32	s12, #112	@ 0x3f800000  1.0
 800a184:	eef0 6a67 	vmoveq.f32	s13, s15
 800a188:	eeb0 7a67 	vmoveq.f32	s14, s15
        q[0] /= mag;
 800a18c:	ed84 6a00 	vstr	s12, [r4]
        q[1] /= mag;
 800a190:	edc4 7a01 	vstr	s15, [r4, #4]
        q[2] /= mag;
 800a194:	edc4 6a02 	vstr	s13, [r4, #8]
        q[3] /= mag;
 800a198:	ed84 7a03 	vstr	s14, [r4, #12]
}
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	bf00      	nop
 800a1a0:	00000000 	.word	0x00000000

0800a1a4 <inv_q_invertf>:
    qInverted[0] = q[0];
 800a1a4:	6803      	ldr	r3, [r0, #0]
 800a1a6:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
 800a1a8:	edd0 7a01 	vldr	s15, [r0, #4]
 800a1ac:	eef1 7a67 	vneg.f32	s15, s15
 800a1b0:	edc1 7a01 	vstr	s15, [r1, #4]
    qInverted[2] = -q[2];
 800a1b4:	edd0 7a02 	vldr	s15, [r0, #8]
 800a1b8:	eef1 7a67 	vneg.f32	s15, s15
 800a1bc:	edc1 7a02 	vstr	s15, [r1, #8]
    qInverted[3] = -q[3];
 800a1c0:	edd0 7a03 	vldr	s15, [r0, #12]
 800a1c4:	eef1 7a67 	vneg.f32	s15, s15
 800a1c8:	edc1 7a03 	vstr	s15, [r1, #12]
}
 800a1cc:	4770      	bx	lr

0800a1ce <inv_quaternion_to_rotation>:
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800a1ce:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800a1d2:	b510      	push	{r4, lr}
    temp = (long long)a * b;
 800a1d4:	fb83 3403 	smull	r3, r4, r3, r3
    result = (long)(temp >> 29);
 800a1d8:	0f5b      	lsrs	r3, r3, #29
 800a1da:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    temp = (long long)a * b;
 800a1de:	fb82 2402 	smull	r2, r4, r2, r2
    result = (long)(temp >> 29);
 800a1e2:	0f52      	lsrs	r2, r2, #29
 800a1e4:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800a1e8:	4413      	add	r3, r2
                quat[0]) -
 800a1ea:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
    rot[0] =
 800a1ee:	600b      	str	r3, [r1, #0]
    temp = (long long)a * b;
 800a1f0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a1f4:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a1f8:	0f5b      	lsrs	r3, r3, #29
    temp = (long long)a * b;
 800a1fa:	6804      	ldr	r4, [r0, #0]
    result = (long)(temp >> 29);
 800a1fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a200:	68c2      	ldr	r2, [r0, #12]
 800a202:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a206:	0f52      	lsrs	r2, r2, #29
 800a208:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800a20c:	1a9b      	subs	r3, r3, r2
    rot[1] =
 800a20e:	604b      	str	r3, [r1, #4]
    temp = (long long)a * b;
 800a210:	6883      	ldr	r3, [r0, #8]
 800a212:	6802      	ldr	r2, [r0, #0]
 800a214:	68c4      	ldr	r4, [r0, #12]
 800a216:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a21a:	0f5b      	lsrs	r3, r3, #29
 800a21c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a220:	6842      	ldr	r2, [r0, #4]
 800a222:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a226:	0f52      	lsrs	r2, r2, #29
 800a228:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800a22c:	4413      	add	r3, r2
    rot[2] =
 800a22e:	608b      	str	r3, [r1, #8]
    temp = (long long)a * b;
 800a230:	68c3      	ldr	r3, [r0, #12]
 800a232:	6802      	ldr	r2, [r0, #0]
 800a234:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a238:	0f5b      	lsrs	r3, r3, #29
 800a23a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a23e:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 800a242:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a246:	0f52      	lsrs	r2, r2, #29
 800a248:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800a24c:	4413      	add	r3, r2
    rot[3] =
 800a24e:	60cb      	str	r3, [r1, #12]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800a250:	6803      	ldr	r3, [r0, #0]
 800a252:	6882      	ldr	r2, [r0, #8]
    temp = (long long)a * b;
 800a254:	fb83 3403 	smull	r3, r4, r3, r3
    result = (long)(temp >> 29);
 800a258:	0f5b      	lsrs	r3, r3, #29
 800a25a:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    temp = (long long)a * b;
 800a25e:	fb82 2402 	smull	r2, r4, r2, r2
    result = (long)(temp >> 29);
 800a262:	0f52      	lsrs	r2, r2, #29
 800a264:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800a268:	4413      	add	r3, r2
                quat[0]) -
 800a26a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
    rot[4] =
 800a26e:	610b      	str	r3, [r1, #16]
    temp = (long long)a * b;
 800a270:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a274:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a278:	0f5b      	lsrs	r3, r3, #29
 800a27a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a27e:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a282:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a286:	0f52      	lsrs	r2, r2, #29
 800a288:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800a28c:	1a9b      	subs	r3, r3, r2
    rot[5] =
 800a28e:	614b      	str	r3, [r1, #20]
    temp = (long long)a * b;
 800a290:	6843      	ldr	r3, [r0, #4]
 800a292:	68c2      	ldr	r2, [r0, #12]
 800a294:	6804      	ldr	r4, [r0, #0]
 800a296:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a29a:	0f5b      	lsrs	r3, r3, #29
 800a29c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a2a0:	6882      	ldr	r2, [r0, #8]
 800a2a2:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a2a6:	0f52      	lsrs	r2, r2, #29
 800a2a8:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800a2ac:	1a9b      	subs	r3, r3, r2
    rot[6] =
 800a2ae:	618b      	str	r3, [r1, #24]
    temp = (long long)a * b;
 800a2b0:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a2b4:	fb83 3202 	smull	r3, r2, r3, r2
    result = (long)(temp >> 29);
 800a2b8:	0f5b      	lsrs	r3, r3, #29
 800a2ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    temp = (long long)a * b;
 800a2be:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
 800a2c2:	fb82 2404 	smull	r2, r4, r2, r4
    result = (long)(temp >> 29);
 800a2c6:	0f52      	lsrs	r2, r2, #29
 800a2c8:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800a2cc:	4413      	add	r3, r2
    rot[7] =
 800a2ce:	61cb      	str	r3, [r1, #28]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800a2d0:	68c3      	ldr	r3, [r0, #12]
 800a2d2:	6802      	ldr	r2, [r0, #0]
    temp = (long long)a * b;
 800a2d4:	fb83 3003 	smull	r3, r0, r3, r3
    result = (long)(temp >> 29);
 800a2d8:	0f5b      	lsrs	r3, r3, #29
 800a2da:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
    temp = (long long)a * b;
 800a2de:	fb82 2002 	smull	r2, r0, r2, r2
    result = (long)(temp >> 29);
 800a2e2:	0f52      	lsrs	r2, r2, #29
 800a2e4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800a2e8:	4413      	add	r3, r2
                quat[0]) -
 800a2ea:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
    rot[8] =
 800a2ee:	620b      	str	r3, [r1, #32]
}
 800a2f0:	bd10      	pop	{r4, pc}

0800a2f2 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	4601      	mov	r1, r0
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 800a2f6:	f7ff fce3 	bl	8009cc0 <inv_row_2_scale>
 800a2fa:	4602      	mov	r2, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800a2fc:	1cc8      	adds	r0, r1, #3
 800a2fe:	f7ff fcdf 	bl	8009cc0 <inv_row_2_scale>
 800a302:	4604      	mov	r4, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800a304:	1d88      	adds	r0, r1, #6
 800a306:	f7ff fcdb 	bl	8009cc0 <inv_row_2_scale>
 800a30a:	0183      	lsls	r3, r0, #6
 800a30c:	ea43 00c4 	orr.w	r0, r3, r4, lsl #3
 800a310:	4310      	orrs	r0, r2


    return scalar;
}
 800a312:	b280      	uxth	r0, r0
 800a314:	bd10      	pop	{r4, pc}

0800a316 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
 800a316:	b530      	push	{r4, r5, lr}
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800a318:	f000 0403 	and.w	r4, r0, #3
                             SIGNSET(orientation & 0x004), sensitivity);
 800a31c:	f010 0f04 	tst.w	r0, #4
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800a320:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
                             SIGNSET(orientation & 0x004), sensitivity);
 800a324:	bf14      	ite	ne
 800a326:	f04f 35ff 	movne.w	r5, #4294967295
 800a32a:	2501      	moveq	r5, #1
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800a32c:	436c      	muls	r4, r5
    temp = (long long)a * b;
 800a32e:	fb84 4501 	smull	r4, r5, r4, r1
    result = (long)(temp >> 30);
 800a332:	0fa4      	lsrs	r4, r4, #30
 800a334:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800a338:	601c      	str	r4, [r3, #0]
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800a33a:	f3c0 04c1 	ubfx	r4, r0, #3, #2
                             SIGNSET(orientation & 0x020), sensitivity);
 800a33e:	f010 0f20 	tst.w	r0, #32
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800a342:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
                             SIGNSET(orientation & 0x020), sensitivity);
 800a346:	bf14      	ite	ne
 800a348:	f04f 35ff 	movne.w	r5, #4294967295
 800a34c:	2501      	moveq	r5, #1
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800a34e:	436c      	muls	r4, r5
    temp = (long long)a * b;
 800a350:	fb84 4501 	smull	r4, r5, r4, r1
    result = (long)(temp >> 30);
 800a354:	0fa4      	lsrs	r4, r4, #30
 800a356:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800a35a:	605c      	str	r4, [r3, #4]
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800a35c:	f3c0 1481 	ubfx	r4, r0, #6, #2
                             SIGNSET(orientation & 0x100), sensitivity);
 800a360:	f410 7f80 	tst.w	r0, #256	@ 0x100
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800a364:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
                             SIGNSET(orientation & 0x100), sensitivity);
 800a368:	bf0c      	ite	eq
 800a36a:	2001      	moveq	r0, #1
 800a36c:	f04f 30ff 	movne.w	r0, #4294967295
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800a370:	4342      	muls	r2, r0
    temp = (long long)a * b;
 800a372:	fb82 2101 	smull	r2, r1, r2, r1
    result = (long)(temp >> 30);
 800a376:	0f92      	lsrs	r2, r2, #30
 800a378:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800a37c:	609a      	str	r2, [r3, #8]
}
 800a37e:	bd30      	pop	{r4, r5, pc}

0800a380 <__print_result_location.constprop.0>:
int _MLPrintVaLog(int priority, const char *tag, const char *fmt, va_list args);
/* Final implementation of actual writing to a character device */
int _MLWriteLog(const char *buf, int buflen);
#endif

static inline void __print_result_location(int result,
 800a380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					   const char *file,
					   const char *func, int line)
{
	MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
 800a382:	4b06      	ldr	r3, [pc, #24]	@ (800a39c <__print_result_location.constprop.0+0x1c>)
 800a384:	9100      	str	r1, [sp, #0]
 800a386:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800a38a:	2100      	movs	r1, #0
 800a38c:	4a04      	ldr	r2, [pc, #16]	@ (800a3a0 <__print_result_location.constprop.0+0x20>)
 800a38e:	2006      	movs	r0, #6
 800a390:	f7ff f8f8 	bl	8009584 <_MLPrintLog>
}
 800a394:	b005      	add	sp, #20
 800a396:	f85d fb04 	ldr.w	pc, [sp], #4
 800a39a:	bf00      	nop
 800a39c:	08014bab 	.word	0x08014bab
 800a3a0:	08014bbf 	.word	0x08014bbf

0800a3a4 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
 800a3a4:	b508      	push	{r3, lr}
    inv_init_storage_manager();
 800a3a6:	f000 fa39 	bl	800a81c <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
 800a3aa:	f000 f9e3 	bl	800a774 <inv_init_start_manager>
 800a3ae:	b148      	cbz	r0, 800a3c4 <inv_init_mpl+0x20>
 800a3b0:	f000 f9e0 	bl	800a774 <inv_init_start_manager>
 800a3b4:	4911      	ldr	r1, [pc, #68]	@ (800a3fc <inv_init_mpl+0x58>)
 800a3b6:	2222      	movs	r2, #34	@ 0x22
 800a3b8:	f7ff ffe2 	bl	800a380 <__print_result_location.constprop.0>
    INV_ERROR_CHECK(inv_init_data_builder());

    INV_ERROR_CHECK(inv_enable_results_holder());

    return INV_SUCCESS;
}
 800a3bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    INV_ERROR_CHECK(inv_init_start_manager());
 800a3c0:	f000 b9d8 	b.w	800a774 <inv_init_start_manager>
    INV_ERROR_CHECK(inv_init_data_builder());
 800a3c4:	f7ff fc20 	bl	8009c08 <inv_init_data_builder>
 800a3c8:	b148      	cbz	r0, 800a3de <inv_init_mpl+0x3a>
 800a3ca:	f7ff fc1d 	bl	8009c08 <inv_init_data_builder>
 800a3ce:	490b      	ldr	r1, [pc, #44]	@ (800a3fc <inv_init_mpl+0x58>)
 800a3d0:	2225      	movs	r2, #37	@ 0x25
 800a3d2:	f7ff ffd5 	bl	800a380 <__print_result_location.constprop.0>
}
 800a3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    INV_ERROR_CHECK(inv_init_data_builder());
 800a3da:	f7ff bc15 	b.w	8009c08 <inv_init_data_builder>
    INV_ERROR_CHECK(inv_enable_results_holder());
 800a3de:	f000 f967 	bl	800a6b0 <inv_enable_results_holder>
 800a3e2:	b148      	cbz	r0, 800a3f8 <inv_init_mpl+0x54>
 800a3e4:	f000 f964 	bl	800a6b0 <inv_enable_results_holder>
 800a3e8:	4904      	ldr	r1, [pc, #16]	@ (800a3fc <inv_init_mpl+0x58>)
 800a3ea:	2227      	movs	r2, #39	@ 0x27
 800a3ec:	f7ff ffc8 	bl	800a380 <__print_result_location.constprop.0>
}
 800a3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    INV_ERROR_CHECK(inv_enable_results_holder());
 800a3f4:	f000 b95c 	b.w	800a6b0 <inv_enable_results_holder>
}
 800a3f8:	bd08      	pop	{r3, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08014be4 	.word	0x08014be4

0800a400 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
 800a400:	b508      	push	{r3, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800a402:	f000 f9f5 	bl	800a7f0 <inv_execute_mpl_start_notification>
 800a406:	b148      	cbz	r0, 800a41c <inv_start_mpl+0x1c>
 800a408:	f000 f9f2 	bl	800a7f0 <inv_execute_mpl_start_notification>
 800a40c:	4904      	ldr	r1, [pc, #16]	@ (800a420 <inv_start_mpl+0x20>)
 800a40e:	2242      	movs	r2, #66	@ 0x42
 800a410:	f7ff ffb6 	bl	800a380 <__print_result_location.constprop.0>
    return INV_SUCCESS;
}
 800a414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800a418:	f000 b9ea 	b.w	800a7f0 <inv_execute_mpl_start_notification>
}
 800a41c:	bd08      	pop	{r3, pc}
 800a41e:	bf00      	nop
 800a420:	08014bd6 	.word	0x08014bd6

0800a424 <inv_generate_results>:
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
    rh.sensor = sensor_cal;
 800a424:	4b02      	ldr	r3, [pc, #8]	@ (800a430 <inv_generate_results+0xc>)
 800a426:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
    return INV_SUCCESS;
}
 800a42a:	2000      	movs	r0, #0
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	200016bc 	.word	0x200016bc

0800a434 <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
 800a434:	b508      	push	{r3, lr}
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
 800a436:	2207      	movs	r2, #7
 800a438:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800a43c:	4802      	ldr	r0, [pc, #8]	@ (800a448 <inv_start_results_holder+0x14>)
 800a43e:	f7ff fb05 	bl	8009a4c <inv_register_data_cb>
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
}
 800a442:	2000      	movs	r0, #0
 800a444:	bd08      	pop	{r3, pc}
 800a446:	bf00      	nop
 800a448:	0800a425 	.word	0x0800a425

0800a44c <inv_store_gaming_quaternion>:
    rh.status |= INV_6_AXIS_QUAT_SET;
 800a44c:	4a0a      	ldr	r2, [pc, #40]	@ (800a478 <inv_store_gaming_quaternion+0x2c>)
 800a44e:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
 800a450:	f043 0302 	orr.w	r3, r3, #2
{
 800a454:	b5f0      	push	{r4, r5, r6, r7, lr}
    rh.status |= INV_6_AXIS_QUAT_SET;
 800a456:	67d3      	str	r3, [r2, #124]	@ 0x7c
{
 800a458:	460d      	mov	r5, r1
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
 800a45a:	4603      	mov	r3, r0
 800a45c:	f102 0610 	add.w	r6, r2, #16
 800a460:	f100 0710 	add.w	r7, r0, #16
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	6859      	ldr	r1, [r3, #4]
 800a468:	4634      	mov	r4, r6
 800a46a:	c403      	stmia	r4!, {r0, r1}
 800a46c:	3308      	adds	r3, #8
 800a46e:	42bb      	cmp	r3, r7
 800a470:	4626      	mov	r6, r4
 800a472:	d1f7      	bne.n	800a464 <inv_store_gaming_quaternion+0x18>
    rh.gam_timestamp = timestamp;
 800a474:	6255      	str	r5, [r2, #36]	@ 0x24
}
 800a476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a478:	200016bc 	.word	0x200016bc

0800a47c <inv_set_compass_correction>:
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800a47c:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a8 <inv_set_compass_correction+0x2c>)
 800a47e:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
 800a480:	f043 0301 	orr.w	r3, r3, #1
{
 800a484:	b5f0      	push	{r4, r5, r6, r7, lr}
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800a486:	67d3      	str	r3, [r2, #124]	@ 0x7c
{
 800a488:	460d      	mov	r5, r1
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
 800a48a:	4603      	mov	r3, r0
 800a48c:	f102 0640 	add.w	r6, r2, #64	@ 0x40
 800a490:	f100 0710 	add.w	r7, r0, #16
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	6859      	ldr	r1, [r3, #4]
 800a498:	4634      	mov	r4, r6
 800a49a:	c403      	stmia	r4!, {r0, r1}
 800a49c:	3308      	adds	r3, #8
 800a49e:	42bb      	cmp	r3, r7
 800a4a0:	4626      	mov	r6, r4
 800a4a2:	d1f7      	bne.n	800a494 <inv_set_compass_correction+0x18>
    rh.nav_timestamp = timestamp;
 800a4a4:	6215      	str	r5, [r2, #32]
}
 800a4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a8:	200016bc 	.word	0x200016bc

0800a4ac <inv_get_compass_correction>:
{
 800a4ac:	b570      	push	{r4, r5, r6, lr}
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800a4ae:	4c09      	ldr	r4, [pc, #36]	@ (800a4d4 <inv_get_compass_correction+0x28>)
{
 800a4b0:	460d      	mov	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	f104 0610 	add.w	r6, r4, #16
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	ca03      	ldmia	r2!, {r0, r1}
 800a4bc:	42b2      	cmp	r2, r6
 800a4be:	6018      	str	r0, [r3, #0]
 800a4c0:	6059      	str	r1, [r3, #4]
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	f103 0308 	add.w	r3, r3, #8
 800a4c8:	d1f6      	bne.n	800a4b8 <inv_get_compass_correction+0xc>
    *timestamp = rh.nav_timestamp;
 800a4ca:	4b03      	ldr	r3, [pc, #12]	@ (800a4d8 <inv_get_compass_correction+0x2c>)
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	602b      	str	r3, [r5, #0]
}
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200016fc 	.word	0x200016fc
 800a4d8:	200016bc 	.word	0x200016bc

0800a4dc <inv_get_large_mag_field>:
}
 800a4dc:	4b01      	ldr	r3, [pc, #4]	@ (800a4e4 <inv_get_large_mag_field+0x8>)
 800a4de:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	200016bc 	.word	0x200016bc

0800a4e8 <inv_get_acc_state>:
}
 800a4e8:	4b01      	ldr	r3, [pc, #4]	@ (800a4f0 <inv_get_acc_state+0x8>)
 800a4ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	200016bc 	.word	0x200016bc

0800a4f4 <inv_get_motion_state>:
    *cntr = rh.motion_state_counter;
 800a4f4:	4b02      	ldr	r3, [pc, #8]	@ (800a500 <inv_get_motion_state+0xc>)
 800a4f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a4f8:	6002      	str	r2, [r0, #0]
}
 800a4fa:	f893 0064 	ldrb.w	r0, [r3, #100]	@ 0x64
 800a4fe:	4770      	bx	lr
 800a500:	200016bc 	.word	0x200016bc

0800a504 <inv_set_motion_state>:
    if (state == rh.motion_state) {
 800a504:	4b0c      	ldr	r3, [pc, #48]	@ (800a538 <inv_set_motion_state+0x34>)
 800a506:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 800a50a:	4282      	cmp	r2, r0
 800a50c:	d106      	bne.n	800a51c <inv_set_motion_state+0x18>
        if (state == INV_NO_MOTION) {
 800a50e:	2a02      	cmp	r2, #2
            rh.motion_state_counter++;
 800a510:	bf0a      	itet	eq
 800a512:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
            rh.motion_state_counter = 0;
 800a514:	2200      	movne	r2, #0
            rh.motion_state_counter++;
 800a516:	3201      	addeq	r2, #1
            rh.motion_state_counter = 0;
 800a518:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a51a:	4770      	bx	lr
        set = INV_MSG_MOTION_EVENT;
 800a51c:	2801      	cmp	r0, #1
    rh.motion_state = state;
 800a51e:	f883 0064 	strb.w	r0, [r3, #100]	@ 0x64
    rh.motion_state_counter = 0;
 800a522:	f04f 0200 	mov.w	r2, #0
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800a526:	f04f 0103 	mov.w	r1, #3
 800a52a:	bf14      	ite	ne
 800a52c:	2002      	movne	r0, #2
 800a52e:	2001      	moveq	r0, #1
    rh.motion_state_counter = 0;
 800a530:	669a      	str	r2, [r3, #104]	@ 0x68
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800a532:	f7ff bbbb 	b.w	8009cac <inv_set_message>
 800a536:	bf00      	nop
 800a538:	200016bc 	.word	0x200016bc

0800a53c <inv_get_local_field>:
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800a53c:	4a03      	ldr	r2, [pc, #12]	@ (800a54c <inv_get_local_field+0x10>)
{
 800a53e:	4603      	mov	r3, r0
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800a540:	ca03      	ldmia	r2!, {r0, r1}
 800a542:	6018      	str	r0, [r3, #0]
 800a544:	6059      	str	r1, [r3, #4]
 800a546:	6810      	ldr	r0, [r2, #0]
 800a548:	6098      	str	r0, [r3, #8]
}
 800a54a:	4770      	bx	lr
 800a54c:	200016e4 	.word	0x200016e4

0800a550 <inv_get_gravity>:
{
 800a550:	b570      	push	{r4, r5, r6, lr}
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800a552:	4c13      	ldr	r4, [pc, #76]	@ (800a5a0 <inv_get_gravity+0x50>)
{
 800a554:	4606      	mov	r6, r0
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800a556:	68e1      	ldr	r1, [r4, #12]
 800a558:	6860      	ldr	r0, [r4, #4]
 800a55a:	f7ff fbda 	bl	8009d12 <inv_q29_mult>
 800a55e:	6821      	ldr	r1, [r4, #0]
 800a560:	4605      	mov	r5, r0
 800a562:	68a0      	ldr	r0, [r4, #8]
 800a564:	f7ff fbd5 	bl	8009d12 <inv_q29_mult>
 800a568:	1a2d      	subs	r5, r5, r0
    data[0] =
 800a56a:	6035      	str	r5, [r6, #0]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800a56c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800a570:	f7ff fbcf 	bl	8009d12 <inv_q29_mult>
 800a574:	4605      	mov	r5, r0
 800a576:	e9d4 1000 	ldrd	r1, r0, [r4]
 800a57a:	f7ff fbca 	bl	8009d12 <inv_q29_mult>
 800a57e:	4405      	add	r5, r0
    data[1] =
 800a580:	6075      	str	r5, [r6, #4]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
 800a582:	68e1      	ldr	r1, [r4, #12]
 800a584:	4608      	mov	r0, r1
 800a586:	f7ff fbc4 	bl	8009d12 <inv_q29_mult>
 800a58a:	6821      	ldr	r1, [r4, #0]
 800a58c:	4605      	mov	r5, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	f7ff fbbf 	bl	8009d12 <inv_q29_mult>
 800a594:	4405      	add	r5, r0
 800a596:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
    data[2] =
 800a59a:	60b5      	str	r5, [r6, #8]
}
 800a59c:	2000      	movs	r0, #0
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	200016bc 	.word	0x200016bc

0800a5a4 <inv_get_linear_accel.part.0>:
 *  @param[out] data    3-element vector of accelerometer data in body frame
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
 800a5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    long gravity[3];

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
 800a5a6:	2200      	movs	r2, #0
inv_error_t inv_get_linear_accel(long *data)
 800a5a8:	4604      	mov	r4, r0
        inv_get_accel_set(data, NULL, NULL);
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	f7ff face 	bl	8009b4c <inv_get_accel_set>
        inv_get_gravity(gravity);
 800a5b0:	a801      	add	r0, sp, #4
 800a5b2:	f7ff ffcd 	bl	800a550 <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	eba3 33a2 	sub.w	r3, r3, r2, asr #14
 800a5be:	6023      	str	r3, [r4, #0]
        data[1] -= gravity[1] >> 14;
 800a5c0:	9a02      	ldr	r2, [sp, #8]
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	eba3 33a2 	sub.w	r3, r3, r2, asr #14
 800a5c8:	6063      	str	r3, [r4, #4]
        data[2] -= gravity[2] >> 14;
 800a5ca:	9a03      	ldr	r2, [sp, #12]
 800a5cc:	68a3      	ldr	r3, [r4, #8]
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
 800a5ce:	2000      	movs	r0, #0
        data[2] -= gravity[2] >> 14;
 800a5d0:	eba3 33a2 	sub.w	r3, r3, r2, asr #14
 800a5d4:	60a3      	str	r3, [r4, #8]
}
 800a5d6:	b004      	add	sp, #16
 800a5d8:	bd10      	pop	{r4, pc}
	...

0800a5dc <inv_get_6axis_quaternion>:
{
 800a5dc:	b530      	push	{r4, r5, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
 800a5de:	4c07      	ldr	r4, [pc, #28]	@ (800a5fc <inv_get_6axis_quaternion+0x20>)
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f104 0510 	add.w	r5, r4, #16
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	ca03      	ldmia	r2!, {r0, r1}
 800a5ea:	42aa      	cmp	r2, r5
 800a5ec:	6018      	str	r0, [r3, #0]
 800a5ee:	6059      	str	r1, [r3, #4]
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	f103 0308 	add.w	r3, r3, #8
 800a5f6:	d1f6      	bne.n	800a5e6 <inv_get_6axis_quaternion+0xa>
}
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	bd30      	pop	{r4, r5, pc}
 800a5fc:	200016cc 	.word	0x200016cc

0800a600 <inv_get_quaternion>:
{
 800a600:	b570      	push	{r4, r5, r6, lr}
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
 800a602:	4d0f      	ldr	r5, [pc, #60]	@ (800a640 <inv_get_quaternion+0x40>)
 800a604:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a606:	f013 0f03 	tst.w	r3, #3
{
 800a60a:	4604      	mov	r4, r0
 800a60c:	f105 0610 	add.w	r6, r5, #16
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
 800a610:	d009      	beq.n	800a626 <inv_get_quaternion+0x26>
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
 800a612:	462a      	mov	r2, r5
 800a614:	4631      	mov	r1, r6
 800a616:	f105 0040 	add.w	r0, r5, #64	@ 0x40
 800a61a:	f7ff fb86 	bl	8009d2a <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
 800a61e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	67eb      	str	r3, [r5, #124]	@ 0x7c
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
 800a626:	4d06      	ldr	r5, [pc, #24]	@ (800a640 <inv_get_quaternion+0x40>)
 800a628:	4623      	mov	r3, r4
 800a62a:	462a      	mov	r2, r5
 800a62c:	ca03      	ldmia	r2!, {r0, r1}
 800a62e:	42b2      	cmp	r2, r6
 800a630:	6018      	str	r0, [r3, #0]
 800a632:	6059      	str	r1, [r3, #4]
 800a634:	4615      	mov	r5, r2
 800a636:	f103 0308 	add.w	r3, r3, #8
 800a63a:	d1f6      	bne.n	800a62a <inv_get_quaternion+0x2a>
}
 800a63c:	2000      	movs	r0, #0
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	200016bc 	.word	0x200016bc

0800a644 <inv_get_quaternion_set>:
{
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4615      	mov	r5, r2
 800a648:	460c      	mov	r4, r1
    inv_get_quaternion(data);
 800a64a:	f7ff ffd9 	bl	800a600 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
 800a64e:	f7ff f8cf 	bl	80097f0 <inv_get_last_timestamp>
 800a652:	6028      	str	r0, [r5, #0]
    if (inv_get_compass_on()) {
 800a654:	f7ff f8b4 	bl	80097c0 <inv_get_compass_on>
 800a658:	b118      	cbz	r0, 800a662 <inv_get_quaternion_set+0x1e>
        *accuracy = inv_get_mag_accuracy();
 800a65a:	f7ff fa9f 	bl	8009b9c <inv_get_mag_accuracy>
 800a65e:	6020      	str	r0, [r4, #0]
}
 800a660:	bd38      	pop	{r3, r4, r5, pc}
    } else if (inv_get_gyro_on()) {
 800a662:	f7ff f8b5 	bl	80097d0 <inv_get_gyro_on>
 800a666:	b110      	cbz	r0, 800a66e <inv_get_quaternion_set+0x2a>
        *accuracy = inv_get_gyro_accuracy();
 800a668:	f7ff fa92 	bl	8009b90 <inv_get_gyro_accuracy>
 800a66c:	e7f7      	b.n	800a65e <inv_get_quaternion_set+0x1a>
    }else if (inv_get_accel_on()) {
 800a66e:	f7ff f8b7 	bl	80097e0 <inv_get_accel_on>
 800a672:	2800      	cmp	r0, #0
 800a674:	d0f3      	beq.n	800a65e <inv_get_quaternion_set+0x1a>
        *accuracy = inv_get_accel_accuracy();
 800a676:	f7ff fa9f 	bl	8009bb8 <inv_get_accel_accuracy>
 800a67a:	e7f0      	b.n	800a65e <inv_get_quaternion_set+0x1a>

0800a67c <inv_init_results_holder>:
{
 800a67c:	b510      	push	{r4, lr}
    memset(&rh, 0, sizeof(rh));
 800a67e:	4c0a      	ldr	r4, [pc, #40]	@ (800a6a8 <inv_init_results_holder+0x2c>)
 800a680:	2280      	movs	r2, #128	@ 0x80
 800a682:	2100      	movs	r1, #0
 800a684:	4620      	mov	r0, r4
 800a686:	f002 fdd5 	bl	800d234 <memset>
    rh.mag_scale[0] = 1L<<30;
 800a68a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    rh.mag_scale[1] = 1L<<30;
 800a68e:	e9c4 220c 	strd	r2, r2, [r4, #48]	@ 0x30
    rh.compass_correction[0] = 1L<<30;
 800a692:	e9c4 220e 	strd	r2, r2, [r4, #56]	@ 0x38
    rh.gam_quat[0] = 1L<<30;
 800a696:	60e2      	str	r2, [r4, #12]
    rh.nav_quat[0] = 1L<<30;
 800a698:	f844 2c04 	str.w	r2, [r4, #-4]
    rh.quat_confidence_interval = (float)M_PI;
 800a69c:	4a03      	ldr	r2, [pc, #12]	@ (800a6ac <inv_init_results_holder+0x30>)
 800a69e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
}
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	bf00      	nop
 800a6a8:	200016c0 	.word	0x200016c0
 800a6ac:	40490fdb 	.word	0x40490fdb

0800a6b0 <inv_enable_results_holder>:
{
 800a6b0:	b508      	push	{r3, lr}
    result = inv_init_results_holder();
 800a6b2:	f7ff ffe3 	bl	800a67c <inv_init_results_holder>
    if ( result ) {
 800a6b6:	b920      	cbnz	r0, 800a6c2 <inv_enable_results_holder+0x12>
}
 800a6b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    result = inv_register_mpl_start_notification(inv_start_results_holder);
 800a6bc:	4801      	ldr	r0, [pc, #4]	@ (800a6c4 <inv_enable_results_holder+0x14>)
 800a6be:	f000 b887 	b.w	800a7d0 <inv_register_mpl_start_notification>
}
 800a6c2:	bd08      	pop	{r3, pc}
 800a6c4:	0800a435 	.word	0x0800a435

0800a6c8 <inv_set_accel_bias_found>:
    rh.got_accel_bias = state;
 800a6c8:	4b01      	ldr	r3, [pc, #4]	@ (800a6d0 <inv_set_accel_bias_found+0x8>)
 800a6ca:	6558      	str	r0, [r3, #84]	@ 0x54
}
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	200016bc 	.word	0x200016bc

0800a6d4 <inv_got_compass_bias>:
}
 800a6d4:	4b01      	ldr	r3, [pc, #4]	@ (800a6dc <inv_got_compass_bias+0x8>)
 800a6d6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	200016bc 	.word	0x200016bc

0800a6e0 <inv_set_compass_bias_found>:
    rh.got_compass_bias = state;
 800a6e0:	4b01      	ldr	r3, [pc, #4]	@ (800a6e8 <inv_set_compass_bias_found+0x8>)
 800a6e2:	6718      	str	r0, [r3, #112]	@ 0x70
}
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	200016bc 	.word	0x200016bc

0800a6ec <inv_set_compass_state>:
    rh.compass_state = state;
 800a6ec:	4b01      	ldr	r3, [pc, #4]	@ (800a6f4 <inv_set_compass_state+0x8>)
 800a6ee:	6798      	str	r0, [r3, #120]	@ 0x78
}
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	200016bc 	.word	0x200016bc

0800a6f8 <inv_get_compass_state>:
}
 800a6f8:	4b01      	ldr	r3, [pc, #4]	@ (800a700 <inv_get_compass_state+0x8>)
 800a6fa:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	200016bc 	.word	0x200016bc

0800a704 <inv_set_compass_bias_error>:
{
 800a704:	4602      	mov	r2, r0
    memcpy(rh.compass_bias_error, bias_error, sizeof(rh.compass_bias_error));
 800a706:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <inv_set_compass_bias_error+0x10>)
 800a708:	6800      	ldr	r0, [r0, #0]
 800a70a:	6851      	ldr	r1, [r2, #4]
 800a70c:	c303      	stmia	r3!, {r0, r1}
 800a70e:	6890      	ldr	r0, [r2, #8]
 800a710:	6018      	str	r0, [r3, #0]
}
 800a712:	4770      	bx	lr
 800a714:	20001714 	.word	0x20001714

0800a718 <inv_get_linear_accel>:
    if (data != NULL)
 800a718:	b108      	cbz	r0, 800a71e <inv_get_linear_accel+0x6>
 800a71a:	f7ff bf43 	b.w	800a5a4 <inv_get_linear_accel.part.0>
}
 800a71e:	2016      	movs	r0, #22
 800a720:	4770      	bx	lr
	...

0800a724 <inv_get_linear_accel_float>:
 *  @param[out] data    3-element vector of linear aceel float data
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel_float(float *data)
{
 800a724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    long tdata[3];
    unsigned char i;

    if (data != NULL && !inv_get_linear_accel(tdata)) {
 800a726:	4604      	mov	r4, r0
 800a728:	b1f8      	cbz	r0, 800a76a <inv_get_linear_accel_float+0x46>
    if (data != NULL)
 800a72a:	a801      	add	r0, sp, #4
 800a72c:	f7ff ff3a 	bl	800a5a4 <inv_get_linear_accel.part.0>
    if (data != NULL && !inv_get_linear_accel(tdata)) {
 800a730:	b9d8      	cbnz	r0, 800a76a <inv_get_linear_accel_float+0x46>
        for (i = 0; i < 3; ++i) {
            data[i] = ((float)tdata[i] / (1L << 16));
 800a732:	eddd 7a01 	vldr	s15, [sp, #4]
 800a736:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a770 <inv_get_linear_accel_float+0x4c>
 800a73a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a73e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a742:	edc4 7a00 	vstr	s15, [r4]
 800a746:	eddd 7a02 	vldr	s15, [sp, #8]
 800a74a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a752:	edc4 7a01 	vstr	s15, [r4, #4]
 800a756:	eddd 7a03 	vldr	s15, [sp, #12]
 800a75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a75e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a762:	edc4 7a02 	vstr	s15, [r4, #8]
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
 800a766:	b004      	add	sp, #16
 800a768:	bd10      	pop	{r4, pc}
        return INV_ERROR_INVALID_PARAMETER;
 800a76a:	2016      	movs	r0, #22
 800a76c:	e7fb      	b.n	800a766 <inv_get_linear_accel_float+0x42>
 800a76e:	bf00      	nop
 800a770:	37800000 	.word	0x37800000

0800a774 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
 800a774:	b508      	push	{r3, lr}
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
 800a776:	2254      	movs	r2, #84	@ 0x54
 800a778:	2100      	movs	r1, #0
 800a77a:	4802      	ldr	r0, [pc, #8]	@ (800a784 <inv_init_start_manager+0x10>)
 800a77c:	f002 fd5a 	bl	800d234 <memset>
    return INV_SUCCESS;
}
 800a780:	2000      	movs	r0, #0
 800a782:	bd08      	pop	{r3, pc}
 800a784:	20001744 	.word	0x20001744

0800a788 <inv_unregister_mpl_start_notification>:
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800a788:	4910      	ldr	r1, [pc, #64]	@ (800a7cc <inv_unregister_mpl_start_notification+0x44>)
 800a78a:	680a      	ldr	r2, [r1, #0]
{
 800a78c:	b538      	push	{r3, r4, r5, lr}
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800a78e:	2300      	movs	r3, #0
 800a790:	460c      	mov	r4, r1
 800a792:	429a      	cmp	r2, r3
 800a794:	dc01      	bgt.n	800a79a <inv_unregister_mpl_start_notification+0x12>
            }
            inv_start_cb.num_cb--;
            return INV_SUCCESS;
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
 800a796:	2016      	movs	r0, #22
 800a798:	e014      	b.n	800a7c4 <inv_unregister_mpl_start_notification+0x3c>
        if (inv_start_cb.start_cb[kk] == start_cb) {
 800a79a:	f851 5f04 	ldr.w	r5, [r1, #4]!
 800a79e:	4285      	cmp	r5, r0
 800a7a0:	d111      	bne.n	800a7c6 <inv_unregister_mpl_start_notification+0x3e>
            if (kk != (inv_start_cb.num_cb-1)) {
 800a7a2:	1e51      	subs	r1, r2, #1
 800a7a4:	4299      	cmp	r1, r3
 800a7a6:	d009      	beq.n	800a7bc <inv_unregister_mpl_start_notification+0x34>
                memmove(&inv_start_cb.start_cb[kk],
 800a7a8:	1c58      	adds	r0, r3, #1
 800a7aa:	0080      	lsls	r0, r0, #2
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800a7ac:	1ad2      	subs	r2, r2, r3
                    &inv_start_cb.start_cb[kk+1],
 800a7ae:	1d01      	adds	r1, r0, #4
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800a7b0:	3a01      	subs	r2, #1
                memmove(&inv_start_cb.start_cb[kk],
 800a7b2:	0092      	lsls	r2, r2, #2
 800a7b4:	4421      	add	r1, r4
 800a7b6:	4420      	add	r0, r4
 800a7b8:	f002 fd22 	bl	800d200 <memmove>
            inv_start_cb.num_cb--;
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	6023      	str	r3, [r4, #0]
            return INV_SUCCESS;
 800a7c2:	2000      	movs	r0, #0
}
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	e7e3      	b.n	800a792 <inv_unregister_mpl_start_notification+0xa>
 800a7ca:	bf00      	nop
 800a7cc:	20001744 	.word	0x20001744

0800a7d0 <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
 800a7d0:	4a06      	ldr	r2, [pc, #24]	@ (800a7ec <inv_register_mpl_start_notification+0x1c>)
 800a7d2:	6813      	ldr	r3, [r2, #0]
 800a7d4:	2b13      	cmp	r3, #19
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800a7d6:	bfdf      	itttt	le
 800a7d8:	eb02 0183 	addle.w	r1, r2, r3, lsl #2
    inv_start_cb.num_cb++;
 800a7dc:	3301      	addle	r3, #1
    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800a7de:	6048      	strle	r0, [r1, #4]
    inv_start_cb.num_cb++;
 800a7e0:	6013      	strle	r3, [r2, #0]
    return INV_SUCCESS;
 800a7e2:	bfd4      	ite	le
 800a7e4:	2000      	movle	r0, #0
        return INV_ERROR_INVALID_PARAMETER;
 800a7e6:	2016      	movgt	r0, #22
}
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20001744 	.word	0x20001744

0800a7f0 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	4e09      	ldr	r6, [pc, #36]	@ (800a818 <inv_execute_mpl_start_notification+0x28>)
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800a7f4:	2500      	movs	r5, #0
    first_error = INV_SUCCESS;
 800a7f6:	462c      	mov	r4, r5
 800a7f8:	4637      	mov	r7, r6
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	dc01      	bgt.n	800a804 <inv_execute_mpl_start_notification+0x14>
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
}
 800a800:	4620      	mov	r0, r4
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = inv_start_cb.start_cb[kk]();
 800a804:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800a808:	4798      	blx	r3
        if (result && (first_error == INV_SUCCESS)) {
 800a80a:	b110      	cbz	r0, 800a812 <inv_execute_mpl_start_notification+0x22>
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	bf08      	it	eq
 800a810:	4604      	moveq	r4, r0
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800a812:	3501      	adds	r5, #1
 800a814:	e7f1      	b.n	800a7fa <inv_execute_mpl_start_notification+0xa>
 800a816:	bf00      	nop
 800a818:	20001744 	.word	0x20001744

0800a81c <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
 800a81c:	b508      	push	{r3, lr}
    memset(&ds, 0, sizeof(ds));
 800a81e:	4b05      	ldr	r3, [pc, #20]	@ (800a834 <inv_init_storage_manager+0x18>)
 800a820:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800a824:	2100      	movs	r1, #0
 800a826:	4618      	mov	r0, r3
 800a828:	f002 fd04 	bl	800d234 <memset>
    ds.total_size = sizeof(struct data_header_t);
 800a82c:	220c      	movs	r2, #12
 800a82e:	6042      	str	r2, [r0, #4]
}
 800a830:	bd08      	pop	{r3, pc}
 800a832:	bf00      	nop
 800a834:	20001798 	.word	0x20001798

0800a838 <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
 800a838:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
 800a83a:	4d15      	ldr	r5, [pc, #84]	@ (800a890 <inv_register_load_store+0x58>)
 800a83c:	682c      	ldr	r4, [r5, #0]
 800a83e:	f04f 0c00 	mov.w	ip, #0
 800a842:	462e      	mov	r6, r5
 800a844:	4564      	cmp	r4, ip
 800a846:	dc17      	bgt.n	800a878 <inv_register_load_store+0x40>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
 800a848:	2c14      	cmp	r4, #20
 800a84a:	d01e      	beq.n	800a88a <inv_register_load_store+0x52>
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
 800a84c:	250c      	movs	r5, #12
 800a84e:	fb05 6504 	mla	r5, r5, r4, r6
 800a852:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
 800a856:	1ca3      	adds	r3, r4, #2
    ds.hd[ds.num].size = size;
 800a858:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
    ds.load[ds.num] = load_func;
 800a85c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    ds.save[ds.num] = save_func;
 800a860:	f104 0316 	add.w	r3, r4, #22
    ds.total_size += size + sizeof(struct data_header_t);
    ds.num++;
 800a864:	3401      	adds	r4, #1
    ds.save[ds.num] = save_func;
 800a866:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
 800a86a:	6873      	ldr	r3, [r6, #4]
    ds.num++;
 800a86c:	6034      	str	r4, [r6, #0]
    ds.total_size += size + sizeof(struct data_header_t);
 800a86e:	330c      	adds	r3, #12
 800a870:	441a      	add	r2, r3
 800a872:	6072      	str	r2, [r6, #4]

    return INV_SUCCESS;
 800a874:	2000      	movs	r0, #0
}
 800a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (key == ds.hd[kk].key) {
 800a878:	f8d5 70b0 	ldr.w	r7, [r5, #176]	@ 0xb0
 800a87c:	429f      	cmp	r7, r3
 800a87e:	f105 050c 	add.w	r5, r5, #12
 800a882:	d002      	beq.n	800a88a <inv_register_load_store+0x52>
    for (kk=0; kk<ds.num; ++kk) {
 800a884:	f10c 0c01 	add.w	ip, ip, #1
 800a888:	e7dc      	b.n	800a844 <inv_register_load_store+0xc>
            return INV_ERROR_INVALID_PARAMETER;
 800a88a:	2016      	movs	r0, #22
 800a88c:	e7f3      	b.n	800a876 <inv_register_load_store+0x3e>
 800a88e:	bf00      	nop
 800a890:	20001798 	.word	0x20001798

0800a894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a894:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a896:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <HAL_InitTick+0x3c>)
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a89e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d4 <HAL_InitTick+0x40>)
{
 800a8a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a8a6:	6810      	ldr	r0, [r2, #0]
 800a8a8:	fbb0 f0f3 	udiv	r0, r0, r3
 800a8ac:	f000 f89a 	bl	800a9e4 <HAL_SYSTICK_Config>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	b958      	cbnz	r0, 800a8cc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a8b4:	2d0f      	cmp	r5, #15
 800a8b6:	d809      	bhi.n	800a8cc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c0:	f000 f85e 	bl	800a980 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a8c4:	4b04      	ldr	r3, [pc, #16]	@ (800a8d8 <HAL_InitTick+0x44>)
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	e7fc      	b.n	800a8ca <HAL_InitTick+0x36>
 800a8d0:	2000004c 	.word	0x2000004c
 800a8d4:	20000010 	.word	0x20000010
 800a8d8:	20000050 	.word	0x20000050

0800a8dc <HAL_Init>:
{
 800a8dc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a8de:	4b0b      	ldr	r3, [pc, #44]	@ (800a90c <HAL_Init+0x30>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8f6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a8f8:	2003      	movs	r0, #3
 800a8fa:	f000 f82f 	bl	800a95c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800a8fe:	200f      	movs	r0, #15
 800a900:	f7ff ffc8 	bl	800a894 <HAL_InitTick>
  HAL_MspInit();
 800a904:	f7fc fb18 	bl	8006f38 <HAL_MspInit>
}
 800a908:	2000      	movs	r0, #0
 800a90a:	bd08      	pop	{r3, pc}
 800a90c:	40023c00 	.word	0x40023c00

0800a910 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800a910:	4a03      	ldr	r2, [pc, #12]	@ (800a920 <HAL_IncTick+0x10>)
 800a912:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <HAL_IncTick+0x14>)
 800a914:	6811      	ldr	r1, [r2, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	440b      	add	r3, r1
 800a91a:	6013      	str	r3, [r2, #0]
}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20001930 	.word	0x20001930
 800a924:	2000004c 	.word	0x2000004c

0800a928 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a928:	4b01      	ldr	r3, [pc, #4]	@ (800a930 <HAL_GetTick+0x8>)
 800a92a:	6818      	ldr	r0, [r3, #0]
}
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20001930 	.word	0x20001930

0800a934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a938:	f7ff fff6 	bl	800a928 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a93c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a93e:	bf1c      	itt	ne
 800a940:	4b05      	ldrne	r3, [pc, #20]	@ (800a958 <HAL_Delay+0x24>)
 800a942:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800a944:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800a946:	bf18      	it	ne
 800a948:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a94a:	f7ff ffed 	bl	800a928 <HAL_GetTick>
 800a94e:	1b43      	subs	r3, r0, r5
 800a950:	42a3      	cmp	r3, r4
 800a952:	d3fa      	bcc.n	800a94a <HAL_Delay+0x16>
  {
  }
}
 800a954:	bd38      	pop	{r3, r4, r5, pc}
 800a956:	bf00      	nop
 800a958:	2000004c 	.word	0x2000004c

0800a95c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a95c:	4907      	ldr	r1, [pc, #28]	@ (800a97c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a95e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a960:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a964:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a966:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a968:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a96c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a96e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a978:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a97a:	4770      	bx	lr
 800a97c:	e000ed00 	.word	0xe000ed00

0800a980 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a980:	4b16      	ldr	r3, [pc, #88]	@ (800a9dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a982:	b530      	push	{r4, r5, lr}
 800a984:	68dc      	ldr	r4, [r3, #12]
 800a986:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a98a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a98e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a990:	2b04      	cmp	r3, #4
 800a992:	bf28      	it	cs
 800a994:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a996:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a998:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a99c:	bf8c      	ite	hi
 800a99e:	3c03      	subhi	r4, #3
 800a9a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9a2:	fa05 f303 	lsl.w	r3, r5, r3
 800a9a6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9aa:	40a5      	lsls	r5, r4
 800a9ac:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9b0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800a9b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9b4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9b8:	bfac      	ite	ge
 800a9ba:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9be:	4a08      	ldrlt	r2, [pc, #32]	@ (800a9e0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9c4:	bfb8      	it	lt
 800a9c6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	bfaa      	itet	ge
 800a9ce:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9d2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9d4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a9d8:	bd30      	pop	{r4, r5, pc}
 800a9da:	bf00      	nop
 800a9dc:	e000ed00 	.word	0xe000ed00
 800a9e0:	e000ed14 	.word	0xe000ed14

0800a9e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a9e4:	3801      	subs	r0, #1
 800a9e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800a9ea:	d20b      	bcs.n	800aa04 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a9ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9f0:	4a05      	ldr	r2, [pc, #20]	@ (800aa08 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a9f2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9f4:	21f0      	movs	r1, #240	@ 0xf0
 800a9f6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a9fa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a9fc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a9fe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa00:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800aa04:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800aa06:	4770      	bx	lr
 800aa08:	e000ed00 	.word	0xe000ed00

0800aa0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa10:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 800abb8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa14:	4a66      	ldr	r2, [pc, #408]	@ (800abb0 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa16:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa18:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800aa1a:	2401      	movs	r4, #1
 800aa1c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa1e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800aa22:	43ac      	bics	r4, r5
 800aa24:	f040 80af 	bne.w	800ab86 <HAL_GPIO_Init+0x17a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aa28:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa2a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aa2c:	f005 0403 	and.w	r4, r5, #3
 800aa30:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa34:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aa38:	1e67      	subs	r7, r4, #1
 800aa3a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa3c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aa40:	d834      	bhi.n	800aaac <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800aa42:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa44:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aa48:	68cf      	ldr	r7, [r1, #12]
 800aa4a:	fa07 f708 	lsl.w	r7, r7, r8
 800aa4e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800aa52:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800aa54:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa56:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aa5a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800aa5e:	409f      	lsls	r7, r3
 800aa60:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800aa64:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800aa66:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aa68:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa6c:	688f      	ldr	r7, [r1, #8]
 800aa6e:	fa07 f708 	lsl.w	r7, r7, r8
 800aa72:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa76:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800aa78:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa7a:	d119      	bne.n	800aab0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800aa7c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800aa80:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa84:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800aa88:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa8c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800aa90:	f04f 0e0f 	mov.w	lr, #15
 800aa94:	fa0e fe0b 	lsl.w	lr, lr, fp
 800aa98:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa9c:	690f      	ldr	r7, [r1, #16]
 800aa9e:	fa07 f70b 	lsl.w	r7, r7, fp
 800aaa2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800aaa6:	f8ca 7020 	str.w	r7, [sl, #32]
 800aaaa:	e001      	b.n	800aab0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aaac:	2c03      	cmp	r4, #3
 800aaae:	d1da      	bne.n	800aa66 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800aab0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aab2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aab6:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aaba:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aabc:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800aac0:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aac2:	d060      	beq.n	800ab86 <HAL_GPIO_Init+0x17a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aac4:	2400      	movs	r4, #0
 800aac6:	9401      	str	r4, [sp, #4]
 800aac8:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800aacc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800aad0:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800aad4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800aad8:	f023 0703 	bic.w	r7, r3, #3
 800aadc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800aae0:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800aae4:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800aae8:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aaea:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaee:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800aaf0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aaf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800aaf8:	240f      	movs	r4, #15
 800aafa:	fa04 f40c 	lsl.w	r4, r4, ip
 800aafe:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ab02:	4c2c      	ldr	r4, [pc, #176]	@ (800abb4 <HAL_GPIO_Init+0x1a8>)
 800ab04:	42a0      	cmp	r0, r4
 800ab06:	d045      	beq.n	800ab94 <HAL_GPIO_Init+0x188>
 800ab08:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab0c:	42a0      	cmp	r0, r4
 800ab0e:	d043      	beq.n	800ab98 <HAL_GPIO_Init+0x18c>
 800ab10:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab14:	42a0      	cmp	r0, r4
 800ab16:	d041      	beq.n	800ab9c <HAL_GPIO_Init+0x190>
 800ab18:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab1c:	42a0      	cmp	r0, r4
 800ab1e:	d03f      	beq.n	800aba0 <HAL_GPIO_Init+0x194>
 800ab20:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab24:	42a0      	cmp	r0, r4
 800ab26:	d03d      	beq.n	800aba4 <HAL_GPIO_Init+0x198>
 800ab28:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab2c:	42a0      	cmp	r0, r4
 800ab2e:	d03b      	beq.n	800aba8 <HAL_GPIO_Init+0x19c>
 800ab30:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d039      	beq.n	800abac <HAL_GPIO_Init+0x1a0>
 800ab38:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	bf14      	ite	ne
 800ab40:	2408      	movne	r4, #8
 800ab42:	2407      	moveq	r4, #7
 800ab44:	fa04 f40c 	lsl.w	r4, r4, ip
 800ab48:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab4c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800ab4e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800ab50:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab52:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800ab56:	bf0c      	ite	eq
 800ab58:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800ab5a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 800ab5c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800ab5e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab60:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800ab64:	bf0c      	ite	eq
 800ab66:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800ab68:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 800ab6a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800ab6c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab6e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800ab72:	bf0c      	ite	eq
 800ab74:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800ab76:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 800ab78:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab7a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab7c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800ab7e:	bf54      	ite	pl
 800ab80:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800ab82:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800ab84:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab86:	3301      	adds	r3, #1
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	f47f af45 	bne.w	800aa18 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ab94:	2400      	movs	r4, #0
 800ab96:	e7d5      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800ab98:	2401      	movs	r4, #1
 800ab9a:	e7d3      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800ab9c:	2402      	movs	r4, #2
 800ab9e:	e7d1      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800aba0:	2403      	movs	r4, #3
 800aba2:	e7cf      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800aba4:	2404      	movs	r4, #4
 800aba6:	e7cd      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800aba8:	2405      	movs	r4, #5
 800abaa:	e7cb      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800abac:	2406      	movs	r4, #6
 800abae:	e7c9      	b.n	800ab44 <HAL_GPIO_Init+0x138>
 800abb0:	40013c00 	.word	0x40013c00
 800abb4:	40020000 	.word	0x40020000
 800abb8:	40023800 	.word	0x40023800

0800abbc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abbc:	6801      	ldr	r1, [r0, #0]
 800abbe:	694b      	ldr	r3, [r1, #20]
 800abc0:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	d010      	beq.n	800abec <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abca:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800abce:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800abd0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800abd2:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800abd4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abd8:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abdc:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abde:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abe2:	f043 0304 	orr.w	r3, r3, #4
 800abe6:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 800abe8:	2001      	movs	r0, #1
 800abea:	4770      	bx	lr
  }
  return HAL_OK;
 800abec:	4618      	mov	r0, r3
}
 800abee:	4770      	bx	lr

0800abf0 <I2C_WaitOnFlagUntilTimeout>:
{
 800abf0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800abf4:	4606      	mov	r6, r0
 800abf6:	460f      	mov	r7, r1
 800abf8:	4691      	mov	r9, r2
 800abfa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac00:	6833      	ldr	r3, [r6, #0]
 800ac02:	f1ba 0f01 	cmp.w	sl, #1
 800ac06:	bf0c      	ite	eq
 800ac08:	695c      	ldreq	r4, [r3, #20]
 800ac0a:	699c      	ldrne	r4, [r3, #24]
 800ac0c:	ea27 0404 	bic.w	r4, r7, r4
 800ac10:	b2a4      	uxth	r4, r4
 800ac12:	fab4 f484 	clz	r4, r4
 800ac16:	0964      	lsrs	r4, r4, #5
 800ac18:	45a1      	cmp	r9, r4
 800ac1a:	d001      	beq.n	800ac20 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e025      	b.n	800ac6c <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 800ac20:	1c6a      	adds	r2, r5, #1
 800ac22:	d0ee      	beq.n	800ac02 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac24:	f7ff fe80 	bl	800a928 <HAL_GetTick>
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	1ac0      	subs	r0, r0, r3
 800ac2c:	42a8      	cmp	r0, r5
 800ac2e:	d801      	bhi.n	800ac34 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ac30:	2d00      	cmp	r5, #0
 800ac32:	d1e5      	bne.n	800ac00 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	f1ba 0f01 	cmp.w	sl, #1
 800ac3a:	bf0c      	ite	eq
 800ac3c:	695b      	ldreq	r3, [r3, #20]
 800ac3e:	699b      	ldrne	r3, [r3, #24]
 800ac40:	ea27 0303 	bic.w	r3, r7, r3
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	fab3 f383 	clz	r3, r3
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	4599      	cmp	r9, r3
 800ac4e:	d1d7      	bne.n	800ac00 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ac50:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800ac52:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ac54:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ac56:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ac5a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ac5e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800ac60:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ac64:	f042 0220 	orr.w	r2, r2, #32
 800ac68:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 800ac6a:	2001      	movs	r0, #1
}
 800ac6c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800ac70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	4604      	mov	r4, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	4616      	mov	r6, r2
 800ac7a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	6968      	ldr	r0, [r5, #20]
 800ac80:	ea27 0000 	bic.w	r0, r7, r0
 800ac84:	b280      	uxth	r0, r0
 800ac86:	b1c0      	cbz	r0, 800acba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac88:	696b      	ldr	r3, [r5, #20]
 800ac8a:	055a      	lsls	r2, r3, #21
 800ac8c:	d517      	bpl.n	800acbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac94:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac96:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800ac9a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac9c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aca2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aca6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acac:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acb0:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800acb2:	2300      	movs	r3, #0
 800acb4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800acb8:	2001      	movs	r0, #1
}
 800acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800acbe:	1c73      	adds	r3, r6, #1
 800acc0:	d0dd      	beq.n	800ac7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acc2:	f7ff fe31 	bl	800a928 <HAL_GetTick>
 800acc6:	eba0 0008 	sub.w	r0, r0, r8
 800acca:	42b0      	cmp	r0, r6
 800accc:	d801      	bhi.n	800acd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d1d4      	bne.n	800ac7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	695a      	ldr	r2, [r3, #20]
 800acd6:	ea27 0202 	bic.w	r2, r7, r2
 800acda:	b292      	uxth	r2, r2
 800acdc:	2a00      	cmp	r2, #0
 800acde:	d0cd      	beq.n	800ac7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ace0:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800ace2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ace4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ace6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acf0:	4313      	orrs	r3, r2
 800acf2:	e7dd      	b.n	800acb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800acf4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4604      	mov	r4, r0
 800acf8:	460d      	mov	r5, r1
 800acfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	061b      	lsls	r3, r3, #24
 800ad02:	d501      	bpl.n	800ad08 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800ad04:	2000      	movs	r0, #0
 800ad06:	e01e      	b.n	800ad46 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f7ff ff57 	bl	800abbc <I2C_IsAcknowledgeFailed>
 800ad0e:	b9c8      	cbnz	r0, 800ad44 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800ad10:	1c6a      	adds	r2, r5, #1
 800ad12:	d0f3      	beq.n	800acfc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad14:	f7ff fe08 	bl	800a928 <HAL_GetTick>
 800ad18:	1b80      	subs	r0, r0, r6
 800ad1a:	42a8      	cmp	r0, r5
 800ad1c:	d801      	bhi.n	800ad22 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800ad1e:	2d00      	cmp	r5, #0
 800ad20:	d1ec      	bne.n	800acfc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800ad2a:	d1e7      	bne.n	800acfc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad2c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad2e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad30:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad34:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800ad3a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad3e:	f042 0220 	orr.w	r2, r2, #32
 800ad42:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800ad44:	2001      	movs	r0, #1
}
 800ad46:	bd70      	pop	{r4, r5, r6, pc}

0800ad48 <I2C_RequestMemoryWrite>:
{
 800ad48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad4c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad4e:	6802      	ldr	r2, [r0, #0]
{
 800ad50:	b085      	sub	sp, #20
 800ad52:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800ad56:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad58:	6813      	ldr	r3, [r2, #0]
 800ad5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad5e:	6013      	str	r3, [r2, #0]
{
 800ad60:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad62:	463b      	mov	r3, r7
 800ad64:	f8cd 8000 	str.w	r8, [sp]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 800ad6e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad70:	f7ff ff3e 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	b138      	cbz	r0, 800ad88 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	05db      	lsls	r3, r3, #23
 800ad7c:	d502      	bpl.n	800ad84 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad82:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800ad84:	2603      	movs	r6, #3
 800ad86:	e020      	b.n	800adca <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad88:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800ad8c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad8e:	491a      	ldr	r1, [pc, #104]	@ (800adf8 <I2C_RequestMemoryWrite+0xb0>)
 800ad90:	4643      	mov	r3, r8
 800ad92:	463a      	mov	r2, r7
 800ad94:	4620      	mov	r0, r4
 800ad96:	f7ff ff6b 	bl	800ac70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad9a:	b9a8      	cbnz	r0, 800adc8 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	9003      	str	r0, [sp, #12]
 800ada0:	695a      	ldr	r2, [r3, #20]
 800ada2:	9203      	str	r2, [sp, #12]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ada8:	4642      	mov	r2, r8
 800adaa:	4639      	mov	r1, r7
 800adac:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adae:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adb0:	f7ff ffa0 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800adb4:	4606      	mov	r6, r0
 800adb6:	b160      	cbz	r0, 800add2 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adba:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adbc:	bf01      	itttt	eq
 800adbe:	6822      	ldreq	r2, [r4, #0]
 800adc0:	6813      	ldreq	r3, [r2, #0]
 800adc2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800adc6:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 800adc8:	2601      	movs	r6, #1
}
 800adca:	4630      	mov	r0, r6
 800adcc:	b005      	add	sp, #20
 800adce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800add2:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800add8:	d102      	bne.n	800ade0 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adda:	b2ed      	uxtb	r5, r5
 800addc:	611d      	str	r5, [r3, #16]
 800adde:	e7f4      	b.n	800adca <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ade0:	0a2a      	lsrs	r2, r5, #8
 800ade2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ade4:	4639      	mov	r1, r7
 800ade6:	4642      	mov	r2, r8
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff ff83 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d1e2      	bne.n	800adb8 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	e7f1      	b.n	800adda <I2C_RequestMemoryWrite+0x92>
 800adf6:	bf00      	nop
 800adf8:	00010002 	.word	0x00010002

0800adfc <I2C_RequestMemoryRead>:
{
 800adfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae02:	6803      	ldr	r3, [r0, #0]
{
 800ae04:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae0c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae0e:	681a      	ldr	r2, [r3, #0]
{
 800ae10:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae18:	601a      	str	r2, [r3, #0]
{
 800ae1a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f8cd 8000 	str.w	r8, [sp]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 800ae28:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae2a:	f7ff fee1 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	b138      	cbz	r0, 800ae42 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae32:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae34:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae36:	bf44      	itt	mi
 800ae38:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 800ae3c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800ae3e:	2003      	movs	r0, #3
 800ae40:	e021      	b.n	800ae86 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae42:	fa5f f986 	uxtb.w	r9, r6
 800ae46:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800ae4a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae4c:	492b      	ldr	r1, [pc, #172]	@ (800aefc <I2C_RequestMemoryRead+0x100>)
 800ae4e:	4643      	mov	r3, r8
 800ae50:	463a      	mov	r2, r7
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7ff ff0c 	bl	800ac70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae58:	b9a0      	cbnz	r0, 800ae84 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	9003      	str	r0, [sp, #12]
 800ae5e:	695a      	ldr	r2, [r3, #20]
 800ae60:	9203      	str	r2, [sp, #12]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae66:	4642      	mov	r2, r8
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae6c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae6e:	f7ff ff41 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae72:	b158      	cbz	r0, 800ae8c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae76:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae78:	bf01      	itttt	eq
 800ae7a:	6822      	ldreq	r2, [r4, #0]
 800ae7c:	6813      	ldreq	r3, [r2, #0]
 800ae7e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800ae82:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 800ae84:	2001      	movs	r0, #1
}
 800ae86:	b004      	add	sp, #16
 800ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae8c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae90:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae92:	d11a      	bne.n	800aeca <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae94:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae96:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae98:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f7ff ff29 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aea2:	4602      	mov	r2, r0
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d1e5      	bne.n	800ae74 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aea8:	6821      	ldr	r1, [r4, #0]
 800aeaa:	680b      	ldr	r3, [r1, #0]
 800aeac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f8cd 8000 	str.w	r8, [sp]
 800aeb8:	463b      	mov	r3, r7
 800aeba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aebe:	f7ff fe97 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	b160      	cbz	r0, 800aee0 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aec6:	6813      	ldr	r3, [r2, #0]
 800aec8:	e7b4      	b.n	800ae34 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aeca:	0a2a      	lsrs	r2, r5, #8
 800aecc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aece:	4639      	mov	r1, r7
 800aed0:	4642      	mov	r2, r8
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7ff ff0e 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d1cb      	bne.n	800ae74 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	e7d9      	b.n	800ae94 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aee0:	f049 0301 	orr.w	r3, r9, #1
 800aee4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aee6:	4905      	ldr	r1, [pc, #20]	@ (800aefc <I2C_RequestMemoryRead+0x100>)
 800aee8:	4643      	mov	r3, r8
 800aeea:	463a      	mov	r2, r7
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7ff febf 	bl	800ac70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aef2:	3800      	subs	r0, #0
 800aef4:	bf18      	it	ne
 800aef6:	2001      	movne	r0, #1
 800aef8:	e7c5      	b.n	800ae86 <I2C_RequestMemoryRead+0x8a>
 800aefa:	bf00      	nop
 800aefc:	00010002 	.word	0x00010002

0800af00 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	4604      	mov	r4, r0
 800af04:	460d      	mov	r5, r1
 800af06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	075b      	lsls	r3, r3, #29
 800af0e:	d501      	bpl.n	800af14 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800af10:	2000      	movs	r0, #0
 800af12:	e01e      	b.n	800af52 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af14:	4620      	mov	r0, r4
 800af16:	f7ff fe51 	bl	800abbc <I2C_IsAcknowledgeFailed>
 800af1a:	b9c8      	cbnz	r0, 800af50 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800af1c:	1c6a      	adds	r2, r5, #1
 800af1e:	d0f3      	beq.n	800af08 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af20:	f7ff fd02 	bl	800a928 <HAL_GetTick>
 800af24:	1b80      	subs	r0, r0, r6
 800af26:	42a8      	cmp	r0, r5
 800af28:	d801      	bhi.n	800af2e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	d1ec      	bne.n	800af08 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f013 0304 	ands.w	r3, r3, #4
 800af36:	d1e7      	bne.n	800af08 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800af38:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af3a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af3c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af44:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800af46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af4a:	f042 0220 	orr.w	r2, r2, #32
 800af4e:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800af50:	2001      	movs	r0, #1
}
 800af52:	bd70      	pop	{r4, r5, r6, pc}

0800af54 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af5c:	6821      	ldr	r1, [r4, #0]
 800af5e:	694b      	ldr	r3, [r1, #20]
 800af60:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800af64:	d001      	beq.n	800af6a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800af66:	2000      	movs	r0, #0
 800af68:	e011      	b.n	800af8e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af6a:	694a      	ldr	r2, [r1, #20]
 800af6c:	06d2      	lsls	r2, r2, #27
 800af6e:	d50f      	bpl.n	800af90 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af70:	f06f 0210 	mvn.w	r2, #16
 800af74:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800af76:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800af78:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af7a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af7e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800af82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af84:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800af86:	2300      	movs	r3, #0
 800af88:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800af8c:	2001      	movs	r0, #1
}
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af90:	f7ff fcca 	bl	800a928 <HAL_GetTick>
 800af94:	1b80      	subs	r0, r0, r6
 800af96:	42a8      	cmp	r0, r5
 800af98:	d801      	bhi.n	800af9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	d1de      	bne.n	800af5c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800afa6:	d1d9      	bne.n	800af5c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 800afa8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800afaa:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800afac:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afb0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afb6:	4313      	orrs	r3, r2
 800afb8:	e7e4      	b.n	800af84 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

0800afbc <HAL_I2C_Init>:
{
 800afbc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800afbe:	4604      	mov	r4, r0
 800afc0:	b908      	cbnz	r0, 800afc6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800afc2:	2001      	movs	r0, #1
}
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800afc6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800afca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800afce:	b91b      	cbnz	r3, 800afd8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800afd0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800afd4:	f7fb fefa 	bl	8006dcc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800afd8:	2324      	movs	r3, #36	@ 0x24
 800afda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	f022 0201 	bic.w	r2, r2, #1
 800afe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aff6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aff8:	f000 fca2 	bl	800b940 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800affc:	4b3f      	ldr	r3, [pc, #252]	@ (800b0fc <HAL_I2C_Init+0x140>)
 800affe:	6865      	ldr	r5, [r4, #4]
 800b000:	429d      	cmp	r5, r3
 800b002:	bf94      	ite	ls
 800b004:	4b3e      	ldrls	r3, [pc, #248]	@ (800b100 <HAL_I2C_Init+0x144>)
 800b006:	4b3f      	ldrhi	r3, [pc, #252]	@ (800b104 <HAL_I2C_Init+0x148>)
 800b008:	4298      	cmp	r0, r3
 800b00a:	bf8c      	ite	hi
 800b00c:	2300      	movhi	r3, #0
 800b00e:	2301      	movls	r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1d6      	bne.n	800afc2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b014:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b016:	4e39      	ldr	r6, [pc, #228]	@ (800b0fc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b018:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800b01a:	4b3b      	ldr	r3, [pc, #236]	@ (800b108 <HAL_I2C_Init+0x14c>)
 800b01c:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b020:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800b024:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b026:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b028:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b02a:	bf88      	it	hi
 800b02c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 800b030:	6a11      	ldr	r1, [r2, #32]
 800b032:	bf88      	it	hi
 800b034:	4373      	mulhi	r3, r6
 800b036:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800b03a:	bf84      	itt	hi
 800b03c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 800b040:	fbb3 f3f6 	udivhi	r3, r3, r6
 800b044:	3301      	adds	r3, #1
 800b046:	430b      	orrs	r3, r1
 800b048:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b04a:	69d1      	ldr	r1, [r2, #28]
 800b04c:	1e43      	subs	r3, r0, #1
 800b04e:	482b      	ldr	r0, [pc, #172]	@ (800b0fc <HAL_I2C_Init+0x140>)
 800b050:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800b054:	4285      	cmp	r5, r0
 800b056:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800b05a:	d832      	bhi.n	800b0c2 <HAL_I2C_Init+0x106>
 800b05c:	006d      	lsls	r5, r5, #1
 800b05e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800b062:	fbb3 f3f5 	udiv	r3, r3, r5
 800b066:	3301      	adds	r3, #1
 800b068:	4203      	tst	r3, r0
 800b06a:	d042      	beq.n	800b0f2 <HAL_I2C_Init+0x136>
 800b06c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b070:	4319      	orrs	r1, r3
 800b072:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b074:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800b078:	6811      	ldr	r1, [r2, #0]
 800b07a:	4303      	orrs	r3, r0
 800b07c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800b080:	430b      	orrs	r3, r1
 800b082:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b084:	6891      	ldr	r1, [r2, #8]
 800b086:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800b08a:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800b08e:	4303      	orrs	r3, r0
 800b090:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800b094:	430b      	orrs	r3, r1
 800b096:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b098:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800b09c:	68d1      	ldr	r1, [r2, #12]
 800b09e:	4303      	orrs	r3, r0
 800b0a0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800b0a4:	430b      	orrs	r3, r1
 800b0a6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	f043 0301 	orr.w	r3, r3, #1
 800b0ae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800b0b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b0b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0ba:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0bc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 800b0c0:	e780      	b.n	800afc4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b0c2:	68a0      	ldr	r0, [r4, #8]
 800b0c4:	b950      	cbnz	r0, 800b0dc <HAL_I2C_Init+0x120>
 800b0c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ca:	fbb3 f3f5 	udiv	r3, r3, r5
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0d4:	b17b      	cbz	r3, 800b0f6 <HAL_I2C_Init+0x13a>
 800b0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0da:	e7c9      	b.n	800b070 <HAL_I2C_Init+0xb4>
 800b0dc:	2019      	movs	r0, #25
 800b0de:	4368      	muls	r0, r5
 800b0e0:	fbb3 f3f0 	udiv	r3, r3, r0
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0ea:	b123      	cbz	r3, 800b0f6 <HAL_I2C_Init+0x13a>
 800b0ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0f0:	e7be      	b.n	800b070 <HAL_I2C_Init+0xb4>
 800b0f2:	2304      	movs	r3, #4
 800b0f4:	e7bc      	b.n	800b070 <HAL_I2C_Init+0xb4>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e7ba      	b.n	800b070 <HAL_I2C_Init+0xb4>
 800b0fa:	bf00      	nop
 800b0fc:	000186a0 	.word	0x000186a0
 800b100:	001e847f 	.word	0x001e847f
 800b104:	003d08ff 	.word	0x003d08ff
 800b108:	000f4240 	.word	0x000f4240

0800b10c <HAL_I2C_Mem_Write>:
{
 800b10c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b110:	4604      	mov	r4, r0
 800b112:	4699      	mov	r9, r3
 800b114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b116:	460f      	mov	r7, r1
 800b118:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b11a:	f7ff fc05 	bl	800a928 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b11e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b122:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800b124:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b126:	d003      	beq.n	800b130 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 800b128:	2002      	movs	r0, #2
}
 800b12a:	b003      	add	sp, #12
 800b12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b130:	9000      	str	r0, [sp, #0]
 800b132:	493c      	ldr	r1, [pc, #240]	@ (800b224 <HAL_I2C_Mem_Write+0x118>)
 800b134:	2319      	movs	r3, #25
 800b136:	2201      	movs	r2, #1
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff fd59 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d1f2      	bne.n	800b128 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800b142:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800b146:	2b01      	cmp	r3, #1
 800b148:	d0ee      	beq.n	800b128 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b14a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800b14c:	2301      	movs	r3, #1
 800b14e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b152:	6803      	ldr	r3, [r0, #0]
 800b154:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800b156:	bf5e      	ittt	pl
 800b158:	6803      	ldrpl	r3, [r0, #0]
 800b15a:	f043 0301 	orrpl.w	r3, r3, #1
 800b15e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b160:	6803      	ldr	r3, [r0, #0]
 800b162:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b166:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b168:	2321      	movs	r3, #33	@ 0x21
 800b16a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b16e:	2340      	movs	r3, #64	@ 0x40
 800b170:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b174:	2300      	movs	r3, #0
 800b176:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800b178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b17a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b17c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800b180:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b182:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b184:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b186:	4b28      	ldr	r3, [pc, #160]	@ (800b228 <HAL_I2C_Mem_Write+0x11c>)
 800b188:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b18a:	4642      	mov	r2, r8
 800b18c:	e9cd 6500 	strd	r6, r5, [sp]
 800b190:	464b      	mov	r3, r9
 800b192:	4639      	mov	r1, r7
 800b194:	4620      	mov	r0, r4
 800b196:	f7ff fdd7 	bl	800ad48 <I2C_RequestMemoryWrite>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d02a      	beq.n	800b1f4 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e7c3      	b.n	800b12a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1a2:	f7ff fda7 	bl	800acf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1a6:	b140      	cbz	r0, 800b1ba <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1aa:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1ac:	bf01      	itttt	eq
 800b1ae:	6822      	ldreq	r2, [r4, #0]
 800b1b0:	6813      	ldreq	r3, [r2, #0]
 800b1b2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800b1b6:	6013      	streq	r3, [r2, #0]
 800b1b8:	e7f1      	b.n	800b19e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b1bc:	6827      	ldr	r7, [r4, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b1c4:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800b1c6:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b1c8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b1ca:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800b1cc:	3a01      	subs	r2, #1
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b1d2:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800b1d4:	1e48      	subs	r0, r1, #1
 800b1d6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b1d8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800b1da:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b1dc:	d50a      	bpl.n	800b1f4 <HAL_I2C_Mem_Write+0xe8>
 800b1de:	b148      	cbz	r0, 800b1f4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1e0:	785a      	ldrb	r2, [r3, #1]
 800b1e2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800b1e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b1ea:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800b1ec:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800b1ee:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800b1f0:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800b1f2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b1f4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1d0      	bne.n	800b1a2 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b200:	f7ff fe7e 	bl	800af00 <I2C_WaitOnBTFFlagUntilTimeout>
 800b204:	2800      	cmp	r0, #0
 800b206:	d1cf      	bne.n	800b1a8 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b210:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b212:	2320      	movs	r3, #32
 800b214:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800b218:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b21c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 800b220:	e783      	b.n	800b12a <HAL_I2C_Mem_Write+0x1e>
 800b222:	bf00      	nop
 800b224:	00100002 	.word	0x00100002
 800b228:	ffff0000 	.word	0xffff0000

0800b22c <HAL_I2C_Mem_Read>:
{
 800b22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b230:	4604      	mov	r4, r0
 800b232:	b087      	sub	sp, #28
 800b234:	4699      	mov	r9, r3
 800b236:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b238:	460d      	mov	r5, r1
 800b23a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b23c:	f7ff fb74 	bl	800a928 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b240:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b244:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800b246:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b248:	d004      	beq.n	800b254 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 800b24a:	2502      	movs	r5, #2
}
 800b24c:	4628      	mov	r0, r5
 800b24e:	b007      	add	sp, #28
 800b250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b254:	9000      	str	r0, [sp, #0]
 800b256:	497a      	ldr	r1, [pc, #488]	@ (800b440 <HAL_I2C_Mem_Read+0x214>)
 800b258:	2319      	movs	r3, #25
 800b25a:	2201      	movs	r2, #1
 800b25c:	4620      	mov	r0, r4
 800b25e:	f7ff fcc7 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800b262:	2800      	cmp	r0, #0
 800b264:	d1f1      	bne.n	800b24a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800b266:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d0ed      	beq.n	800b24a <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b26e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800b270:	2301      	movs	r3, #1
 800b272:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b276:	6803      	ldr	r3, [r0, #0]
 800b278:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800b27a:	bf5e      	ittt	pl
 800b27c:	6803      	ldrpl	r3, [r0, #0]
 800b27e:	f043 0301 	orrpl.w	r3, r3, #1
 800b282:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b284:	6803      	ldr	r3, [r0, #0]
 800b286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b28a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b28c:	2322      	movs	r3, #34	@ 0x22
 800b28e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b292:	2340      	movs	r3, #64	@ 0x40
 800b294:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b298:	2300      	movs	r3, #0
 800b29a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800b29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b29e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b2a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800b2a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b2a8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2aa:	4b66      	ldr	r3, [pc, #408]	@ (800b444 <HAL_I2C_Mem_Read+0x218>)
 800b2ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	e9cd 7600 	strd	r7, r6, [sp]
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f7ff fd9f 	bl	800adfc <I2C_RequestMemoryRead>
 800b2be:	4605      	mov	r5, r0
 800b2c0:	b108      	cbz	r0, 800b2c6 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800b2c2:	2501      	movs	r5, #1
 800b2c4:	e7c2      	b.n	800b24c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800b2c6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2c8:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800b2ca:	b9b2      	cbnz	r2, 800b2fa <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2cc:	9002      	str	r0, [sp, #8]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	9202      	str	r2, [sp, #8]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	9202      	str	r2, [sp, #8]
 800b2d6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2de:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e0:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 800b448 <HAL_I2C_Mem_Read+0x21c>
    while (hi2c->XferSize > 0U)
 800b2e4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d12c      	bne.n	800b344 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800b2f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800b2f8:	e7a8      	b.n	800b24c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800b2fa:	2a01      	cmp	r2, #1
 800b2fc:	d10a      	bne.n	800b314 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b304:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b306:	9003      	str	r0, [sp, #12]
 800b308:	695a      	ldr	r2, [r3, #20]
 800b30a:	9203      	str	r2, [sp, #12]
 800b30c:	699a      	ldr	r2, [r3, #24]
 800b30e:	9203      	str	r2, [sp, #12]
 800b310:	9a03      	ldr	r2, [sp, #12]
 800b312:	e7e1      	b.n	800b2d8 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 800b314:	2a02      	cmp	r2, #2
 800b316:	d10e      	bne.n	800b336 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b31e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b326:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b328:	9004      	str	r0, [sp, #16]
 800b32a:	695a      	ldr	r2, [r3, #20]
 800b32c:	9204      	str	r2, [sp, #16]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	e7d4      	b.n	800b2e0 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b336:	9005      	str	r0, [sp, #20]
 800b338:	695a      	ldr	r2, [r3, #20]
 800b33a:	9205      	str	r2, [sp, #20]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	9305      	str	r3, [sp, #20]
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	e7cd      	b.n	800b2e0 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800b344:	2b03      	cmp	r3, #3
 800b346:	d856      	bhi.n	800b3f6 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d115      	bne.n	800b378 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b34c:	4632      	mov	r2, r6
 800b34e:	4639      	mov	r1, r7
 800b350:	4620      	mov	r0, r4
 800b352:	f7ff fdff 	bl	800af54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b356:	2800      	cmp	r0, #0
 800b358:	d1b3      	bne.n	800b2c2 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	691a      	ldr	r2, [r3, #16]
 800b35e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b360:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800b362:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b364:	3301      	adds	r3, #1
 800b366:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800b368:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b36a:	3b01      	subs	r3, #1
 800b36c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800b36e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b370:	3b01      	subs	r3, #1
 800b372:	b29b      	uxth	r3, r3
 800b374:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800b376:	e7b5      	b.n	800b2e4 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 800b378:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b37a:	9600      	str	r6, [sp, #0]
 800b37c:	463b      	mov	r3, r7
 800b37e:	f04f 0200 	mov.w	r2, #0
 800b382:	4641      	mov	r1, r8
 800b384:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800b386:	d119      	bne.n	800b3bc <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b388:	f7ff fc32 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d198      	bne.n	800b2c2 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b398:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b39e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800b3a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b3a2:	1c53      	adds	r3, r2, #1
 800b3a4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800b3a6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800b3ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800b3ba:	e7d2      	b.n	800b362 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3bc:	f7ff fc18 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f47f af7d 	bne.w	800b2c2 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	6819      	ldr	r1, [r3, #0]
 800b3cc:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800b3d0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3d2:	6919      	ldr	r1, [r3, #16]
 800b3d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b3d6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800b3d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b3da:	3301      	adds	r3, #1
 800b3dc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800b3de:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800b3e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3ec:	4641      	mov	r1, r8
 800b3ee:	9600      	str	r6, [sp, #0]
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	e7c8      	b.n	800b388 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fdaa 	bl	800af54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b400:	2800      	cmp	r0, #0
 800b402:	f47f af5e 	bne.w	800b2c2 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b40c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800b40e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 800b410:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800b412:	3a01      	subs	r2, #1
 800b414:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800b416:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 800b418:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b41a:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 800b41c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800b41e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b420:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 800b422:	3b01      	subs	r3, #1
 800b424:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b426:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800b428:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b42a:	f57f af5b 	bpl.w	800b2e4 <HAL_I2C_Mem_Read+0xb8>
          if (hi2c->XferSize == 3U)
 800b42e:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b430:	bf02      	ittt	eq
 800b432:	6813      	ldreq	r3, [r2, #0]
 800b434:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 800b438:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b43a:	6913      	ldr	r3, [r2, #16]
 800b43c:	704b      	strb	r3, [r1, #1]
 800b43e:	e790      	b.n	800b362 <HAL_I2C_Mem_Read+0x136>
 800b440:	00100002 	.word	0x00100002
 800b444:	ffff0000 	.word	0xffff0000
 800b448:	00010004 	.word	0x00010004

0800b44c <HAL_I2C_GetState>:
  return hi2c->State;
 800b44c:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 800b450:	4770      	bx	lr
	...

0800b454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b458:	4604      	mov	r4, r0
 800b45a:	b340      	cbz	r0, 800b4ae <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b45c:	6803      	ldr	r3, [r0, #0]
 800b45e:	07de      	lsls	r6, r3, #31
 800b460:	d410      	bmi.n	800b484 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	079d      	lsls	r5, r3, #30
 800b466:	d45b      	bmi.n	800b520 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	0719      	lsls	r1, r3, #28
 800b46c:	f100 809d 	bmi.w	800b5aa <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	075a      	lsls	r2, r3, #29
 800b474:	f100 80bd 	bmi.w	800b5f2 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b478:	69a3      	ldr	r3, [r4, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f040 8124 	bne.w	800b6c8 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800b480:	2000      	movs	r0, #0
 800b482:	e02c      	b.n	800b4de <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b484:	4b8d      	ldr	r3, [pc, #564]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	f002 020c 	and.w	r2, r2, #12
 800b48c:	2a04      	cmp	r2, #4
 800b48e:	d007      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b496:	2a08      	cmp	r2, #8
 800b498:	d10b      	bne.n	800b4b2 <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	0259      	lsls	r1, r3, #9
 800b49e:	d508      	bpl.n	800b4b2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4a0:	4b86      	ldr	r3, [pc, #536]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	039a      	lsls	r2, r3, #14
 800b4a6:	d5dc      	bpl.n	800b462 <HAL_RCC_OscConfig+0xe>
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1d9      	bne.n	800b462 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	e015      	b.n	800b4de <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4b2:	6863      	ldr	r3, [r4, #4]
 800b4b4:	4d81      	ldr	r5, [pc, #516]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b4b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ba:	d113      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x90>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b4c4:	f7ff fa30 	bl	800a928 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4c8:	4e7c      	ldr	r6, [pc, #496]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800b4ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	039b      	lsls	r3, r3, #14
 800b4d0:	d4c7      	bmi.n	800b462 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4d2:	f7ff fa29 	bl	800a928 <HAL_GetTick>
 800b4d6:	1b40      	subs	r0, r0, r5
 800b4d8:	2864      	cmp	r0, #100	@ 0x64
 800b4da:	d9f7      	bls.n	800b4cc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800b4dc:	2003      	movs	r0, #3
}
 800b4de:	b002      	add	sp, #8
 800b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4e8:	d104      	bne.n	800b4f4 <HAL_RCC_OscConfig+0xa0>
 800b4ea:	682b      	ldr	r3, [r5, #0]
 800b4ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	e7e3      	b.n	800b4bc <HAL_RCC_OscConfig+0x68>
 800b4f4:	682a      	ldr	r2, [r5, #0]
 800b4f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b4fa:	602a      	str	r2, [r5, #0]
 800b4fc:	682a      	ldr	r2, [r5, #0]
 800b4fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b502:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1dd      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 800b508:	f7ff fa0e 	bl	800a928 <HAL_GetTick>
 800b50c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	039f      	lsls	r7, r3, #14
 800b512:	d5a6      	bpl.n	800b462 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b514:	f7ff fa08 	bl	800a928 <HAL_GetTick>
 800b518:	1b80      	subs	r0, r0, r6
 800b51a:	2864      	cmp	r0, #100	@ 0x64
 800b51c:	d9f7      	bls.n	800b50e <HAL_RCC_OscConfig+0xba>
 800b51e:	e7dd      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b520:	4b66      	ldr	r3, [pc, #408]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	f012 0f0c 	tst.w	r2, #12
 800b528:	d007      	beq.n	800b53a <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b530:	2a08      	cmp	r2, #8
 800b532:	d111      	bne.n	800b558 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	025d      	lsls	r5, r3, #9
 800b538:	d40e      	bmi.n	800b558 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b53a:	4a60      	ldr	r2, [pc, #384]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b53c:	6813      	ldr	r3, [r2, #0]
 800b53e:	0799      	lsls	r1, r3, #30
 800b540:	d502      	bpl.n	800b548 <HAL_RCC_OscConfig+0xf4>
 800b542:	68e3      	ldr	r3, [r4, #12]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d1b2      	bne.n	800b4ae <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b548:	6813      	ldr	r3, [r2, #0]
 800b54a:	6921      	ldr	r1, [r4, #16]
 800b54c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b550:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b554:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b556:	e787      	b.n	800b468 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b558:	68e2      	ldr	r2, [r4, #12]
 800b55a:	4b59      	ldr	r3, [pc, #356]	@ (800b6c0 <HAL_RCC_OscConfig+0x26c>)
 800b55c:	b1b2      	cbz	r2, 800b58c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800b55e:	2201      	movs	r2, #1
 800b560:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b562:	f7ff f9e1 	bl	800a928 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b566:	4d55      	ldr	r5, [pc, #340]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800b568:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	079b      	lsls	r3, r3, #30
 800b56e:	d507      	bpl.n	800b580 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	6922      	ldr	r2, [r4, #16]
 800b574:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b578:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	e773      	b.n	800b468 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b580:	f7ff f9d2 	bl	800a928 <HAL_GetTick>
 800b584:	1b80      	subs	r0, r0, r6
 800b586:	2802      	cmp	r0, #2
 800b588:	d9ef      	bls.n	800b56a <HAL_RCC_OscConfig+0x116>
 800b58a:	e7a7      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800b58c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b58e:	f7ff f9cb 	bl	800a928 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b592:	4e4a      	ldr	r6, [pc, #296]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800b594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b596:	6833      	ldr	r3, [r6, #0]
 800b598:	079f      	lsls	r7, r3, #30
 800b59a:	f57f af65 	bpl.w	800b468 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b59e:	f7ff f9c3 	bl	800a928 <HAL_GetTick>
 800b5a2:	1b40      	subs	r0, r0, r5
 800b5a4:	2802      	cmp	r0, #2
 800b5a6:	d9f6      	bls.n	800b596 <HAL_RCC_OscConfig+0x142>
 800b5a8:	e798      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b5aa:	6962      	ldr	r2, [r4, #20]
 800b5ac:	4b44      	ldr	r3, [pc, #272]	@ (800b6c0 <HAL_RCC_OscConfig+0x26c>)
 800b5ae:	b182      	cbz	r2, 800b5d2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800b5b6:	f7ff f9b7 	bl	800a928 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5ba:	4e40      	ldr	r6, [pc, #256]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800b5bc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5be:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800b5c0:	079b      	lsls	r3, r3, #30
 800b5c2:	f53f af55 	bmi.w	800b470 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5c6:	f7ff f9af 	bl	800a928 <HAL_GetTick>
 800b5ca:	1b40      	subs	r0, r0, r5
 800b5cc:	2802      	cmp	r0, #2
 800b5ce:	d9f6      	bls.n	800b5be <HAL_RCC_OscConfig+0x16a>
 800b5d0:	e784      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800b5d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800b5d6:	f7ff f9a7 	bl	800a928 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5da:	4e38      	ldr	r6, [pc, #224]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800b5dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5de:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800b5e0:	079f      	lsls	r7, r3, #30
 800b5e2:	f57f af45 	bpl.w	800b470 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5e6:	f7ff f99f 	bl	800a928 <HAL_GetTick>
 800b5ea:	1b40      	subs	r0, r0, r5
 800b5ec:	2802      	cmp	r0, #2
 800b5ee:	d9f6      	bls.n	800b5de <HAL_RCC_OscConfig+0x18a>
 800b5f0:	e774      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5f2:	4b32      	ldr	r3, [pc, #200]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b5f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5f6:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 800b5fa:	d128      	bne.n	800b64e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5fc:	9201      	str	r2, [sp, #4]
 800b5fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b600:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b604:	641a      	str	r2, [r3, #64]	@ 0x40
 800b606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b610:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b612:	4d2c      	ldr	r5, [pc, #176]	@ (800b6c4 <HAL_RCC_OscConfig+0x270>)
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	05d8      	lsls	r0, r3, #23
 800b618:	d51b      	bpl.n	800b652 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	4d27      	ldr	r5, [pc, #156]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d127      	bne.n	800b672 <HAL_RCC_OscConfig+0x21e>
 800b622:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b624:	f043 0301 	orr.w	r3, r3, #1
 800b628:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800b62a:	f7ff f97d 	bl	800a928 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b62e:	4e23      	ldr	r6, [pc, #140]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800b630:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b632:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b636:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800b638:	079a      	lsls	r2, r3, #30
 800b63a:	d539      	bpl.n	800b6b0 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 800b63c:	2f00      	cmp	r7, #0
 800b63e:	f43f af1b 	beq.w	800b478 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b642:	4a1e      	ldr	r2, [pc, #120]	@ (800b6bc <HAL_RCC_OscConfig+0x268>)
 800b644:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b64a:	6413      	str	r3, [r2, #64]	@ 0x40
 800b64c:	e714      	b.n	800b478 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800b64e:	2700      	movs	r7, #0
 800b650:	e7df      	b.n	800b612 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b658:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b65a:	f7ff f965 	bl	800a928 <HAL_GetTick>
 800b65e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	05d9      	lsls	r1, r3, #23
 800b664:	d4d9      	bmi.n	800b61a <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b666:	f7ff f95f 	bl	800a928 <HAL_GetTick>
 800b66a:	1b80      	subs	r0, r0, r6
 800b66c:	2802      	cmp	r0, #2
 800b66e:	d9f7      	bls.n	800b660 <HAL_RCC_OscConfig+0x20c>
 800b670:	e734      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b672:	2b05      	cmp	r3, #5
 800b674:	d104      	bne.n	800b680 <HAL_RCC_OscConfig+0x22c>
 800b676:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b678:	f043 0304 	orr.w	r3, r3, #4
 800b67c:	672b      	str	r3, [r5, #112]	@ 0x70
 800b67e:	e7d0      	b.n	800b622 <HAL_RCC_OscConfig+0x1ce>
 800b680:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800b682:	f022 0201 	bic.w	r2, r2, #1
 800b686:	672a      	str	r2, [r5, #112]	@ 0x70
 800b688:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800b68a:	f022 0204 	bic.w	r2, r2, #4
 800b68e:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1ca      	bne.n	800b62a <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 800b694:	f7ff f948 	bl	800a928 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b698:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800b69c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b69e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b6a0:	079b      	lsls	r3, r3, #30
 800b6a2:	d5cb      	bpl.n	800b63c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6a4:	f7ff f940 	bl	800a928 <HAL_GetTick>
 800b6a8:	1b80      	subs	r0, r0, r6
 800b6aa:	4540      	cmp	r0, r8
 800b6ac:	d9f7      	bls.n	800b69e <HAL_RCC_OscConfig+0x24a>
 800b6ae:	e715      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6b0:	f7ff f93a 	bl	800a928 <HAL_GetTick>
 800b6b4:	1b40      	subs	r0, r0, r5
 800b6b6:	4540      	cmp	r0, r8
 800b6b8:	d9bd      	bls.n	800b636 <HAL_RCC_OscConfig+0x1e2>
 800b6ba:	e70f      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
 800b6bc:	40023800 	.word	0x40023800
 800b6c0:	42470000 	.word	0x42470000
 800b6c4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b6c8:	4d37      	ldr	r5, [pc, #220]	@ (800b7a8 <HAL_RCC_OscConfig+0x354>)
 800b6ca:	68aa      	ldr	r2, [r5, #8]
 800b6cc:	f002 020c 	and.w	r2, r2, #12
 800b6d0:	2a08      	cmp	r2, #8
 800b6d2:	d03e      	beq.n	800b752 <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	4b35      	ldr	r3, [pc, #212]	@ (800b7ac <HAL_RCC_OscConfig+0x358>)
 800b6d8:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800b6dc:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6de:	d12b      	bne.n	800b738 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 800b6e0:	f7ff f922 	bl	800a928 <HAL_GetTick>
 800b6e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	0199      	lsls	r1, r3, #6
 800b6ea:	d41f      	bmi.n	800b72c <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b6ec:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b6f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b6f8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b6fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b6fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b700:	0852      	lsrs	r2, r2, #1
 800b702:	3a01      	subs	r2, #1
 800b704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b708:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800b70a:	4b28      	ldr	r3, [pc, #160]	@ (800b7ac <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b70c:	4d26      	ldr	r5, [pc, #152]	@ (800b7a8 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 800b70e:	2201      	movs	r2, #1
 800b710:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800b712:	f7ff f909 	bl	800a928 <HAL_GetTick>
 800b716:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	019a      	lsls	r2, r3, #6
 800b71c:	f53f aeb0 	bmi.w	800b480 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b720:	f7ff f902 	bl	800a928 <HAL_GetTick>
 800b724:	1b00      	subs	r0, r0, r4
 800b726:	2802      	cmp	r0, #2
 800b728:	d9f6      	bls.n	800b718 <HAL_RCC_OscConfig+0x2c4>
 800b72a:	e6d7      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b72c:	f7ff f8fc 	bl	800a928 <HAL_GetTick>
 800b730:	1b80      	subs	r0, r0, r6
 800b732:	2802      	cmp	r0, #2
 800b734:	d9d7      	bls.n	800b6e6 <HAL_RCC_OscConfig+0x292>
 800b736:	e6d1      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800b738:	f7ff f8f6 	bl	800a928 <HAL_GetTick>
 800b73c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b73e:	682b      	ldr	r3, [r5, #0]
 800b740:	019b      	lsls	r3, r3, #6
 800b742:	f57f ae9d 	bpl.w	800b480 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b746:	f7ff f8ef 	bl	800a928 <HAL_GetTick>
 800b74a:	1b00      	subs	r0, r0, r4
 800b74c:	2802      	cmp	r0, #2
 800b74e:	d9f6      	bls.n	800b73e <HAL_RCC_OscConfig+0x2ea>
 800b750:	e6c4      	b.n	800b4dc <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b752:	2b01      	cmp	r3, #1
 800b754:	f43f aeab 	beq.w	800b4ae <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 800b758:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b75a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b75c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b760:	4291      	cmp	r1, r2
 800b762:	f47f aea4 	bne.w	800b4ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b766:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b768:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b76c:	428a      	cmp	r2, r1
 800b76e:	f47f ae9e 	bne.w	800b4ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b772:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b774:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800b778:	401a      	ands	r2, r3
 800b77a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800b77e:	f47f ae96 	bne.w	800b4ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b782:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b784:	0852      	lsrs	r2, r2, #1
 800b786:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800b78a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b78c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800b790:	f47f ae8d 	bne.w	800b4ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b794:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b796:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b79a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800b79e:	bf14      	ite	ne
 800b7a0:	2001      	movne	r0, #1
 800b7a2:	2000      	moveq	r0, #0
 800b7a4:	e69b      	b.n	800b4de <HAL_RCC_OscConfig+0x8a>
 800b7a6:	bf00      	nop
 800b7a8:	40023800 	.word	0x40023800
 800b7ac:	42470000 	.word	0x42470000

0800b7b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7b0:	4913      	ldr	r1, [pc, #76]	@ (800b800 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800b7b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7b4:	688b      	ldr	r3, [r1, #8]
 800b7b6:	f003 030c 	and.w	r3, r3, #12
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d01c      	beq.n	800b7f8 <HAL_RCC_GetSysClockFreq+0x48>
 800b7be:	2b08      	cmp	r3, #8
 800b7c0:	d11c      	bne.n	800b7fc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7c2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7c4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7c6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7c8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7cc:	bf14      	ite	ne
 800b7ce:	480d      	ldrne	r0, [pc, #52]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7d0:	480d      	ldreq	r0, [pc, #52]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b7d6:	bf18      	it	ne
 800b7d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7de:	fba1 0100 	umull	r0, r1, r1, r0
 800b7e2:	f7fb f8c3 	bl	800696c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b7e6:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <HAL_RCC_GetSysClockFreq+0x50>)
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800b7f2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b7f6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7f8:	4802      	ldr	r0, [pc, #8]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x54>)
 800b7fa:	e7fc      	b.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800b7fc:	4802      	ldr	r0, [pc, #8]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800b7fe:	e7fa      	b.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x46>
 800b800:	40023800 	.word	0x40023800
 800b804:	017d7840 	.word	0x017d7840
 800b808:	00f42400 	.word	0x00f42400

0800b80c <HAL_RCC_ClockConfig>:
{
 800b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b810:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800b812:	4604      	mov	r4, r0
 800b814:	b910      	cbnz	r0, 800b81c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b816:	2001      	movs	r0, #1
}
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b81c:	4b43      	ldr	r3, [pc, #268]	@ (800b92c <HAL_RCC_ClockConfig+0x120>)
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	f002 0207 	and.w	r2, r2, #7
 800b824:	428a      	cmp	r2, r1
 800b826:	d328      	bcc.n	800b87a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b828:	6821      	ldr	r1, [r4, #0]
 800b82a:	078f      	lsls	r7, r1, #30
 800b82c:	d42d      	bmi.n	800b88a <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b82e:	07c8      	lsls	r0, r1, #31
 800b830:	d440      	bmi.n	800b8b4 <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b832:	4b3e      	ldr	r3, [pc, #248]	@ (800b92c <HAL_RCC_ClockConfig+0x120>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	f002 0207 	and.w	r2, r2, #7
 800b83a:	42aa      	cmp	r2, r5
 800b83c:	d865      	bhi.n	800b90a <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	0751      	lsls	r1, r2, #29
 800b842:	d46b      	bmi.n	800b91c <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b844:	0713      	lsls	r3, r2, #28
 800b846:	d507      	bpl.n	800b858 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b848:	4a39      	ldr	r2, [pc, #228]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b84a:	6921      	ldr	r1, [r4, #16]
 800b84c:	6893      	ldr	r3, [r2, #8]
 800b84e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b852:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b856:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b858:	f7ff ffaa 	bl	800b7b0 <HAL_RCC_GetSysClockFreq>
 800b85c:	4b34      	ldr	r3, [pc, #208]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b85e:	4a35      	ldr	r2, [pc, #212]	@ (800b934 <HAL_RCC_ClockConfig+0x128>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b866:	5cd3      	ldrb	r3, [r2, r3]
 800b868:	40d8      	lsrs	r0, r3
 800b86a:	4b33      	ldr	r3, [pc, #204]	@ (800b938 <HAL_RCC_ClockConfig+0x12c>)
 800b86c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800b86e:	4b33      	ldr	r3, [pc, #204]	@ (800b93c <HAL_RCC_ClockConfig+0x130>)
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	f7ff f80f 	bl	800a894 <HAL_InitTick>
  return HAL_OK;
 800b876:	2000      	movs	r0, #0
 800b878:	e7ce      	b.n	800b818 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b87a:	b2ca      	uxtb	r2, r1
 800b87c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	428b      	cmp	r3, r1
 800b886:	d1c6      	bne.n	800b816 <HAL_RCC_ClockConfig+0xa>
 800b888:	e7ce      	b.n	800b828 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b88a:	4b29      	ldr	r3, [pc, #164]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b88c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b890:	bf1e      	ittt	ne
 800b892:	689a      	ldrne	r2, [r3, #8]
 800b894:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 800b898:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b89a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b89c:	bf42      	ittt	mi
 800b89e:	689a      	ldrmi	r2, [r3, #8]
 800b8a0:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 800b8a4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	68a0      	ldr	r0, [r4, #8]
 800b8aa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800b8ae:	4302      	orrs	r2, r0
 800b8b0:	609a      	str	r2, [r3, #8]
 800b8b2:	e7bc      	b.n	800b82e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8b4:	6862      	ldr	r2, [r4, #4]
 800b8b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b8b8:	2a01      	cmp	r2, #1
 800b8ba:	d11c      	bne.n	800b8f6 <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8c2:	d0a8      	beq.n	800b816 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8c4:	4e1a      	ldr	r6, [pc, #104]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b8c6:	68b3      	ldr	r3, [r6, #8]
 800b8c8:	f023 0303 	bic.w	r3, r3, #3
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800b8d0:	f7ff f82a 	bl	800a928 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8d4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800b8d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8da:	68b3      	ldr	r3, [r6, #8]
 800b8dc:	6862      	ldr	r2, [r4, #4]
 800b8de:	f003 030c 	and.w	r3, r3, #12
 800b8e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b8e6:	d0a4      	beq.n	800b832 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8e8:	f7ff f81e 	bl	800a928 <HAL_GetTick>
 800b8ec:	1bc0      	subs	r0, r0, r7
 800b8ee:	4540      	cmp	r0, r8
 800b8f0:	d9f3      	bls.n	800b8da <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800b8f2:	2003      	movs	r0, #3
 800b8f4:	e790      	b.n	800b818 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8f6:	1e91      	subs	r1, r2, #2
 800b8f8:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8fa:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8fc:	d802      	bhi.n	800b904 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8fe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800b902:	e7de      	b.n	800b8c2 <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b904:	f013 0f02 	tst.w	r3, #2
 800b908:	e7db      	b.n	800b8c2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b90a:	b2ea      	uxtb	r2, r5
 800b90c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	42ab      	cmp	r3, r5
 800b916:	f47f af7e 	bne.w	800b816 <HAL_RCC_ClockConfig+0xa>
 800b91a:	e790      	b.n	800b83e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b91c:	4904      	ldr	r1, [pc, #16]	@ (800b930 <HAL_RCC_ClockConfig+0x124>)
 800b91e:	68e0      	ldr	r0, [r4, #12]
 800b920:	688b      	ldr	r3, [r1, #8]
 800b922:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b926:	4303      	orrs	r3, r0
 800b928:	608b      	str	r3, [r1, #8]
 800b92a:	e78b      	b.n	800b844 <HAL_RCC_ClockConfig+0x38>
 800b92c:	40023c00 	.word	0x40023c00
 800b930:	40023800 	.word	0x40023800
 800b934:	080138b8 	.word	0x080138b8
 800b938:	20000010 	.word	0x20000010
 800b93c:	20000050 	.word	0x20000050

0800b940 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b940:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <HAL_RCC_GetPCLK1Freq+0x14>)
 800b942:	4a05      	ldr	r2, [pc, #20]	@ (800b958 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b94a:	5cd3      	ldrb	r3, [r2, r3]
 800b94c:	4a03      	ldr	r2, [pc, #12]	@ (800b95c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b94e:	6810      	ldr	r0, [r2, #0]
}
 800b950:	40d8      	lsrs	r0, r3
 800b952:	4770      	bx	lr
 800b954:	40023800 	.word	0x40023800
 800b958:	080138b0 	.word	0x080138b0
 800b95c:	20000010 	.word	0x20000010

0800b960 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <HAL_RCC_GetPCLK2Freq+0x14>)
 800b962:	4a05      	ldr	r2, [pc, #20]	@ (800b978 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b96a:	5cd3      	ldrb	r3, [r2, r3]
 800b96c:	4a03      	ldr	r2, [pc, #12]	@ (800b97c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b96e:	6810      	ldr	r0, [r2, #0]
}
 800b970:	40d8      	lsrs	r0, r3
 800b972:	4770      	bx	lr
 800b974:	40023800 	.word	0x40023800
 800b978:	080138b0 	.word	0x080138b0
 800b97c:	20000010 	.word	0x20000010

0800b980 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b980:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	f102 030c 	add.w	r3, r2, #12
 800b986:	e853 3f00 	ldrex	r3, [r3]
 800b98a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	320c      	adds	r2, #12
 800b990:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800b994:	6802      	ldr	r2, [r0, #0]
 800b996:	2900      	cmp	r1, #0
 800b998:	d1f2      	bne.n	800b980 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	f102 0314 	add.w	r3, r2, #20
 800b99e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	f102 0c14 	add.w	ip, r2, #20
 800b9aa:	e84c 3100 	strex	r1, r3, [ip]
 800b9ae:	2900      	cmp	r1, #0
 800b9b0:	d1f3      	bne.n	800b99a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d10b      	bne.n	800b9d0 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	f102 030c 	add.w	r3, r2, #12
 800b9bc:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c4:	f102 0c0c 	add.w	ip, r2, #12
 800b9c8:	e84c 3100 	strex	r1, r3, [ip]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d1f3      	bne.n	800b9b8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9d0:	2320      	movs	r3, #32
 800b9d2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800b9da:	4770      	bx	lr

0800b9dc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9dc:	6802      	ldr	r2, [r0, #0]
 800b9de:	68c1      	ldr	r1, [r0, #12]
{
 800b9e0:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9e2:	6913      	ldr	r3, [r2, #16]
 800b9e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	6113      	str	r3, [r2, #16]
{
 800b9ec:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b9ee:	6883      	ldr	r3, [r0, #8]
 800b9f0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800b9f2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b9f4:	4303      	orrs	r3, r0
 800b9f6:	6968      	ldr	r0, [r5, #20]
 800b9f8:	4303      	orrs	r3, r0
 800b9fa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 800b9fc:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800ba00:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba04:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800ba06:	430b      	orrs	r3, r1
 800ba08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba0a:	6953      	ldr	r3, [r2, #20]
 800ba0c:	69a9      	ldr	r1, [r5, #24]
 800ba0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba12:	430b      	orrs	r3, r1
 800ba14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba16:	4b1f      	ldr	r3, [pc, #124]	@ (800ba94 <UART_SetConfig+0xb8>)
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d003      	beq.n	800ba24 <UART_SetConfig+0x48>
 800ba1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d124      	bne.n	800ba6e <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba24:	f7ff ff9c 	bl	800b960 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba28:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba2a:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba2c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba30:	e9d5 4300 	ldrd	r4, r3, [r5]
 800ba34:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba38:	d11c      	bne.n	800ba74 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba3a:	18da      	adds	r2, r3, r3
 800ba3c:	f04f 0500 	mov.w	r5, #0
 800ba40:	eb45 0305 	adc.w	r3, r5, r5
 800ba44:	f7fa ff92 	bl	800696c <__aeabi_uldivmod>
 800ba48:	2264      	movs	r2, #100	@ 0x64
 800ba4a:	fbb0 f1f2 	udiv	r1, r0, r2
 800ba4e:	fb02 0311 	mls	r3, r2, r1, r0
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	3332      	adds	r3, #50	@ 0x32
 800ba56:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba5a:	f003 0207 	and.w	r2, r3, #7
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ba64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ba68:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba6a:	60a3      	str	r3, [r4, #8]
  }
}
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba6e:	f7ff ff67 	bl	800b940 <HAL_RCC_GetPCLK1Freq>
 800ba72:	e7d9      	b.n	800ba28 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba74:	009a      	lsls	r2, r3, #2
 800ba76:	0f9b      	lsrs	r3, r3, #30
 800ba78:	f7fa ff78 	bl	800696c <__aeabi_uldivmod>
 800ba7c:	2264      	movs	r2, #100	@ 0x64
 800ba7e:	fbb0 f1f2 	udiv	r1, r0, r2
 800ba82:	fb02 0311 	mls	r3, r2, r1, r0
 800ba86:	011b      	lsls	r3, r3, #4
 800ba88:	3332      	adds	r3, #50	@ 0x32
 800ba8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ba92:	e7ea      	b.n	800ba6a <UART_SetConfig+0x8e>
 800ba94:	40011000 	.word	0x40011000

0800ba98 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800ba98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	4617      	mov	r7, r2
 800baa0:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa2:	682a      	ldr	r2, [r5, #0]
 800baa4:	6813      	ldr	r3, [r2, #0]
 800baa6:	ea34 0303 	bics.w	r3, r4, r3
 800baaa:	d101      	bne.n	800bab0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800baac:	2000      	movs	r0, #0
 800baae:	e021      	b.n	800baf4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800bab0:	1c70      	adds	r0, r6, #1
 800bab2:	d0f7      	beq.n	800baa4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bab4:	f7fe ff38 	bl	800a928 <HAL_GetTick>
 800bab8:	1bc0      	subs	r0, r0, r7
 800baba:	4286      	cmp	r6, r0
 800babc:	d31c      	bcc.n	800baf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800babe:	b1de      	cbz	r6, 800baf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	0751      	lsls	r1, r2, #29
 800bac6:	d5ec      	bpl.n	800baa2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800bac8:	2c80      	cmp	r4, #128	@ 0x80
 800baca:	d0ea      	beq.n	800baa2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800bacc:	2c40      	cmp	r4, #64	@ 0x40
 800bace:	d0e8      	beq.n	800baa2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	0712      	lsls	r2, r2, #28
 800bad4:	d5e5      	bpl.n	800baa2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bad6:	2400      	movs	r4, #0
 800bad8:	9401      	str	r4, [sp, #4]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	9201      	str	r2, [sp, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800bae2:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bae4:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800bae6:	f7ff ff4b 	bl	800b980 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800baea:	2308      	movs	r3, #8
 800baec:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800baee:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800baf2:	2001      	movs	r0, #1
}
 800baf4:	b003      	add	sp, #12
 800baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800baf8:	2003      	movs	r0, #3
 800bafa:	e7fb      	b.n	800baf4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

0800bafc <HAL_UART_Init>:
{
 800bafc:	b510      	push	{r4, lr}
  if (huart == NULL)
 800bafe:	4604      	mov	r4, r0
 800bb00:	b348      	cbz	r0, 800bb56 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800bb02:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bb06:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bb0a:	b91b      	cbnz	r3, 800bb14 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800bb0c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800bb10:	f7fb fab6 	bl	8007080 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800bb14:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bb16:	2324      	movs	r3, #36	@ 0x24
 800bb18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800bb1c:	68d3      	ldr	r3, [r2, #12]
 800bb1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb22:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7ff ff59 	bl	800b9dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb34:	695a      	ldr	r2, [r3, #20]
 800bb36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb3a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb42:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb44:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800bb46:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb48:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bb4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb52:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800bb54:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bb56:	2001      	movs	r0, #1
 800bb58:	e7fc      	b.n	800bb54 <HAL_UART_Init+0x58>

0800bb5a <HAL_UART_Transmit>:
{
 800bb5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb5e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800bb60:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bb64:	2b20      	cmp	r3, #32
{
 800bb66:	4604      	mov	r4, r0
 800bb68:	460e      	mov	r6, r1
 800bb6a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800bb6c:	d13f      	bne.n	800bbee <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d03f      	beq.n	800bbf2 <HAL_UART_Transmit+0x98>
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d03d      	beq.n	800bbf2 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb76:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	2500      	movs	r5, #0
 800bb7a:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb7c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800bb80:	f7fe fed2 	bl	800a928 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb84:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800bb86:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800bb8c:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800bb8e:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb90:	d103      	bne.n	800bb9a <HAL_UART_Transmit+0x40>
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	b90b      	cbnz	r3, 800bb9a <HAL_UART_Transmit+0x40>
 800bb96:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800bb98:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800bb9a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	b953      	cbnz	r3, 800bbb6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bba0:	4643      	mov	r3, r8
 800bba2:	464a      	mov	r2, r9
 800bba4:	2140      	movs	r1, #64	@ 0x40
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7ff ff76 	bl	800ba98 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800bbac:	2320      	movs	r3, #32
 800bbae:	b950      	cbnz	r0, 800bbc6 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 800bbb0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800bbb4:	e00a      	b.n	800bbcc <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbb6:	4643      	mov	r3, r8
 800bbb8:	464a      	mov	r2, r9
 800bbba:	2180      	movs	r1, #128	@ 0x80
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f7ff ff6b 	bl	800ba98 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800bbc2:	b128      	cbz	r0, 800bbd0 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800bbc4:	2320      	movs	r3, #32
 800bbc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800bbca:	2003      	movs	r0, #3
}
 800bbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbd0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800bbd2:	b94e      	cbnz	r6, 800bbe8 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbd4:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbdc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800bbde:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 800bbe0:	3901      	subs	r1, #1
 800bbe2:	b289      	uxth	r1, r1
 800bbe4:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800bbe6:	e7d8      	b.n	800bb9a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbe8:	f816 3b01 	ldrb.w	r3, [r6], #1
 800bbec:	e7f6      	b.n	800bbdc <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800bbee:	2002      	movs	r0, #2
 800bbf0:	e7ec      	b.n	800bbcc <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	e7ea      	b.n	800bbcc <HAL_UART_Transmit+0x72>

0800bbf6 <run_self_test>:
                                           0, 0,-1};
//MPU9250自测试
//返回值:0,正常
//    其他,失败
u8 run_self_test(void)
{
 800bbf6:	b500      	push	{lr}
 800bbf8:	b089      	sub	sp, #36	@ 0x24
	int result;
	//char test_packet[4] = {0};
	long gyro[3], accel[3];
	result = mpu_run_6500_self_test(gyro, accel,1);
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	a905      	add	r1, sp, #20
 800bbfe:	a802      	add	r0, sp, #8
 800bc00:	f7fc fba2 	bl	8008348 <mpu_run_6500_self_test>
	if (result == 0x7)
 800bc04:	2807      	cmp	r0, #7
 800bc06:	d13b      	bne.n	800bc80 <run_self_test+0x8a>
		* to the DMP.
		*/
        unsigned short accel_sens;
		float gyro_sens;

		mpu_get_gyro_sens(&gyro_sens);
 800bc08:	a801      	add	r0, sp, #4
 800bc0a:	f7fb fedd 	bl	80079c8 <mpu_get_gyro_sens>
		gyro[0] = (long)(gyro[0] * gyro_sens);
 800bc0e:	eddd 7a02 	vldr	s15, [sp, #8]
 800bc12:	ed9d 7a01 	vldr	s14, [sp, #4]
 800bc16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		gyro[1] = (long)(gyro[1] * gyro_sens);
		gyro[2] = (long)(gyro[2] * gyro_sens);
        //inv_set_gyro_bias(gyro, 3);
		dmp_set_gyro_bias(gyro);
 800bc1a:	a802      	add	r0, sp, #8
		gyro[0] = (long)(gyro[0] * gyro_sens);
 800bc1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc24:	edcd 7a02 	vstr	s15, [sp, #8]
		gyro[1] = (long)(gyro[1] * gyro_sens);
 800bc28:	eddd 7a03 	vldr	s15, [sp, #12]
 800bc2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc38:	edcd 7a03 	vstr	s15, [sp, #12]
		gyro[2] = (long)(gyro[2] * gyro_sens);
 800bc3c:	eddd 7a04 	vldr	s15, [sp, #16]
 800bc40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc4c:	edcd 7a04 	vstr	s15, [sp, #16]
		dmp_set_gyro_bias(gyro);
 800bc50:	f7fd f8be 	bl	8008dd0 <dmp_set_gyro_bias>
		mpu_get_accel_sens(&accel_sens);
 800bc54:	f10d 0002 	add.w	r0, sp, #2
 800bc58:	f7fb fed6 	bl	8007a08 <mpu_get_accel_sens>
		accel[0] *= accel_sens;
 800bc5c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bc60:	9b05      	ldr	r3, [sp, #20]
 800bc62:	4353      	muls	r3, r2
 800bc64:	9305      	str	r3, [sp, #20]
		accel[1] *= accel_sens;
 800bc66:	9b06      	ldr	r3, [sp, #24]
 800bc68:	4353      	muls	r3, r2
 800bc6a:	9306      	str	r3, [sp, #24]
		accel[2] *= accel_sens;
 800bc6c:	9b07      	ldr	r3, [sp, #28]
       // inv_set_accel_bias(accel, 3);
		dmp_set_accel_bias(accel);
 800bc6e:	a805      	add	r0, sp, #20
		accel[2] *= accel_sens;
 800bc70:	4353      	muls	r3, r2
 800bc72:	9307      	str	r3, [sp, #28]
		dmp_set_accel_bias(accel);
 800bc74:	f7fd f8f8 	bl	8008e68 <dmp_set_accel_bias>
		return 0;
 800bc78:	2000      	movs	r0, #0
	}else return 1;
}
 800bc7a:	b009      	add	sp, #36	@ 0x24
 800bc7c:	f85d fb04 	ldr.w	pc, [sp], #4
	}else return 1;
 800bc80:	2001      	movs	r0, #1
 800bc82:	e7fa      	b.n	800bc7a <run_self_test+0x84>

0800bc84 <mpu_dmp_init>:

//mpu9250,dmp初始化
//返回值:0,正常
//    其他,失败
u8 mpu_dmp_init(void)
{
 800bc84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct int_param_s int_param;
    unsigned char accel_fsr;
    unsigned short gyro_rate, gyro_fsr;
    unsigned short compass_fsr;

	if(mpu_init(&int_param)==0)	//初始化MPU9250
 800bc86:	a803      	add	r0, sp, #12
 800bc88:	f7fc f928 	bl	8007edc <mpu_init>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f040 8088 	bne.w	800bda2 <mpu_dmp_init+0x11e>
	{
        res=inv_init_mpl();     //初始化MPL
 800bc92:	f7fe fb87 	bl	800a3a4 <inv_init_mpl>
        if(res)return 1;
 800bc96:	b2c0      	uxtb	r0, r0
 800bc98:	b110      	cbz	r0, 800bca0 <mpu_dmp_init+0x1c>
 800bc9a:	2001      	movs	r0, #1
		if(res)return 10;
		res=mpu_set_dmp_state(1);	//使能DMP
		if(res)return 11;
	}
	return 0;
}
 800bc9c:	b004      	add	sp, #16
 800bc9e:	bd10      	pop	{r4, pc}
        inv_enable_quaternion();
 800bca0:	f7f8 fec3 	bl	8004a2a <inv_enable_quaternion>
        inv_enable_9x_sensor_fusion();
 800bca4:	f7f7 fc11 	bl	80034ca <inv_enable_9x_sensor_fusion>
        inv_enable_fast_nomot();
 800bca8:	f7f7 f881 	bl	8002dae <inv_enable_fast_nomot>
        inv_enable_gyro_tc();
 800bcac:	f7f7 fe92 	bl	80039d4 <inv_enable_gyro_tc>
        inv_enable_vector_compass_cal();
 800bcb0:	f7f6 fa94 	bl	80021dc <inv_enable_vector_compass_cal>
        inv_enable_magnetic_disturbance();
 800bcb4:	f7f7 ff04 	bl	8003ac0 <inv_enable_magnetic_disturbance>
        inv_enable_eMPL_outputs();
 800bcb8:	f7fd fd06 	bl	80096c8 <inv_enable_eMPL_outputs>
        res=inv_start_mpl();    //开启MPL
 800bcbc:	f7fe fba0 	bl	800a400 <inv_start_mpl>
        if(res)return 1;
 800bcc0:	b2c0      	uxtb	r0, r0
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d1e9      	bne.n	800bc9a <mpu_dmp_init+0x16>
		res=mpu_set_sensors(INV_XYZ_GYRO|INV_XYZ_ACCEL|INV_XYZ_COMPASS);//设置所需要的传感器
 800bcc6:	2079      	movs	r0, #121	@ 0x79
 800bcc8:	f7fc f872 	bl	8007db0 <mpu_set_sensors>
		if(res)return 2;
 800bccc:	b2c0      	uxtb	r0, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d169      	bne.n	800bda6 <mpu_dmp_init+0x122>
		res=mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);   //设置FIFO
 800bcd2:	2078      	movs	r0, #120	@ 0x78
 800bcd4:	f7fb feb8 	bl	8007a48 <mpu_configure_fifo>
		if(res)return 3;
 800bcd8:	b2c0      	uxtb	r0, r0
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d165      	bne.n	800bdaa <mpu_dmp_init+0x126>
		res=mpu_set_sample_rate(DEFAULT_MPU_HZ);	            //设置采样率
 800bcde:	2064      	movs	r0, #100	@ 0x64
 800bce0:	f7fc f820 	bl	8007d24 <mpu_set_sample_rate>
		if(res)return 4;
 800bce4:	b2c0      	uxtb	r0, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d161      	bne.n	800bdae <mpu_dmp_init+0x12a>
        res=mpu_set_compass_sample_rate(1000/COMPASS_READ_MS);  //设置磁力计采样率
 800bcea:	2064      	movs	r0, #100	@ 0x64
 800bcec:	f7fb fe44 	bl	8007978 <mpu_set_compass_sample_rate>
        if(res)return 5;
 800bcf0:	b2c0      	uxtb	r0, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d15d      	bne.n	800bdb2 <mpu_dmp_init+0x12e>
        mpu_get_sample_rate(&gyro_rate);
 800bcf6:	f10d 0006 	add.w	r0, sp, #6
 800bcfa:	f7fb fe2f 	bl	800795c <mpu_get_sample_rate>
        mpu_get_gyro_fsr(&gyro_fsr);
 800bcfe:	a802      	add	r0, sp, #8
 800bd00:	f7fb fd40 	bl	8007784 <mpu_get_gyro_fsr>
        mpu_get_accel_fsr(&accel_fsr);
 800bd04:	f10d 0005 	add.w	r0, sp, #5
 800bd08:	f7fb fd8a 	bl	8007820 <mpu_get_accel_fsr>
        mpu_get_compass_fsr(&compass_fsr);
 800bd0c:	f10d 000a 	add.w	r0, sp, #10
 800bd10:	f7fc ff98 	bl	8008c44 <mpu_get_compass_fsr>
        inv_set_gyro_sample_rate(1000000L/gyro_rate);
 800bd14:	4c2e      	ldr	r4, [pc, #184]	@ (800bdd0 <mpu_dmp_init+0x14c>)
 800bd16:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bd1a:	fbb4 f0f0 	udiv	r0, r4, r0
 800bd1e:	f7fd fd13 	bl	8009748 <inv_set_gyro_sample_rate>
        inv_set_accel_sample_rate(1000000L/gyro_rate);
 800bd22:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bd26:	fbb4 f0f0 	udiv	r0, r4, r0
 800bd2a:	f7fd fd1f 	bl	800976c <inv_set_accel_sample_rate>
        inv_set_compass_sample_rate(COMPASS_READ_MS*1000L);
 800bd2e:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bd32:	f7fd fd2f 	bl	8009794 <inv_set_compass_sample_rate>
            inv_orientation_matrix_to_scalar(gyro_orientation),(long)gyro_fsr<<15);
 800bd36:	4827      	ldr	r0, [pc, #156]	@ (800bdd4 <mpu_dmp_init+0x150>)
 800bd38:	f7fe fadb 	bl	800a2f2 <inv_orientation_matrix_to_scalar>
 800bd3c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        inv_set_gyro_orientation_and_scale(
 800bd40:	03c9      	lsls	r1, r1, #15
 800bd42:	f7fd fcfb 	bl	800973c <inv_set_gyro_orientation_and_scale>
            inv_orientation_matrix_to_scalar(gyro_orientation),(long)accel_fsr<<15);
 800bd46:	4823      	ldr	r0, [pc, #140]	@ (800bdd4 <mpu_dmp_init+0x150>)
 800bd48:	f7fe fad3 	bl	800a2f2 <inv_orientation_matrix_to_scalar>
 800bd4c:	f89d 1005 	ldrb.w	r1, [sp, #5]
        inv_set_accel_orientation_and_scale(
 800bd50:	03c9      	lsls	r1, r1, #15
 800bd52:	f7fd fd6f 	bl	8009834 <inv_set_accel_orientation_and_scale>
            inv_orientation_matrix_to_scalar(comp_orientation),(long)compass_fsr<<15);
 800bd56:	4820      	ldr	r0, [pc, #128]	@ (800bdd8 <mpu_dmp_init+0x154>)
 800bd58:	f7fe facb 	bl	800a2f2 <inv_orientation_matrix_to_scalar>
 800bd5c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        inv_set_compass_orientation_and_scale(
 800bd60:	03c9      	lsls	r1, r1, #15
 800bd62:	f7fd fd6d 	bl	8009840 <inv_set_compass_orientation_and_scale>
		res=dmp_load_motion_driver_firmware();		             //加载dmp固件
 800bd66:	f7fc ff89 	bl	8008c7c <dmp_load_motion_driver_firmware>
		if(res)return 6;
 800bd6a:	b2c0      	uxtb	r0, r0
 800bd6c:	bb18      	cbnz	r0, 800bdb6 <mpu_dmp_init+0x132>
		res=dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));//设置陀螺仪方向
 800bd6e:	4819      	ldr	r0, [pc, #100]	@ (800bdd4 <mpu_dmp_init+0x150>)
 800bd70:	f7fe fabf 	bl	800a2f2 <inv_orientation_matrix_to_scalar>
 800bd74:	f7fc ff8c 	bl	8008c90 <dmp_set_orientation>
		if(res)return 7;
 800bd78:	b2c0      	uxtb	r0, r0
 800bd7a:	b9f0      	cbnz	r0, 800bdba <mpu_dmp_init+0x136>
		res=dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT|DMP_FEATURE_TAP|	            //设置dmp功能
 800bd7c:	f240 1073 	movw	r0, #371	@ 0x173
 800bd80:	f7fd fa6e 	bl	8009260 <dmp_enable_feature>
		if(res)return 8;
 800bd84:	b2c0      	uxtb	r0, r0
 800bd86:	b9d0      	cbnz	r0, 800bdbe <mpu_dmp_init+0x13a>
		res=dmp_set_fifo_rate(DEFAULT_MPU_HZ);	//设置DMP输出速率(最大不超过200Hz)
 800bd88:	2064      	movs	r0, #100	@ 0x64
 800bd8a:	f7fd f8bb 	bl	8008f04 <dmp_set_fifo_rate>
		if(res)return 9;
 800bd8e:	b2c0      	uxtb	r0, r0
 800bd90:	b9b8      	cbnz	r0, 800bdc2 <mpu_dmp_init+0x13e>
		res=run_self_test();		//自检
 800bd92:	f7ff ff30 	bl	800bbf6 <run_self_test>
		if(res)return 10;
 800bd96:	b9b0      	cbnz	r0, 800bdc6 <mpu_dmp_init+0x142>
		res=mpu_set_dmp_state(1);	//使能DMP
 800bd98:	2001      	movs	r0, #1
 800bd9a:	f7fc fa95 	bl	80082c8 <mpu_set_dmp_state>
		if(res)return 11;
 800bd9e:	b2c0      	uxtb	r0, r0
 800bda0:	b998      	cbnz	r0, 800bdca <mpu_dmp_init+0x146>
	return 0;
 800bda2:	2000      	movs	r0, #0
 800bda4:	e77a      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 2;
 800bda6:	2002      	movs	r0, #2
 800bda8:	e778      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 3;
 800bdaa:	2003      	movs	r0, #3
 800bdac:	e776      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 4;
 800bdae:	2004      	movs	r0, #4
 800bdb0:	e774      	b.n	800bc9c <mpu_dmp_init+0x18>
        if(res)return 5;
 800bdb2:	2005      	movs	r0, #5
 800bdb4:	e772      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 6;
 800bdb6:	2006      	movs	r0, #6
 800bdb8:	e770      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 7;
 800bdba:	2007      	movs	r0, #7
 800bdbc:	e76e      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 8;
 800bdbe:	2008      	movs	r0, #8
 800bdc0:	e76c      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 9;
 800bdc2:	2009      	movs	r0, #9
 800bdc4:	e76a      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 10;
 800bdc6:	200a      	movs	r0, #10
 800bdc8:	e768      	b.n	800bc9c <mpu_dmp_init+0x18>
		if(res)return 11;
 800bdca:	200b      	movs	r0, #11
 800bdcc:	e766      	b.n	800bc9c <mpu_dmp_init+0x18>
 800bdce:	bf00      	nop
 800bdd0:	000f4240 	.word	0x000f4240
 800bdd4:	2000005d 	.word	0x2000005d
 800bdd8:	20000054 	.word	0x20000054

0800bddc <MPU9250_DMP_InitFunc>:

void MPU9250_DMP_InitFunc(void)
{
 800bddc:	b513      	push	{r0, r1, r4, lr}
	u8 device_id;
	u8 MPU_Res;
	u8 mpu_id = 0;
 800bdde:	2300      	movs	r3, #0
	HAL_Delay(500);
 800bde0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
	u8 mpu_id = 0;
 800bde4:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_Delay(500);
 800bde8:	f7fe fda4 	bl	800a934 <HAL_Delay>
	MPU_Res = MPU_Read_Len(MPU9250_ADDR, MPU_DEVICE_ID_REG, 1, &mpu_id);	// 判断IIC实物接线是否有问题
 800bdec:	f10d 0307 	add.w	r3, sp, #7
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	2175      	movs	r1, #117	@ 0x75
 800bdf4:	2068      	movs	r0, #104	@ 0x68
 800bdf6:	f000 f92b 	bl	800c050 <MPU_Read_Len>
 800bdfa:	4604      	mov	r4, r0
	HAL_Delay(1000);
 800bdfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800be00:	f7fe fd98 	bl	800a934 <HAL_Delay>
	if(MPU_Res)																// 同时需要判断MPU9250
 800be04:	b124      	cbz	r4, 800be10 <MPU9250_DMP_InitFunc+0x34>
	{																		// AD0引脚是否接错
		printf("Read Error:%d\r\n",MPU_Res);
 800be06:	4819      	ldr	r0, [pc, #100]	@ (800be6c <MPU9250_DMP_InitFunc+0x90>)
 800be08:	4621      	mov	r1, r4
 800be0a:	f001 f861 	bl	800ced0 <iprintf>
		while(1);
 800be0e:	e7fe      	b.n	800be0e <MPU9250_DMP_InitFunc+0x32>
	}
	printf("MPU9250 Device ID: 0x%02X\n", mpu_id);
 800be10:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800be14:	4816      	ldr	r0, [pc, #88]	@ (800be70 <MPU9250_DMP_InitFunc+0x94>)
	while(device_id != 0x71)
	{	HAL_Delay(1000);
		MPU_Res = MPU_Read_Len(MPU9250_ADDR, MPU_DEVICE_ID_REG, 1, &device_id);
		printf("MPU9250 Device ID: 0x%02X\r\n", mpu_id);
 800be16:	4c17      	ldr	r4, [pc, #92]	@ (800be74 <MPU9250_DMP_InitFunc+0x98>)
	printf("MPU9250 Device ID: 0x%02X\n", mpu_id);
 800be18:	f001 f85a 	bl	800ced0 <iprintf>
	while(device_id != 0x71)
 800be1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be20:	2b71      	cmp	r3, #113	@ 0x71
 800be22:	d10c      	bne.n	800be3e <MPU9250_DMP_InitFunc+0x62>
	}
	while(1)
	{MPU_Res = mpu_dmp_init();
		if(MPU_Res)
		{
			printf("DMP Error:%d\r\n",MPU_Res);	HAL_Delay(500);
 800be24:	4c14      	ldr	r4, [pc, #80]	@ (800be78 <MPU9250_DMP_InitFunc+0x9c>)
	{MPU_Res = mpu_dmp_init();
 800be26:	f7ff ff2d 	bl	800bc84 <mpu_dmp_init>
		if(MPU_Res)
 800be2a:	4601      	mov	r1, r0
 800be2c:	b1c0      	cbz	r0, 800be60 <MPU9250_DMP_InitFunc+0x84>
			printf("DMP Error:%d\r\n",MPU_Res);	HAL_Delay(500);
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 f84e 	bl	800ced0 <iprintf>
 800be34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800be38:	f7fe fd7c 	bl	800a934 <HAL_Delay>
	{MPU_Res = mpu_dmp_init();
 800be3c:	e7f3      	b.n	800be26 <MPU9250_DMP_InitFunc+0x4a>
	{	HAL_Delay(1000);
 800be3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800be42:	f7fe fd77 	bl	800a934 <HAL_Delay>
		MPU_Res = MPU_Read_Len(MPU9250_ADDR, MPU_DEVICE_ID_REG, 1, &device_id);
 800be46:	f10d 0306 	add.w	r3, sp, #6
 800be4a:	2201      	movs	r2, #1
 800be4c:	2175      	movs	r1, #117	@ 0x75
 800be4e:	2068      	movs	r0, #104	@ 0x68
 800be50:	f000 f8fe 	bl	800c050 <MPU_Read_Len>
		printf("MPU9250 Device ID: 0x%02X\r\n", mpu_id);
 800be54:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800be58:	4620      	mov	r0, r4
 800be5a:	f001 f839 	bl	800ced0 <iprintf>
 800be5e:	e7dd      	b.n	800be1c <MPU9250_DMP_InitFunc+0x40>
		}
		else
			break;
	}
	printf("MPU_DMP Init Succeed\r\n");
 800be60:	4806      	ldr	r0, [pc, #24]	@ (800be7c <MPU9250_DMP_InitFunc+0xa0>)
 800be62:	f001 f89d 	bl	800cfa0 <puts>
}
 800be66:	b002      	add	sp, #8
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	bf00      	nop
 800be6c:	08014bf1 	.word	0x08014bf1
 800be70:	08014c01 	.word	0x08014c01
 800be74:	08014c1c 	.word	0x08014c1c
 800be78:	08014c38 	.word	0x08014c38
 800be7c:	08014c47 	.word	0x08014c47

0800be80 <mpu_dmp_get_data>:
//roll:横滚角  精度:0.1°   范围:-180.0°<---> +180.0°
//yaw:航向角   精度:0.1°   范围:-180.0°<---> +180.0°
//返回值:0,正常
//    其他,失败
u8 mpu_dmp_get_data(float *pitch,float *roll,float *yaw)
{
 800be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be82:	ed2d 8b0a 	vpush	{d8-d12}
 800be86:	b08d      	sub	sp, #52	@ 0x34
	float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
	unsigned long sensor_timestamp;
	short gyro[3], accel[3], sensors;
	unsigned char more;
	long quat[4];
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;
 800be88:	f10d 0309 	add.w	r3, sp, #9
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f10d 030a 	add.w	r3, sp, #10
 800be92:	9300      	str	r3, [sp, #0]
{
 800be94:	4604      	mov	r4, r0
 800be96:	460f      	mov	r7, r1
 800be98:	4616      	mov	r6, r2
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;
 800be9a:	ab03      	add	r3, sp, #12
 800be9c:	aa08      	add	r2, sp, #32
 800be9e:	a906      	add	r1, sp, #24
 800bea0:	a804      	add	r0, sp, #16
 800bea2:	f7fd fab5 	bl	8009410 <dmp_read_fifo>
 800bea6:	4605      	mov	r5, r0
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f040 8094 	bne.w	800bfd6 <mpu_dmp_get_data+0x156>
	if (sensors & INV_XYZ_ACCEL)
	send_packet(PACKET_TYPE_ACCEL, accel); */
	/* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.
	 * The orientation is set by the scalar passed to dmp_set_orientation during initialization.
	**/
	if(sensors&INV_WXYZ_QUAT)
 800beae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800beb2:	05db      	lsls	r3, r3, #23
 800beb4:	f140 8091 	bpl.w	800bfda <mpu_dmp_get_data+0x15a>
	{
		q0 = quat[0] / q30;	//q30格式转换为浮点数
 800beb8:	eddd 7a08 	vldr	s15, [sp, #32]
		q1 = quat[1] / q30;
 800bebc:	ed9d 7a09 	vldr	s14, [sp, #36]	@ 0x24
		q0 = quat[0] / q30;	//q30格式转换为浮点数
 800bec0:	eeb8 bae7 	vcvt.f32.s32	s22, s15
		q1 = quat[1] / q30;
 800bec4:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
		q0 = quat[0] / q30;	//q30格式转换为浮点数
 800bec8:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800bfe8 <mpu_dmp_get_data+0x168>
		q2 = quat[2] / q30;
 800becc:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
		q0 = quat[0] / q30;	//q30格式转换为浮点数
 800bed0:	ee2b ba27 	vmul.f32	s22, s22, s15
		q2 = quat[2] / q30;
 800bed4:	eef8 8ac7 	vcvt.f32.s32	s17, s14
		q3 = quat[3] / q30;
 800bed8:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
		q1 = quat[1] / q30;
 800bedc:	ee28 8a27 	vmul.f32	s16, s16, s15
		q3 = quat[3] / q30;
 800bee0:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
		q2 = quat[2] / q30;
 800bee4:	ee68 8aa7 	vmul.f32	s17, s17, s15
		//计算得到俯仰角/横滚角/航向角
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800bee8:	ee7b aa0b 	vadd.f32	s21, s22, s22
 800beec:	eeb8 aa00 	vmov.f32	s20, #128	@ 0xc0000000 -2.0
		q3 = quat[3] / q30;
 800bef0:	ee29 9a27 	vmul.f32	s18, s18, s15
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800bef4:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800bef8:	ee6a 7aa8 	vmul.f32	s15, s21, s17
 800befc:	eeea 7a09 	vfma.f32	s15, s20, s18
 800bf00:	ee17 0a90 	vmov	r0, s15
 800bf04:	f7f9 fe48 	bl	8005b98 <__aeabi_f2d>
 800bf08:	ec41 0b10 	vmov	d0, r0, r1
 800bf0c:	f004 fcc2 	bl	8010894 <asin>
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 800bf10:	ee78 9aa8 	vadd.f32	s19, s17, s17
 800bf14:	ee6a aa88 	vmul.f32	s21, s21, s16
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800bf18:	a331      	add	r3, pc, #196	@ (adr r3, 800bfe0 <mpu_dmp_get_data+0x160>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	ec51 0b10 	vmov	r0, r1, d0
 800bf22:	f7f9 fe91 	bl	8005c48 <__aeabi_dmul>
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 800bf26:	eee9 aa89 	vfma.f32	s21, s19, s18
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800bf2a:	f7fa f985 	bl	8006238 <__aeabi_d2f>
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 800bf2e:	ee68 9ae9 	vnmul.f32	s19, s17, s19
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800bf32:	6020      	str	r0, [r4, #0]
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 800bf34:	eeea 9a08 	vfma.f32	s19, s20, s16
 800bf38:	ee1a 0a90 	vmov	r0, s21
 800bf3c:	f7f9 fe2c 	bl	8005b98 <__aeabi_f2d>
 800bf40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf44:	ee79 7aa7 	vadd.f32	s15, s19, s15
 800bf48:	ec41 0b1c 	vmov	d12, r0, r1
 800bf4c:	ee17 0a90 	vmov	r0, s15
 800bf50:	f7f9 fe22 	bl	8005b98 <__aeabi_f2d>
 800bf54:	eeb0 0a4c 	vmov.f32	s0, s24
 800bf58:	eef0 0a6c 	vmov.f32	s1, s25
 800bf5c:	ec41 0b11 	vmov	d1, r0, r1
 800bf60:	f004 fccc 	bl	80108fc <atan2>
 800bf64:	a31e      	add	r3, pc, #120	@ (adr r3, 800bfe0 <mpu_dmp_get_data+0x160>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	ec51 0b10 	vmov	r0, r1, d0
 800bf6e:	f7f9 fe6b 	bl	8005c48 <__aeabi_dmul>
 800bf72:	f7fa f961 	bl	8006238 <__aeabi_d2f>
		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 800bf76:	ee6b 7a09 	vmul.f32	s15, s22, s18
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 800bf7a:	6038      	str	r0, [r7, #0]
		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 800bf7c:	eee8 7a28 	vfma.f32	s15, s16, s17
 800bf80:	ee28 8a08 	vmul.f32	s16, s16, s16
 800bf84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf88:	eeab 8a0b 	vfma.f32	s16, s22, s22
 800bf8c:	ee17 0a90 	vmov	r0, s15
 800bf90:	eea8 8ae8 	vfms.f32	s16, s17, s17
 800bf94:	f7f9 fe00 	bl	8005b98 <__aeabi_f2d>
 800bf98:	eea9 8a49 	vfms.f32	s16, s18, s18
 800bf9c:	ec41 0b1a 	vmov	d10, r0, r1
 800bfa0:	ee18 0a10 	vmov	r0, s16
 800bfa4:	f7f9 fdf8 	bl	8005b98 <__aeabi_f2d>
 800bfa8:	eeb0 0a4a 	vmov.f32	s0, s20
 800bfac:	eef0 0a6a 	vmov.f32	s1, s21
 800bfb0:	ec41 0b11 	vmov	d1, r0, r1
 800bfb4:	f004 fca2 	bl	80108fc <atan2>
 800bfb8:	a309      	add	r3, pc, #36	@ (adr r3, 800bfe0 <mpu_dmp_get_data+0x160>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	ec51 0b10 	vmov	r0, r1, d0
 800bfc2:	f7f9 fe41 	bl	8005c48 <__aeabi_dmul>
 800bfc6:	f7fa f937 	bl	8006238 <__aeabi_d2f>
 800bfca:	6030      	str	r0, [r6, #0]
	}else return 2;
	return 0;
 800bfcc:	4628      	mov	r0, r5
}
 800bfce:	b00d      	add	sp, #52	@ 0x34
 800bfd0:	ecbd 8b0a 	vpop	{d8-d12}
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;
 800bfd6:	2001      	movs	r0, #1
 800bfd8:	e7f9      	b.n	800bfce <mpu_dmp_get_data+0x14e>
	}else return 2;
 800bfda:	2002      	movs	r0, #2
 800bfdc:	e7f7      	b.n	800bfce <mpu_dmp_get_data+0x14e>
 800bfde:	bf00      	nop
 800bfe0:	66666666 	.word	0x66666666
 800bfe4:	404ca666 	.word	0x404ca666
 800bfe8:	30800000 	.word	0x30800000

0800bfec <stm32_i2c1_write>:
 */
#include "i2c.h"
#include "mpuiic.h"

int8_t stm32_i2c1_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800bfec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        HAL_I2C_Mem_Write(&hi2c1, dev_addr>>1, reg_addr, 1, data, len, 100);
 800bfee:	2464      	movs	r4, #100	@ 0x64
 800bff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bff4:	2301      	movs	r3, #1
 800bff6:	9200      	str	r2, [sp, #0]
 800bff8:	460a      	mov	r2, r1
 800bffa:	fa20 f103 	lsr.w	r1, r0, r3
 800bffe:	4806      	ldr	r0, [pc, #24]	@ (800c018 <stm32_i2c1_write+0x2c>)
        while(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY);
 800c000:	4c05      	ldr	r4, [pc, #20]	@ (800c018 <stm32_i2c1_write+0x2c>)
        HAL_I2C_Mem_Write(&hi2c1, dev_addr>>1, reg_addr, 1, data, len, 100);
 800c002:	f7ff f883 	bl	800b10c <HAL_I2C_Mem_Write>
        while(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY);
 800c006:	4620      	mov	r0, r4
 800c008:	f7ff fa20 	bl	800b44c <HAL_I2C_GetState>
 800c00c:	2824      	cmp	r0, #36	@ 0x24
 800c00e:	d0fa      	beq.n	800c006 <stm32_i2c1_write+0x1a>
        return 0;
}
 800c010:	2000      	movs	r0, #0
 800c012:	b004      	add	sp, #16
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	20001240 	.word	0x20001240

0800c01c <stm32_i2c1_read>:

int8_t stm32_i2c1_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800c01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        HAL_I2C_Mem_Read(&hi2c1, dev_addr>>1, reg_addr, 1, data, len, 100);
 800c01e:	2464      	movs	r4, #100	@ 0x64
 800c020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c024:	2301      	movs	r3, #1
 800c026:	9200      	str	r2, [sp, #0]
 800c028:	460a      	mov	r2, r1
 800c02a:	fa20 f103 	lsr.w	r1, r0, r3
 800c02e:	4803      	ldr	r0, [pc, #12]	@ (800c03c <stm32_i2c1_read+0x20>)
 800c030:	f7ff f8fc 	bl	800b22c <HAL_I2C_Mem_Read>
        return 0;
}
 800c034:	2000      	movs	r0, #0
 800c036:	b004      	add	sp, #16
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	bf00      	nop
 800c03c:	20001240 	.word	0x20001240

0800c040 <MPU_Write_Len>:

u8 MPU_Write_Len(u8 addr,u8 reg,u8 len,u8 *buf)
{
 800c040:	b510      	push	{r4, lr}
 800c042:	4614      	mov	r4, r2
 800c044:	461a      	mov	r2, r3
    return stm32_i2c1_write(addr, reg, buf, len);
 800c046:	4623      	mov	r3, r4
 800c048:	f7ff ffd0 	bl	800bfec <stm32_i2c1_write>
}
 800c04c:	b2c0      	uxtb	r0, r0
 800c04e:	bd10      	pop	{r4, pc}

0800c050 <MPU_Read_Len>:

u8 MPU_Read_Len(u8 addr,u8 reg,u8 len,u8 *buf)
{
 800c050:	b510      	push	{r4, lr}
 800c052:	4614      	mov	r4, r2
 800c054:	461a      	mov	r2, r3
    return stm32_i2c1_read(addr, reg, buf, len);
 800c056:	4623      	mov	r3, r4
 800c058:	f7ff ffe0 	bl	800c01c <stm32_i2c1_read>
}
 800c05c:	b2c0      	uxtb	r0, r0
 800c05e:	bd10      	pop	{r4, pc}

0800c060 <mget_ms>:
{
	return stm32_i2c1_read(addr, reg, buf, 1);
}

void mget_ms(unsigned long *time)
{
 800c060:	b510      	push	{r4, lr}
 800c062:	4604      	mov	r4, r0
    *time=(unsigned long)HAL_GetTick();
 800c064:	f7fe fc60 	bl	800a928 <HAL_GetTick>
 800c068:	6020      	str	r0, [r4, #0]
}
 800c06a:	bd10      	pop	{r4, pc}

0800c06c <abs>:
 800c06c:	2800      	cmp	r0, #0
 800c06e:	bfb8      	it	lt
 800c070:	4240      	neglt	r0, r0
 800c072:	4770      	bx	lr

0800c074 <__cvt>:
 800c074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c078:	ec57 6b10 	vmov	r6, r7, d0
 800c07c:	2f00      	cmp	r7, #0
 800c07e:	460c      	mov	r4, r1
 800c080:	4619      	mov	r1, r3
 800c082:	463b      	mov	r3, r7
 800c084:	bfbb      	ittet	lt
 800c086:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c08a:	461f      	movlt	r7, r3
 800c08c:	2300      	movge	r3, #0
 800c08e:	232d      	movlt	r3, #45	@ 0x2d
 800c090:	700b      	strb	r3, [r1, #0]
 800c092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c094:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c098:	4691      	mov	r9, r2
 800c09a:	f023 0820 	bic.w	r8, r3, #32
 800c09e:	bfbc      	itt	lt
 800c0a0:	4632      	movlt	r2, r6
 800c0a2:	4616      	movlt	r6, r2
 800c0a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0a8:	d005      	beq.n	800c0b6 <__cvt+0x42>
 800c0aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c0ae:	d100      	bne.n	800c0b2 <__cvt+0x3e>
 800c0b0:	3401      	adds	r4, #1
 800c0b2:	2102      	movs	r1, #2
 800c0b4:	e000      	b.n	800c0b8 <__cvt+0x44>
 800c0b6:	2103      	movs	r1, #3
 800c0b8:	ab03      	add	r3, sp, #12
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	ab02      	add	r3, sp, #8
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	ec47 6b10 	vmov	d0, r6, r7
 800c0c4:	4653      	mov	r3, sl
 800c0c6:	4622      	mov	r2, r4
 800c0c8:	f001 f9d6 	bl	800d478 <_dtoa_r>
 800c0cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	d119      	bne.n	800c108 <__cvt+0x94>
 800c0d4:	f019 0f01 	tst.w	r9, #1
 800c0d8:	d00e      	beq.n	800c0f8 <__cvt+0x84>
 800c0da:	eb00 0904 	add.w	r9, r0, r4
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	f7fa f817 	bl	8006118 <__aeabi_dcmpeq>
 800c0ea:	b108      	cbz	r0, 800c0f0 <__cvt+0x7c>
 800c0ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0f0:	2230      	movs	r2, #48	@ 0x30
 800c0f2:	9b03      	ldr	r3, [sp, #12]
 800c0f4:	454b      	cmp	r3, r9
 800c0f6:	d31e      	bcc.n	800c136 <__cvt+0xc2>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0fc:	1b5b      	subs	r3, r3, r5
 800c0fe:	4628      	mov	r0, r5
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	b004      	add	sp, #16
 800c104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c10c:	eb00 0904 	add.w	r9, r0, r4
 800c110:	d1e5      	bne.n	800c0de <__cvt+0x6a>
 800c112:	7803      	ldrb	r3, [r0, #0]
 800c114:	2b30      	cmp	r3, #48	@ 0x30
 800c116:	d10a      	bne.n	800c12e <__cvt+0xba>
 800c118:	2200      	movs	r2, #0
 800c11a:	2300      	movs	r3, #0
 800c11c:	4630      	mov	r0, r6
 800c11e:	4639      	mov	r1, r7
 800c120:	f7f9 fffa 	bl	8006118 <__aeabi_dcmpeq>
 800c124:	b918      	cbnz	r0, 800c12e <__cvt+0xba>
 800c126:	f1c4 0401 	rsb	r4, r4, #1
 800c12a:	f8ca 4000 	str.w	r4, [sl]
 800c12e:	f8da 3000 	ldr.w	r3, [sl]
 800c132:	4499      	add	r9, r3
 800c134:	e7d3      	b.n	800c0de <__cvt+0x6a>
 800c136:	1c59      	adds	r1, r3, #1
 800c138:	9103      	str	r1, [sp, #12]
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	e7d9      	b.n	800c0f2 <__cvt+0x7e>

0800c13e <__exponent>:
 800c13e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c140:	2900      	cmp	r1, #0
 800c142:	bfba      	itte	lt
 800c144:	4249      	neglt	r1, r1
 800c146:	232d      	movlt	r3, #45	@ 0x2d
 800c148:	232b      	movge	r3, #43	@ 0x2b
 800c14a:	2909      	cmp	r1, #9
 800c14c:	7002      	strb	r2, [r0, #0]
 800c14e:	7043      	strb	r3, [r0, #1]
 800c150:	dd29      	ble.n	800c1a6 <__exponent+0x68>
 800c152:	f10d 0307 	add.w	r3, sp, #7
 800c156:	461d      	mov	r5, r3
 800c158:	270a      	movs	r7, #10
 800c15a:	461a      	mov	r2, r3
 800c15c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c160:	fb07 1416 	mls	r4, r7, r6, r1
 800c164:	3430      	adds	r4, #48	@ 0x30
 800c166:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c16a:	460c      	mov	r4, r1
 800c16c:	2c63      	cmp	r4, #99	@ 0x63
 800c16e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c172:	4631      	mov	r1, r6
 800c174:	dcf1      	bgt.n	800c15a <__exponent+0x1c>
 800c176:	3130      	adds	r1, #48	@ 0x30
 800c178:	1e94      	subs	r4, r2, #2
 800c17a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c17e:	1c41      	adds	r1, r0, #1
 800c180:	4623      	mov	r3, r4
 800c182:	42ab      	cmp	r3, r5
 800c184:	d30a      	bcc.n	800c19c <__exponent+0x5e>
 800c186:	f10d 0309 	add.w	r3, sp, #9
 800c18a:	1a9b      	subs	r3, r3, r2
 800c18c:	42ac      	cmp	r4, r5
 800c18e:	bf88      	it	hi
 800c190:	2300      	movhi	r3, #0
 800c192:	3302      	adds	r3, #2
 800c194:	4403      	add	r3, r0
 800c196:	1a18      	subs	r0, r3, r0
 800c198:	b003      	add	sp, #12
 800c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1a4:	e7ed      	b.n	800c182 <__exponent+0x44>
 800c1a6:	2330      	movs	r3, #48	@ 0x30
 800c1a8:	3130      	adds	r1, #48	@ 0x30
 800c1aa:	7083      	strb	r3, [r0, #2]
 800c1ac:	70c1      	strb	r1, [r0, #3]
 800c1ae:	1d03      	adds	r3, r0, #4
 800c1b0:	e7f1      	b.n	800c196 <__exponent+0x58>
	...

0800c1b4 <_printf_float>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	b08d      	sub	sp, #52	@ 0x34
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c1c0:	4616      	mov	r6, r2
 800c1c2:	461f      	mov	r7, r3
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	f001 f83d 	bl	800d244 <_localeconv_r>
 800c1ca:	6803      	ldr	r3, [r0, #0]
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7f9 fb0e 	bl	80057f0 <strlen>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1dc:	9005      	str	r0, [sp, #20]
 800c1de:	3307      	adds	r3, #7
 800c1e0:	f023 0307 	bic.w	r3, r3, #7
 800c1e4:	f103 0208 	add.w	r2, r3, #8
 800c1e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c1ec:	f8d4 b000 	ldr.w	fp, [r4]
 800c1f0:	f8c8 2000 	str.w	r2, [r8]
 800c1f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c1fc:	9307      	str	r3, [sp, #28]
 800c1fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800c202:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c20a:	4b9c      	ldr	r3, [pc, #624]	@ (800c47c <_printf_float+0x2c8>)
 800c20c:	f04f 32ff 	mov.w	r2, #4294967295
 800c210:	f7f9 ffb4 	bl	800617c <__aeabi_dcmpun>
 800c214:	bb70      	cbnz	r0, 800c274 <_printf_float+0xc0>
 800c216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c21a:	4b98      	ldr	r3, [pc, #608]	@ (800c47c <_printf_float+0x2c8>)
 800c21c:	f04f 32ff 	mov.w	r2, #4294967295
 800c220:	f7f9 ff8e 	bl	8006140 <__aeabi_dcmple>
 800c224:	bb30      	cbnz	r0, 800c274 <_printf_float+0xc0>
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	4640      	mov	r0, r8
 800c22c:	4649      	mov	r1, r9
 800c22e:	f7f9 ff7d 	bl	800612c <__aeabi_dcmplt>
 800c232:	b110      	cbz	r0, 800c23a <_printf_float+0x86>
 800c234:	232d      	movs	r3, #45	@ 0x2d
 800c236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c23a:	4a91      	ldr	r2, [pc, #580]	@ (800c480 <_printf_float+0x2cc>)
 800c23c:	4b91      	ldr	r3, [pc, #580]	@ (800c484 <_printf_float+0x2d0>)
 800c23e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c242:	bf94      	ite	ls
 800c244:	4690      	movls	r8, r2
 800c246:	4698      	movhi	r8, r3
 800c248:	2303      	movs	r3, #3
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	f02b 0304 	bic.w	r3, fp, #4
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	9700      	str	r7, [sp, #0]
 800c258:	4633      	mov	r3, r6
 800c25a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c25c:	4621      	mov	r1, r4
 800c25e:	4628      	mov	r0, r5
 800c260:	f000 f9d2 	bl	800c608 <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	f040 808d 	bne.w	800c384 <_printf_float+0x1d0>
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	b00d      	add	sp, #52	@ 0x34
 800c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c274:	4642      	mov	r2, r8
 800c276:	464b      	mov	r3, r9
 800c278:	4640      	mov	r0, r8
 800c27a:	4649      	mov	r1, r9
 800c27c:	f7f9 ff7e 	bl	800617c <__aeabi_dcmpun>
 800c280:	b140      	cbz	r0, 800c294 <_printf_float+0xe0>
 800c282:	464b      	mov	r3, r9
 800c284:	2b00      	cmp	r3, #0
 800c286:	bfbc      	itt	lt
 800c288:	232d      	movlt	r3, #45	@ 0x2d
 800c28a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c28e:	4a7e      	ldr	r2, [pc, #504]	@ (800c488 <_printf_float+0x2d4>)
 800c290:	4b7e      	ldr	r3, [pc, #504]	@ (800c48c <_printf_float+0x2d8>)
 800c292:	e7d4      	b.n	800c23e <_printf_float+0x8a>
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c29a:	9206      	str	r2, [sp, #24]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	d13b      	bne.n	800c318 <_printf_float+0x164>
 800c2a0:	2306      	movs	r3, #6
 800c2a2:	6063      	str	r3, [r4, #4]
 800c2a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	6022      	str	r2, [r4, #0]
 800c2ac:	9303      	str	r3, [sp, #12]
 800c2ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c2b4:	ab09      	add	r3, sp, #36	@ 0x24
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	ec49 8b10 	vmov	d0, r8, r9
 800c2be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f7ff fed6 	bl	800c074 <__cvt>
 800c2c8:	9b06      	ldr	r3, [sp, #24]
 800c2ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2cc:	2b47      	cmp	r3, #71	@ 0x47
 800c2ce:	4680      	mov	r8, r0
 800c2d0:	d129      	bne.n	800c326 <_printf_float+0x172>
 800c2d2:	1cc8      	adds	r0, r1, #3
 800c2d4:	db02      	blt.n	800c2dc <_printf_float+0x128>
 800c2d6:	6863      	ldr	r3, [r4, #4]
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	dd41      	ble.n	800c360 <_printf_float+0x1ac>
 800c2dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c2e0:	fa5f fa8a 	uxtb.w	sl, sl
 800c2e4:	3901      	subs	r1, #1
 800c2e6:	4652      	mov	r2, sl
 800c2e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c2ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2ee:	f7ff ff26 	bl	800c13e <__exponent>
 800c2f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2f4:	1813      	adds	r3, r2, r0
 800c2f6:	2a01      	cmp	r2, #1
 800c2f8:	4681      	mov	r9, r0
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	dc02      	bgt.n	800c304 <_printf_float+0x150>
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	07d2      	lsls	r2, r2, #31
 800c302:	d501      	bpl.n	800c308 <_printf_float+0x154>
 800c304:	3301      	adds	r3, #1
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0a2      	beq.n	800c256 <_printf_float+0xa2>
 800c310:	232d      	movs	r3, #45	@ 0x2d
 800c312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c316:	e79e      	b.n	800c256 <_printf_float+0xa2>
 800c318:	9a06      	ldr	r2, [sp, #24]
 800c31a:	2a47      	cmp	r2, #71	@ 0x47
 800c31c:	d1c2      	bne.n	800c2a4 <_printf_float+0xf0>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1c0      	bne.n	800c2a4 <_printf_float+0xf0>
 800c322:	2301      	movs	r3, #1
 800c324:	e7bd      	b.n	800c2a2 <_printf_float+0xee>
 800c326:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c32a:	d9db      	bls.n	800c2e4 <_printf_float+0x130>
 800c32c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c330:	d118      	bne.n	800c364 <_printf_float+0x1b0>
 800c332:	2900      	cmp	r1, #0
 800c334:	6863      	ldr	r3, [r4, #4]
 800c336:	dd0b      	ble.n	800c350 <_printf_float+0x19c>
 800c338:	6121      	str	r1, [r4, #16]
 800c33a:	b913      	cbnz	r3, 800c342 <_printf_float+0x18e>
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	07d0      	lsls	r0, r2, #31
 800c340:	d502      	bpl.n	800c348 <_printf_float+0x194>
 800c342:	3301      	adds	r3, #1
 800c344:	440b      	add	r3, r1
 800c346:	6123      	str	r3, [r4, #16]
 800c348:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c34a:	f04f 0900 	mov.w	r9, #0
 800c34e:	e7db      	b.n	800c308 <_printf_float+0x154>
 800c350:	b913      	cbnz	r3, 800c358 <_printf_float+0x1a4>
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	07d2      	lsls	r2, r2, #31
 800c356:	d501      	bpl.n	800c35c <_printf_float+0x1a8>
 800c358:	3302      	adds	r3, #2
 800c35a:	e7f4      	b.n	800c346 <_printf_float+0x192>
 800c35c:	2301      	movs	r3, #1
 800c35e:	e7f2      	b.n	800c346 <_printf_float+0x192>
 800c360:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c366:	4299      	cmp	r1, r3
 800c368:	db05      	blt.n	800c376 <_printf_float+0x1c2>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	6121      	str	r1, [r4, #16]
 800c36e:	07d8      	lsls	r0, r3, #31
 800c370:	d5ea      	bpl.n	800c348 <_printf_float+0x194>
 800c372:	1c4b      	adds	r3, r1, #1
 800c374:	e7e7      	b.n	800c346 <_printf_float+0x192>
 800c376:	2900      	cmp	r1, #0
 800c378:	bfd4      	ite	le
 800c37a:	f1c1 0202 	rsble	r2, r1, #2
 800c37e:	2201      	movgt	r2, #1
 800c380:	4413      	add	r3, r2
 800c382:	e7e0      	b.n	800c346 <_printf_float+0x192>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	055a      	lsls	r2, r3, #21
 800c388:	d407      	bmi.n	800c39a <_printf_float+0x1e6>
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	4642      	mov	r2, r8
 800c38e:	4631      	mov	r1, r6
 800c390:	4628      	mov	r0, r5
 800c392:	47b8      	blx	r7
 800c394:	3001      	adds	r0, #1
 800c396:	d12b      	bne.n	800c3f0 <_printf_float+0x23c>
 800c398:	e767      	b.n	800c26a <_printf_float+0xb6>
 800c39a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c39e:	f240 80dd 	bls.w	800c55c <_printf_float+0x3a8>
 800c3a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f7f9 feb5 	bl	8006118 <__aeabi_dcmpeq>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d033      	beq.n	800c41a <_printf_float+0x266>
 800c3b2:	4a37      	ldr	r2, [pc, #220]	@ (800c490 <_printf_float+0x2dc>)
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	47b8      	blx	r7
 800c3bc:	3001      	adds	r0, #1
 800c3be:	f43f af54 	beq.w	800c26a <_printf_float+0xb6>
 800c3c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3c6:	4543      	cmp	r3, r8
 800c3c8:	db02      	blt.n	800c3d0 <_printf_float+0x21c>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	07d8      	lsls	r0, r3, #31
 800c3ce:	d50f      	bpl.n	800c3f0 <_printf_float+0x23c>
 800c3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b8      	blx	r7
 800c3da:	3001      	adds	r0, #1
 800c3dc:	f43f af45 	beq.w	800c26a <_printf_float+0xb6>
 800c3e0:	f04f 0900 	mov.w	r9, #0
 800c3e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3e8:	f104 0a1a 	add.w	sl, r4, #26
 800c3ec:	45c8      	cmp	r8, r9
 800c3ee:	dc09      	bgt.n	800c404 <_printf_float+0x250>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	079b      	lsls	r3, r3, #30
 800c3f4:	f100 8103 	bmi.w	800c5fe <_printf_float+0x44a>
 800c3f8:	68e0      	ldr	r0, [r4, #12]
 800c3fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3fc:	4298      	cmp	r0, r3
 800c3fe:	bfb8      	it	lt
 800c400:	4618      	movlt	r0, r3
 800c402:	e734      	b.n	800c26e <_printf_float+0xba>
 800c404:	2301      	movs	r3, #1
 800c406:	4652      	mov	r2, sl
 800c408:	4631      	mov	r1, r6
 800c40a:	4628      	mov	r0, r5
 800c40c:	47b8      	blx	r7
 800c40e:	3001      	adds	r0, #1
 800c410:	f43f af2b 	beq.w	800c26a <_printf_float+0xb6>
 800c414:	f109 0901 	add.w	r9, r9, #1
 800c418:	e7e8      	b.n	800c3ec <_printf_float+0x238>
 800c41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dc39      	bgt.n	800c494 <_printf_float+0x2e0>
 800c420:	4a1b      	ldr	r2, [pc, #108]	@ (800c490 <_printf_float+0x2dc>)
 800c422:	2301      	movs	r3, #1
 800c424:	4631      	mov	r1, r6
 800c426:	4628      	mov	r0, r5
 800c428:	47b8      	blx	r7
 800c42a:	3001      	adds	r0, #1
 800c42c:	f43f af1d 	beq.w	800c26a <_printf_float+0xb6>
 800c430:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c434:	ea59 0303 	orrs.w	r3, r9, r3
 800c438:	d102      	bne.n	800c440 <_printf_float+0x28c>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	07d9      	lsls	r1, r3, #31
 800c43e:	d5d7      	bpl.n	800c3f0 <_printf_float+0x23c>
 800c440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c444:	4631      	mov	r1, r6
 800c446:	4628      	mov	r0, r5
 800c448:	47b8      	blx	r7
 800c44a:	3001      	adds	r0, #1
 800c44c:	f43f af0d 	beq.w	800c26a <_printf_float+0xb6>
 800c450:	f04f 0a00 	mov.w	sl, #0
 800c454:	f104 0b1a 	add.w	fp, r4, #26
 800c458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45a:	425b      	negs	r3, r3
 800c45c:	4553      	cmp	r3, sl
 800c45e:	dc01      	bgt.n	800c464 <_printf_float+0x2b0>
 800c460:	464b      	mov	r3, r9
 800c462:	e793      	b.n	800c38c <_printf_float+0x1d8>
 800c464:	2301      	movs	r3, #1
 800c466:	465a      	mov	r2, fp
 800c468:	4631      	mov	r1, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	47b8      	blx	r7
 800c46e:	3001      	adds	r0, #1
 800c470:	f43f aefb 	beq.w	800c26a <_printf_float+0xb6>
 800c474:	f10a 0a01 	add.w	sl, sl, #1
 800c478:	e7ee      	b.n	800c458 <_printf_float+0x2a4>
 800c47a:	bf00      	nop
 800c47c:	7fefffff 	.word	0x7fefffff
 800c480:	08014c66 	.word	0x08014c66
 800c484:	08014c6a 	.word	0x08014c6a
 800c488:	08014c6e 	.word	0x08014c6e
 800c48c:	08014c72 	.word	0x08014c72
 800c490:	08014c76 	.word	0x08014c76
 800c494:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c496:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c49a:	4553      	cmp	r3, sl
 800c49c:	bfa8      	it	ge
 800c49e:	4653      	movge	r3, sl
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	4699      	mov	r9, r3
 800c4a4:	dc36      	bgt.n	800c514 <_printf_float+0x360>
 800c4a6:	f04f 0b00 	mov.w	fp, #0
 800c4aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4ae:	f104 021a 	add.w	r2, r4, #26
 800c4b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4b4:	9306      	str	r3, [sp, #24]
 800c4b6:	eba3 0309 	sub.w	r3, r3, r9
 800c4ba:	455b      	cmp	r3, fp
 800c4bc:	dc31      	bgt.n	800c522 <_printf_float+0x36e>
 800c4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c0:	459a      	cmp	sl, r3
 800c4c2:	dc3a      	bgt.n	800c53a <_printf_float+0x386>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	07da      	lsls	r2, r3, #31
 800c4c8:	d437      	bmi.n	800c53a <_printf_float+0x386>
 800c4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4cc:	ebaa 0903 	sub.w	r9, sl, r3
 800c4d0:	9b06      	ldr	r3, [sp, #24]
 800c4d2:	ebaa 0303 	sub.w	r3, sl, r3
 800c4d6:	4599      	cmp	r9, r3
 800c4d8:	bfa8      	it	ge
 800c4da:	4699      	movge	r9, r3
 800c4dc:	f1b9 0f00 	cmp.w	r9, #0
 800c4e0:	dc33      	bgt.n	800c54a <_printf_float+0x396>
 800c4e2:	f04f 0800 	mov.w	r8, #0
 800c4e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4ea:	f104 0b1a 	add.w	fp, r4, #26
 800c4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f0:	ebaa 0303 	sub.w	r3, sl, r3
 800c4f4:	eba3 0309 	sub.w	r3, r3, r9
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	f77f af79 	ble.w	800c3f0 <_printf_float+0x23c>
 800c4fe:	2301      	movs	r3, #1
 800c500:	465a      	mov	r2, fp
 800c502:	4631      	mov	r1, r6
 800c504:	4628      	mov	r0, r5
 800c506:	47b8      	blx	r7
 800c508:	3001      	adds	r0, #1
 800c50a:	f43f aeae 	beq.w	800c26a <_printf_float+0xb6>
 800c50e:	f108 0801 	add.w	r8, r8, #1
 800c512:	e7ec      	b.n	800c4ee <_printf_float+0x33a>
 800c514:	4642      	mov	r2, r8
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	d1c2      	bne.n	800c4a6 <_printf_float+0x2f2>
 800c520:	e6a3      	b.n	800c26a <_printf_float+0xb6>
 800c522:	2301      	movs	r3, #1
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	9206      	str	r2, [sp, #24]
 800c52a:	47b8      	blx	r7
 800c52c:	3001      	adds	r0, #1
 800c52e:	f43f ae9c 	beq.w	800c26a <_printf_float+0xb6>
 800c532:	9a06      	ldr	r2, [sp, #24]
 800c534:	f10b 0b01 	add.w	fp, fp, #1
 800c538:	e7bb      	b.n	800c4b2 <_printf_float+0x2fe>
 800c53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c53e:	4631      	mov	r1, r6
 800c540:	4628      	mov	r0, r5
 800c542:	47b8      	blx	r7
 800c544:	3001      	adds	r0, #1
 800c546:	d1c0      	bne.n	800c4ca <_printf_float+0x316>
 800c548:	e68f      	b.n	800c26a <_printf_float+0xb6>
 800c54a:	9a06      	ldr	r2, [sp, #24]
 800c54c:	464b      	mov	r3, r9
 800c54e:	4442      	add	r2, r8
 800c550:	4631      	mov	r1, r6
 800c552:	4628      	mov	r0, r5
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	d1c3      	bne.n	800c4e2 <_printf_float+0x32e>
 800c55a:	e686      	b.n	800c26a <_printf_float+0xb6>
 800c55c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c560:	f1ba 0f01 	cmp.w	sl, #1
 800c564:	dc01      	bgt.n	800c56a <_printf_float+0x3b6>
 800c566:	07db      	lsls	r3, r3, #31
 800c568:	d536      	bpl.n	800c5d8 <_printf_float+0x424>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4642      	mov	r2, r8
 800c56e:	4631      	mov	r1, r6
 800c570:	4628      	mov	r0, r5
 800c572:	47b8      	blx	r7
 800c574:	3001      	adds	r0, #1
 800c576:	f43f ae78 	beq.w	800c26a <_printf_float+0xb6>
 800c57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	f43f ae70 	beq.w	800c26a <_printf_float+0xb6>
 800c58a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c58e:	2200      	movs	r2, #0
 800c590:	2300      	movs	r3, #0
 800c592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c596:	f7f9 fdbf 	bl	8006118 <__aeabi_dcmpeq>
 800c59a:	b9c0      	cbnz	r0, 800c5ce <_printf_float+0x41a>
 800c59c:	4653      	mov	r3, sl
 800c59e:	f108 0201 	add.w	r2, r8, #1
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	47b8      	blx	r7
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	d10c      	bne.n	800c5c6 <_printf_float+0x412>
 800c5ac:	e65d      	b.n	800c26a <_printf_float+0xb6>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	465a      	mov	r2, fp
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	47b8      	blx	r7
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	f43f ae56 	beq.w	800c26a <_printf_float+0xb6>
 800c5be:	f108 0801 	add.w	r8, r8, #1
 800c5c2:	45d0      	cmp	r8, sl
 800c5c4:	dbf3      	blt.n	800c5ae <_printf_float+0x3fa>
 800c5c6:	464b      	mov	r3, r9
 800c5c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c5cc:	e6df      	b.n	800c38e <_printf_float+0x1da>
 800c5ce:	f04f 0800 	mov.w	r8, #0
 800c5d2:	f104 0b1a 	add.w	fp, r4, #26
 800c5d6:	e7f4      	b.n	800c5c2 <_printf_float+0x40e>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4642      	mov	r2, r8
 800c5dc:	e7e1      	b.n	800c5a2 <_printf_float+0x3ee>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	464a      	mov	r2, r9
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	47b8      	blx	r7
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	f43f ae3e 	beq.w	800c26a <_printf_float+0xb6>
 800c5ee:	f108 0801 	add.w	r8, r8, #1
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5f6:	1a5b      	subs	r3, r3, r1
 800c5f8:	4543      	cmp	r3, r8
 800c5fa:	dcf0      	bgt.n	800c5de <_printf_float+0x42a>
 800c5fc:	e6fc      	b.n	800c3f8 <_printf_float+0x244>
 800c5fe:	f04f 0800 	mov.w	r8, #0
 800c602:	f104 0919 	add.w	r9, r4, #25
 800c606:	e7f4      	b.n	800c5f2 <_printf_float+0x43e>

0800c608 <_printf_common>:
 800c608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c60c:	4616      	mov	r6, r2
 800c60e:	4698      	mov	r8, r3
 800c610:	688a      	ldr	r2, [r1, #8]
 800c612:	690b      	ldr	r3, [r1, #16]
 800c614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c618:	4293      	cmp	r3, r2
 800c61a:	bfb8      	it	lt
 800c61c:	4613      	movlt	r3, r2
 800c61e:	6033      	str	r3, [r6, #0]
 800c620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c624:	4607      	mov	r7, r0
 800c626:	460c      	mov	r4, r1
 800c628:	b10a      	cbz	r2, 800c62e <_printf_common+0x26>
 800c62a:	3301      	adds	r3, #1
 800c62c:	6033      	str	r3, [r6, #0]
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	0699      	lsls	r1, r3, #26
 800c632:	bf42      	ittt	mi
 800c634:	6833      	ldrmi	r3, [r6, #0]
 800c636:	3302      	addmi	r3, #2
 800c638:	6033      	strmi	r3, [r6, #0]
 800c63a:	6825      	ldr	r5, [r4, #0]
 800c63c:	f015 0506 	ands.w	r5, r5, #6
 800c640:	d106      	bne.n	800c650 <_printf_common+0x48>
 800c642:	f104 0a19 	add.w	sl, r4, #25
 800c646:	68e3      	ldr	r3, [r4, #12]
 800c648:	6832      	ldr	r2, [r6, #0]
 800c64a:	1a9b      	subs	r3, r3, r2
 800c64c:	42ab      	cmp	r3, r5
 800c64e:	dc26      	bgt.n	800c69e <_printf_common+0x96>
 800c650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	3b00      	subs	r3, #0
 800c658:	bf18      	it	ne
 800c65a:	2301      	movne	r3, #1
 800c65c:	0692      	lsls	r2, r2, #26
 800c65e:	d42b      	bmi.n	800c6b8 <_printf_common+0xb0>
 800c660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c664:	4641      	mov	r1, r8
 800c666:	4638      	mov	r0, r7
 800c668:	47c8      	blx	r9
 800c66a:	3001      	adds	r0, #1
 800c66c:	d01e      	beq.n	800c6ac <_printf_common+0xa4>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	6922      	ldr	r2, [r4, #16]
 800c672:	f003 0306 	and.w	r3, r3, #6
 800c676:	2b04      	cmp	r3, #4
 800c678:	bf02      	ittt	eq
 800c67a:	68e5      	ldreq	r5, [r4, #12]
 800c67c:	6833      	ldreq	r3, [r6, #0]
 800c67e:	1aed      	subeq	r5, r5, r3
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	bf0c      	ite	eq
 800c684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c688:	2500      	movne	r5, #0
 800c68a:	4293      	cmp	r3, r2
 800c68c:	bfc4      	itt	gt
 800c68e:	1a9b      	subgt	r3, r3, r2
 800c690:	18ed      	addgt	r5, r5, r3
 800c692:	2600      	movs	r6, #0
 800c694:	341a      	adds	r4, #26
 800c696:	42b5      	cmp	r5, r6
 800c698:	d11a      	bne.n	800c6d0 <_printf_common+0xc8>
 800c69a:	2000      	movs	r0, #0
 800c69c:	e008      	b.n	800c6b0 <_printf_common+0xa8>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	4641      	mov	r1, r8
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	47c8      	blx	r9
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d103      	bne.n	800c6b4 <_printf_common+0xac>
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	e7c6      	b.n	800c646 <_printf_common+0x3e>
 800c6b8:	18e1      	adds	r1, r4, r3
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	2030      	movs	r0, #48	@ 0x30
 800c6be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6c2:	4422      	add	r2, r4
 800c6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c6cc:	3302      	adds	r3, #2
 800c6ce:	e7c7      	b.n	800c660 <_printf_common+0x58>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	4641      	mov	r1, r8
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	47c8      	blx	r9
 800c6da:	3001      	adds	r0, #1
 800c6dc:	d0e6      	beq.n	800c6ac <_printf_common+0xa4>
 800c6de:	3601      	adds	r6, #1
 800c6e0:	e7d9      	b.n	800c696 <_printf_common+0x8e>
	...

0800c6e4 <_printf_i>:
 800c6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e8:	7e0f      	ldrb	r7, [r1, #24]
 800c6ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c6ec:	2f78      	cmp	r7, #120	@ 0x78
 800c6ee:	4691      	mov	r9, r2
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	469a      	mov	sl, r3
 800c6f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c6fa:	d807      	bhi.n	800c70c <_printf_i+0x28>
 800c6fc:	2f62      	cmp	r7, #98	@ 0x62
 800c6fe:	d80a      	bhi.n	800c716 <_printf_i+0x32>
 800c700:	2f00      	cmp	r7, #0
 800c702:	f000 80d2 	beq.w	800c8aa <_printf_i+0x1c6>
 800c706:	2f58      	cmp	r7, #88	@ 0x58
 800c708:	f000 80b9 	beq.w	800c87e <_printf_i+0x19a>
 800c70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c714:	e03a      	b.n	800c78c <_printf_i+0xa8>
 800c716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c71a:	2b15      	cmp	r3, #21
 800c71c:	d8f6      	bhi.n	800c70c <_printf_i+0x28>
 800c71e:	a101      	add	r1, pc, #4	@ (adr r1, 800c724 <_printf_i+0x40>)
 800c720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c724:	0800c77d 	.word	0x0800c77d
 800c728:	0800c791 	.word	0x0800c791
 800c72c:	0800c70d 	.word	0x0800c70d
 800c730:	0800c70d 	.word	0x0800c70d
 800c734:	0800c70d 	.word	0x0800c70d
 800c738:	0800c70d 	.word	0x0800c70d
 800c73c:	0800c791 	.word	0x0800c791
 800c740:	0800c70d 	.word	0x0800c70d
 800c744:	0800c70d 	.word	0x0800c70d
 800c748:	0800c70d 	.word	0x0800c70d
 800c74c:	0800c70d 	.word	0x0800c70d
 800c750:	0800c891 	.word	0x0800c891
 800c754:	0800c7bb 	.word	0x0800c7bb
 800c758:	0800c84b 	.word	0x0800c84b
 800c75c:	0800c70d 	.word	0x0800c70d
 800c760:	0800c70d 	.word	0x0800c70d
 800c764:	0800c8b3 	.word	0x0800c8b3
 800c768:	0800c70d 	.word	0x0800c70d
 800c76c:	0800c7bb 	.word	0x0800c7bb
 800c770:	0800c70d 	.word	0x0800c70d
 800c774:	0800c70d 	.word	0x0800c70d
 800c778:	0800c853 	.word	0x0800c853
 800c77c:	6833      	ldr	r3, [r6, #0]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6032      	str	r2, [r6, #0]
 800c784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c78c:	2301      	movs	r3, #1
 800c78e:	e09d      	b.n	800c8cc <_printf_i+0x1e8>
 800c790:	6833      	ldr	r3, [r6, #0]
 800c792:	6820      	ldr	r0, [r4, #0]
 800c794:	1d19      	adds	r1, r3, #4
 800c796:	6031      	str	r1, [r6, #0]
 800c798:	0606      	lsls	r6, r0, #24
 800c79a:	d501      	bpl.n	800c7a0 <_printf_i+0xbc>
 800c79c:	681d      	ldr	r5, [r3, #0]
 800c79e:	e003      	b.n	800c7a8 <_printf_i+0xc4>
 800c7a0:	0645      	lsls	r5, r0, #25
 800c7a2:	d5fb      	bpl.n	800c79c <_printf_i+0xb8>
 800c7a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7a8:	2d00      	cmp	r5, #0
 800c7aa:	da03      	bge.n	800c7b4 <_printf_i+0xd0>
 800c7ac:	232d      	movs	r3, #45	@ 0x2d
 800c7ae:	426d      	negs	r5, r5
 800c7b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7b4:	4859      	ldr	r0, [pc, #356]	@ (800c91c <_printf_i+0x238>)
 800c7b6:	230a      	movs	r3, #10
 800c7b8:	e011      	b.n	800c7de <_printf_i+0xfa>
 800c7ba:	6821      	ldr	r1, [r4, #0]
 800c7bc:	6833      	ldr	r3, [r6, #0]
 800c7be:	0608      	lsls	r0, r1, #24
 800c7c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7c4:	d402      	bmi.n	800c7cc <_printf_i+0xe8>
 800c7c6:	0649      	lsls	r1, r1, #25
 800c7c8:	bf48      	it	mi
 800c7ca:	b2ad      	uxthmi	r5, r5
 800c7cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c7ce:	4853      	ldr	r0, [pc, #332]	@ (800c91c <_printf_i+0x238>)
 800c7d0:	6033      	str	r3, [r6, #0]
 800c7d2:	bf14      	ite	ne
 800c7d4:	230a      	movne	r3, #10
 800c7d6:	2308      	moveq	r3, #8
 800c7d8:	2100      	movs	r1, #0
 800c7da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c7de:	6866      	ldr	r6, [r4, #4]
 800c7e0:	60a6      	str	r6, [r4, #8]
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	bfa2      	ittt	ge
 800c7e6:	6821      	ldrge	r1, [r4, #0]
 800c7e8:	f021 0104 	bicge.w	r1, r1, #4
 800c7ec:	6021      	strge	r1, [r4, #0]
 800c7ee:	b90d      	cbnz	r5, 800c7f4 <_printf_i+0x110>
 800c7f0:	2e00      	cmp	r6, #0
 800c7f2:	d04b      	beq.n	800c88c <_printf_i+0x1a8>
 800c7f4:	4616      	mov	r6, r2
 800c7f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7fa:	fb03 5711 	mls	r7, r3, r1, r5
 800c7fe:	5dc7      	ldrb	r7, [r0, r7]
 800c800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c804:	462f      	mov	r7, r5
 800c806:	42bb      	cmp	r3, r7
 800c808:	460d      	mov	r5, r1
 800c80a:	d9f4      	bls.n	800c7f6 <_printf_i+0x112>
 800c80c:	2b08      	cmp	r3, #8
 800c80e:	d10b      	bne.n	800c828 <_printf_i+0x144>
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	07df      	lsls	r7, r3, #31
 800c814:	d508      	bpl.n	800c828 <_printf_i+0x144>
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	6861      	ldr	r1, [r4, #4]
 800c81a:	4299      	cmp	r1, r3
 800c81c:	bfde      	ittt	le
 800c81e:	2330      	movle	r3, #48	@ 0x30
 800c820:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c824:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c828:	1b92      	subs	r2, r2, r6
 800c82a:	6122      	str	r2, [r4, #16]
 800c82c:	f8cd a000 	str.w	sl, [sp]
 800c830:	464b      	mov	r3, r9
 800c832:	aa03      	add	r2, sp, #12
 800c834:	4621      	mov	r1, r4
 800c836:	4640      	mov	r0, r8
 800c838:	f7ff fee6 	bl	800c608 <_printf_common>
 800c83c:	3001      	adds	r0, #1
 800c83e:	d14a      	bne.n	800c8d6 <_printf_i+0x1f2>
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	b004      	add	sp, #16
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	f043 0320 	orr.w	r3, r3, #32
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	4833      	ldr	r0, [pc, #204]	@ (800c920 <_printf_i+0x23c>)
 800c854:	2778      	movs	r7, #120	@ 0x78
 800c856:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	6831      	ldr	r1, [r6, #0]
 800c85e:	061f      	lsls	r7, r3, #24
 800c860:	f851 5b04 	ldr.w	r5, [r1], #4
 800c864:	d402      	bmi.n	800c86c <_printf_i+0x188>
 800c866:	065f      	lsls	r7, r3, #25
 800c868:	bf48      	it	mi
 800c86a:	b2ad      	uxthmi	r5, r5
 800c86c:	6031      	str	r1, [r6, #0]
 800c86e:	07d9      	lsls	r1, r3, #31
 800c870:	bf44      	itt	mi
 800c872:	f043 0320 	orrmi.w	r3, r3, #32
 800c876:	6023      	strmi	r3, [r4, #0]
 800c878:	b11d      	cbz	r5, 800c882 <_printf_i+0x19e>
 800c87a:	2310      	movs	r3, #16
 800c87c:	e7ac      	b.n	800c7d8 <_printf_i+0xf4>
 800c87e:	4827      	ldr	r0, [pc, #156]	@ (800c91c <_printf_i+0x238>)
 800c880:	e7e9      	b.n	800c856 <_printf_i+0x172>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f023 0320 	bic.w	r3, r3, #32
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	e7f6      	b.n	800c87a <_printf_i+0x196>
 800c88c:	4616      	mov	r6, r2
 800c88e:	e7bd      	b.n	800c80c <_printf_i+0x128>
 800c890:	6833      	ldr	r3, [r6, #0]
 800c892:	6825      	ldr	r5, [r4, #0]
 800c894:	6961      	ldr	r1, [r4, #20]
 800c896:	1d18      	adds	r0, r3, #4
 800c898:	6030      	str	r0, [r6, #0]
 800c89a:	062e      	lsls	r6, r5, #24
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	d501      	bpl.n	800c8a4 <_printf_i+0x1c0>
 800c8a0:	6019      	str	r1, [r3, #0]
 800c8a2:	e002      	b.n	800c8aa <_printf_i+0x1c6>
 800c8a4:	0668      	lsls	r0, r5, #25
 800c8a6:	d5fb      	bpl.n	800c8a0 <_printf_i+0x1bc>
 800c8a8:	8019      	strh	r1, [r3, #0]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6123      	str	r3, [r4, #16]
 800c8ae:	4616      	mov	r6, r2
 800c8b0:	e7bc      	b.n	800c82c <_printf_i+0x148>
 800c8b2:	6833      	ldr	r3, [r6, #0]
 800c8b4:	1d1a      	adds	r2, r3, #4
 800c8b6:	6032      	str	r2, [r6, #0]
 800c8b8:	681e      	ldr	r6, [r3, #0]
 800c8ba:	6862      	ldr	r2, [r4, #4]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f7f8 ff46 	bl	8005750 <memchr>
 800c8c4:	b108      	cbz	r0, 800c8ca <_printf_i+0x1e6>
 800c8c6:	1b80      	subs	r0, r0, r6
 800c8c8:	6060      	str	r0, [r4, #4]
 800c8ca:	6863      	ldr	r3, [r4, #4]
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8d4:	e7aa      	b.n	800c82c <_printf_i+0x148>
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	4632      	mov	r2, r6
 800c8da:	4649      	mov	r1, r9
 800c8dc:	4640      	mov	r0, r8
 800c8de:	47d0      	blx	sl
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d0ad      	beq.n	800c840 <_printf_i+0x15c>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	079b      	lsls	r3, r3, #30
 800c8e8:	d413      	bmi.n	800c912 <_printf_i+0x22e>
 800c8ea:	68e0      	ldr	r0, [r4, #12]
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	4298      	cmp	r0, r3
 800c8f0:	bfb8      	it	lt
 800c8f2:	4618      	movlt	r0, r3
 800c8f4:	e7a6      	b.n	800c844 <_printf_i+0x160>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	47d0      	blx	sl
 800c900:	3001      	adds	r0, #1
 800c902:	d09d      	beq.n	800c840 <_printf_i+0x15c>
 800c904:	3501      	adds	r5, #1
 800c906:	68e3      	ldr	r3, [r4, #12]
 800c908:	9903      	ldr	r1, [sp, #12]
 800c90a:	1a5b      	subs	r3, r3, r1
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	dcf2      	bgt.n	800c8f6 <_printf_i+0x212>
 800c910:	e7eb      	b.n	800c8ea <_printf_i+0x206>
 800c912:	2500      	movs	r5, #0
 800c914:	f104 0619 	add.w	r6, r4, #25
 800c918:	e7f5      	b.n	800c906 <_printf_i+0x222>
 800c91a:	bf00      	nop
 800c91c:	08014c78 	.word	0x08014c78
 800c920:	08014c89 	.word	0x08014c89

0800c924 <_scanf_float>:
 800c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	b087      	sub	sp, #28
 800c92a:	4617      	mov	r7, r2
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	688b      	ldr	r3, [r1, #8]
 800c930:	1e5a      	subs	r2, r3, #1
 800c932:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c936:	bf81      	itttt	hi
 800c938:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c93c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c940:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c944:	608b      	strhi	r3, [r1, #8]
 800c946:	680b      	ldr	r3, [r1, #0]
 800c948:	460a      	mov	r2, r1
 800c94a:	f04f 0500 	mov.w	r5, #0
 800c94e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c952:	f842 3b1c 	str.w	r3, [r2], #28
 800c956:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c95a:	4680      	mov	r8, r0
 800c95c:	460c      	mov	r4, r1
 800c95e:	bf98      	it	ls
 800c960:	f04f 0b00 	movls.w	fp, #0
 800c964:	9201      	str	r2, [sp, #4]
 800c966:	4616      	mov	r6, r2
 800c968:	46aa      	mov	sl, r5
 800c96a:	46a9      	mov	r9, r5
 800c96c:	9502      	str	r5, [sp, #8]
 800c96e:	68a2      	ldr	r2, [r4, #8]
 800c970:	b152      	cbz	r2, 800c988 <_scanf_float+0x64>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b4e      	cmp	r3, #78	@ 0x4e
 800c978:	d864      	bhi.n	800ca44 <_scanf_float+0x120>
 800c97a:	2b40      	cmp	r3, #64	@ 0x40
 800c97c:	d83c      	bhi.n	800c9f8 <_scanf_float+0xd4>
 800c97e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c982:	b2c8      	uxtb	r0, r1
 800c984:	280e      	cmp	r0, #14
 800c986:	d93a      	bls.n	800c9fe <_scanf_float+0xda>
 800c988:	f1b9 0f00 	cmp.w	r9, #0
 800c98c:	d003      	beq.n	800c996 <_scanf_float+0x72>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c99a:	f1ba 0f01 	cmp.w	sl, #1
 800c99e:	f200 8117 	bhi.w	800cbd0 <_scanf_float+0x2ac>
 800c9a2:	9b01      	ldr	r3, [sp, #4]
 800c9a4:	429e      	cmp	r6, r3
 800c9a6:	f200 8108 	bhi.w	800cbba <_scanf_float+0x296>
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	b007      	add	sp, #28
 800c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c9b6:	2a0d      	cmp	r2, #13
 800c9b8:	d8e6      	bhi.n	800c988 <_scanf_float+0x64>
 800c9ba:	a101      	add	r1, pc, #4	@ (adr r1, 800c9c0 <_scanf_float+0x9c>)
 800c9bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9c0:	0800cb07 	.word	0x0800cb07
 800c9c4:	0800c989 	.word	0x0800c989
 800c9c8:	0800c989 	.word	0x0800c989
 800c9cc:	0800c989 	.word	0x0800c989
 800c9d0:	0800cb67 	.word	0x0800cb67
 800c9d4:	0800cb3f 	.word	0x0800cb3f
 800c9d8:	0800c989 	.word	0x0800c989
 800c9dc:	0800c989 	.word	0x0800c989
 800c9e0:	0800cb15 	.word	0x0800cb15
 800c9e4:	0800c989 	.word	0x0800c989
 800c9e8:	0800c989 	.word	0x0800c989
 800c9ec:	0800c989 	.word	0x0800c989
 800c9f0:	0800c989 	.word	0x0800c989
 800c9f4:	0800cacd 	.word	0x0800cacd
 800c9f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c9fc:	e7db      	b.n	800c9b6 <_scanf_float+0x92>
 800c9fe:	290e      	cmp	r1, #14
 800ca00:	d8c2      	bhi.n	800c988 <_scanf_float+0x64>
 800ca02:	a001      	add	r0, pc, #4	@ (adr r0, 800ca08 <_scanf_float+0xe4>)
 800ca04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca08:	0800cabd 	.word	0x0800cabd
 800ca0c:	0800c989 	.word	0x0800c989
 800ca10:	0800cabd 	.word	0x0800cabd
 800ca14:	0800cb53 	.word	0x0800cb53
 800ca18:	0800c989 	.word	0x0800c989
 800ca1c:	0800ca65 	.word	0x0800ca65
 800ca20:	0800caa3 	.word	0x0800caa3
 800ca24:	0800caa3 	.word	0x0800caa3
 800ca28:	0800caa3 	.word	0x0800caa3
 800ca2c:	0800caa3 	.word	0x0800caa3
 800ca30:	0800caa3 	.word	0x0800caa3
 800ca34:	0800caa3 	.word	0x0800caa3
 800ca38:	0800caa3 	.word	0x0800caa3
 800ca3c:	0800caa3 	.word	0x0800caa3
 800ca40:	0800caa3 	.word	0x0800caa3
 800ca44:	2b6e      	cmp	r3, #110	@ 0x6e
 800ca46:	d809      	bhi.n	800ca5c <_scanf_float+0x138>
 800ca48:	2b60      	cmp	r3, #96	@ 0x60
 800ca4a:	d8b2      	bhi.n	800c9b2 <_scanf_float+0x8e>
 800ca4c:	2b54      	cmp	r3, #84	@ 0x54
 800ca4e:	d07b      	beq.n	800cb48 <_scanf_float+0x224>
 800ca50:	2b59      	cmp	r3, #89	@ 0x59
 800ca52:	d199      	bne.n	800c988 <_scanf_float+0x64>
 800ca54:	2d07      	cmp	r5, #7
 800ca56:	d197      	bne.n	800c988 <_scanf_float+0x64>
 800ca58:	2508      	movs	r5, #8
 800ca5a:	e02c      	b.n	800cab6 <_scanf_float+0x192>
 800ca5c:	2b74      	cmp	r3, #116	@ 0x74
 800ca5e:	d073      	beq.n	800cb48 <_scanf_float+0x224>
 800ca60:	2b79      	cmp	r3, #121	@ 0x79
 800ca62:	e7f6      	b.n	800ca52 <_scanf_float+0x12e>
 800ca64:	6821      	ldr	r1, [r4, #0]
 800ca66:	05c8      	lsls	r0, r1, #23
 800ca68:	d51b      	bpl.n	800caa2 <_scanf_float+0x17e>
 800ca6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ca6e:	6021      	str	r1, [r4, #0]
 800ca70:	f109 0901 	add.w	r9, r9, #1
 800ca74:	f1bb 0f00 	cmp.w	fp, #0
 800ca78:	d003      	beq.n	800ca82 <_scanf_float+0x15e>
 800ca7a:	3201      	adds	r2, #1
 800ca7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca80:	60a2      	str	r2, [r4, #8]
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	6923      	ldr	r3, [r4, #16]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	607b      	str	r3, [r7, #4]
 800ca96:	f340 8087 	ble.w	800cba8 <_scanf_float+0x284>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	e765      	b.n	800c96e <_scanf_float+0x4a>
 800caa2:	eb1a 0105 	adds.w	r1, sl, r5
 800caa6:	f47f af6f 	bne.w	800c988 <_scanf_float+0x64>
 800caaa:	6822      	ldr	r2, [r4, #0]
 800caac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cab0:	6022      	str	r2, [r4, #0]
 800cab2:	460d      	mov	r5, r1
 800cab4:	468a      	mov	sl, r1
 800cab6:	f806 3b01 	strb.w	r3, [r6], #1
 800caba:	e7e2      	b.n	800ca82 <_scanf_float+0x15e>
 800cabc:	6822      	ldr	r2, [r4, #0]
 800cabe:	0610      	lsls	r0, r2, #24
 800cac0:	f57f af62 	bpl.w	800c988 <_scanf_float+0x64>
 800cac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cac8:	6022      	str	r2, [r4, #0]
 800caca:	e7f4      	b.n	800cab6 <_scanf_float+0x192>
 800cacc:	f1ba 0f00 	cmp.w	sl, #0
 800cad0:	d10e      	bne.n	800caf0 <_scanf_float+0x1cc>
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	d10e      	bne.n	800caf6 <_scanf_float+0x1d2>
 800cad8:	6822      	ldr	r2, [r4, #0]
 800cada:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cade:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cae2:	d108      	bne.n	800caf6 <_scanf_float+0x1d2>
 800cae4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	f04f 0a01 	mov.w	sl, #1
 800caee:	e7e2      	b.n	800cab6 <_scanf_float+0x192>
 800caf0:	f1ba 0f02 	cmp.w	sl, #2
 800caf4:	d055      	beq.n	800cba2 <_scanf_float+0x27e>
 800caf6:	2d01      	cmp	r5, #1
 800caf8:	d002      	beq.n	800cb00 <_scanf_float+0x1dc>
 800cafa:	2d04      	cmp	r5, #4
 800cafc:	f47f af44 	bne.w	800c988 <_scanf_float+0x64>
 800cb00:	3501      	adds	r5, #1
 800cb02:	b2ed      	uxtb	r5, r5
 800cb04:	e7d7      	b.n	800cab6 <_scanf_float+0x192>
 800cb06:	f1ba 0f01 	cmp.w	sl, #1
 800cb0a:	f47f af3d 	bne.w	800c988 <_scanf_float+0x64>
 800cb0e:	f04f 0a02 	mov.w	sl, #2
 800cb12:	e7d0      	b.n	800cab6 <_scanf_float+0x192>
 800cb14:	b97d      	cbnz	r5, 800cb36 <_scanf_float+0x212>
 800cb16:	f1b9 0f00 	cmp.w	r9, #0
 800cb1a:	f47f af38 	bne.w	800c98e <_scanf_float+0x6a>
 800cb1e:	6822      	ldr	r2, [r4, #0]
 800cb20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb28:	f040 8108 	bne.w	800cd3c <_scanf_float+0x418>
 800cb2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb30:	6022      	str	r2, [r4, #0]
 800cb32:	2501      	movs	r5, #1
 800cb34:	e7bf      	b.n	800cab6 <_scanf_float+0x192>
 800cb36:	2d03      	cmp	r5, #3
 800cb38:	d0e2      	beq.n	800cb00 <_scanf_float+0x1dc>
 800cb3a:	2d05      	cmp	r5, #5
 800cb3c:	e7de      	b.n	800cafc <_scanf_float+0x1d8>
 800cb3e:	2d02      	cmp	r5, #2
 800cb40:	f47f af22 	bne.w	800c988 <_scanf_float+0x64>
 800cb44:	2503      	movs	r5, #3
 800cb46:	e7b6      	b.n	800cab6 <_scanf_float+0x192>
 800cb48:	2d06      	cmp	r5, #6
 800cb4a:	f47f af1d 	bne.w	800c988 <_scanf_float+0x64>
 800cb4e:	2507      	movs	r5, #7
 800cb50:	e7b1      	b.n	800cab6 <_scanf_float+0x192>
 800cb52:	6822      	ldr	r2, [r4, #0]
 800cb54:	0591      	lsls	r1, r2, #22
 800cb56:	f57f af17 	bpl.w	800c988 <_scanf_float+0x64>
 800cb5a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb64:	e7a7      	b.n	800cab6 <_scanf_float+0x192>
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cb6c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cb70:	d006      	beq.n	800cb80 <_scanf_float+0x25c>
 800cb72:	0550      	lsls	r0, r2, #21
 800cb74:	f57f af08 	bpl.w	800c988 <_scanf_float+0x64>
 800cb78:	f1b9 0f00 	cmp.w	r9, #0
 800cb7c:	f000 80de 	beq.w	800cd3c <_scanf_float+0x418>
 800cb80:	0591      	lsls	r1, r2, #22
 800cb82:	bf58      	it	pl
 800cb84:	9902      	ldrpl	r1, [sp, #8]
 800cb86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb8a:	bf58      	it	pl
 800cb8c:	eba9 0101 	subpl.w	r1, r9, r1
 800cb90:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cb94:	bf58      	it	pl
 800cb96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb9a:	6022      	str	r2, [r4, #0]
 800cb9c:	f04f 0900 	mov.w	r9, #0
 800cba0:	e789      	b.n	800cab6 <_scanf_float+0x192>
 800cba2:	f04f 0a03 	mov.w	sl, #3
 800cba6:	e786      	b.n	800cab6 <_scanf_float+0x192>
 800cba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cbac:	4639      	mov	r1, r7
 800cbae:	4640      	mov	r0, r8
 800cbb0:	4798      	blx	r3
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	f43f aedb 	beq.w	800c96e <_scanf_float+0x4a>
 800cbb8:	e6e6      	b.n	800c988 <_scanf_float+0x64>
 800cbba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4798      	blx	r3
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	e6e8      	b.n	800c9a2 <_scanf_float+0x7e>
 800cbd0:	1e6b      	subs	r3, r5, #1
 800cbd2:	2b06      	cmp	r3, #6
 800cbd4:	d824      	bhi.n	800cc20 <_scanf_float+0x2fc>
 800cbd6:	2d02      	cmp	r5, #2
 800cbd8:	d836      	bhi.n	800cc48 <_scanf_float+0x324>
 800cbda:	9b01      	ldr	r3, [sp, #4]
 800cbdc:	429e      	cmp	r6, r3
 800cbde:	f67f aee4 	bls.w	800c9aa <_scanf_float+0x86>
 800cbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbea:	463a      	mov	r2, r7
 800cbec:	4640      	mov	r0, r8
 800cbee:	4798      	blx	r3
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	e7f0      	b.n	800cbda <_scanf_float+0x2b6>
 800cbf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbfc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cc00:	463a      	mov	r2, r7
 800cc02:	4640      	mov	r0, r8
 800cc04:	4798      	blx	r3
 800cc06:	6923      	ldr	r3, [r4, #16]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	6123      	str	r3, [r4, #16]
 800cc0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc10:	fa5f fa8a 	uxtb.w	sl, sl
 800cc14:	f1ba 0f02 	cmp.w	sl, #2
 800cc18:	d1ee      	bne.n	800cbf8 <_scanf_float+0x2d4>
 800cc1a:	3d03      	subs	r5, #3
 800cc1c:	b2ed      	uxtb	r5, r5
 800cc1e:	1b76      	subs	r6, r6, r5
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	05da      	lsls	r2, r3, #23
 800cc24:	d530      	bpl.n	800cc88 <_scanf_float+0x364>
 800cc26:	055b      	lsls	r3, r3, #21
 800cc28:	d511      	bpl.n	800cc4e <_scanf_float+0x32a>
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	429e      	cmp	r6, r3
 800cc2e:	f67f aebc 	bls.w	800c9aa <_scanf_float+0x86>
 800cc32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4798      	blx	r3
 800cc40:	6923      	ldr	r3, [r4, #16]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	e7f0      	b.n	800cc2a <_scanf_float+0x306>
 800cc48:	46aa      	mov	sl, r5
 800cc4a:	46b3      	mov	fp, r6
 800cc4c:	e7de      	b.n	800cc0c <_scanf_float+0x2e8>
 800cc4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	2965      	cmp	r1, #101	@ 0x65
 800cc56:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc5a:	f106 35ff 	add.w	r5, r6, #4294967295
 800cc5e:	6123      	str	r3, [r4, #16]
 800cc60:	d00c      	beq.n	800cc7c <_scanf_float+0x358>
 800cc62:	2945      	cmp	r1, #69	@ 0x45
 800cc64:	d00a      	beq.n	800cc7c <_scanf_float+0x358>
 800cc66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc6a:	463a      	mov	r2, r7
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	4798      	blx	r3
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	1eb5      	subs	r5, r6, #2
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc80:	463a      	mov	r2, r7
 800cc82:	4640      	mov	r0, r8
 800cc84:	4798      	blx	r3
 800cc86:	462e      	mov	r6, r5
 800cc88:	6822      	ldr	r2, [r4, #0]
 800cc8a:	f012 0210 	ands.w	r2, r2, #16
 800cc8e:	d001      	beq.n	800cc94 <_scanf_float+0x370>
 800cc90:	2000      	movs	r0, #0
 800cc92:	e68b      	b.n	800c9ac <_scanf_float+0x88>
 800cc94:	7032      	strb	r2, [r6, #0]
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cc9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cca0:	d11c      	bne.n	800ccdc <_scanf_float+0x3b8>
 800cca2:	9b02      	ldr	r3, [sp, #8]
 800cca4:	454b      	cmp	r3, r9
 800cca6:	eba3 0209 	sub.w	r2, r3, r9
 800ccaa:	d123      	bne.n	800ccf4 <_scanf_float+0x3d0>
 800ccac:	9901      	ldr	r1, [sp, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	f002 fd59 	bl	800f768 <_strtod_r>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	6821      	ldr	r1, [r4, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f011 0f02 	tst.w	r1, #2
 800ccc0:	ec57 6b10 	vmov	r6, r7, d0
 800ccc4:	f103 0204 	add.w	r2, r3, #4
 800ccc8:	d01f      	beq.n	800cd0a <_scanf_float+0x3e6>
 800ccca:	9903      	ldr	r1, [sp, #12]
 800cccc:	600a      	str	r2, [r1, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	e9c3 6700 	strd	r6, r7, [r3]
 800ccd4:	68e3      	ldr	r3, [r4, #12]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	60e3      	str	r3, [r4, #12]
 800ccda:	e7d9      	b.n	800cc90 <_scanf_float+0x36c>
 800ccdc:	9b04      	ldr	r3, [sp, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0e4      	beq.n	800ccac <_scanf_float+0x388>
 800cce2:	9905      	ldr	r1, [sp, #20]
 800cce4:	230a      	movs	r3, #10
 800cce6:	3101      	adds	r1, #1
 800cce8:	4640      	mov	r0, r8
 800ccea:	f002 fdbd 	bl	800f868 <_strtol_r>
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	9e05      	ldr	r6, [sp, #20]
 800ccf2:	1ac2      	subs	r2, r0, r3
 800ccf4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ccf8:	429e      	cmp	r6, r3
 800ccfa:	bf28      	it	cs
 800ccfc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cd00:	4910      	ldr	r1, [pc, #64]	@ (800cd44 <_scanf_float+0x420>)
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 f954 	bl	800cfb0 <siprintf>
 800cd08:	e7d0      	b.n	800ccac <_scanf_float+0x388>
 800cd0a:	f011 0f04 	tst.w	r1, #4
 800cd0e:	9903      	ldr	r1, [sp, #12]
 800cd10:	600a      	str	r2, [r1, #0]
 800cd12:	d1dc      	bne.n	800ccce <_scanf_float+0x3aa>
 800cd14:	681d      	ldr	r5, [r3, #0]
 800cd16:	4632      	mov	r2, r6
 800cd18:	463b      	mov	r3, r7
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7f9 fa2d 	bl	800617c <__aeabi_dcmpun>
 800cd22:	b128      	cbz	r0, 800cd30 <_scanf_float+0x40c>
 800cd24:	4808      	ldr	r0, [pc, #32]	@ (800cd48 <_scanf_float+0x424>)
 800cd26:	f000 fb17 	bl	800d358 <nanf>
 800cd2a:	ed85 0a00 	vstr	s0, [r5]
 800cd2e:	e7d1      	b.n	800ccd4 <_scanf_float+0x3b0>
 800cd30:	4630      	mov	r0, r6
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f9 fa80 	bl	8006238 <__aeabi_d2f>
 800cd38:	6028      	str	r0, [r5, #0]
 800cd3a:	e7cb      	b.n	800ccd4 <_scanf_float+0x3b0>
 800cd3c:	f04f 0900 	mov.w	r9, #0
 800cd40:	e629      	b.n	800c996 <_scanf_float+0x72>
 800cd42:	bf00      	nop
 800cd44:	08014c9a 	.word	0x08014c9a
 800cd48:	08013980 	.word	0x08013980

0800cd4c <std>:
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	4604      	mov	r4, r0
 800cd52:	e9c0 3300 	strd	r3, r3, [r0]
 800cd56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd5a:	6083      	str	r3, [r0, #8]
 800cd5c:	8181      	strh	r1, [r0, #12]
 800cd5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd60:	81c2      	strh	r2, [r0, #14]
 800cd62:	6183      	str	r3, [r0, #24]
 800cd64:	4619      	mov	r1, r3
 800cd66:	2208      	movs	r2, #8
 800cd68:	305c      	adds	r0, #92	@ 0x5c
 800cd6a:	f000 fa63 	bl	800d234 <memset>
 800cd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cda4 <std+0x58>)
 800cd70:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd72:	4b0d      	ldr	r3, [pc, #52]	@ (800cda8 <std+0x5c>)
 800cd74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd76:	4b0d      	ldr	r3, [pc, #52]	@ (800cdac <std+0x60>)
 800cd78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb0 <std+0x64>)
 800cd7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb4 <std+0x68>)
 800cd80:	6224      	str	r4, [r4, #32]
 800cd82:	429c      	cmp	r4, r3
 800cd84:	d006      	beq.n	800cd94 <std+0x48>
 800cd86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd8a:	4294      	cmp	r4, r2
 800cd8c:	d002      	beq.n	800cd94 <std+0x48>
 800cd8e:	33d0      	adds	r3, #208	@ 0xd0
 800cd90:	429c      	cmp	r4, r3
 800cd92:	d105      	bne.n	800cda0 <std+0x54>
 800cd94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9c:	f000 bac6 	b.w	800d32c <__retarget_lock_init_recursive>
 800cda0:	bd10      	pop	{r4, pc}
 800cda2:	bf00      	nop
 800cda4:	0800cff1 	.word	0x0800cff1
 800cda8:	0800d013 	.word	0x0800d013
 800cdac:	0800d04b 	.word	0x0800d04b
 800cdb0:	0800d06f 	.word	0x0800d06f
 800cdb4:	20001944 	.word	0x20001944

0800cdb8 <stdio_exit_handler>:
 800cdb8:	4a02      	ldr	r2, [pc, #8]	@ (800cdc4 <stdio_exit_handler+0xc>)
 800cdba:	4903      	ldr	r1, [pc, #12]	@ (800cdc8 <stdio_exit_handler+0x10>)
 800cdbc:	4803      	ldr	r0, [pc, #12]	@ (800cdcc <stdio_exit_handler+0x14>)
 800cdbe:	f000 b869 	b.w	800ce94 <_fwalk_sglue>
 800cdc2:	bf00      	nop
 800cdc4:	2000006c 	.word	0x2000006c
 800cdc8:	0800fea9 	.word	0x0800fea9
 800cdcc:	2000007c 	.word	0x2000007c

0800cdd0 <cleanup_stdio>:
 800cdd0:	6841      	ldr	r1, [r0, #4]
 800cdd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce04 <cleanup_stdio+0x34>)
 800cdd4:	4299      	cmp	r1, r3
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	4604      	mov	r4, r0
 800cdda:	d001      	beq.n	800cde0 <cleanup_stdio+0x10>
 800cddc:	f003 f864 	bl	800fea8 <_fflush_r>
 800cde0:	68a1      	ldr	r1, [r4, #8]
 800cde2:	4b09      	ldr	r3, [pc, #36]	@ (800ce08 <cleanup_stdio+0x38>)
 800cde4:	4299      	cmp	r1, r3
 800cde6:	d002      	beq.n	800cdee <cleanup_stdio+0x1e>
 800cde8:	4620      	mov	r0, r4
 800cdea:	f003 f85d 	bl	800fea8 <_fflush_r>
 800cdee:	68e1      	ldr	r1, [r4, #12]
 800cdf0:	4b06      	ldr	r3, [pc, #24]	@ (800ce0c <cleanup_stdio+0x3c>)
 800cdf2:	4299      	cmp	r1, r3
 800cdf4:	d004      	beq.n	800ce00 <cleanup_stdio+0x30>
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfc:	f003 b854 	b.w	800fea8 <_fflush_r>
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	bf00      	nop
 800ce04:	20001944 	.word	0x20001944
 800ce08:	200019ac 	.word	0x200019ac
 800ce0c:	20001a14 	.word	0x20001a14

0800ce10 <global_stdio_init.part.0>:
 800ce10:	b510      	push	{r4, lr}
 800ce12:	4b0b      	ldr	r3, [pc, #44]	@ (800ce40 <global_stdio_init.part.0+0x30>)
 800ce14:	4c0b      	ldr	r4, [pc, #44]	@ (800ce44 <global_stdio_init.part.0+0x34>)
 800ce16:	4a0c      	ldr	r2, [pc, #48]	@ (800ce48 <global_stdio_init.part.0+0x38>)
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2104      	movs	r1, #4
 800ce20:	f7ff ff94 	bl	800cd4c <std>
 800ce24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce28:	2201      	movs	r2, #1
 800ce2a:	2109      	movs	r1, #9
 800ce2c:	f7ff ff8e 	bl	800cd4c <std>
 800ce30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce34:	2202      	movs	r2, #2
 800ce36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce3a:	2112      	movs	r1, #18
 800ce3c:	f7ff bf86 	b.w	800cd4c <std>
 800ce40:	20001a7c 	.word	0x20001a7c
 800ce44:	20001944 	.word	0x20001944
 800ce48:	0800cdb9 	.word	0x0800cdb9

0800ce4c <__sfp_lock_acquire>:
 800ce4c:	4801      	ldr	r0, [pc, #4]	@ (800ce54 <__sfp_lock_acquire+0x8>)
 800ce4e:	f000 ba6e 	b.w	800d32e <__retarget_lock_acquire_recursive>
 800ce52:	bf00      	nop
 800ce54:	20001a85 	.word	0x20001a85

0800ce58 <__sfp_lock_release>:
 800ce58:	4801      	ldr	r0, [pc, #4]	@ (800ce60 <__sfp_lock_release+0x8>)
 800ce5a:	f000 ba69 	b.w	800d330 <__retarget_lock_release_recursive>
 800ce5e:	bf00      	nop
 800ce60:	20001a85 	.word	0x20001a85

0800ce64 <__sinit>:
 800ce64:	b510      	push	{r4, lr}
 800ce66:	4604      	mov	r4, r0
 800ce68:	f7ff fff0 	bl	800ce4c <__sfp_lock_acquire>
 800ce6c:	6a23      	ldr	r3, [r4, #32]
 800ce6e:	b11b      	cbz	r3, 800ce78 <__sinit+0x14>
 800ce70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce74:	f7ff bff0 	b.w	800ce58 <__sfp_lock_release>
 800ce78:	4b04      	ldr	r3, [pc, #16]	@ (800ce8c <__sinit+0x28>)
 800ce7a:	6223      	str	r3, [r4, #32]
 800ce7c:	4b04      	ldr	r3, [pc, #16]	@ (800ce90 <__sinit+0x2c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1f5      	bne.n	800ce70 <__sinit+0xc>
 800ce84:	f7ff ffc4 	bl	800ce10 <global_stdio_init.part.0>
 800ce88:	e7f2      	b.n	800ce70 <__sinit+0xc>
 800ce8a:	bf00      	nop
 800ce8c:	0800cdd1 	.word	0x0800cdd1
 800ce90:	20001a7c 	.word	0x20001a7c

0800ce94 <_fwalk_sglue>:
 800ce94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce98:	4607      	mov	r7, r0
 800ce9a:	4688      	mov	r8, r1
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	2600      	movs	r6, #0
 800cea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cea4:	f1b9 0901 	subs.w	r9, r9, #1
 800cea8:	d505      	bpl.n	800ceb6 <_fwalk_sglue+0x22>
 800ceaa:	6824      	ldr	r4, [r4, #0]
 800ceac:	2c00      	cmp	r4, #0
 800ceae:	d1f7      	bne.n	800cea0 <_fwalk_sglue+0xc>
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb6:	89ab      	ldrh	r3, [r5, #12]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d907      	bls.n	800cecc <_fwalk_sglue+0x38>
 800cebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cec0:	3301      	adds	r3, #1
 800cec2:	d003      	beq.n	800cecc <_fwalk_sglue+0x38>
 800cec4:	4629      	mov	r1, r5
 800cec6:	4638      	mov	r0, r7
 800cec8:	47c0      	blx	r8
 800ceca:	4306      	orrs	r6, r0
 800cecc:	3568      	adds	r5, #104	@ 0x68
 800cece:	e7e9      	b.n	800cea4 <_fwalk_sglue+0x10>

0800ced0 <iprintf>:
 800ced0:	b40f      	push	{r0, r1, r2, r3}
 800ced2:	b507      	push	{r0, r1, r2, lr}
 800ced4:	4906      	ldr	r1, [pc, #24]	@ (800cef0 <iprintf+0x20>)
 800ced6:	ab04      	add	r3, sp, #16
 800ced8:	6808      	ldr	r0, [r1, #0]
 800ceda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cede:	6881      	ldr	r1, [r0, #8]
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	f002 fe45 	bl	800fb70 <_vfiprintf_r>
 800cee6:	b003      	add	sp, #12
 800cee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceec:	b004      	add	sp, #16
 800ceee:	4770      	bx	lr
 800cef0:	20000078 	.word	0x20000078

0800cef4 <_puts_r>:
 800cef4:	6a03      	ldr	r3, [r0, #32]
 800cef6:	b570      	push	{r4, r5, r6, lr}
 800cef8:	6884      	ldr	r4, [r0, #8]
 800cefa:	4605      	mov	r5, r0
 800cefc:	460e      	mov	r6, r1
 800cefe:	b90b      	cbnz	r3, 800cf04 <_puts_r+0x10>
 800cf00:	f7ff ffb0 	bl	800ce64 <__sinit>
 800cf04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf06:	07db      	lsls	r3, r3, #31
 800cf08:	d405      	bmi.n	800cf16 <_puts_r+0x22>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	0598      	lsls	r0, r3, #22
 800cf0e:	d402      	bmi.n	800cf16 <_puts_r+0x22>
 800cf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf12:	f000 fa0c 	bl	800d32e <__retarget_lock_acquire_recursive>
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	0719      	lsls	r1, r3, #28
 800cf1a:	d502      	bpl.n	800cf22 <_puts_r+0x2e>
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d135      	bne.n	800cf8e <_puts_r+0x9a>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f000 f905 	bl	800d134 <__swsetup_r>
 800cf2a:	b380      	cbz	r0, 800cf8e <_puts_r+0x9a>
 800cf2c:	f04f 35ff 	mov.w	r5, #4294967295
 800cf30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf32:	07da      	lsls	r2, r3, #31
 800cf34:	d405      	bmi.n	800cf42 <_puts_r+0x4e>
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	059b      	lsls	r3, r3, #22
 800cf3a:	d402      	bmi.n	800cf42 <_puts_r+0x4e>
 800cf3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf3e:	f000 f9f7 	bl	800d330 <__retarget_lock_release_recursive>
 800cf42:	4628      	mov	r0, r5
 800cf44:	bd70      	pop	{r4, r5, r6, pc}
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da04      	bge.n	800cf54 <_puts_r+0x60>
 800cf4a:	69a2      	ldr	r2, [r4, #24]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	dc17      	bgt.n	800cf80 <_puts_r+0x8c>
 800cf50:	290a      	cmp	r1, #10
 800cf52:	d015      	beq.n	800cf80 <_puts_r+0x8c>
 800cf54:	6823      	ldr	r3, [r4, #0]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	6022      	str	r2, [r4, #0]
 800cf5a:	7019      	strb	r1, [r3, #0]
 800cf5c:	68a3      	ldr	r3, [r4, #8]
 800cf5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf62:	3b01      	subs	r3, #1
 800cf64:	60a3      	str	r3, [r4, #8]
 800cf66:	2900      	cmp	r1, #0
 800cf68:	d1ed      	bne.n	800cf46 <_puts_r+0x52>
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	da11      	bge.n	800cf92 <_puts_r+0x9e>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	210a      	movs	r1, #10
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 f8a0 	bl	800d0b8 <__swbuf_r>
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d0d7      	beq.n	800cf2c <_puts_r+0x38>
 800cf7c:	250a      	movs	r5, #10
 800cf7e:	e7d7      	b.n	800cf30 <_puts_r+0x3c>
 800cf80:	4622      	mov	r2, r4
 800cf82:	4628      	mov	r0, r5
 800cf84:	f000 f898 	bl	800d0b8 <__swbuf_r>
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d1e7      	bne.n	800cf5c <_puts_r+0x68>
 800cf8c:	e7ce      	b.n	800cf2c <_puts_r+0x38>
 800cf8e:	3e01      	subs	r6, #1
 800cf90:	e7e4      	b.n	800cf5c <_puts_r+0x68>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	6022      	str	r2, [r4, #0]
 800cf98:	220a      	movs	r2, #10
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	e7ee      	b.n	800cf7c <_puts_r+0x88>
	...

0800cfa0 <puts>:
 800cfa0:	4b02      	ldr	r3, [pc, #8]	@ (800cfac <puts+0xc>)
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	6818      	ldr	r0, [r3, #0]
 800cfa6:	f7ff bfa5 	b.w	800cef4 <_puts_r>
 800cfaa:	bf00      	nop
 800cfac:	20000078 	.word	0x20000078

0800cfb0 <siprintf>:
 800cfb0:	b40e      	push	{r1, r2, r3}
 800cfb2:	b500      	push	{lr}
 800cfb4:	b09c      	sub	sp, #112	@ 0x70
 800cfb6:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfb8:	9002      	str	r0, [sp, #8]
 800cfba:	9006      	str	r0, [sp, #24]
 800cfbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfc0:	4809      	ldr	r0, [pc, #36]	@ (800cfe8 <siprintf+0x38>)
 800cfc2:	9107      	str	r1, [sp, #28]
 800cfc4:	9104      	str	r1, [sp, #16]
 800cfc6:	4909      	ldr	r1, [pc, #36]	@ (800cfec <siprintf+0x3c>)
 800cfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfcc:	9105      	str	r1, [sp, #20]
 800cfce:	6800      	ldr	r0, [r0, #0]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	a902      	add	r1, sp, #8
 800cfd4:	f002 fca6 	bl	800f924 <_svfiprintf_r>
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	b01c      	add	sp, #112	@ 0x70
 800cfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe4:	b003      	add	sp, #12
 800cfe6:	4770      	bx	lr
 800cfe8:	20000078 	.word	0x20000078
 800cfec:	ffff0208 	.word	0xffff0208

0800cff0 <__sread>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	460c      	mov	r4, r1
 800cff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff8:	f000 f94a 	bl	800d290 <_read_r>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	bfab      	itete	ge
 800d000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d002:	89a3      	ldrhlt	r3, [r4, #12]
 800d004:	181b      	addge	r3, r3, r0
 800d006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d00a:	bfac      	ite	ge
 800d00c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d00e:	81a3      	strhlt	r3, [r4, #12]
 800d010:	bd10      	pop	{r4, pc}

0800d012 <__swrite>:
 800d012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	461f      	mov	r7, r3
 800d018:	898b      	ldrh	r3, [r1, #12]
 800d01a:	05db      	lsls	r3, r3, #23
 800d01c:	4605      	mov	r5, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	4616      	mov	r6, r2
 800d022:	d505      	bpl.n	800d030 <__swrite+0x1e>
 800d024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d028:	2302      	movs	r3, #2
 800d02a:	2200      	movs	r2, #0
 800d02c:	f000 f91e 	bl	800d26c <_lseek_r>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	4632      	mov	r2, r6
 800d03e:	463b      	mov	r3, r7
 800d040:	4628      	mov	r0, r5
 800d042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d046:	f000 b935 	b.w	800d2b4 <_write_r>

0800d04a <__sseek>:
 800d04a:	b510      	push	{r4, lr}
 800d04c:	460c      	mov	r4, r1
 800d04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d052:	f000 f90b 	bl	800d26c <_lseek_r>
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	bf15      	itete	ne
 800d05c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d05e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d066:	81a3      	strheq	r3, [r4, #12]
 800d068:	bf18      	it	ne
 800d06a:	81a3      	strhne	r3, [r4, #12]
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <__sclose>:
 800d06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d072:	f000 b8eb 	b.w	800d24c <_close_r>
	...

0800d078 <_vsiprintf_r>:
 800d078:	b500      	push	{lr}
 800d07a:	b09b      	sub	sp, #108	@ 0x6c
 800d07c:	9100      	str	r1, [sp, #0]
 800d07e:	9104      	str	r1, [sp, #16]
 800d080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	9102      	str	r1, [sp, #8]
 800d088:	4905      	ldr	r1, [pc, #20]	@ (800d0a0 <_vsiprintf_r+0x28>)
 800d08a:	9103      	str	r1, [sp, #12]
 800d08c:	4669      	mov	r1, sp
 800d08e:	f002 fc49 	bl	800f924 <_svfiprintf_r>
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	2200      	movs	r2, #0
 800d096:	701a      	strb	r2, [r3, #0]
 800d098:	b01b      	add	sp, #108	@ 0x6c
 800d09a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d09e:	bf00      	nop
 800d0a0:	ffff0208 	.word	0xffff0208

0800d0a4 <vsiprintf>:
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	460a      	mov	r2, r1
 800d0a8:	4601      	mov	r1, r0
 800d0aa:	4802      	ldr	r0, [pc, #8]	@ (800d0b4 <vsiprintf+0x10>)
 800d0ac:	6800      	ldr	r0, [r0, #0]
 800d0ae:	f7ff bfe3 	b.w	800d078 <_vsiprintf_r>
 800d0b2:	bf00      	nop
 800d0b4:	20000078 	.word	0x20000078

0800d0b8 <__swbuf_r>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	4614      	mov	r4, r2
 800d0be:	4605      	mov	r5, r0
 800d0c0:	b118      	cbz	r0, 800d0ca <__swbuf_r+0x12>
 800d0c2:	6a03      	ldr	r3, [r0, #32]
 800d0c4:	b90b      	cbnz	r3, 800d0ca <__swbuf_r+0x12>
 800d0c6:	f7ff fecd 	bl	800ce64 <__sinit>
 800d0ca:	69a3      	ldr	r3, [r4, #24]
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	071a      	lsls	r2, r3, #28
 800d0d2:	d501      	bpl.n	800d0d8 <__swbuf_r+0x20>
 800d0d4:	6923      	ldr	r3, [r4, #16]
 800d0d6:	b943      	cbnz	r3, 800d0ea <__swbuf_r+0x32>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f000 f82a 	bl	800d134 <__swsetup_r>
 800d0e0:	b118      	cbz	r0, 800d0ea <__swbuf_r+0x32>
 800d0e2:	f04f 37ff 	mov.w	r7, #4294967295
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	6922      	ldr	r2, [r4, #16]
 800d0ee:	1a98      	subs	r0, r3, r2
 800d0f0:	6963      	ldr	r3, [r4, #20]
 800d0f2:	b2f6      	uxtb	r6, r6
 800d0f4:	4283      	cmp	r3, r0
 800d0f6:	4637      	mov	r7, r6
 800d0f8:	dc05      	bgt.n	800d106 <__swbuf_r+0x4e>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f002 fed3 	bl	800fea8 <_fflush_r>
 800d102:	2800      	cmp	r0, #0
 800d104:	d1ed      	bne.n	800d0e2 <__swbuf_r+0x2a>
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	3b01      	subs	r3, #1
 800d10a:	60a3      	str	r3, [r4, #8]
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	701e      	strb	r6, [r3, #0]
 800d114:	6962      	ldr	r2, [r4, #20]
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	d004      	beq.n	800d126 <__swbuf_r+0x6e>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	07db      	lsls	r3, r3, #31
 800d120:	d5e1      	bpl.n	800d0e6 <__swbuf_r+0x2e>
 800d122:	2e0a      	cmp	r6, #10
 800d124:	d1df      	bne.n	800d0e6 <__swbuf_r+0x2e>
 800d126:	4621      	mov	r1, r4
 800d128:	4628      	mov	r0, r5
 800d12a:	f002 febd 	bl	800fea8 <_fflush_r>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d0d9      	beq.n	800d0e6 <__swbuf_r+0x2e>
 800d132:	e7d6      	b.n	800d0e2 <__swbuf_r+0x2a>

0800d134 <__swsetup_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4b29      	ldr	r3, [pc, #164]	@ (800d1dc <__swsetup_r+0xa8>)
 800d138:	4605      	mov	r5, r0
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	460c      	mov	r4, r1
 800d13e:	b118      	cbz	r0, 800d148 <__swsetup_r+0x14>
 800d140:	6a03      	ldr	r3, [r0, #32]
 800d142:	b90b      	cbnz	r3, 800d148 <__swsetup_r+0x14>
 800d144:	f7ff fe8e 	bl	800ce64 <__sinit>
 800d148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14c:	0719      	lsls	r1, r3, #28
 800d14e:	d422      	bmi.n	800d196 <__swsetup_r+0x62>
 800d150:	06da      	lsls	r2, r3, #27
 800d152:	d407      	bmi.n	800d164 <__swsetup_r+0x30>
 800d154:	2209      	movs	r2, #9
 800d156:	602a      	str	r2, [r5, #0]
 800d158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d15c:	81a3      	strh	r3, [r4, #12]
 800d15e:	f04f 30ff 	mov.w	r0, #4294967295
 800d162:	e033      	b.n	800d1cc <__swsetup_r+0x98>
 800d164:	0758      	lsls	r0, r3, #29
 800d166:	d512      	bpl.n	800d18e <__swsetup_r+0x5a>
 800d168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d16a:	b141      	cbz	r1, 800d17e <__swsetup_r+0x4a>
 800d16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d170:	4299      	cmp	r1, r3
 800d172:	d002      	beq.n	800d17a <__swsetup_r+0x46>
 800d174:	4628      	mov	r0, r5
 800d176:	f000 ff43 	bl	800e000 <_free_r>
 800d17a:	2300      	movs	r3, #0
 800d17c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	2300      	movs	r3, #0
 800d188:	6063      	str	r3, [r4, #4]
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	f043 0308 	orr.w	r3, r3, #8
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	b94b      	cbnz	r3, 800d1ae <__swsetup_r+0x7a>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1a4:	d003      	beq.n	800d1ae <__swsetup_r+0x7a>
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f002 fecb 	bl	800ff44 <__smakebuf_r>
 800d1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b2:	f013 0201 	ands.w	r2, r3, #1
 800d1b6:	d00a      	beq.n	800d1ce <__swsetup_r+0x9a>
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	60a2      	str	r2, [r4, #8]
 800d1bc:	6962      	ldr	r2, [r4, #20]
 800d1be:	4252      	negs	r2, r2
 800d1c0:	61a2      	str	r2, [r4, #24]
 800d1c2:	6922      	ldr	r2, [r4, #16]
 800d1c4:	b942      	cbnz	r2, 800d1d8 <__swsetup_r+0xa4>
 800d1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1ca:	d1c5      	bne.n	800d158 <__swsetup_r+0x24>
 800d1cc:	bd38      	pop	{r3, r4, r5, pc}
 800d1ce:	0799      	lsls	r1, r3, #30
 800d1d0:	bf58      	it	pl
 800d1d2:	6962      	ldrpl	r2, [r4, #20]
 800d1d4:	60a2      	str	r2, [r4, #8]
 800d1d6:	e7f4      	b.n	800d1c2 <__swsetup_r+0x8e>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e7f7      	b.n	800d1cc <__swsetup_r+0x98>
 800d1dc:	20000078 	.word	0x20000078

0800d1e0 <memcmp>:
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	3901      	subs	r1, #1
 800d1e4:	4402      	add	r2, r0
 800d1e6:	4290      	cmp	r0, r2
 800d1e8:	d101      	bne.n	800d1ee <memcmp+0xe>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	e005      	b.n	800d1fa <memcmp+0x1a>
 800d1ee:	7803      	ldrb	r3, [r0, #0]
 800d1f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d001      	beq.n	800d1fc <memcmp+0x1c>
 800d1f8:	1b18      	subs	r0, r3, r4
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	e7f2      	b.n	800d1e6 <memcmp+0x6>

0800d200 <memmove>:
 800d200:	4288      	cmp	r0, r1
 800d202:	b510      	push	{r4, lr}
 800d204:	eb01 0402 	add.w	r4, r1, r2
 800d208:	d902      	bls.n	800d210 <memmove+0x10>
 800d20a:	4284      	cmp	r4, r0
 800d20c:	4623      	mov	r3, r4
 800d20e:	d807      	bhi.n	800d220 <memmove+0x20>
 800d210:	1e43      	subs	r3, r0, #1
 800d212:	42a1      	cmp	r1, r4
 800d214:	d008      	beq.n	800d228 <memmove+0x28>
 800d216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d21e:	e7f8      	b.n	800d212 <memmove+0x12>
 800d220:	4402      	add	r2, r0
 800d222:	4601      	mov	r1, r0
 800d224:	428a      	cmp	r2, r1
 800d226:	d100      	bne.n	800d22a <memmove+0x2a>
 800d228:	bd10      	pop	{r4, pc}
 800d22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d232:	e7f7      	b.n	800d224 <memmove+0x24>

0800d234 <memset>:
 800d234:	4402      	add	r2, r0
 800d236:	4603      	mov	r3, r0
 800d238:	4293      	cmp	r3, r2
 800d23a:	d100      	bne.n	800d23e <memset+0xa>
 800d23c:	4770      	bx	lr
 800d23e:	f803 1b01 	strb.w	r1, [r3], #1
 800d242:	e7f9      	b.n	800d238 <memset+0x4>

0800d244 <_localeconv_r>:
 800d244:	4800      	ldr	r0, [pc, #0]	@ (800d248 <_localeconv_r+0x4>)
 800d246:	4770      	bx	lr
 800d248:	200001b8 	.word	0x200001b8

0800d24c <_close_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	@ (800d268 <_close_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f9 fec0 	bl	8006fdc <_close>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_close_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_close_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	20001a80 	.word	0x20001a80

0800d26c <_lseek_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	@ (800d28c <_lseek_r+0x20>)
 800d270:	4604      	mov	r4, r0
 800d272:	4608      	mov	r0, r1
 800d274:	4611      	mov	r1, r2
 800d276:	2200      	movs	r2, #0
 800d278:	602a      	str	r2, [r5, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	f7f9 feb8 	bl	8006ff0 <_lseek>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_lseek_r+0x1e>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_lseek_r+0x1e>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	20001a80 	.word	0x20001a80

0800d290 <_read_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	@ (800d2b0 <_read_r+0x20>)
 800d294:	4604      	mov	r4, r0
 800d296:	4608      	mov	r0, r1
 800d298:	4611      	mov	r1, r2
 800d29a:	2200      	movs	r2, #0
 800d29c:	602a      	str	r2, [r5, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f7f9 fe80 	bl	8006fa4 <_read>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_read_r+0x1e>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_read_r+0x1e>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20001a80 	.word	0x20001a80

0800d2b4 <_write_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4d07      	ldr	r5, [pc, #28]	@ (800d2d4 <_write_r+0x20>)
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	4608      	mov	r0, r1
 800d2bc:	4611      	mov	r1, r2
 800d2be:	2200      	movs	r2, #0
 800d2c0:	602a      	str	r2, [r5, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	f7f9 fe7c 	bl	8006fc0 <_write>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d102      	bne.n	800d2d2 <_write_r+0x1e>
 800d2cc:	682b      	ldr	r3, [r5, #0]
 800d2ce:	b103      	cbz	r3, 800d2d2 <_write_r+0x1e>
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	20001a80 	.word	0x20001a80

0800d2d8 <__errno>:
 800d2d8:	4b01      	ldr	r3, [pc, #4]	@ (800d2e0 <__errno+0x8>)
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	20000078 	.word	0x20000078

0800d2e4 <__libc_init_array>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d31c <__libc_init_array+0x38>)
 800d2e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d320 <__libc_init_array+0x3c>)
 800d2ea:	1b64      	subs	r4, r4, r5
 800d2ec:	10a4      	asrs	r4, r4, #2
 800d2ee:	2600      	movs	r6, #0
 800d2f0:	42a6      	cmp	r6, r4
 800d2f2:	d109      	bne.n	800d308 <__libc_init_array+0x24>
 800d2f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d324 <__libc_init_array+0x40>)
 800d2f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d328 <__libc_init_array+0x44>)
 800d2f8:	f006 face 	bl	8013898 <_init>
 800d2fc:	1b64      	subs	r4, r4, r5
 800d2fe:	10a4      	asrs	r4, r4, #2
 800d300:	2600      	movs	r6, #0
 800d302:	42a6      	cmp	r6, r4
 800d304:	d105      	bne.n	800d312 <__libc_init_array+0x2e>
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30c:	4798      	blx	r3
 800d30e:	3601      	adds	r6, #1
 800d310:	e7ee      	b.n	800d2f0 <__libc_init_array+0xc>
 800d312:	f855 3b04 	ldr.w	r3, [r5], #4
 800d316:	4798      	blx	r3
 800d318:	3601      	adds	r6, #1
 800d31a:	e7f2      	b.n	800d302 <__libc_init_array+0x1e>
 800d31c:	080156f0 	.word	0x080156f0
 800d320:	080156f0 	.word	0x080156f0
 800d324:	080156f0 	.word	0x080156f0
 800d328:	080156f4 	.word	0x080156f4

0800d32c <__retarget_lock_init_recursive>:
 800d32c:	4770      	bx	lr

0800d32e <__retarget_lock_acquire_recursive>:
 800d32e:	4770      	bx	lr

0800d330 <__retarget_lock_release_recursive>:
 800d330:	4770      	bx	lr

0800d332 <__aeabi_memcpy>:
 800d332:	f000 b803 	b.w	800d33c <memcpy>

0800d336 <__aeabi_memclr>:
 800d336:	2200      	movs	r2, #0
 800d338:	f7f8 ba62 	b.w	8005800 <__aeabi_memset>

0800d33c <memcpy>:
 800d33c:	440a      	add	r2, r1
 800d33e:	4291      	cmp	r1, r2
 800d340:	f100 33ff 	add.w	r3, r0, #4294967295
 800d344:	d100      	bne.n	800d348 <memcpy+0xc>
 800d346:	4770      	bx	lr
 800d348:	b510      	push	{r4, lr}
 800d34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d352:	4291      	cmp	r1, r2
 800d354:	d1f9      	bne.n	800d34a <memcpy+0xe>
 800d356:	bd10      	pop	{r4, pc}

0800d358 <nanf>:
 800d358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d360 <nanf+0x8>
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	7fc00000 	.word	0x7fc00000

0800d364 <quorem>:
 800d364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	6903      	ldr	r3, [r0, #16]
 800d36a:	690c      	ldr	r4, [r1, #16]
 800d36c:	42a3      	cmp	r3, r4
 800d36e:	4607      	mov	r7, r0
 800d370:	db7e      	blt.n	800d470 <quorem+0x10c>
 800d372:	3c01      	subs	r4, #1
 800d374:	f101 0814 	add.w	r8, r1, #20
 800d378:	00a3      	lsls	r3, r4, #2
 800d37a:	f100 0514 	add.w	r5, r0, #20
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d38a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d38e:	3301      	adds	r3, #1
 800d390:	429a      	cmp	r2, r3
 800d392:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d396:	fbb2 f6f3 	udiv	r6, r2, r3
 800d39a:	d32e      	bcc.n	800d3fa <quorem+0x96>
 800d39c:	f04f 0a00 	mov.w	sl, #0
 800d3a0:	46c4      	mov	ip, r8
 800d3a2:	46ae      	mov	lr, r5
 800d3a4:	46d3      	mov	fp, sl
 800d3a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3aa:	b298      	uxth	r0, r3
 800d3ac:	fb06 a000 	mla	r0, r6, r0, sl
 800d3b0:	0c02      	lsrs	r2, r0, #16
 800d3b2:	0c1b      	lsrs	r3, r3, #16
 800d3b4:	fb06 2303 	mla	r3, r6, r3, r2
 800d3b8:	f8de 2000 	ldr.w	r2, [lr]
 800d3bc:	b280      	uxth	r0, r0
 800d3be:	b292      	uxth	r2, r2
 800d3c0:	1a12      	subs	r2, r2, r0
 800d3c2:	445a      	add	r2, fp
 800d3c4:	f8de 0000 	ldr.w	r0, [lr]
 800d3c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3d6:	b292      	uxth	r2, r2
 800d3d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3dc:	45e1      	cmp	r9, ip
 800d3de:	f84e 2b04 	str.w	r2, [lr], #4
 800d3e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3e6:	d2de      	bcs.n	800d3a6 <quorem+0x42>
 800d3e8:	9b00      	ldr	r3, [sp, #0]
 800d3ea:	58eb      	ldr	r3, [r5, r3]
 800d3ec:	b92b      	cbnz	r3, 800d3fa <quorem+0x96>
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	3b04      	subs	r3, #4
 800d3f2:	429d      	cmp	r5, r3
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	d32f      	bcc.n	800d458 <quorem+0xf4>
 800d3f8:	613c      	str	r4, [r7, #16]
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f001 f9c4 	bl	800e788 <__mcmp>
 800d400:	2800      	cmp	r0, #0
 800d402:	db25      	blt.n	800d450 <quorem+0xec>
 800d404:	4629      	mov	r1, r5
 800d406:	2000      	movs	r0, #0
 800d408:	f858 2b04 	ldr.w	r2, [r8], #4
 800d40c:	f8d1 c000 	ldr.w	ip, [r1]
 800d410:	fa1f fe82 	uxth.w	lr, r2
 800d414:	fa1f f38c 	uxth.w	r3, ip
 800d418:	eba3 030e 	sub.w	r3, r3, lr
 800d41c:	4403      	add	r3, r0
 800d41e:	0c12      	lsrs	r2, r2, #16
 800d420:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d424:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d428:	b29b      	uxth	r3, r3
 800d42a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d42e:	45c1      	cmp	r9, r8
 800d430:	f841 3b04 	str.w	r3, [r1], #4
 800d434:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d438:	d2e6      	bcs.n	800d408 <quorem+0xa4>
 800d43a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d43e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d442:	b922      	cbnz	r2, 800d44e <quorem+0xea>
 800d444:	3b04      	subs	r3, #4
 800d446:	429d      	cmp	r5, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	d30b      	bcc.n	800d464 <quorem+0x100>
 800d44c:	613c      	str	r4, [r7, #16]
 800d44e:	3601      	adds	r6, #1
 800d450:	4630      	mov	r0, r6
 800d452:	b003      	add	sp, #12
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	6812      	ldr	r2, [r2, #0]
 800d45a:	3b04      	subs	r3, #4
 800d45c:	2a00      	cmp	r2, #0
 800d45e:	d1cb      	bne.n	800d3f8 <quorem+0x94>
 800d460:	3c01      	subs	r4, #1
 800d462:	e7c6      	b.n	800d3f2 <quorem+0x8e>
 800d464:	6812      	ldr	r2, [r2, #0]
 800d466:	3b04      	subs	r3, #4
 800d468:	2a00      	cmp	r2, #0
 800d46a:	d1ef      	bne.n	800d44c <quorem+0xe8>
 800d46c:	3c01      	subs	r4, #1
 800d46e:	e7ea      	b.n	800d446 <quorem+0xe2>
 800d470:	2000      	movs	r0, #0
 800d472:	e7ee      	b.n	800d452 <quorem+0xee>
 800d474:	0000      	movs	r0, r0
	...

0800d478 <_dtoa_r>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	69c7      	ldr	r7, [r0, #28]
 800d47e:	b099      	sub	sp, #100	@ 0x64
 800d480:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d484:	ec55 4b10 	vmov	r4, r5, d0
 800d488:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d48a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d48c:	4683      	mov	fp, r0
 800d48e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d492:	b97f      	cbnz	r7, 800d4b4 <_dtoa_r+0x3c>
 800d494:	2010      	movs	r0, #16
 800d496:	f000 fdfd 	bl	800e094 <malloc>
 800d49a:	4602      	mov	r2, r0
 800d49c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4a0:	b920      	cbnz	r0, 800d4ac <_dtoa_r+0x34>
 800d4a2:	4ba7      	ldr	r3, [pc, #668]	@ (800d740 <_dtoa_r+0x2c8>)
 800d4a4:	21ef      	movs	r1, #239	@ 0xef
 800d4a6:	48a7      	ldr	r0, [pc, #668]	@ (800d744 <_dtoa_r+0x2cc>)
 800d4a8:	f002 fdd6 	bl	8010058 <__assert_func>
 800d4ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4b0:	6007      	str	r7, [r0, #0]
 800d4b2:	60c7      	str	r7, [r0, #12]
 800d4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	b159      	cbz	r1, 800d4d4 <_dtoa_r+0x5c>
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	604a      	str	r2, [r1, #4]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	4093      	lsls	r3, r2
 800d4c4:	608b      	str	r3, [r1, #8]
 800d4c6:	4658      	mov	r0, fp
 800d4c8:	f000 feda 	bl	800e280 <_Bfree>
 800d4cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	1e2b      	subs	r3, r5, #0
 800d4d6:	bfb9      	ittee	lt
 800d4d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4dc:	9303      	strlt	r3, [sp, #12]
 800d4de:	2300      	movge	r3, #0
 800d4e0:	6033      	strge	r3, [r6, #0]
 800d4e2:	9f03      	ldr	r7, [sp, #12]
 800d4e4:	4b98      	ldr	r3, [pc, #608]	@ (800d748 <_dtoa_r+0x2d0>)
 800d4e6:	bfbc      	itt	lt
 800d4e8:	2201      	movlt	r2, #1
 800d4ea:	6032      	strlt	r2, [r6, #0]
 800d4ec:	43bb      	bics	r3, r7
 800d4ee:	d112      	bne.n	800d516 <_dtoa_r+0x9e>
 800d4f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4fc:	4323      	orrs	r3, r4
 800d4fe:	f000 854d 	beq.w	800df9c <_dtoa_r+0xb24>
 800d502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d504:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d75c <_dtoa_r+0x2e4>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 854f 	beq.w	800dfac <_dtoa_r+0xb34>
 800d50e:	f10a 0303 	add.w	r3, sl, #3
 800d512:	f000 bd49 	b.w	800dfa8 <_dtoa_r+0xb30>
 800d516:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d51a:	2200      	movs	r2, #0
 800d51c:	ec51 0b17 	vmov	r0, r1, d7
 800d520:	2300      	movs	r3, #0
 800d522:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d526:	f7f8 fdf7 	bl	8006118 <__aeabi_dcmpeq>
 800d52a:	4680      	mov	r8, r0
 800d52c:	b158      	cbz	r0, 800d546 <_dtoa_r+0xce>
 800d52e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d530:	2301      	movs	r3, #1
 800d532:	6013      	str	r3, [r2, #0]
 800d534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d536:	b113      	cbz	r3, 800d53e <_dtoa_r+0xc6>
 800d538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d53a:	4b84      	ldr	r3, [pc, #528]	@ (800d74c <_dtoa_r+0x2d4>)
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d760 <_dtoa_r+0x2e8>
 800d542:	f000 bd33 	b.w	800dfac <_dtoa_r+0xb34>
 800d546:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d54a:	aa16      	add	r2, sp, #88	@ 0x58
 800d54c:	a917      	add	r1, sp, #92	@ 0x5c
 800d54e:	4658      	mov	r0, fp
 800d550:	f001 fa3a 	bl	800e9c8 <__d2b>
 800d554:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d558:	4681      	mov	r9, r0
 800d55a:	2e00      	cmp	r6, #0
 800d55c:	d077      	beq.n	800d64e <_dtoa_r+0x1d6>
 800d55e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d560:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d56c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d570:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d574:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d578:	4619      	mov	r1, r3
 800d57a:	2200      	movs	r2, #0
 800d57c:	4b74      	ldr	r3, [pc, #464]	@ (800d750 <_dtoa_r+0x2d8>)
 800d57e:	f7f8 f9ab 	bl	80058d8 <__aeabi_dsub>
 800d582:	a369      	add	r3, pc, #420	@ (adr r3, 800d728 <_dtoa_r+0x2b0>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	f7f8 fb5e 	bl	8005c48 <__aeabi_dmul>
 800d58c:	a368      	add	r3, pc, #416	@ (adr r3, 800d730 <_dtoa_r+0x2b8>)
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	f7f8 f9a3 	bl	80058dc <__adddf3>
 800d596:	4604      	mov	r4, r0
 800d598:	4630      	mov	r0, r6
 800d59a:	460d      	mov	r5, r1
 800d59c:	f7f8 faea 	bl	8005b74 <__aeabi_i2d>
 800d5a0:	a365      	add	r3, pc, #404	@ (adr r3, 800d738 <_dtoa_r+0x2c0>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f8 fb4f 	bl	8005c48 <__aeabi_dmul>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f8 f993 	bl	80058dc <__adddf3>
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	f7f8 fdf5 	bl	80061a8 <__aeabi_d2iz>
 800d5be:	2200      	movs	r2, #0
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	f7f8 fdb0 	bl	800612c <__aeabi_dcmplt>
 800d5cc:	b140      	cbz	r0, 800d5e0 <_dtoa_r+0x168>
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f7f8 fad0 	bl	8005b74 <__aeabi_i2d>
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	462b      	mov	r3, r5
 800d5d8:	f7f8 fd9e 	bl	8006118 <__aeabi_dcmpeq>
 800d5dc:	b900      	cbnz	r0, 800d5e0 <_dtoa_r+0x168>
 800d5de:	3f01      	subs	r7, #1
 800d5e0:	2f16      	cmp	r7, #22
 800d5e2:	d851      	bhi.n	800d688 <_dtoa_r+0x210>
 800d5e4:	4b5b      	ldr	r3, [pc, #364]	@ (800d754 <_dtoa_r+0x2dc>)
 800d5e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5f2:	f7f8 fd9b 	bl	800612c <__aeabi_dcmplt>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d048      	beq.n	800d68c <_dtoa_r+0x214>
 800d5fa:	3f01      	subs	r7, #1
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800d600:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d602:	1b9b      	subs	r3, r3, r6
 800d604:	1e5a      	subs	r2, r3, #1
 800d606:	bf44      	itt	mi
 800d608:	f1c3 0801 	rsbmi	r8, r3, #1
 800d60c:	2300      	movmi	r3, #0
 800d60e:	9208      	str	r2, [sp, #32]
 800d610:	bf54      	ite	pl
 800d612:	f04f 0800 	movpl.w	r8, #0
 800d616:	9308      	strmi	r3, [sp, #32]
 800d618:	2f00      	cmp	r7, #0
 800d61a:	db39      	blt.n	800d690 <_dtoa_r+0x218>
 800d61c:	9b08      	ldr	r3, [sp, #32]
 800d61e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d620:	443b      	add	r3, r7
 800d622:	9308      	str	r3, [sp, #32]
 800d624:	2300      	movs	r3, #0
 800d626:	930a      	str	r3, [sp, #40]	@ 0x28
 800d628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62a:	2b09      	cmp	r3, #9
 800d62c:	d864      	bhi.n	800d6f8 <_dtoa_r+0x280>
 800d62e:	2b05      	cmp	r3, #5
 800d630:	bfc4      	itt	gt
 800d632:	3b04      	subgt	r3, #4
 800d634:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d638:	f1a3 0302 	sub.w	r3, r3, #2
 800d63c:	bfcc      	ite	gt
 800d63e:	2400      	movgt	r4, #0
 800d640:	2401      	movle	r4, #1
 800d642:	2b03      	cmp	r3, #3
 800d644:	d863      	bhi.n	800d70e <_dtoa_r+0x296>
 800d646:	e8df f003 	tbb	[pc, r3]
 800d64a:	372a      	.short	0x372a
 800d64c:	5535      	.short	0x5535
 800d64e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d652:	441e      	add	r6, r3
 800d654:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d658:	2b20      	cmp	r3, #32
 800d65a:	bfc1      	itttt	gt
 800d65c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d660:	409f      	lslgt	r7, r3
 800d662:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d666:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d66a:	bfd6      	itet	le
 800d66c:	f1c3 0320 	rsble	r3, r3, #32
 800d670:	ea47 0003 	orrgt.w	r0, r7, r3
 800d674:	fa04 f003 	lslle.w	r0, r4, r3
 800d678:	f7f8 fa6c 	bl	8005b54 <__aeabi_ui2d>
 800d67c:	2201      	movs	r2, #1
 800d67e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d682:	3e01      	subs	r6, #1
 800d684:	9214      	str	r2, [sp, #80]	@ 0x50
 800d686:	e777      	b.n	800d578 <_dtoa_r+0x100>
 800d688:	2301      	movs	r3, #1
 800d68a:	e7b8      	b.n	800d5fe <_dtoa_r+0x186>
 800d68c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d68e:	e7b7      	b.n	800d600 <_dtoa_r+0x188>
 800d690:	427b      	negs	r3, r7
 800d692:	930a      	str	r3, [sp, #40]	@ 0x28
 800d694:	2300      	movs	r3, #0
 800d696:	eba8 0807 	sub.w	r8, r8, r7
 800d69a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d69c:	e7c4      	b.n	800d628 <_dtoa_r+0x1b0>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dc35      	bgt.n	800d714 <_dtoa_r+0x29c>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	9307      	str	r3, [sp, #28]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6b2:	e00b      	b.n	800d6cc <_dtoa_r+0x254>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e7f3      	b.n	800d6a0 <_dtoa_r+0x228>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6be:	18fb      	adds	r3, r7, r3
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	9307      	str	r3, [sp, #28]
 800d6c8:	bfb8      	it	lt
 800d6ca:	2301      	movlt	r3, #1
 800d6cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	2204      	movs	r2, #4
 800d6d4:	f102 0514 	add.w	r5, r2, #20
 800d6d8:	429d      	cmp	r5, r3
 800d6da:	d91f      	bls.n	800d71c <_dtoa_r+0x2a4>
 800d6dc:	6041      	str	r1, [r0, #4]
 800d6de:	4658      	mov	r0, fp
 800d6e0:	f000 fd8e 	bl	800e200 <_Balloc>
 800d6e4:	4682      	mov	sl, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d13c      	bne.n	800d764 <_dtoa_r+0x2ec>
 800d6ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d758 <_dtoa_r+0x2e0>)
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6f2:	e6d8      	b.n	800d4a6 <_dtoa_r+0x2e>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e7e0      	b.n	800d6ba <_dtoa_r+0x242>
 800d6f8:	2401      	movs	r4, #1
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d700:	f04f 33ff 	mov.w	r3, #4294967295
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	2200      	movs	r2, #0
 800d70a:	2312      	movs	r3, #18
 800d70c:	e7d0      	b.n	800d6b0 <_dtoa_r+0x238>
 800d70e:	2301      	movs	r3, #1
 800d710:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d712:	e7f5      	b.n	800d700 <_dtoa_r+0x288>
 800d714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	9307      	str	r3, [sp, #28]
 800d71a:	e7d7      	b.n	800d6cc <_dtoa_r+0x254>
 800d71c:	3101      	adds	r1, #1
 800d71e:	0052      	lsls	r2, r2, #1
 800d720:	e7d8      	b.n	800d6d4 <_dtoa_r+0x25c>
 800d722:	bf00      	nop
 800d724:	f3af 8000 	nop.w
 800d728:	636f4361 	.word	0x636f4361
 800d72c:	3fd287a7 	.word	0x3fd287a7
 800d730:	8b60c8b3 	.word	0x8b60c8b3
 800d734:	3fc68a28 	.word	0x3fc68a28
 800d738:	509f79fb 	.word	0x509f79fb
 800d73c:	3fd34413 	.word	0x3fd34413
 800d740:	08014cac 	.word	0x08014cac
 800d744:	08014cc3 	.word	0x08014cc3
 800d748:	7ff00000 	.word	0x7ff00000
 800d74c:	08014c77 	.word	0x08014c77
 800d750:	3ff80000 	.word	0x3ff80000
 800d754:	08014dc0 	.word	0x08014dc0
 800d758:	08014d1b 	.word	0x08014d1b
 800d75c:	08014ca8 	.word	0x08014ca8
 800d760:	08014c76 	.word	0x08014c76
 800d764:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d768:	6018      	str	r0, [r3, #0]
 800d76a:	9b07      	ldr	r3, [sp, #28]
 800d76c:	2b0e      	cmp	r3, #14
 800d76e:	f200 80a4 	bhi.w	800d8ba <_dtoa_r+0x442>
 800d772:	2c00      	cmp	r4, #0
 800d774:	f000 80a1 	beq.w	800d8ba <_dtoa_r+0x442>
 800d778:	2f00      	cmp	r7, #0
 800d77a:	dd33      	ble.n	800d7e4 <_dtoa_r+0x36c>
 800d77c:	4bad      	ldr	r3, [pc, #692]	@ (800da34 <_dtoa_r+0x5bc>)
 800d77e:	f007 020f 	and.w	r2, r7, #15
 800d782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d786:	ed93 7b00 	vldr	d7, [r3]
 800d78a:	05f8      	lsls	r0, r7, #23
 800d78c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d790:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d794:	d516      	bpl.n	800d7c4 <_dtoa_r+0x34c>
 800d796:	4ba8      	ldr	r3, [pc, #672]	@ (800da38 <_dtoa_r+0x5c0>)
 800d798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d79c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7a0:	f7f8 fb7c 	bl	8005e9c <__aeabi_ddiv>
 800d7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7a8:	f004 040f 	and.w	r4, r4, #15
 800d7ac:	2603      	movs	r6, #3
 800d7ae:	4da2      	ldr	r5, [pc, #648]	@ (800da38 <_dtoa_r+0x5c0>)
 800d7b0:	b954      	cbnz	r4, 800d7c8 <_dtoa_r+0x350>
 800d7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ba:	f7f8 fb6f 	bl	8005e9c <__aeabi_ddiv>
 800d7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7c2:	e028      	b.n	800d816 <_dtoa_r+0x39e>
 800d7c4:	2602      	movs	r6, #2
 800d7c6:	e7f2      	b.n	800d7ae <_dtoa_r+0x336>
 800d7c8:	07e1      	lsls	r1, r4, #31
 800d7ca:	d508      	bpl.n	800d7de <_dtoa_r+0x366>
 800d7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7d4:	f7f8 fa38 	bl	8005c48 <__aeabi_dmul>
 800d7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7dc:	3601      	adds	r6, #1
 800d7de:	1064      	asrs	r4, r4, #1
 800d7e0:	3508      	adds	r5, #8
 800d7e2:	e7e5      	b.n	800d7b0 <_dtoa_r+0x338>
 800d7e4:	f000 80d2 	beq.w	800d98c <_dtoa_r+0x514>
 800d7e8:	427c      	negs	r4, r7
 800d7ea:	4b92      	ldr	r3, [pc, #584]	@ (800da34 <_dtoa_r+0x5bc>)
 800d7ec:	4d92      	ldr	r5, [pc, #584]	@ (800da38 <_dtoa_r+0x5c0>)
 800d7ee:	f004 020f 	and.w	r2, r4, #15
 800d7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7fe:	f7f8 fa23 	bl	8005c48 <__aeabi_dmul>
 800d802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d806:	1124      	asrs	r4, r4, #4
 800d808:	2300      	movs	r3, #0
 800d80a:	2602      	movs	r6, #2
 800d80c:	2c00      	cmp	r4, #0
 800d80e:	f040 80b2 	bne.w	800d976 <_dtoa_r+0x4fe>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1d3      	bne.n	800d7be <_dtoa_r+0x346>
 800d816:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d818:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 80b7 	beq.w	800d990 <_dtoa_r+0x518>
 800d822:	4b86      	ldr	r3, [pc, #536]	@ (800da3c <_dtoa_r+0x5c4>)
 800d824:	2200      	movs	r2, #0
 800d826:	4620      	mov	r0, r4
 800d828:	4629      	mov	r1, r5
 800d82a:	f7f8 fc7f 	bl	800612c <__aeabi_dcmplt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f000 80ae 	beq.w	800d990 <_dtoa_r+0x518>
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 80aa 	beq.w	800d990 <_dtoa_r+0x518>
 800d83c:	9b00      	ldr	r3, [sp, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dd37      	ble.n	800d8b2 <_dtoa_r+0x43a>
 800d842:	1e7b      	subs	r3, r7, #1
 800d844:	9304      	str	r3, [sp, #16]
 800d846:	4620      	mov	r0, r4
 800d848:	4b7d      	ldr	r3, [pc, #500]	@ (800da40 <_dtoa_r+0x5c8>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f8 f9fb 	bl	8005c48 <__aeabi_dmul>
 800d852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d856:	9c00      	ldr	r4, [sp, #0]
 800d858:	3601      	adds	r6, #1
 800d85a:	4630      	mov	r0, r6
 800d85c:	f7f8 f98a 	bl	8005b74 <__aeabi_i2d>
 800d860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d864:	f7f8 f9f0 	bl	8005c48 <__aeabi_dmul>
 800d868:	4b76      	ldr	r3, [pc, #472]	@ (800da44 <_dtoa_r+0x5cc>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	f7f8 f836 	bl	80058dc <__adddf3>
 800d870:	4605      	mov	r5, r0
 800d872:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d876:	2c00      	cmp	r4, #0
 800d878:	f040 808d 	bne.w	800d996 <_dtoa_r+0x51e>
 800d87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d880:	4b71      	ldr	r3, [pc, #452]	@ (800da48 <_dtoa_r+0x5d0>)
 800d882:	2200      	movs	r2, #0
 800d884:	f7f8 f828 	bl	80058d8 <__aeabi_dsub>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d890:	462a      	mov	r2, r5
 800d892:	4633      	mov	r3, r6
 800d894:	f7f8 fc68 	bl	8006168 <__aeabi_dcmpgt>
 800d898:	2800      	cmp	r0, #0
 800d89a:	f040 828b 	bne.w	800ddb4 <_dtoa_r+0x93c>
 800d89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8a2:	462a      	mov	r2, r5
 800d8a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8a8:	f7f8 fc40 	bl	800612c <__aeabi_dcmplt>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	f040 8128 	bne.w	800db02 <_dtoa_r+0x68a>
 800d8b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f2c0 815a 	blt.w	800db76 <_dtoa_r+0x6fe>
 800d8c2:	2f0e      	cmp	r7, #14
 800d8c4:	f300 8157 	bgt.w	800db76 <_dtoa_r+0x6fe>
 800d8c8:	4b5a      	ldr	r3, [pc, #360]	@ (800da34 <_dtoa_r+0x5bc>)
 800d8ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8ce:	ed93 7b00 	vldr	d7, [r3]
 800d8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	ed8d 7b00 	vstr	d7, [sp]
 800d8da:	da03      	bge.n	800d8e4 <_dtoa_r+0x46c>
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f340 8101 	ble.w	800dae6 <_dtoa_r+0x66e>
 800d8e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8e8:	4656      	mov	r6, sl
 800d8ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f8 fad3 	bl	8005e9c <__aeabi_ddiv>
 800d8f6:	f7f8 fc57 	bl	80061a8 <__aeabi_d2iz>
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	f7f8 f93a 	bl	8005b74 <__aeabi_i2d>
 800d900:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d904:	f7f8 f9a0 	bl	8005c48 <__aeabi_dmul>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4620      	mov	r0, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d914:	f7f7 ffe0 	bl	80058d8 <__aeabi_dsub>
 800d918:	f806 4b01 	strb.w	r4, [r6], #1
 800d91c:	9d07      	ldr	r5, [sp, #28]
 800d91e:	eba6 040a 	sub.w	r4, r6, sl
 800d922:	42a5      	cmp	r5, r4
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	f040 8117 	bne.w	800db5a <_dtoa_r+0x6e2>
 800d92c:	f7f7 ffd6 	bl	80058dc <__adddf3>
 800d930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d934:	4604      	mov	r4, r0
 800d936:	460d      	mov	r5, r1
 800d938:	f7f8 fc16 	bl	8006168 <__aeabi_dcmpgt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f040 80f9 	bne.w	800db34 <_dtoa_r+0x6bc>
 800d942:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d946:	4620      	mov	r0, r4
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f8 fbe5 	bl	8006118 <__aeabi_dcmpeq>
 800d94e:	b118      	cbz	r0, 800d958 <_dtoa_r+0x4e0>
 800d950:	f018 0f01 	tst.w	r8, #1
 800d954:	f040 80ee 	bne.w	800db34 <_dtoa_r+0x6bc>
 800d958:	4649      	mov	r1, r9
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 fc90 	bl	800e280 <_Bfree>
 800d960:	2300      	movs	r3, #0
 800d962:	7033      	strb	r3, [r6, #0]
 800d964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d966:	3701      	adds	r7, #1
 800d968:	601f      	str	r7, [r3, #0]
 800d96a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 831d 	beq.w	800dfac <_dtoa_r+0xb34>
 800d972:	601e      	str	r6, [r3, #0]
 800d974:	e31a      	b.n	800dfac <_dtoa_r+0xb34>
 800d976:	07e2      	lsls	r2, r4, #31
 800d978:	d505      	bpl.n	800d986 <_dtoa_r+0x50e>
 800d97a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d97e:	f7f8 f963 	bl	8005c48 <__aeabi_dmul>
 800d982:	3601      	adds	r6, #1
 800d984:	2301      	movs	r3, #1
 800d986:	1064      	asrs	r4, r4, #1
 800d988:	3508      	adds	r5, #8
 800d98a:	e73f      	b.n	800d80c <_dtoa_r+0x394>
 800d98c:	2602      	movs	r6, #2
 800d98e:	e742      	b.n	800d816 <_dtoa_r+0x39e>
 800d990:	9c07      	ldr	r4, [sp, #28]
 800d992:	9704      	str	r7, [sp, #16]
 800d994:	e761      	b.n	800d85a <_dtoa_r+0x3e2>
 800d996:	4b27      	ldr	r3, [pc, #156]	@ (800da34 <_dtoa_r+0x5bc>)
 800d998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d99a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d99e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9a2:	4454      	add	r4, sl
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	d053      	beq.n	800da50 <_dtoa_r+0x5d8>
 800d9a8:	4928      	ldr	r1, [pc, #160]	@ (800da4c <_dtoa_r+0x5d4>)
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	f7f8 fa76 	bl	8005e9c <__aeabi_ddiv>
 800d9b0:	4633      	mov	r3, r6
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	f7f7 ff90 	bl	80058d8 <__aeabi_dsub>
 800d9b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9bc:	4656      	mov	r6, sl
 800d9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c2:	f7f8 fbf1 	bl	80061a8 <__aeabi_d2iz>
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	f7f8 f8d4 	bl	8005b74 <__aeabi_i2d>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d4:	f7f7 ff80 	bl	80058d8 <__aeabi_dsub>
 800d9d8:	3530      	adds	r5, #48	@ 0x30
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9e2:	f806 5b01 	strb.w	r5, [r6], #1
 800d9e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ea:	f7f8 fb9f 	bl	800612c <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d171      	bne.n	800dad6 <_dtoa_r+0x65e>
 800d9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9f6:	4911      	ldr	r1, [pc, #68]	@ (800da3c <_dtoa_r+0x5c4>)
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	f7f7 ff6d 	bl	80058d8 <__aeabi_dsub>
 800d9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da02:	f7f8 fb93 	bl	800612c <__aeabi_dcmplt>
 800da06:	2800      	cmp	r0, #0
 800da08:	f040 8095 	bne.w	800db36 <_dtoa_r+0x6be>
 800da0c:	42a6      	cmp	r6, r4
 800da0e:	f43f af50 	beq.w	800d8b2 <_dtoa_r+0x43a>
 800da12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da16:	4b0a      	ldr	r3, [pc, #40]	@ (800da40 <_dtoa_r+0x5c8>)
 800da18:	2200      	movs	r2, #0
 800da1a:	f7f8 f915 	bl	8005c48 <__aeabi_dmul>
 800da1e:	4b08      	ldr	r3, [pc, #32]	@ (800da40 <_dtoa_r+0x5c8>)
 800da20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da24:	2200      	movs	r2, #0
 800da26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2a:	f7f8 f90d 	bl	8005c48 <__aeabi_dmul>
 800da2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da32:	e7c4      	b.n	800d9be <_dtoa_r+0x546>
 800da34:	08014dc0 	.word	0x08014dc0
 800da38:	08014d98 	.word	0x08014d98
 800da3c:	3ff00000 	.word	0x3ff00000
 800da40:	40240000 	.word	0x40240000
 800da44:	401c0000 	.word	0x401c0000
 800da48:	40140000 	.word	0x40140000
 800da4c:	3fe00000 	.word	0x3fe00000
 800da50:	4631      	mov	r1, r6
 800da52:	4628      	mov	r0, r5
 800da54:	f7f8 f8f8 	bl	8005c48 <__aeabi_dmul>
 800da58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800da5e:	4656      	mov	r6, sl
 800da60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da64:	f7f8 fba0 	bl	80061a8 <__aeabi_d2iz>
 800da68:	4605      	mov	r5, r0
 800da6a:	f7f8 f883 	bl	8005b74 <__aeabi_i2d>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da76:	f7f7 ff2f 	bl	80058d8 <__aeabi_dsub>
 800da7a:	3530      	adds	r5, #48	@ 0x30
 800da7c:	f806 5b01 	strb.w	r5, [r6], #1
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	42a6      	cmp	r6, r4
 800da86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da8a:	f04f 0200 	mov.w	r2, #0
 800da8e:	d124      	bne.n	800dada <_dtoa_r+0x662>
 800da90:	4bac      	ldr	r3, [pc, #688]	@ (800dd44 <_dtoa_r+0x8cc>)
 800da92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da96:	f7f7 ff21 	bl	80058dc <__adddf3>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa2:	f7f8 fb61 	bl	8006168 <__aeabi_dcmpgt>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d145      	bne.n	800db36 <_dtoa_r+0x6be>
 800daaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daae:	49a5      	ldr	r1, [pc, #660]	@ (800dd44 <_dtoa_r+0x8cc>)
 800dab0:	2000      	movs	r0, #0
 800dab2:	f7f7 ff11 	bl	80058d8 <__aeabi_dsub>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dabe:	f7f8 fb35 	bl	800612c <__aeabi_dcmplt>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	f43f aef5 	beq.w	800d8b2 <_dtoa_r+0x43a>
 800dac8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800daca:	1e73      	subs	r3, r6, #1
 800dacc:	9315      	str	r3, [sp, #84]	@ 0x54
 800dace:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dad2:	2b30      	cmp	r3, #48	@ 0x30
 800dad4:	d0f8      	beq.n	800dac8 <_dtoa_r+0x650>
 800dad6:	9f04      	ldr	r7, [sp, #16]
 800dad8:	e73e      	b.n	800d958 <_dtoa_r+0x4e0>
 800dada:	4b9b      	ldr	r3, [pc, #620]	@ (800dd48 <_dtoa_r+0x8d0>)
 800dadc:	f7f8 f8b4 	bl	8005c48 <__aeabi_dmul>
 800dae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dae4:	e7bc      	b.n	800da60 <_dtoa_r+0x5e8>
 800dae6:	d10c      	bne.n	800db02 <_dtoa_r+0x68a>
 800dae8:	4b98      	ldr	r3, [pc, #608]	@ (800dd4c <_dtoa_r+0x8d4>)
 800daea:	2200      	movs	r2, #0
 800daec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf0:	f7f8 f8aa 	bl	8005c48 <__aeabi_dmul>
 800daf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daf8:	f7f8 fb2c 	bl	8006154 <__aeabi_dcmpge>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f000 8157 	beq.w	800ddb0 <_dtoa_r+0x938>
 800db02:	2400      	movs	r4, #0
 800db04:	4625      	mov	r5, r4
 800db06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db08:	43db      	mvns	r3, r3
 800db0a:	9304      	str	r3, [sp, #16]
 800db0c:	4656      	mov	r6, sl
 800db0e:	2700      	movs	r7, #0
 800db10:	4621      	mov	r1, r4
 800db12:	4658      	mov	r0, fp
 800db14:	f000 fbb4 	bl	800e280 <_Bfree>
 800db18:	2d00      	cmp	r5, #0
 800db1a:	d0dc      	beq.n	800dad6 <_dtoa_r+0x65e>
 800db1c:	b12f      	cbz	r7, 800db2a <_dtoa_r+0x6b2>
 800db1e:	42af      	cmp	r7, r5
 800db20:	d003      	beq.n	800db2a <_dtoa_r+0x6b2>
 800db22:	4639      	mov	r1, r7
 800db24:	4658      	mov	r0, fp
 800db26:	f000 fbab 	bl	800e280 <_Bfree>
 800db2a:	4629      	mov	r1, r5
 800db2c:	4658      	mov	r0, fp
 800db2e:	f000 fba7 	bl	800e280 <_Bfree>
 800db32:	e7d0      	b.n	800dad6 <_dtoa_r+0x65e>
 800db34:	9704      	str	r7, [sp, #16]
 800db36:	4633      	mov	r3, r6
 800db38:	461e      	mov	r6, r3
 800db3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db3e:	2a39      	cmp	r2, #57	@ 0x39
 800db40:	d107      	bne.n	800db52 <_dtoa_r+0x6da>
 800db42:	459a      	cmp	sl, r3
 800db44:	d1f8      	bne.n	800db38 <_dtoa_r+0x6c0>
 800db46:	9a04      	ldr	r2, [sp, #16]
 800db48:	3201      	adds	r2, #1
 800db4a:	9204      	str	r2, [sp, #16]
 800db4c:	2230      	movs	r2, #48	@ 0x30
 800db4e:	f88a 2000 	strb.w	r2, [sl]
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	3201      	adds	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	e7bd      	b.n	800dad6 <_dtoa_r+0x65e>
 800db5a:	4b7b      	ldr	r3, [pc, #492]	@ (800dd48 <_dtoa_r+0x8d0>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	f7f8 f873 	bl	8005c48 <__aeabi_dmul>
 800db62:	2200      	movs	r2, #0
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	460d      	mov	r5, r1
 800db6a:	f7f8 fad5 	bl	8006118 <__aeabi_dcmpeq>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f aebb 	beq.w	800d8ea <_dtoa_r+0x472>
 800db74:	e6f0      	b.n	800d958 <_dtoa_r+0x4e0>
 800db76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db78:	2a00      	cmp	r2, #0
 800db7a:	f000 80db 	beq.w	800dd34 <_dtoa_r+0x8bc>
 800db7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db80:	2a01      	cmp	r2, #1
 800db82:	f300 80bf 	bgt.w	800dd04 <_dtoa_r+0x88c>
 800db86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db88:	2a00      	cmp	r2, #0
 800db8a:	f000 80b7 	beq.w	800dcfc <_dtoa_r+0x884>
 800db8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db94:	4646      	mov	r6, r8
 800db96:	9a08      	ldr	r2, [sp, #32]
 800db98:	2101      	movs	r1, #1
 800db9a:	441a      	add	r2, r3
 800db9c:	4658      	mov	r0, fp
 800db9e:	4498      	add	r8, r3
 800dba0:	9208      	str	r2, [sp, #32]
 800dba2:	f000 fc6b 	bl	800e47c <__i2b>
 800dba6:	4605      	mov	r5, r0
 800dba8:	b15e      	cbz	r6, 800dbc2 <_dtoa_r+0x74a>
 800dbaa:	9b08      	ldr	r3, [sp, #32]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	dd08      	ble.n	800dbc2 <_dtoa_r+0x74a>
 800dbb0:	42b3      	cmp	r3, r6
 800dbb2:	9a08      	ldr	r2, [sp, #32]
 800dbb4:	bfa8      	it	ge
 800dbb6:	4633      	movge	r3, r6
 800dbb8:	eba8 0803 	sub.w	r8, r8, r3
 800dbbc:	1af6      	subs	r6, r6, r3
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	9308      	str	r3, [sp, #32]
 800dbc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbc4:	b1f3      	cbz	r3, 800dc04 <_dtoa_r+0x78c>
 800dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 80b7 	beq.w	800dd3c <_dtoa_r+0x8c4>
 800dbce:	b18c      	cbz	r4, 800dbf4 <_dtoa_r+0x77c>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4622      	mov	r2, r4
 800dbd4:	4658      	mov	r0, fp
 800dbd6:	f000 fd11 	bl	800e5fc <__pow5mult>
 800dbda:	464a      	mov	r2, r9
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4605      	mov	r5, r0
 800dbe0:	4658      	mov	r0, fp
 800dbe2:	f000 fc61 	bl	800e4a8 <__multiply>
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	9004      	str	r0, [sp, #16]
 800dbea:	4658      	mov	r0, fp
 800dbec:	f000 fb48 	bl	800e280 <_Bfree>
 800dbf0:	9b04      	ldr	r3, [sp, #16]
 800dbf2:	4699      	mov	r9, r3
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf6:	1b1a      	subs	r2, r3, r4
 800dbf8:	d004      	beq.n	800dc04 <_dtoa_r+0x78c>
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	4658      	mov	r0, fp
 800dbfe:	f000 fcfd 	bl	800e5fc <__pow5mult>
 800dc02:	4681      	mov	r9, r0
 800dc04:	2101      	movs	r1, #1
 800dc06:	4658      	mov	r0, fp
 800dc08:	f000 fc38 	bl	800e47c <__i2b>
 800dc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc0e:	4604      	mov	r4, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 81cf 	beq.w	800dfb4 <_dtoa_r+0xb3c>
 800dc16:	461a      	mov	r2, r3
 800dc18:	4601      	mov	r1, r0
 800dc1a:	4658      	mov	r0, fp
 800dc1c:	f000 fcee 	bl	800e5fc <__pow5mult>
 800dc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	4604      	mov	r4, r0
 800dc26:	f300 8095 	bgt.w	800dd54 <_dtoa_r+0x8dc>
 800dc2a:	9b02      	ldr	r3, [sp, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f040 8087 	bne.w	800dd40 <_dtoa_r+0x8c8>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f040 8089 	bne.w	800dd50 <_dtoa_r+0x8d8>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc44:	0d1b      	lsrs	r3, r3, #20
 800dc46:	051b      	lsls	r3, r3, #20
 800dc48:	b12b      	cbz	r3, 800dc56 <_dtoa_r+0x7de>
 800dc4a:	9b08      	ldr	r3, [sp, #32]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	9308      	str	r3, [sp, #32]
 800dc50:	f108 0801 	add.w	r8, r8, #1
 800dc54:	2301      	movs	r3, #1
 800dc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 81b0 	beq.w	800dfc0 <_dtoa_r+0xb48>
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc66:	6918      	ldr	r0, [r3, #16]
 800dc68:	f000 fbbc 	bl	800e3e4 <__hi0bits>
 800dc6c:	f1c0 0020 	rsb	r0, r0, #32
 800dc70:	9b08      	ldr	r3, [sp, #32]
 800dc72:	4418      	add	r0, r3
 800dc74:	f010 001f 	ands.w	r0, r0, #31
 800dc78:	d077      	beq.n	800dd6a <_dtoa_r+0x8f2>
 800dc7a:	f1c0 0320 	rsb	r3, r0, #32
 800dc7e:	2b04      	cmp	r3, #4
 800dc80:	dd6b      	ble.n	800dd5a <_dtoa_r+0x8e2>
 800dc82:	9b08      	ldr	r3, [sp, #32]
 800dc84:	f1c0 001c 	rsb	r0, r0, #28
 800dc88:	4403      	add	r3, r0
 800dc8a:	4480      	add	r8, r0
 800dc8c:	4406      	add	r6, r0
 800dc8e:	9308      	str	r3, [sp, #32]
 800dc90:	f1b8 0f00 	cmp.w	r8, #0
 800dc94:	dd05      	ble.n	800dca2 <_dtoa_r+0x82a>
 800dc96:	4649      	mov	r1, r9
 800dc98:	4642      	mov	r2, r8
 800dc9a:	4658      	mov	r0, fp
 800dc9c:	f000 fd08 	bl	800e6b0 <__lshift>
 800dca0:	4681      	mov	r9, r0
 800dca2:	9b08      	ldr	r3, [sp, #32]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd05      	ble.n	800dcb4 <_dtoa_r+0x83c>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4658      	mov	r0, fp
 800dcae:	f000 fcff 	bl	800e6b0 <__lshift>
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d059      	beq.n	800dd6e <_dtoa_r+0x8f6>
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4648      	mov	r0, r9
 800dcbe:	f000 fd63 	bl	800e788 <__mcmp>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	da53      	bge.n	800dd6e <_dtoa_r+0x8f6>
 800dcc6:	1e7b      	subs	r3, r7, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	4649      	mov	r1, r9
 800dccc:	2300      	movs	r3, #0
 800dcce:	220a      	movs	r2, #10
 800dcd0:	4658      	mov	r0, fp
 800dcd2:	f000 faf7 	bl	800e2c4 <__multadd>
 800dcd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd8:	4681      	mov	r9, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 8172 	beq.w	800dfc4 <_dtoa_r+0xb4c>
 800dce0:	2300      	movs	r3, #0
 800dce2:	4629      	mov	r1, r5
 800dce4:	220a      	movs	r2, #10
 800dce6:	4658      	mov	r0, fp
 800dce8:	f000 faec 	bl	800e2c4 <__multadd>
 800dcec:	9b00      	ldr	r3, [sp, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	4605      	mov	r5, r0
 800dcf2:	dc67      	bgt.n	800ddc4 <_dtoa_r+0x94c>
 800dcf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	dc41      	bgt.n	800dd7e <_dtoa_r+0x906>
 800dcfa:	e063      	b.n	800ddc4 <_dtoa_r+0x94c>
 800dcfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd02:	e746      	b.n	800db92 <_dtoa_r+0x71a>
 800dd04:	9b07      	ldr	r3, [sp, #28]
 800dd06:	1e5c      	subs	r4, r3, #1
 800dd08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd0a:	42a3      	cmp	r3, r4
 800dd0c:	bfbf      	itttt	lt
 800dd0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd14:	1ae3      	sublt	r3, r4, r3
 800dd16:	bfb4      	ite	lt
 800dd18:	18d2      	addlt	r2, r2, r3
 800dd1a:	1b1c      	subge	r4, r3, r4
 800dd1c:	9b07      	ldr	r3, [sp, #28]
 800dd1e:	bfbc      	itt	lt
 800dd20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd22:	2400      	movlt	r4, #0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	bfb5      	itete	lt
 800dd28:	eba8 0603 	sublt.w	r6, r8, r3
 800dd2c:	9b07      	ldrge	r3, [sp, #28]
 800dd2e:	2300      	movlt	r3, #0
 800dd30:	4646      	movge	r6, r8
 800dd32:	e730      	b.n	800db96 <_dtoa_r+0x71e>
 800dd34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd38:	4646      	mov	r6, r8
 800dd3a:	e735      	b.n	800dba8 <_dtoa_r+0x730>
 800dd3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd3e:	e75c      	b.n	800dbfa <_dtoa_r+0x782>
 800dd40:	2300      	movs	r3, #0
 800dd42:	e788      	b.n	800dc56 <_dtoa_r+0x7de>
 800dd44:	3fe00000 	.word	0x3fe00000
 800dd48:	40240000 	.word	0x40240000
 800dd4c:	40140000 	.word	0x40140000
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	e780      	b.n	800dc56 <_dtoa_r+0x7de>
 800dd54:	2300      	movs	r3, #0
 800dd56:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd58:	e782      	b.n	800dc60 <_dtoa_r+0x7e8>
 800dd5a:	d099      	beq.n	800dc90 <_dtoa_r+0x818>
 800dd5c:	9a08      	ldr	r2, [sp, #32]
 800dd5e:	331c      	adds	r3, #28
 800dd60:	441a      	add	r2, r3
 800dd62:	4498      	add	r8, r3
 800dd64:	441e      	add	r6, r3
 800dd66:	9208      	str	r2, [sp, #32]
 800dd68:	e792      	b.n	800dc90 <_dtoa_r+0x818>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	e7f6      	b.n	800dd5c <_dtoa_r+0x8e4>
 800dd6e:	9b07      	ldr	r3, [sp, #28]
 800dd70:	9704      	str	r7, [sp, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	dc20      	bgt.n	800ddb8 <_dtoa_r+0x940>
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	dd1e      	ble.n	800ddbc <_dtoa_r+0x944>
 800dd7e:	9b00      	ldr	r3, [sp, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f47f aec0 	bne.w	800db06 <_dtoa_r+0x68e>
 800dd86:	4621      	mov	r1, r4
 800dd88:	2205      	movs	r2, #5
 800dd8a:	4658      	mov	r0, fp
 800dd8c:	f000 fa9a 	bl	800e2c4 <__multadd>
 800dd90:	4601      	mov	r1, r0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4648      	mov	r0, r9
 800dd96:	f000 fcf7 	bl	800e788 <__mcmp>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	f77f aeb3 	ble.w	800db06 <_dtoa_r+0x68e>
 800dda0:	4656      	mov	r6, sl
 800dda2:	2331      	movs	r3, #49	@ 0x31
 800dda4:	f806 3b01 	strb.w	r3, [r6], #1
 800dda8:	9b04      	ldr	r3, [sp, #16]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	9304      	str	r3, [sp, #16]
 800ddae:	e6ae      	b.n	800db0e <_dtoa_r+0x696>
 800ddb0:	9c07      	ldr	r4, [sp, #28]
 800ddb2:	9704      	str	r7, [sp, #16]
 800ddb4:	4625      	mov	r5, r4
 800ddb6:	e7f3      	b.n	800dda0 <_dtoa_r+0x928>
 800ddb8:	9b07      	ldr	r3, [sp, #28]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 8104 	beq.w	800dfcc <_dtoa_r+0xb54>
 800ddc4:	2e00      	cmp	r6, #0
 800ddc6:	dd05      	ble.n	800ddd4 <_dtoa_r+0x95c>
 800ddc8:	4629      	mov	r1, r5
 800ddca:	4632      	mov	r2, r6
 800ddcc:	4658      	mov	r0, fp
 800ddce:	f000 fc6f 	bl	800e6b0 <__lshift>
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d05a      	beq.n	800de90 <_dtoa_r+0xa18>
 800ddda:	6869      	ldr	r1, [r5, #4]
 800dddc:	4658      	mov	r0, fp
 800ddde:	f000 fa0f 	bl	800e200 <_Balloc>
 800dde2:	4606      	mov	r6, r0
 800dde4:	b928      	cbnz	r0, 800ddf2 <_dtoa_r+0x97a>
 800dde6:	4b84      	ldr	r3, [pc, #528]	@ (800dff8 <_dtoa_r+0xb80>)
 800dde8:	4602      	mov	r2, r0
 800ddea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddee:	f7ff bb5a 	b.w	800d4a6 <_dtoa_r+0x2e>
 800ddf2:	692a      	ldr	r2, [r5, #16]
 800ddf4:	3202      	adds	r2, #2
 800ddf6:	0092      	lsls	r2, r2, #2
 800ddf8:	f105 010c 	add.w	r1, r5, #12
 800ddfc:	300c      	adds	r0, #12
 800ddfe:	f7ff fa9d 	bl	800d33c <memcpy>
 800de02:	2201      	movs	r2, #1
 800de04:	4631      	mov	r1, r6
 800de06:	4658      	mov	r0, fp
 800de08:	f000 fc52 	bl	800e6b0 <__lshift>
 800de0c:	f10a 0301 	add.w	r3, sl, #1
 800de10:	9307      	str	r3, [sp, #28]
 800de12:	9b00      	ldr	r3, [sp, #0]
 800de14:	4453      	add	r3, sl
 800de16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de18:	9b02      	ldr	r3, [sp, #8]
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	462f      	mov	r7, r5
 800de20:	930a      	str	r3, [sp, #40]	@ 0x28
 800de22:	4605      	mov	r5, r0
 800de24:	9b07      	ldr	r3, [sp, #28]
 800de26:	4621      	mov	r1, r4
 800de28:	3b01      	subs	r3, #1
 800de2a:	4648      	mov	r0, r9
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	f7ff fa99 	bl	800d364 <quorem>
 800de32:	4639      	mov	r1, r7
 800de34:	9002      	str	r0, [sp, #8]
 800de36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de3a:	4648      	mov	r0, r9
 800de3c:	f000 fca4 	bl	800e788 <__mcmp>
 800de40:	462a      	mov	r2, r5
 800de42:	9008      	str	r0, [sp, #32]
 800de44:	4621      	mov	r1, r4
 800de46:	4658      	mov	r0, fp
 800de48:	f000 fcba 	bl	800e7c0 <__mdiff>
 800de4c:	68c2      	ldr	r2, [r0, #12]
 800de4e:	4606      	mov	r6, r0
 800de50:	bb02      	cbnz	r2, 800de94 <_dtoa_r+0xa1c>
 800de52:	4601      	mov	r1, r0
 800de54:	4648      	mov	r0, r9
 800de56:	f000 fc97 	bl	800e788 <__mcmp>
 800de5a:	4602      	mov	r2, r0
 800de5c:	4631      	mov	r1, r6
 800de5e:	4658      	mov	r0, fp
 800de60:	920e      	str	r2, [sp, #56]	@ 0x38
 800de62:	f000 fa0d 	bl	800e280 <_Bfree>
 800de66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de6a:	9e07      	ldr	r6, [sp, #28]
 800de6c:	ea43 0102 	orr.w	r1, r3, r2
 800de70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de72:	4319      	orrs	r1, r3
 800de74:	d110      	bne.n	800de98 <_dtoa_r+0xa20>
 800de76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de7a:	d029      	beq.n	800ded0 <_dtoa_r+0xa58>
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	dd02      	ble.n	800de88 <_dtoa_r+0xa10>
 800de82:	9b02      	ldr	r3, [sp, #8]
 800de84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de88:	9b00      	ldr	r3, [sp, #0]
 800de8a:	f883 8000 	strb.w	r8, [r3]
 800de8e:	e63f      	b.n	800db10 <_dtoa_r+0x698>
 800de90:	4628      	mov	r0, r5
 800de92:	e7bb      	b.n	800de0c <_dtoa_r+0x994>
 800de94:	2201      	movs	r2, #1
 800de96:	e7e1      	b.n	800de5c <_dtoa_r+0x9e4>
 800de98:	9b08      	ldr	r3, [sp, #32]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	db04      	blt.n	800dea8 <_dtoa_r+0xa30>
 800de9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dea0:	430b      	orrs	r3, r1
 800dea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dea4:	430b      	orrs	r3, r1
 800dea6:	d120      	bne.n	800deea <_dtoa_r+0xa72>
 800dea8:	2a00      	cmp	r2, #0
 800deaa:	dded      	ble.n	800de88 <_dtoa_r+0xa10>
 800deac:	4649      	mov	r1, r9
 800deae:	2201      	movs	r2, #1
 800deb0:	4658      	mov	r0, fp
 800deb2:	f000 fbfd 	bl	800e6b0 <__lshift>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4681      	mov	r9, r0
 800deba:	f000 fc65 	bl	800e788 <__mcmp>
 800debe:	2800      	cmp	r0, #0
 800dec0:	dc03      	bgt.n	800deca <_dtoa_r+0xa52>
 800dec2:	d1e1      	bne.n	800de88 <_dtoa_r+0xa10>
 800dec4:	f018 0f01 	tst.w	r8, #1
 800dec8:	d0de      	beq.n	800de88 <_dtoa_r+0xa10>
 800deca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dece:	d1d8      	bne.n	800de82 <_dtoa_r+0xa0a>
 800ded0:	9a00      	ldr	r2, [sp, #0]
 800ded2:	2339      	movs	r3, #57	@ 0x39
 800ded4:	7013      	strb	r3, [r2, #0]
 800ded6:	4633      	mov	r3, r6
 800ded8:	461e      	mov	r6, r3
 800deda:	3b01      	subs	r3, #1
 800dedc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dee0:	2a39      	cmp	r2, #57	@ 0x39
 800dee2:	d052      	beq.n	800df8a <_dtoa_r+0xb12>
 800dee4:	3201      	adds	r2, #1
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	e612      	b.n	800db10 <_dtoa_r+0x698>
 800deea:	2a00      	cmp	r2, #0
 800deec:	dd07      	ble.n	800defe <_dtoa_r+0xa86>
 800deee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800def2:	d0ed      	beq.n	800ded0 <_dtoa_r+0xa58>
 800def4:	9a00      	ldr	r2, [sp, #0]
 800def6:	f108 0301 	add.w	r3, r8, #1
 800defa:	7013      	strb	r3, [r2, #0]
 800defc:	e608      	b.n	800db10 <_dtoa_r+0x698>
 800defe:	9b07      	ldr	r3, [sp, #28]
 800df00:	9a07      	ldr	r2, [sp, #28]
 800df02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df08:	4293      	cmp	r3, r2
 800df0a:	d028      	beq.n	800df5e <_dtoa_r+0xae6>
 800df0c:	4649      	mov	r1, r9
 800df0e:	2300      	movs	r3, #0
 800df10:	220a      	movs	r2, #10
 800df12:	4658      	mov	r0, fp
 800df14:	f000 f9d6 	bl	800e2c4 <__multadd>
 800df18:	42af      	cmp	r7, r5
 800df1a:	4681      	mov	r9, r0
 800df1c:	f04f 0300 	mov.w	r3, #0
 800df20:	f04f 020a 	mov.w	r2, #10
 800df24:	4639      	mov	r1, r7
 800df26:	4658      	mov	r0, fp
 800df28:	d107      	bne.n	800df3a <_dtoa_r+0xac2>
 800df2a:	f000 f9cb 	bl	800e2c4 <__multadd>
 800df2e:	4607      	mov	r7, r0
 800df30:	4605      	mov	r5, r0
 800df32:	9b07      	ldr	r3, [sp, #28]
 800df34:	3301      	adds	r3, #1
 800df36:	9307      	str	r3, [sp, #28]
 800df38:	e774      	b.n	800de24 <_dtoa_r+0x9ac>
 800df3a:	f000 f9c3 	bl	800e2c4 <__multadd>
 800df3e:	4629      	mov	r1, r5
 800df40:	4607      	mov	r7, r0
 800df42:	2300      	movs	r3, #0
 800df44:	220a      	movs	r2, #10
 800df46:	4658      	mov	r0, fp
 800df48:	f000 f9bc 	bl	800e2c4 <__multadd>
 800df4c:	4605      	mov	r5, r0
 800df4e:	e7f0      	b.n	800df32 <_dtoa_r+0xaba>
 800df50:	9b00      	ldr	r3, [sp, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	bfcc      	ite	gt
 800df56:	461e      	movgt	r6, r3
 800df58:	2601      	movle	r6, #1
 800df5a:	4456      	add	r6, sl
 800df5c:	2700      	movs	r7, #0
 800df5e:	4649      	mov	r1, r9
 800df60:	2201      	movs	r2, #1
 800df62:	4658      	mov	r0, fp
 800df64:	f000 fba4 	bl	800e6b0 <__lshift>
 800df68:	4621      	mov	r1, r4
 800df6a:	4681      	mov	r9, r0
 800df6c:	f000 fc0c 	bl	800e788 <__mcmp>
 800df70:	2800      	cmp	r0, #0
 800df72:	dcb0      	bgt.n	800ded6 <_dtoa_r+0xa5e>
 800df74:	d102      	bne.n	800df7c <_dtoa_r+0xb04>
 800df76:	f018 0f01 	tst.w	r8, #1
 800df7a:	d1ac      	bne.n	800ded6 <_dtoa_r+0xa5e>
 800df7c:	4633      	mov	r3, r6
 800df7e:	461e      	mov	r6, r3
 800df80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df84:	2a30      	cmp	r2, #48	@ 0x30
 800df86:	d0fa      	beq.n	800df7e <_dtoa_r+0xb06>
 800df88:	e5c2      	b.n	800db10 <_dtoa_r+0x698>
 800df8a:	459a      	cmp	sl, r3
 800df8c:	d1a4      	bne.n	800ded8 <_dtoa_r+0xa60>
 800df8e:	9b04      	ldr	r3, [sp, #16]
 800df90:	3301      	adds	r3, #1
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	2331      	movs	r3, #49	@ 0x31
 800df96:	f88a 3000 	strb.w	r3, [sl]
 800df9a:	e5b9      	b.n	800db10 <_dtoa_r+0x698>
 800df9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dffc <_dtoa_r+0xb84>
 800dfa2:	b11b      	cbz	r3, 800dfac <_dtoa_r+0xb34>
 800dfa4:	f10a 0308 	add.w	r3, sl, #8
 800dfa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfaa:	6013      	str	r3, [r2, #0]
 800dfac:	4650      	mov	r0, sl
 800dfae:	b019      	add	sp, #100	@ 0x64
 800dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	f77f ae37 	ble.w	800dc2a <_dtoa_r+0x7b2>
 800dfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfc0:	2001      	movs	r0, #1
 800dfc2:	e655      	b.n	800dc70 <_dtoa_r+0x7f8>
 800dfc4:	9b00      	ldr	r3, [sp, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f77f aed6 	ble.w	800dd78 <_dtoa_r+0x900>
 800dfcc:	4656      	mov	r6, sl
 800dfce:	4621      	mov	r1, r4
 800dfd0:	4648      	mov	r0, r9
 800dfd2:	f7ff f9c7 	bl	800d364 <quorem>
 800dfd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfda:	f806 8b01 	strb.w	r8, [r6], #1
 800dfde:	9b00      	ldr	r3, [sp, #0]
 800dfe0:	eba6 020a 	sub.w	r2, r6, sl
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	ddb3      	ble.n	800df50 <_dtoa_r+0xad8>
 800dfe8:	4649      	mov	r1, r9
 800dfea:	2300      	movs	r3, #0
 800dfec:	220a      	movs	r2, #10
 800dfee:	4658      	mov	r0, fp
 800dff0:	f000 f968 	bl	800e2c4 <__multadd>
 800dff4:	4681      	mov	r9, r0
 800dff6:	e7ea      	b.n	800dfce <_dtoa_r+0xb56>
 800dff8:	08014d1b 	.word	0x08014d1b
 800dffc:	08014c9f 	.word	0x08014c9f

0800e000 <_free_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	2900      	cmp	r1, #0
 800e006:	d041      	beq.n	800e08c <_free_r+0x8c>
 800e008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e00c:	1f0c      	subs	r4, r1, #4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	bfb8      	it	lt
 800e012:	18e4      	addlt	r4, r4, r3
 800e014:	f000 f8e8 	bl	800e1e8 <__malloc_lock>
 800e018:	4a1d      	ldr	r2, [pc, #116]	@ (800e090 <_free_r+0x90>)
 800e01a:	6813      	ldr	r3, [r2, #0]
 800e01c:	b933      	cbnz	r3, 800e02c <_free_r+0x2c>
 800e01e:	6063      	str	r3, [r4, #4]
 800e020:	6014      	str	r4, [r2, #0]
 800e022:	4628      	mov	r0, r5
 800e024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e028:	f000 b8e4 	b.w	800e1f4 <__malloc_unlock>
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d908      	bls.n	800e042 <_free_r+0x42>
 800e030:	6820      	ldr	r0, [r4, #0]
 800e032:	1821      	adds	r1, r4, r0
 800e034:	428b      	cmp	r3, r1
 800e036:	bf01      	itttt	eq
 800e038:	6819      	ldreq	r1, [r3, #0]
 800e03a:	685b      	ldreq	r3, [r3, #4]
 800e03c:	1809      	addeq	r1, r1, r0
 800e03e:	6021      	streq	r1, [r4, #0]
 800e040:	e7ed      	b.n	800e01e <_free_r+0x1e>
 800e042:	461a      	mov	r2, r3
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	b10b      	cbz	r3, 800e04c <_free_r+0x4c>
 800e048:	42a3      	cmp	r3, r4
 800e04a:	d9fa      	bls.n	800e042 <_free_r+0x42>
 800e04c:	6811      	ldr	r1, [r2, #0]
 800e04e:	1850      	adds	r0, r2, r1
 800e050:	42a0      	cmp	r0, r4
 800e052:	d10b      	bne.n	800e06c <_free_r+0x6c>
 800e054:	6820      	ldr	r0, [r4, #0]
 800e056:	4401      	add	r1, r0
 800e058:	1850      	adds	r0, r2, r1
 800e05a:	4283      	cmp	r3, r0
 800e05c:	6011      	str	r1, [r2, #0]
 800e05e:	d1e0      	bne.n	800e022 <_free_r+0x22>
 800e060:	6818      	ldr	r0, [r3, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	6053      	str	r3, [r2, #4]
 800e066:	4408      	add	r0, r1
 800e068:	6010      	str	r0, [r2, #0]
 800e06a:	e7da      	b.n	800e022 <_free_r+0x22>
 800e06c:	d902      	bls.n	800e074 <_free_r+0x74>
 800e06e:	230c      	movs	r3, #12
 800e070:	602b      	str	r3, [r5, #0]
 800e072:	e7d6      	b.n	800e022 <_free_r+0x22>
 800e074:	6820      	ldr	r0, [r4, #0]
 800e076:	1821      	adds	r1, r4, r0
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf04      	itt	eq
 800e07c:	6819      	ldreq	r1, [r3, #0]
 800e07e:	685b      	ldreq	r3, [r3, #4]
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	bf04      	itt	eq
 800e084:	1809      	addeq	r1, r1, r0
 800e086:	6021      	streq	r1, [r4, #0]
 800e088:	6054      	str	r4, [r2, #4]
 800e08a:	e7ca      	b.n	800e022 <_free_r+0x22>
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	bf00      	nop
 800e090:	20001a8c 	.word	0x20001a8c

0800e094 <malloc>:
 800e094:	4b02      	ldr	r3, [pc, #8]	@ (800e0a0 <malloc+0xc>)
 800e096:	4601      	mov	r1, r0
 800e098:	6818      	ldr	r0, [r3, #0]
 800e09a:	f000 b825 	b.w	800e0e8 <_malloc_r>
 800e09e:	bf00      	nop
 800e0a0:	20000078 	.word	0x20000078

0800e0a4 <sbrk_aligned>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	4e0f      	ldr	r6, [pc, #60]	@ (800e0e4 <sbrk_aligned+0x40>)
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	6831      	ldr	r1, [r6, #0]
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	b911      	cbnz	r1, 800e0b6 <sbrk_aligned+0x12>
 800e0b0:	f001 ffb8 	bl	8010024 <_sbrk_r>
 800e0b4:	6030      	str	r0, [r6, #0]
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f001 ffb3 	bl	8010024 <_sbrk_r>
 800e0be:	1c43      	adds	r3, r0, #1
 800e0c0:	d103      	bne.n	800e0ca <sbrk_aligned+0x26>
 800e0c2:	f04f 34ff 	mov.w	r4, #4294967295
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	1cc4      	adds	r4, r0, #3
 800e0cc:	f024 0403 	bic.w	r4, r4, #3
 800e0d0:	42a0      	cmp	r0, r4
 800e0d2:	d0f8      	beq.n	800e0c6 <sbrk_aligned+0x22>
 800e0d4:	1a21      	subs	r1, r4, r0
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f001 ffa4 	bl	8010024 <_sbrk_r>
 800e0dc:	3001      	adds	r0, #1
 800e0de:	d1f2      	bne.n	800e0c6 <sbrk_aligned+0x22>
 800e0e0:	e7ef      	b.n	800e0c2 <sbrk_aligned+0x1e>
 800e0e2:	bf00      	nop
 800e0e4:	20001a88 	.word	0x20001a88

0800e0e8 <_malloc_r>:
 800e0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0ec:	1ccd      	adds	r5, r1, #3
 800e0ee:	f025 0503 	bic.w	r5, r5, #3
 800e0f2:	3508      	adds	r5, #8
 800e0f4:	2d0c      	cmp	r5, #12
 800e0f6:	bf38      	it	cc
 800e0f8:	250c      	movcc	r5, #12
 800e0fa:	2d00      	cmp	r5, #0
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	db01      	blt.n	800e104 <_malloc_r+0x1c>
 800e100:	42a9      	cmp	r1, r5
 800e102:	d904      	bls.n	800e10e <_malloc_r+0x26>
 800e104:	230c      	movs	r3, #12
 800e106:	6033      	str	r3, [r6, #0]
 800e108:	2000      	movs	r0, #0
 800e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1e4 <_malloc_r+0xfc>
 800e112:	f000 f869 	bl	800e1e8 <__malloc_lock>
 800e116:	f8d8 3000 	ldr.w	r3, [r8]
 800e11a:	461c      	mov	r4, r3
 800e11c:	bb44      	cbnz	r4, 800e170 <_malloc_r+0x88>
 800e11e:	4629      	mov	r1, r5
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff ffbf 	bl	800e0a4 <sbrk_aligned>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	4604      	mov	r4, r0
 800e12a:	d158      	bne.n	800e1de <_malloc_r+0xf6>
 800e12c:	f8d8 4000 	ldr.w	r4, [r8]
 800e130:	4627      	mov	r7, r4
 800e132:	2f00      	cmp	r7, #0
 800e134:	d143      	bne.n	800e1be <_malloc_r+0xd6>
 800e136:	2c00      	cmp	r4, #0
 800e138:	d04b      	beq.n	800e1d2 <_malloc_r+0xea>
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	4639      	mov	r1, r7
 800e13e:	4630      	mov	r0, r6
 800e140:	eb04 0903 	add.w	r9, r4, r3
 800e144:	f001 ff6e 	bl	8010024 <_sbrk_r>
 800e148:	4581      	cmp	r9, r0
 800e14a:	d142      	bne.n	800e1d2 <_malloc_r+0xea>
 800e14c:	6821      	ldr	r1, [r4, #0]
 800e14e:	1a6d      	subs	r5, r5, r1
 800e150:	4629      	mov	r1, r5
 800e152:	4630      	mov	r0, r6
 800e154:	f7ff ffa6 	bl	800e0a4 <sbrk_aligned>
 800e158:	3001      	adds	r0, #1
 800e15a:	d03a      	beq.n	800e1d2 <_malloc_r+0xea>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	442b      	add	r3, r5
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	f8d8 3000 	ldr.w	r3, [r8]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	bb62      	cbnz	r2, 800e1c4 <_malloc_r+0xdc>
 800e16a:	f8c8 7000 	str.w	r7, [r8]
 800e16e:	e00f      	b.n	800e190 <_malloc_r+0xa8>
 800e170:	6822      	ldr	r2, [r4, #0]
 800e172:	1b52      	subs	r2, r2, r5
 800e174:	d420      	bmi.n	800e1b8 <_malloc_r+0xd0>
 800e176:	2a0b      	cmp	r2, #11
 800e178:	d917      	bls.n	800e1aa <_malloc_r+0xc2>
 800e17a:	1961      	adds	r1, r4, r5
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	6025      	str	r5, [r4, #0]
 800e180:	bf18      	it	ne
 800e182:	6059      	strne	r1, [r3, #4]
 800e184:	6863      	ldr	r3, [r4, #4]
 800e186:	bf08      	it	eq
 800e188:	f8c8 1000 	streq.w	r1, [r8]
 800e18c:	5162      	str	r2, [r4, r5]
 800e18e:	604b      	str	r3, [r1, #4]
 800e190:	4630      	mov	r0, r6
 800e192:	f000 f82f 	bl	800e1f4 <__malloc_unlock>
 800e196:	f104 000b 	add.w	r0, r4, #11
 800e19a:	1d23      	adds	r3, r4, #4
 800e19c:	f020 0007 	bic.w	r0, r0, #7
 800e1a0:	1ac2      	subs	r2, r0, r3
 800e1a2:	bf1c      	itt	ne
 800e1a4:	1a1b      	subne	r3, r3, r0
 800e1a6:	50a3      	strne	r3, [r4, r2]
 800e1a8:	e7af      	b.n	800e10a <_malloc_r+0x22>
 800e1aa:	6862      	ldr	r2, [r4, #4]
 800e1ac:	42a3      	cmp	r3, r4
 800e1ae:	bf0c      	ite	eq
 800e1b0:	f8c8 2000 	streq.w	r2, [r8]
 800e1b4:	605a      	strne	r2, [r3, #4]
 800e1b6:	e7eb      	b.n	800e190 <_malloc_r+0xa8>
 800e1b8:	4623      	mov	r3, r4
 800e1ba:	6864      	ldr	r4, [r4, #4]
 800e1bc:	e7ae      	b.n	800e11c <_malloc_r+0x34>
 800e1be:	463c      	mov	r4, r7
 800e1c0:	687f      	ldr	r7, [r7, #4]
 800e1c2:	e7b6      	b.n	800e132 <_malloc_r+0x4a>
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d1fb      	bne.n	800e1c4 <_malloc_r+0xdc>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	6053      	str	r3, [r2, #4]
 800e1d0:	e7de      	b.n	800e190 <_malloc_r+0xa8>
 800e1d2:	230c      	movs	r3, #12
 800e1d4:	6033      	str	r3, [r6, #0]
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f000 f80c 	bl	800e1f4 <__malloc_unlock>
 800e1dc:	e794      	b.n	800e108 <_malloc_r+0x20>
 800e1de:	6005      	str	r5, [r0, #0]
 800e1e0:	e7d6      	b.n	800e190 <_malloc_r+0xa8>
 800e1e2:	bf00      	nop
 800e1e4:	20001a8c 	.word	0x20001a8c

0800e1e8 <__malloc_lock>:
 800e1e8:	4801      	ldr	r0, [pc, #4]	@ (800e1f0 <__malloc_lock+0x8>)
 800e1ea:	f7ff b8a0 	b.w	800d32e <__retarget_lock_acquire_recursive>
 800e1ee:	bf00      	nop
 800e1f0:	20001a84 	.word	0x20001a84

0800e1f4 <__malloc_unlock>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	@ (800e1fc <__malloc_unlock+0x8>)
 800e1f6:	f7ff b89b 	b.w	800d330 <__retarget_lock_release_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	20001a84 	.word	0x20001a84

0800e200 <_Balloc>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	69c6      	ldr	r6, [r0, #28]
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	b976      	cbnz	r6, 800e228 <_Balloc+0x28>
 800e20a:	2010      	movs	r0, #16
 800e20c:	f7ff ff42 	bl	800e094 <malloc>
 800e210:	4602      	mov	r2, r0
 800e212:	61e0      	str	r0, [r4, #28]
 800e214:	b920      	cbnz	r0, 800e220 <_Balloc+0x20>
 800e216:	4b18      	ldr	r3, [pc, #96]	@ (800e278 <_Balloc+0x78>)
 800e218:	4818      	ldr	r0, [pc, #96]	@ (800e27c <_Balloc+0x7c>)
 800e21a:	216b      	movs	r1, #107	@ 0x6b
 800e21c:	f001 ff1c 	bl	8010058 <__assert_func>
 800e220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e224:	6006      	str	r6, [r0, #0]
 800e226:	60c6      	str	r6, [r0, #12]
 800e228:	69e6      	ldr	r6, [r4, #28]
 800e22a:	68f3      	ldr	r3, [r6, #12]
 800e22c:	b183      	cbz	r3, 800e250 <_Balloc+0x50>
 800e22e:	69e3      	ldr	r3, [r4, #28]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e236:	b9b8      	cbnz	r0, 800e268 <_Balloc+0x68>
 800e238:	2101      	movs	r1, #1
 800e23a:	fa01 f605 	lsl.w	r6, r1, r5
 800e23e:	1d72      	adds	r2, r6, #5
 800e240:	0092      	lsls	r2, r2, #2
 800e242:	4620      	mov	r0, r4
 800e244:	f001 ff26 	bl	8010094 <_calloc_r>
 800e248:	b160      	cbz	r0, 800e264 <_Balloc+0x64>
 800e24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e24e:	e00e      	b.n	800e26e <_Balloc+0x6e>
 800e250:	2221      	movs	r2, #33	@ 0x21
 800e252:	2104      	movs	r1, #4
 800e254:	4620      	mov	r0, r4
 800e256:	f001 ff1d 	bl	8010094 <_calloc_r>
 800e25a:	69e3      	ldr	r3, [r4, #28]
 800e25c:	60f0      	str	r0, [r6, #12]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1e4      	bne.n	800e22e <_Balloc+0x2e>
 800e264:	2000      	movs	r0, #0
 800e266:	bd70      	pop	{r4, r5, r6, pc}
 800e268:	6802      	ldr	r2, [r0, #0]
 800e26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e26e:	2300      	movs	r3, #0
 800e270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e274:	e7f7      	b.n	800e266 <_Balloc+0x66>
 800e276:	bf00      	nop
 800e278:	08014cac 	.word	0x08014cac
 800e27c:	08014d2c 	.word	0x08014d2c

0800e280 <_Bfree>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	69c6      	ldr	r6, [r0, #28]
 800e284:	4605      	mov	r5, r0
 800e286:	460c      	mov	r4, r1
 800e288:	b976      	cbnz	r6, 800e2a8 <_Bfree+0x28>
 800e28a:	2010      	movs	r0, #16
 800e28c:	f7ff ff02 	bl	800e094 <malloc>
 800e290:	4602      	mov	r2, r0
 800e292:	61e8      	str	r0, [r5, #28]
 800e294:	b920      	cbnz	r0, 800e2a0 <_Bfree+0x20>
 800e296:	4b09      	ldr	r3, [pc, #36]	@ (800e2bc <_Bfree+0x3c>)
 800e298:	4809      	ldr	r0, [pc, #36]	@ (800e2c0 <_Bfree+0x40>)
 800e29a:	218f      	movs	r1, #143	@ 0x8f
 800e29c:	f001 fedc 	bl	8010058 <__assert_func>
 800e2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2a4:	6006      	str	r6, [r0, #0]
 800e2a6:	60c6      	str	r6, [r0, #12]
 800e2a8:	b13c      	cbz	r4, 800e2ba <_Bfree+0x3a>
 800e2aa:	69eb      	ldr	r3, [r5, #28]
 800e2ac:	6862      	ldr	r2, [r4, #4]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2b4:	6021      	str	r1, [r4, #0]
 800e2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	08014cac 	.word	0x08014cac
 800e2c0:	08014d2c 	.word	0x08014d2c

0800e2c4 <__multadd>:
 800e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c8:	690d      	ldr	r5, [r1, #16]
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	461e      	mov	r6, r3
 800e2d0:	f101 0c14 	add.w	ip, r1, #20
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800e2da:	b299      	uxth	r1, r3
 800e2dc:	fb02 6101 	mla	r1, r2, r1, r6
 800e2e0:	0c1e      	lsrs	r6, r3, #16
 800e2e2:	0c0b      	lsrs	r3, r1, #16
 800e2e4:	fb02 3306 	mla	r3, r2, r6, r3
 800e2e8:	b289      	uxth	r1, r1
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2f0:	4285      	cmp	r5, r0
 800e2f2:	f84c 1b04 	str.w	r1, [ip], #4
 800e2f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2fa:	dcec      	bgt.n	800e2d6 <__multadd+0x12>
 800e2fc:	b30e      	cbz	r6, 800e342 <__multadd+0x7e>
 800e2fe:	68a3      	ldr	r3, [r4, #8]
 800e300:	42ab      	cmp	r3, r5
 800e302:	dc19      	bgt.n	800e338 <__multadd+0x74>
 800e304:	6861      	ldr	r1, [r4, #4]
 800e306:	4638      	mov	r0, r7
 800e308:	3101      	adds	r1, #1
 800e30a:	f7ff ff79 	bl	800e200 <_Balloc>
 800e30e:	4680      	mov	r8, r0
 800e310:	b928      	cbnz	r0, 800e31e <__multadd+0x5a>
 800e312:	4602      	mov	r2, r0
 800e314:	4b0c      	ldr	r3, [pc, #48]	@ (800e348 <__multadd+0x84>)
 800e316:	480d      	ldr	r0, [pc, #52]	@ (800e34c <__multadd+0x88>)
 800e318:	21ba      	movs	r1, #186	@ 0xba
 800e31a:	f001 fe9d 	bl	8010058 <__assert_func>
 800e31e:	6922      	ldr	r2, [r4, #16]
 800e320:	3202      	adds	r2, #2
 800e322:	f104 010c 	add.w	r1, r4, #12
 800e326:	0092      	lsls	r2, r2, #2
 800e328:	300c      	adds	r0, #12
 800e32a:	f7ff f807 	bl	800d33c <memcpy>
 800e32e:	4621      	mov	r1, r4
 800e330:	4638      	mov	r0, r7
 800e332:	f7ff ffa5 	bl	800e280 <_Bfree>
 800e336:	4644      	mov	r4, r8
 800e338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e33c:	3501      	adds	r5, #1
 800e33e:	615e      	str	r6, [r3, #20]
 800e340:	6125      	str	r5, [r4, #16]
 800e342:	4620      	mov	r0, r4
 800e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e348:	08014d1b 	.word	0x08014d1b
 800e34c:	08014d2c 	.word	0x08014d2c

0800e350 <__s2b>:
 800e350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e354:	460c      	mov	r4, r1
 800e356:	4615      	mov	r5, r2
 800e358:	461f      	mov	r7, r3
 800e35a:	2209      	movs	r2, #9
 800e35c:	3308      	adds	r3, #8
 800e35e:	4606      	mov	r6, r0
 800e360:	fb93 f3f2 	sdiv	r3, r3, r2
 800e364:	2100      	movs	r1, #0
 800e366:	2201      	movs	r2, #1
 800e368:	429a      	cmp	r2, r3
 800e36a:	db09      	blt.n	800e380 <__s2b+0x30>
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff ff47 	bl	800e200 <_Balloc>
 800e372:	b940      	cbnz	r0, 800e386 <__s2b+0x36>
 800e374:	4602      	mov	r2, r0
 800e376:	4b19      	ldr	r3, [pc, #100]	@ (800e3dc <__s2b+0x8c>)
 800e378:	4819      	ldr	r0, [pc, #100]	@ (800e3e0 <__s2b+0x90>)
 800e37a:	21d3      	movs	r1, #211	@ 0xd3
 800e37c:	f001 fe6c 	bl	8010058 <__assert_func>
 800e380:	0052      	lsls	r2, r2, #1
 800e382:	3101      	adds	r1, #1
 800e384:	e7f0      	b.n	800e368 <__s2b+0x18>
 800e386:	9b08      	ldr	r3, [sp, #32]
 800e388:	6143      	str	r3, [r0, #20]
 800e38a:	2d09      	cmp	r5, #9
 800e38c:	f04f 0301 	mov.w	r3, #1
 800e390:	6103      	str	r3, [r0, #16]
 800e392:	dd16      	ble.n	800e3c2 <__s2b+0x72>
 800e394:	f104 0909 	add.w	r9, r4, #9
 800e398:	46c8      	mov	r8, r9
 800e39a:	442c      	add	r4, r5
 800e39c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	3b30      	subs	r3, #48	@ 0x30
 800e3a4:	220a      	movs	r2, #10
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7ff ff8c 	bl	800e2c4 <__multadd>
 800e3ac:	45a0      	cmp	r8, r4
 800e3ae:	d1f5      	bne.n	800e39c <__s2b+0x4c>
 800e3b0:	f1a5 0408 	sub.w	r4, r5, #8
 800e3b4:	444c      	add	r4, r9
 800e3b6:	1b2d      	subs	r5, r5, r4
 800e3b8:	1963      	adds	r3, r4, r5
 800e3ba:	42bb      	cmp	r3, r7
 800e3bc:	db04      	blt.n	800e3c8 <__s2b+0x78>
 800e3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c2:	340a      	adds	r4, #10
 800e3c4:	2509      	movs	r5, #9
 800e3c6:	e7f6      	b.n	800e3b6 <__s2b+0x66>
 800e3c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3cc:	4601      	mov	r1, r0
 800e3ce:	3b30      	subs	r3, #48	@ 0x30
 800e3d0:	220a      	movs	r2, #10
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7ff ff76 	bl	800e2c4 <__multadd>
 800e3d8:	e7ee      	b.n	800e3b8 <__s2b+0x68>
 800e3da:	bf00      	nop
 800e3dc:	08014d1b 	.word	0x08014d1b
 800e3e0:	08014d2c 	.word	0x08014d2c

0800e3e4 <__hi0bits>:
 800e3e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	bf36      	itet	cc
 800e3ec:	0403      	lslcc	r3, r0, #16
 800e3ee:	2000      	movcs	r0, #0
 800e3f0:	2010      	movcc	r0, #16
 800e3f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3f6:	bf3c      	itt	cc
 800e3f8:	021b      	lslcc	r3, r3, #8
 800e3fa:	3008      	addcc	r0, #8
 800e3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e400:	bf3c      	itt	cc
 800e402:	011b      	lslcc	r3, r3, #4
 800e404:	3004      	addcc	r0, #4
 800e406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e40a:	bf3c      	itt	cc
 800e40c:	009b      	lslcc	r3, r3, #2
 800e40e:	3002      	addcc	r0, #2
 800e410:	2b00      	cmp	r3, #0
 800e412:	db05      	blt.n	800e420 <__hi0bits+0x3c>
 800e414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e418:	f100 0001 	add.w	r0, r0, #1
 800e41c:	bf08      	it	eq
 800e41e:	2020      	moveq	r0, #32
 800e420:	4770      	bx	lr

0800e422 <__lo0bits>:
 800e422:	6803      	ldr	r3, [r0, #0]
 800e424:	4602      	mov	r2, r0
 800e426:	f013 0007 	ands.w	r0, r3, #7
 800e42a:	d00b      	beq.n	800e444 <__lo0bits+0x22>
 800e42c:	07d9      	lsls	r1, r3, #31
 800e42e:	d421      	bmi.n	800e474 <__lo0bits+0x52>
 800e430:	0798      	lsls	r0, r3, #30
 800e432:	bf49      	itett	mi
 800e434:	085b      	lsrmi	r3, r3, #1
 800e436:	089b      	lsrpl	r3, r3, #2
 800e438:	2001      	movmi	r0, #1
 800e43a:	6013      	strmi	r3, [r2, #0]
 800e43c:	bf5c      	itt	pl
 800e43e:	6013      	strpl	r3, [r2, #0]
 800e440:	2002      	movpl	r0, #2
 800e442:	4770      	bx	lr
 800e444:	b299      	uxth	r1, r3
 800e446:	b909      	cbnz	r1, 800e44c <__lo0bits+0x2a>
 800e448:	0c1b      	lsrs	r3, r3, #16
 800e44a:	2010      	movs	r0, #16
 800e44c:	b2d9      	uxtb	r1, r3
 800e44e:	b909      	cbnz	r1, 800e454 <__lo0bits+0x32>
 800e450:	3008      	adds	r0, #8
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	0719      	lsls	r1, r3, #28
 800e456:	bf04      	itt	eq
 800e458:	091b      	lsreq	r3, r3, #4
 800e45a:	3004      	addeq	r0, #4
 800e45c:	0799      	lsls	r1, r3, #30
 800e45e:	bf04      	itt	eq
 800e460:	089b      	lsreq	r3, r3, #2
 800e462:	3002      	addeq	r0, #2
 800e464:	07d9      	lsls	r1, r3, #31
 800e466:	d403      	bmi.n	800e470 <__lo0bits+0x4e>
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	f100 0001 	add.w	r0, r0, #1
 800e46e:	d003      	beq.n	800e478 <__lo0bits+0x56>
 800e470:	6013      	str	r3, [r2, #0]
 800e472:	4770      	bx	lr
 800e474:	2000      	movs	r0, #0
 800e476:	4770      	bx	lr
 800e478:	2020      	movs	r0, #32
 800e47a:	4770      	bx	lr

0800e47c <__i2b>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	460c      	mov	r4, r1
 800e480:	2101      	movs	r1, #1
 800e482:	f7ff febd 	bl	800e200 <_Balloc>
 800e486:	4602      	mov	r2, r0
 800e488:	b928      	cbnz	r0, 800e496 <__i2b+0x1a>
 800e48a:	4b05      	ldr	r3, [pc, #20]	@ (800e4a0 <__i2b+0x24>)
 800e48c:	4805      	ldr	r0, [pc, #20]	@ (800e4a4 <__i2b+0x28>)
 800e48e:	f240 1145 	movw	r1, #325	@ 0x145
 800e492:	f001 fde1 	bl	8010058 <__assert_func>
 800e496:	2301      	movs	r3, #1
 800e498:	6144      	str	r4, [r0, #20]
 800e49a:	6103      	str	r3, [r0, #16]
 800e49c:	bd10      	pop	{r4, pc}
 800e49e:	bf00      	nop
 800e4a0:	08014d1b 	.word	0x08014d1b
 800e4a4:	08014d2c 	.word	0x08014d2c

0800e4a8 <__multiply>:
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4614      	mov	r4, r2
 800e4ae:	690a      	ldr	r2, [r1, #16]
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	bfa8      	it	ge
 800e4b6:	4623      	movge	r3, r4
 800e4b8:	460f      	mov	r7, r1
 800e4ba:	bfa4      	itt	ge
 800e4bc:	460c      	movge	r4, r1
 800e4be:	461f      	movge	r7, r3
 800e4c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e4c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e4c8:	68a3      	ldr	r3, [r4, #8]
 800e4ca:	6861      	ldr	r1, [r4, #4]
 800e4cc:	eb0a 0609 	add.w	r6, sl, r9
 800e4d0:	42b3      	cmp	r3, r6
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	bfb8      	it	lt
 800e4d6:	3101      	addlt	r1, #1
 800e4d8:	f7ff fe92 	bl	800e200 <_Balloc>
 800e4dc:	b930      	cbnz	r0, 800e4ec <__multiply+0x44>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	4b44      	ldr	r3, [pc, #272]	@ (800e5f4 <__multiply+0x14c>)
 800e4e2:	4845      	ldr	r0, [pc, #276]	@ (800e5f8 <__multiply+0x150>)
 800e4e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4e8:	f001 fdb6 	bl	8010058 <__assert_func>
 800e4ec:	f100 0514 	add.w	r5, r0, #20
 800e4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4f4:	462b      	mov	r3, r5
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	4543      	cmp	r3, r8
 800e4fa:	d321      	bcc.n	800e540 <__multiply+0x98>
 800e4fc:	f107 0114 	add.w	r1, r7, #20
 800e500:	f104 0214 	add.w	r2, r4, #20
 800e504:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e508:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e50c:	9302      	str	r3, [sp, #8]
 800e50e:	1b13      	subs	r3, r2, r4
 800e510:	3b15      	subs	r3, #21
 800e512:	f023 0303 	bic.w	r3, r3, #3
 800e516:	3304      	adds	r3, #4
 800e518:	f104 0715 	add.w	r7, r4, #21
 800e51c:	42ba      	cmp	r2, r7
 800e51e:	bf38      	it	cc
 800e520:	2304      	movcc	r3, #4
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	9b02      	ldr	r3, [sp, #8]
 800e526:	9103      	str	r1, [sp, #12]
 800e528:	428b      	cmp	r3, r1
 800e52a:	d80c      	bhi.n	800e546 <__multiply+0x9e>
 800e52c:	2e00      	cmp	r6, #0
 800e52e:	dd03      	ble.n	800e538 <__multiply+0x90>
 800e530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e534:	2b00      	cmp	r3, #0
 800e536:	d05b      	beq.n	800e5f0 <__multiply+0x148>
 800e538:	6106      	str	r6, [r0, #16]
 800e53a:	b005      	add	sp, #20
 800e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e540:	f843 2b04 	str.w	r2, [r3], #4
 800e544:	e7d8      	b.n	800e4f8 <__multiply+0x50>
 800e546:	f8b1 a000 	ldrh.w	sl, [r1]
 800e54a:	f1ba 0f00 	cmp.w	sl, #0
 800e54e:	d024      	beq.n	800e59a <__multiply+0xf2>
 800e550:	f104 0e14 	add.w	lr, r4, #20
 800e554:	46a9      	mov	r9, r5
 800e556:	f04f 0c00 	mov.w	ip, #0
 800e55a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e55e:	f8d9 3000 	ldr.w	r3, [r9]
 800e562:	fa1f fb87 	uxth.w	fp, r7
 800e566:	b29b      	uxth	r3, r3
 800e568:	fb0a 330b 	mla	r3, sl, fp, r3
 800e56c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e570:	f8d9 7000 	ldr.w	r7, [r9]
 800e574:	4463      	add	r3, ip
 800e576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e57a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e57e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e582:	b29b      	uxth	r3, r3
 800e584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e588:	4572      	cmp	r2, lr
 800e58a:	f849 3b04 	str.w	r3, [r9], #4
 800e58e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e592:	d8e2      	bhi.n	800e55a <__multiply+0xb2>
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	f845 c003 	str.w	ip, [r5, r3]
 800e59a:	9b03      	ldr	r3, [sp, #12]
 800e59c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e5a0:	3104      	adds	r1, #4
 800e5a2:	f1b9 0f00 	cmp.w	r9, #0
 800e5a6:	d021      	beq.n	800e5ec <__multiply+0x144>
 800e5a8:	682b      	ldr	r3, [r5, #0]
 800e5aa:	f104 0c14 	add.w	ip, r4, #20
 800e5ae:	46ae      	mov	lr, r5
 800e5b0:	f04f 0a00 	mov.w	sl, #0
 800e5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800e5b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e5bc:	fb09 770b 	mla	r7, r9, fp, r7
 800e5c0:	4457      	add	r7, sl
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5c8:	f84e 3b04 	str.w	r3, [lr], #4
 800e5cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5d4:	f8be 3000 	ldrh.w	r3, [lr]
 800e5d8:	fb09 330a 	mla	r3, r9, sl, r3
 800e5dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e5e0:	4562      	cmp	r2, ip
 800e5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5e6:	d8e5      	bhi.n	800e5b4 <__multiply+0x10c>
 800e5e8:	9f01      	ldr	r7, [sp, #4]
 800e5ea:	51eb      	str	r3, [r5, r7]
 800e5ec:	3504      	adds	r5, #4
 800e5ee:	e799      	b.n	800e524 <__multiply+0x7c>
 800e5f0:	3e01      	subs	r6, #1
 800e5f2:	e79b      	b.n	800e52c <__multiply+0x84>
 800e5f4:	08014d1b 	.word	0x08014d1b
 800e5f8:	08014d2c 	.word	0x08014d2c

0800e5fc <__pow5mult>:
 800e5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e600:	4615      	mov	r5, r2
 800e602:	f012 0203 	ands.w	r2, r2, #3
 800e606:	4607      	mov	r7, r0
 800e608:	460e      	mov	r6, r1
 800e60a:	d007      	beq.n	800e61c <__pow5mult+0x20>
 800e60c:	4c25      	ldr	r4, [pc, #148]	@ (800e6a4 <__pow5mult+0xa8>)
 800e60e:	3a01      	subs	r2, #1
 800e610:	2300      	movs	r3, #0
 800e612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e616:	f7ff fe55 	bl	800e2c4 <__multadd>
 800e61a:	4606      	mov	r6, r0
 800e61c:	10ad      	asrs	r5, r5, #2
 800e61e:	d03d      	beq.n	800e69c <__pow5mult+0xa0>
 800e620:	69fc      	ldr	r4, [r7, #28]
 800e622:	b97c      	cbnz	r4, 800e644 <__pow5mult+0x48>
 800e624:	2010      	movs	r0, #16
 800e626:	f7ff fd35 	bl	800e094 <malloc>
 800e62a:	4602      	mov	r2, r0
 800e62c:	61f8      	str	r0, [r7, #28]
 800e62e:	b928      	cbnz	r0, 800e63c <__pow5mult+0x40>
 800e630:	4b1d      	ldr	r3, [pc, #116]	@ (800e6a8 <__pow5mult+0xac>)
 800e632:	481e      	ldr	r0, [pc, #120]	@ (800e6ac <__pow5mult+0xb0>)
 800e634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e638:	f001 fd0e 	bl	8010058 <__assert_func>
 800e63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e640:	6004      	str	r4, [r0, #0]
 800e642:	60c4      	str	r4, [r0, #12]
 800e644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e64c:	b94c      	cbnz	r4, 800e662 <__pow5mult+0x66>
 800e64e:	f240 2171 	movw	r1, #625	@ 0x271
 800e652:	4638      	mov	r0, r7
 800e654:	f7ff ff12 	bl	800e47c <__i2b>
 800e658:	2300      	movs	r3, #0
 800e65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e65e:	4604      	mov	r4, r0
 800e660:	6003      	str	r3, [r0, #0]
 800e662:	f04f 0900 	mov.w	r9, #0
 800e666:	07eb      	lsls	r3, r5, #31
 800e668:	d50a      	bpl.n	800e680 <__pow5mult+0x84>
 800e66a:	4631      	mov	r1, r6
 800e66c:	4622      	mov	r2, r4
 800e66e:	4638      	mov	r0, r7
 800e670:	f7ff ff1a 	bl	800e4a8 <__multiply>
 800e674:	4631      	mov	r1, r6
 800e676:	4680      	mov	r8, r0
 800e678:	4638      	mov	r0, r7
 800e67a:	f7ff fe01 	bl	800e280 <_Bfree>
 800e67e:	4646      	mov	r6, r8
 800e680:	106d      	asrs	r5, r5, #1
 800e682:	d00b      	beq.n	800e69c <__pow5mult+0xa0>
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	b938      	cbnz	r0, 800e698 <__pow5mult+0x9c>
 800e688:	4622      	mov	r2, r4
 800e68a:	4621      	mov	r1, r4
 800e68c:	4638      	mov	r0, r7
 800e68e:	f7ff ff0b 	bl	800e4a8 <__multiply>
 800e692:	6020      	str	r0, [r4, #0]
 800e694:	f8c0 9000 	str.w	r9, [r0]
 800e698:	4604      	mov	r4, r0
 800e69a:	e7e4      	b.n	800e666 <__pow5mult+0x6a>
 800e69c:	4630      	mov	r0, r6
 800e69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a2:	bf00      	nop
 800e6a4:	08014d88 	.word	0x08014d88
 800e6a8:	08014cac 	.word	0x08014cac
 800e6ac:	08014d2c 	.word	0x08014d2c

0800e6b0 <__lshift>:
 800e6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	6849      	ldr	r1, [r1, #4]
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6be:	68a3      	ldr	r3, [r4, #8]
 800e6c0:	4607      	mov	r7, r0
 800e6c2:	4691      	mov	r9, r2
 800e6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6c8:	f108 0601 	add.w	r6, r8, #1
 800e6cc:	42b3      	cmp	r3, r6
 800e6ce:	db0b      	blt.n	800e6e8 <__lshift+0x38>
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f7ff fd95 	bl	800e200 <_Balloc>
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	b948      	cbnz	r0, 800e6ee <__lshift+0x3e>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	4b28      	ldr	r3, [pc, #160]	@ (800e780 <__lshift+0xd0>)
 800e6de:	4829      	ldr	r0, [pc, #164]	@ (800e784 <__lshift+0xd4>)
 800e6e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6e4:	f001 fcb8 	bl	8010058 <__assert_func>
 800e6e8:	3101      	adds	r1, #1
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	e7ee      	b.n	800e6cc <__lshift+0x1c>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f100 0114 	add.w	r1, r0, #20
 800e6f4:	f100 0210 	add.w	r2, r0, #16
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	4553      	cmp	r3, sl
 800e6fc:	db33      	blt.n	800e766 <__lshift+0xb6>
 800e6fe:	6920      	ldr	r0, [r4, #16]
 800e700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e704:	f104 0314 	add.w	r3, r4, #20
 800e708:	f019 091f 	ands.w	r9, r9, #31
 800e70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e714:	d02b      	beq.n	800e76e <__lshift+0xbe>
 800e716:	f1c9 0e20 	rsb	lr, r9, #32
 800e71a:	468a      	mov	sl, r1
 800e71c:	2200      	movs	r2, #0
 800e71e:	6818      	ldr	r0, [r3, #0]
 800e720:	fa00 f009 	lsl.w	r0, r0, r9
 800e724:	4310      	orrs	r0, r2
 800e726:	f84a 0b04 	str.w	r0, [sl], #4
 800e72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e72e:	459c      	cmp	ip, r3
 800e730:	fa22 f20e 	lsr.w	r2, r2, lr
 800e734:	d8f3      	bhi.n	800e71e <__lshift+0x6e>
 800e736:	ebac 0304 	sub.w	r3, ip, r4
 800e73a:	3b15      	subs	r3, #21
 800e73c:	f023 0303 	bic.w	r3, r3, #3
 800e740:	3304      	adds	r3, #4
 800e742:	f104 0015 	add.w	r0, r4, #21
 800e746:	4584      	cmp	ip, r0
 800e748:	bf38      	it	cc
 800e74a:	2304      	movcc	r3, #4
 800e74c:	50ca      	str	r2, [r1, r3]
 800e74e:	b10a      	cbz	r2, 800e754 <__lshift+0xa4>
 800e750:	f108 0602 	add.w	r6, r8, #2
 800e754:	3e01      	subs	r6, #1
 800e756:	4638      	mov	r0, r7
 800e758:	612e      	str	r6, [r5, #16]
 800e75a:	4621      	mov	r1, r4
 800e75c:	f7ff fd90 	bl	800e280 <_Bfree>
 800e760:	4628      	mov	r0, r5
 800e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e766:	f842 0f04 	str.w	r0, [r2, #4]!
 800e76a:	3301      	adds	r3, #1
 800e76c:	e7c5      	b.n	800e6fa <__lshift+0x4a>
 800e76e:	3904      	subs	r1, #4
 800e770:	f853 2b04 	ldr.w	r2, [r3], #4
 800e774:	f841 2f04 	str.w	r2, [r1, #4]!
 800e778:	459c      	cmp	ip, r3
 800e77a:	d8f9      	bhi.n	800e770 <__lshift+0xc0>
 800e77c:	e7ea      	b.n	800e754 <__lshift+0xa4>
 800e77e:	bf00      	nop
 800e780:	08014d1b 	.word	0x08014d1b
 800e784:	08014d2c 	.word	0x08014d2c

0800e788 <__mcmp>:
 800e788:	690a      	ldr	r2, [r1, #16]
 800e78a:	4603      	mov	r3, r0
 800e78c:	6900      	ldr	r0, [r0, #16]
 800e78e:	1a80      	subs	r0, r0, r2
 800e790:	b530      	push	{r4, r5, lr}
 800e792:	d10e      	bne.n	800e7b2 <__mcmp+0x2a>
 800e794:	3314      	adds	r3, #20
 800e796:	3114      	adds	r1, #20
 800e798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e79c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7a8:	4295      	cmp	r5, r2
 800e7aa:	d003      	beq.n	800e7b4 <__mcmp+0x2c>
 800e7ac:	d205      	bcs.n	800e7ba <__mcmp+0x32>
 800e7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b2:	bd30      	pop	{r4, r5, pc}
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d3f3      	bcc.n	800e7a0 <__mcmp+0x18>
 800e7b8:	e7fb      	b.n	800e7b2 <__mcmp+0x2a>
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	e7f9      	b.n	800e7b2 <__mcmp+0x2a>
	...

0800e7c0 <__mdiff>:
 800e7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	4689      	mov	r9, r1
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4648      	mov	r0, r9
 800e7cc:	4614      	mov	r4, r2
 800e7ce:	f7ff ffdb 	bl	800e788 <__mcmp>
 800e7d2:	1e05      	subs	r5, r0, #0
 800e7d4:	d112      	bne.n	800e7fc <__mdiff+0x3c>
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7ff fd11 	bl	800e200 <_Balloc>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	b928      	cbnz	r0, 800e7ee <__mdiff+0x2e>
 800e7e2:	4b3f      	ldr	r3, [pc, #252]	@ (800e8e0 <__mdiff+0x120>)
 800e7e4:	f240 2137 	movw	r1, #567	@ 0x237
 800e7e8:	483e      	ldr	r0, [pc, #248]	@ (800e8e4 <__mdiff+0x124>)
 800e7ea:	f001 fc35 	bl	8010058 <__assert_func>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7f4:	4610      	mov	r0, r2
 800e7f6:	b003      	add	sp, #12
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	bfbc      	itt	lt
 800e7fe:	464b      	movlt	r3, r9
 800e800:	46a1      	movlt	r9, r4
 800e802:	4630      	mov	r0, r6
 800e804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e808:	bfba      	itte	lt
 800e80a:	461c      	movlt	r4, r3
 800e80c:	2501      	movlt	r5, #1
 800e80e:	2500      	movge	r5, #0
 800e810:	f7ff fcf6 	bl	800e200 <_Balloc>
 800e814:	4602      	mov	r2, r0
 800e816:	b918      	cbnz	r0, 800e820 <__mdiff+0x60>
 800e818:	4b31      	ldr	r3, [pc, #196]	@ (800e8e0 <__mdiff+0x120>)
 800e81a:	f240 2145 	movw	r1, #581	@ 0x245
 800e81e:	e7e3      	b.n	800e7e8 <__mdiff+0x28>
 800e820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e824:	6926      	ldr	r6, [r4, #16]
 800e826:	60c5      	str	r5, [r0, #12]
 800e828:	f109 0310 	add.w	r3, r9, #16
 800e82c:	f109 0514 	add.w	r5, r9, #20
 800e830:	f104 0e14 	add.w	lr, r4, #20
 800e834:	f100 0b14 	add.w	fp, r0, #20
 800e838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e83c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	46d9      	mov	r9, fp
 800e844:	f04f 0c00 	mov.w	ip, #0
 800e848:	9b01      	ldr	r3, [sp, #4]
 800e84a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e84e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	fa1f f38a 	uxth.w	r3, sl
 800e858:	4619      	mov	r1, r3
 800e85a:	b283      	uxth	r3, r0
 800e85c:	1acb      	subs	r3, r1, r3
 800e85e:	0c00      	lsrs	r0, r0, #16
 800e860:	4463      	add	r3, ip
 800e862:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e866:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e870:	4576      	cmp	r6, lr
 800e872:	f849 3b04 	str.w	r3, [r9], #4
 800e876:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e87a:	d8e5      	bhi.n	800e848 <__mdiff+0x88>
 800e87c:	1b33      	subs	r3, r6, r4
 800e87e:	3b15      	subs	r3, #21
 800e880:	f023 0303 	bic.w	r3, r3, #3
 800e884:	3415      	adds	r4, #21
 800e886:	3304      	adds	r3, #4
 800e888:	42a6      	cmp	r6, r4
 800e88a:	bf38      	it	cc
 800e88c:	2304      	movcc	r3, #4
 800e88e:	441d      	add	r5, r3
 800e890:	445b      	add	r3, fp
 800e892:	461e      	mov	r6, r3
 800e894:	462c      	mov	r4, r5
 800e896:	4544      	cmp	r4, r8
 800e898:	d30e      	bcc.n	800e8b8 <__mdiff+0xf8>
 800e89a:	f108 0103 	add.w	r1, r8, #3
 800e89e:	1b49      	subs	r1, r1, r5
 800e8a0:	f021 0103 	bic.w	r1, r1, #3
 800e8a4:	3d03      	subs	r5, #3
 800e8a6:	45a8      	cmp	r8, r5
 800e8a8:	bf38      	it	cc
 800e8aa:	2100      	movcc	r1, #0
 800e8ac:	440b      	add	r3, r1
 800e8ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8b2:	b191      	cbz	r1, 800e8da <__mdiff+0x11a>
 800e8b4:	6117      	str	r7, [r2, #16]
 800e8b6:	e79d      	b.n	800e7f4 <__mdiff+0x34>
 800e8b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8bc:	46e6      	mov	lr, ip
 800e8be:	0c08      	lsrs	r0, r1, #16
 800e8c0:	fa1c fc81 	uxtah	ip, ip, r1
 800e8c4:	4471      	add	r1, lr
 800e8c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8ca:	b289      	uxth	r1, r1
 800e8cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8d0:	f846 1b04 	str.w	r1, [r6], #4
 800e8d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8d8:	e7dd      	b.n	800e896 <__mdiff+0xd6>
 800e8da:	3f01      	subs	r7, #1
 800e8dc:	e7e7      	b.n	800e8ae <__mdiff+0xee>
 800e8de:	bf00      	nop
 800e8e0:	08014d1b 	.word	0x08014d1b
 800e8e4:	08014d2c 	.word	0x08014d2c

0800e8e8 <__ulp>:
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	ed8d 0b00 	vstr	d0, [sp]
 800e8ee:	9a01      	ldr	r2, [sp, #4]
 800e8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e930 <__ulp+0x48>)
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	dc08      	bgt.n	800e90e <__ulp+0x26>
 800e8fc:	425b      	negs	r3, r3
 800e8fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e902:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e906:	da04      	bge.n	800e912 <__ulp+0x2a>
 800e908:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e90c:	4113      	asrs	r3, r2
 800e90e:	2200      	movs	r2, #0
 800e910:	e008      	b.n	800e924 <__ulp+0x3c>
 800e912:	f1a2 0314 	sub.w	r3, r2, #20
 800e916:	2b1e      	cmp	r3, #30
 800e918:	bfda      	itte	le
 800e91a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e91e:	40da      	lsrle	r2, r3
 800e920:	2201      	movgt	r2, #1
 800e922:	2300      	movs	r3, #0
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	ec41 0b10 	vmov	d0, r0, r1
 800e92c:	b002      	add	sp, #8
 800e92e:	4770      	bx	lr
 800e930:	7ff00000 	.word	0x7ff00000

0800e934 <__b2d>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	6906      	ldr	r6, [r0, #16]
 800e93a:	f100 0814 	add.w	r8, r0, #20
 800e93e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e942:	1f37      	subs	r7, r6, #4
 800e944:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e948:	4610      	mov	r0, r2
 800e94a:	f7ff fd4b 	bl	800e3e4 <__hi0bits>
 800e94e:	f1c0 0320 	rsb	r3, r0, #32
 800e952:	280a      	cmp	r0, #10
 800e954:	600b      	str	r3, [r1, #0]
 800e956:	491b      	ldr	r1, [pc, #108]	@ (800e9c4 <__b2d+0x90>)
 800e958:	dc15      	bgt.n	800e986 <__b2d+0x52>
 800e95a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e95e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e962:	45b8      	cmp	r8, r7
 800e964:	ea43 0501 	orr.w	r5, r3, r1
 800e968:	bf34      	ite	cc
 800e96a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e96e:	2300      	movcs	r3, #0
 800e970:	3015      	adds	r0, #21
 800e972:	fa02 f000 	lsl.w	r0, r2, r0
 800e976:	fa23 f30c 	lsr.w	r3, r3, ip
 800e97a:	4303      	orrs	r3, r0
 800e97c:	461c      	mov	r4, r3
 800e97e:	ec45 4b10 	vmov	d0, r4, r5
 800e982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e986:	45b8      	cmp	r8, r7
 800e988:	bf3a      	itte	cc
 800e98a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e98e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e992:	2300      	movcs	r3, #0
 800e994:	380b      	subs	r0, #11
 800e996:	d012      	beq.n	800e9be <__b2d+0x8a>
 800e998:	f1c0 0120 	rsb	r1, r0, #32
 800e99c:	fa23 f401 	lsr.w	r4, r3, r1
 800e9a0:	4082      	lsls	r2, r0
 800e9a2:	4322      	orrs	r2, r4
 800e9a4:	4547      	cmp	r7, r8
 800e9a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e9aa:	bf8c      	ite	hi
 800e9ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e9b0:	2200      	movls	r2, #0
 800e9b2:	4083      	lsls	r3, r0
 800e9b4:	40ca      	lsrs	r2, r1
 800e9b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	e7de      	b.n	800e97c <__b2d+0x48>
 800e9be:	ea42 0501 	orr.w	r5, r2, r1
 800e9c2:	e7db      	b.n	800e97c <__b2d+0x48>
 800e9c4:	3ff00000 	.word	0x3ff00000

0800e9c8 <__d2b>:
 800e9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9cc:	460f      	mov	r7, r1
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	ec59 8b10 	vmov	r8, r9, d0
 800e9d4:	4616      	mov	r6, r2
 800e9d6:	f7ff fc13 	bl	800e200 <_Balloc>
 800e9da:	4604      	mov	r4, r0
 800e9dc:	b930      	cbnz	r0, 800e9ec <__d2b+0x24>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	4b23      	ldr	r3, [pc, #140]	@ (800ea70 <__d2b+0xa8>)
 800e9e2:	4824      	ldr	r0, [pc, #144]	@ (800ea74 <__d2b+0xac>)
 800e9e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9e8:	f001 fb36 	bl	8010058 <__assert_func>
 800e9ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9f4:	b10d      	cbz	r5, 800e9fa <__d2b+0x32>
 800e9f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	f1b8 0300 	subs.w	r3, r8, #0
 800ea00:	d023      	beq.n	800ea4a <__d2b+0x82>
 800ea02:	4668      	mov	r0, sp
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	f7ff fd0c 	bl	800e422 <__lo0bits>
 800ea0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea0e:	b1d0      	cbz	r0, 800ea46 <__d2b+0x7e>
 800ea10:	f1c0 0320 	rsb	r3, r0, #32
 800ea14:	fa02 f303 	lsl.w	r3, r2, r3
 800ea18:	430b      	orrs	r3, r1
 800ea1a:	40c2      	lsrs	r2, r0
 800ea1c:	6163      	str	r3, [r4, #20]
 800ea1e:	9201      	str	r2, [sp, #4]
 800ea20:	9b01      	ldr	r3, [sp, #4]
 800ea22:	61a3      	str	r3, [r4, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bf0c      	ite	eq
 800ea28:	2201      	moveq	r2, #1
 800ea2a:	2202      	movne	r2, #2
 800ea2c:	6122      	str	r2, [r4, #16]
 800ea2e:	b1a5      	cbz	r5, 800ea5a <__d2b+0x92>
 800ea30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea34:	4405      	add	r5, r0
 800ea36:	603d      	str	r5, [r7, #0]
 800ea38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea3c:	6030      	str	r0, [r6, #0]
 800ea3e:	4620      	mov	r0, r4
 800ea40:	b003      	add	sp, #12
 800ea42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea46:	6161      	str	r1, [r4, #20]
 800ea48:	e7ea      	b.n	800ea20 <__d2b+0x58>
 800ea4a:	a801      	add	r0, sp, #4
 800ea4c:	f7ff fce9 	bl	800e422 <__lo0bits>
 800ea50:	9b01      	ldr	r3, [sp, #4]
 800ea52:	6163      	str	r3, [r4, #20]
 800ea54:	3020      	adds	r0, #32
 800ea56:	2201      	movs	r2, #1
 800ea58:	e7e8      	b.n	800ea2c <__d2b+0x64>
 800ea5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea62:	6038      	str	r0, [r7, #0]
 800ea64:	6918      	ldr	r0, [r3, #16]
 800ea66:	f7ff fcbd 	bl	800e3e4 <__hi0bits>
 800ea6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea6e:	e7e5      	b.n	800ea3c <__d2b+0x74>
 800ea70:	08014d1b 	.word	0x08014d1b
 800ea74:	08014d2c 	.word	0x08014d2c

0800ea78 <__ratio>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	b085      	sub	sp, #20
 800ea7e:	e9cd 1000 	strd	r1, r0, [sp]
 800ea82:	a902      	add	r1, sp, #8
 800ea84:	f7ff ff56 	bl	800e934 <__b2d>
 800ea88:	9800      	ldr	r0, [sp, #0]
 800ea8a:	a903      	add	r1, sp, #12
 800ea8c:	ec55 4b10 	vmov	r4, r5, d0
 800ea90:	f7ff ff50 	bl	800e934 <__b2d>
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	6919      	ldr	r1, [r3, #16]
 800ea98:	9b00      	ldr	r3, [sp, #0]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	1ac9      	subs	r1, r1, r3
 800ea9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eaa2:	1a9b      	subs	r3, r3, r2
 800eaa4:	ec5b ab10 	vmov	sl, fp, d0
 800eaa8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	bfce      	itee	gt
 800eab0:	462a      	movgt	r2, r5
 800eab2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eab6:	465a      	movle	r2, fp
 800eab8:	462f      	mov	r7, r5
 800eaba:	46d9      	mov	r9, fp
 800eabc:	bfcc      	ite	gt
 800eabe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eac2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eac6:	464b      	mov	r3, r9
 800eac8:	4652      	mov	r2, sl
 800eaca:	4620      	mov	r0, r4
 800eacc:	4639      	mov	r1, r7
 800eace:	f7f7 f9e5 	bl	8005e9c <__aeabi_ddiv>
 800ead2:	ec41 0b10 	vmov	d0, r0, r1
 800ead6:	b005      	add	sp, #20
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eadc <__copybits>:
 800eadc:	3901      	subs	r1, #1
 800eade:	b570      	push	{r4, r5, r6, lr}
 800eae0:	1149      	asrs	r1, r1, #5
 800eae2:	6914      	ldr	r4, [r2, #16]
 800eae4:	3101      	adds	r1, #1
 800eae6:	f102 0314 	add.w	r3, r2, #20
 800eaea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eaee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eaf2:	1f05      	subs	r5, r0, #4
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	d30c      	bcc.n	800eb12 <__copybits+0x36>
 800eaf8:	1aa3      	subs	r3, r4, r2
 800eafa:	3b11      	subs	r3, #17
 800eafc:	f023 0303 	bic.w	r3, r3, #3
 800eb00:	3211      	adds	r2, #17
 800eb02:	42a2      	cmp	r2, r4
 800eb04:	bf88      	it	hi
 800eb06:	2300      	movhi	r3, #0
 800eb08:	4418      	add	r0, r3
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	4288      	cmp	r0, r1
 800eb0e:	d305      	bcc.n	800eb1c <__copybits+0x40>
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
 800eb12:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb16:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb1a:	e7eb      	b.n	800eaf4 <__copybits+0x18>
 800eb1c:	f840 3b04 	str.w	r3, [r0], #4
 800eb20:	e7f4      	b.n	800eb0c <__copybits+0x30>

0800eb22 <__any_on>:
 800eb22:	f100 0214 	add.w	r2, r0, #20
 800eb26:	6900      	ldr	r0, [r0, #16]
 800eb28:	114b      	asrs	r3, r1, #5
 800eb2a:	4298      	cmp	r0, r3
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	db11      	blt.n	800eb54 <__any_on+0x32>
 800eb30:	dd0a      	ble.n	800eb48 <__any_on+0x26>
 800eb32:	f011 011f 	ands.w	r1, r1, #31
 800eb36:	d007      	beq.n	800eb48 <__any_on+0x26>
 800eb38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb3c:	fa24 f001 	lsr.w	r0, r4, r1
 800eb40:	fa00 f101 	lsl.w	r1, r0, r1
 800eb44:	428c      	cmp	r4, r1
 800eb46:	d10b      	bne.n	800eb60 <__any_on+0x3e>
 800eb48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d803      	bhi.n	800eb58 <__any_on+0x36>
 800eb50:	2000      	movs	r0, #0
 800eb52:	bd10      	pop	{r4, pc}
 800eb54:	4603      	mov	r3, r0
 800eb56:	e7f7      	b.n	800eb48 <__any_on+0x26>
 800eb58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	d0f5      	beq.n	800eb4c <__any_on+0x2a>
 800eb60:	2001      	movs	r0, #1
 800eb62:	e7f6      	b.n	800eb52 <__any_on+0x30>

0800eb64 <sulp>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4604      	mov	r4, r0
 800eb68:	460d      	mov	r5, r1
 800eb6a:	ec45 4b10 	vmov	d0, r4, r5
 800eb6e:	4616      	mov	r6, r2
 800eb70:	f7ff feba 	bl	800e8e8 <__ulp>
 800eb74:	ec51 0b10 	vmov	r0, r1, d0
 800eb78:	b17e      	cbz	r6, 800eb9a <sulp+0x36>
 800eb7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	dd09      	ble.n	800eb9a <sulp+0x36>
 800eb86:	051b      	lsls	r3, r3, #20
 800eb88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eb8c:	2400      	movs	r4, #0
 800eb8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eb92:	4622      	mov	r2, r4
 800eb94:	462b      	mov	r3, r5
 800eb96:	f7f7 f857 	bl	8005c48 <__aeabi_dmul>
 800eb9a:	ec41 0b10 	vmov	d0, r0, r1
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}

0800eba0 <_strtod_l>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	b09f      	sub	sp, #124	@ 0x7c
 800eba6:	460c      	mov	r4, r1
 800eba8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ebaa:	2200      	movs	r2, #0
 800ebac:	921a      	str	r2, [sp, #104]	@ 0x68
 800ebae:	9005      	str	r0, [sp, #20]
 800ebb0:	f04f 0a00 	mov.w	sl, #0
 800ebb4:	f04f 0b00 	mov.w	fp, #0
 800ebb8:	460a      	mov	r2, r1
 800ebba:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebbc:	7811      	ldrb	r1, [r2, #0]
 800ebbe:	292b      	cmp	r1, #43	@ 0x2b
 800ebc0:	d04a      	beq.n	800ec58 <_strtod_l+0xb8>
 800ebc2:	d838      	bhi.n	800ec36 <_strtod_l+0x96>
 800ebc4:	290d      	cmp	r1, #13
 800ebc6:	d832      	bhi.n	800ec2e <_strtod_l+0x8e>
 800ebc8:	2908      	cmp	r1, #8
 800ebca:	d832      	bhi.n	800ec32 <_strtod_l+0x92>
 800ebcc:	2900      	cmp	r1, #0
 800ebce:	d03b      	beq.n	800ec48 <_strtod_l+0xa8>
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ebd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ebd6:	782a      	ldrb	r2, [r5, #0]
 800ebd8:	2a30      	cmp	r2, #48	@ 0x30
 800ebda:	f040 80b3 	bne.w	800ed44 <_strtod_l+0x1a4>
 800ebde:	786a      	ldrb	r2, [r5, #1]
 800ebe0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ebe4:	2a58      	cmp	r2, #88	@ 0x58
 800ebe6:	d16e      	bne.n	800ecc6 <_strtod_l+0x126>
 800ebe8:	9302      	str	r3, [sp, #8]
 800ebea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebec:	9301      	str	r3, [sp, #4]
 800ebee:	ab1a      	add	r3, sp, #104	@ 0x68
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	4a8e      	ldr	r2, [pc, #568]	@ (800ee2c <_strtod_l+0x28c>)
 800ebf4:	9805      	ldr	r0, [sp, #20]
 800ebf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ebf8:	a919      	add	r1, sp, #100	@ 0x64
 800ebfa:	f001 fac7 	bl	801018c <__gethex>
 800ebfe:	f010 060f 	ands.w	r6, r0, #15
 800ec02:	4604      	mov	r4, r0
 800ec04:	d005      	beq.n	800ec12 <_strtod_l+0x72>
 800ec06:	2e06      	cmp	r6, #6
 800ec08:	d128      	bne.n	800ec5c <_strtod_l+0xbc>
 800ec0a:	3501      	adds	r5, #1
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ec10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f040 858e 	bne.w	800f736 <_strtod_l+0xb96>
 800ec1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec1c:	b1cb      	cbz	r3, 800ec52 <_strtod_l+0xb2>
 800ec1e:	4652      	mov	r2, sl
 800ec20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ec24:	ec43 2b10 	vmov	d0, r2, r3
 800ec28:	b01f      	add	sp, #124	@ 0x7c
 800ec2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2e:	2920      	cmp	r1, #32
 800ec30:	d1ce      	bne.n	800ebd0 <_strtod_l+0x30>
 800ec32:	3201      	adds	r2, #1
 800ec34:	e7c1      	b.n	800ebba <_strtod_l+0x1a>
 800ec36:	292d      	cmp	r1, #45	@ 0x2d
 800ec38:	d1ca      	bne.n	800ebd0 <_strtod_l+0x30>
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec3e:	1c51      	adds	r1, r2, #1
 800ec40:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec42:	7852      	ldrb	r2, [r2, #1]
 800ec44:	2a00      	cmp	r2, #0
 800ec46:	d1c5      	bne.n	800ebd4 <_strtod_l+0x34>
 800ec48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f040 8570 	bne.w	800f732 <_strtod_l+0xb92>
 800ec52:	4652      	mov	r2, sl
 800ec54:	465b      	mov	r3, fp
 800ec56:	e7e5      	b.n	800ec24 <_strtod_l+0x84>
 800ec58:	2100      	movs	r1, #0
 800ec5a:	e7ef      	b.n	800ec3c <_strtod_l+0x9c>
 800ec5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec5e:	b13a      	cbz	r2, 800ec70 <_strtod_l+0xd0>
 800ec60:	2135      	movs	r1, #53	@ 0x35
 800ec62:	a81c      	add	r0, sp, #112	@ 0x70
 800ec64:	f7ff ff3a 	bl	800eadc <__copybits>
 800ec68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec6a:	9805      	ldr	r0, [sp, #20]
 800ec6c:	f7ff fb08 	bl	800e280 <_Bfree>
 800ec70:	3e01      	subs	r6, #1
 800ec72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ec74:	2e04      	cmp	r6, #4
 800ec76:	d806      	bhi.n	800ec86 <_strtod_l+0xe6>
 800ec78:	e8df f006 	tbb	[pc, r6]
 800ec7c:	201d0314 	.word	0x201d0314
 800ec80:	14          	.byte	0x14
 800ec81:	00          	.byte	0x00
 800ec82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ec86:	05e1      	lsls	r1, r4, #23
 800ec88:	bf48      	it	mi
 800ec8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ec8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec92:	0d1b      	lsrs	r3, r3, #20
 800ec94:	051b      	lsls	r3, r3, #20
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1bb      	bne.n	800ec12 <_strtod_l+0x72>
 800ec9a:	f7fe fb1d 	bl	800d2d8 <__errno>
 800ec9e:	2322      	movs	r3, #34	@ 0x22
 800eca0:	6003      	str	r3, [r0, #0]
 800eca2:	e7b6      	b.n	800ec12 <_strtod_l+0x72>
 800eca4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800eca8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ecac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ecb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ecb4:	e7e7      	b.n	800ec86 <_strtod_l+0xe6>
 800ecb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ee34 <_strtod_l+0x294>
 800ecba:	e7e4      	b.n	800ec86 <_strtod_l+0xe6>
 800ecbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ecc0:	f04f 3aff 	mov.w	sl, #4294967295
 800ecc4:	e7df      	b.n	800ec86 <_strtod_l+0xe6>
 800ecc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	9219      	str	r2, [sp, #100]	@ 0x64
 800eccc:	785b      	ldrb	r3, [r3, #1]
 800ecce:	2b30      	cmp	r3, #48	@ 0x30
 800ecd0:	d0f9      	beq.n	800ecc6 <_strtod_l+0x126>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d09d      	beq.n	800ec12 <_strtod_l+0x72>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecde:	2300      	movs	r3, #0
 800ece0:	9308      	str	r3, [sp, #32]
 800ece2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ece4:	461f      	mov	r7, r3
 800ece6:	220a      	movs	r2, #10
 800ece8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ecea:	7805      	ldrb	r5, [r0, #0]
 800ecec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ecf0:	b2d9      	uxtb	r1, r3
 800ecf2:	2909      	cmp	r1, #9
 800ecf4:	d928      	bls.n	800ed48 <_strtod_l+0x1a8>
 800ecf6:	494e      	ldr	r1, [pc, #312]	@ (800ee30 <_strtod_l+0x290>)
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f001 f95f 	bl	800ffbc <strncmp>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d032      	beq.n	800ed68 <_strtod_l+0x1c8>
 800ed02:	2000      	movs	r0, #0
 800ed04:	462a      	mov	r2, r5
 800ed06:	4681      	mov	r9, r0
 800ed08:	463d      	mov	r5, r7
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2a65      	cmp	r2, #101	@ 0x65
 800ed0e:	d001      	beq.n	800ed14 <_strtod_l+0x174>
 800ed10:	2a45      	cmp	r2, #69	@ 0x45
 800ed12:	d114      	bne.n	800ed3e <_strtod_l+0x19e>
 800ed14:	b91d      	cbnz	r5, 800ed1e <_strtod_l+0x17e>
 800ed16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed18:	4302      	orrs	r2, r0
 800ed1a:	d095      	beq.n	800ec48 <_strtod_l+0xa8>
 800ed1c:	2500      	movs	r5, #0
 800ed1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ed20:	1c62      	adds	r2, r4, #1
 800ed22:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed24:	7862      	ldrb	r2, [r4, #1]
 800ed26:	2a2b      	cmp	r2, #43	@ 0x2b
 800ed28:	d077      	beq.n	800ee1a <_strtod_l+0x27a>
 800ed2a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed2c:	d07b      	beq.n	800ee26 <_strtod_l+0x286>
 800ed2e:	f04f 0c00 	mov.w	ip, #0
 800ed32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ed36:	2909      	cmp	r1, #9
 800ed38:	f240 8082 	bls.w	800ee40 <_strtod_l+0x2a0>
 800ed3c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed3e:	f04f 0800 	mov.w	r8, #0
 800ed42:	e0a2      	b.n	800ee8a <_strtod_l+0x2ea>
 800ed44:	2300      	movs	r3, #0
 800ed46:	e7c7      	b.n	800ecd8 <_strtod_l+0x138>
 800ed48:	2f08      	cmp	r7, #8
 800ed4a:	bfd5      	itete	le
 800ed4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ed4e:	9908      	ldrgt	r1, [sp, #32]
 800ed50:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed54:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ed58:	f100 0001 	add.w	r0, r0, #1
 800ed5c:	bfd4      	ite	le
 800ed5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ed60:	9308      	strgt	r3, [sp, #32]
 800ed62:	3701      	adds	r7, #1
 800ed64:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed66:	e7bf      	b.n	800ece8 <_strtod_l+0x148>
 800ed68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed6e:	785a      	ldrb	r2, [r3, #1]
 800ed70:	b37f      	cbz	r7, 800edd2 <_strtod_l+0x232>
 800ed72:	4681      	mov	r9, r0
 800ed74:	463d      	mov	r5, r7
 800ed76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ed7a:	2b09      	cmp	r3, #9
 800ed7c:	d912      	bls.n	800eda4 <_strtod_l+0x204>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e7c4      	b.n	800ed0c <_strtod_l+0x16c>
 800ed82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed88:	785a      	ldrb	r2, [r3, #1]
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	2a30      	cmp	r2, #48	@ 0x30
 800ed8e:	d0f8      	beq.n	800ed82 <_strtod_l+0x1e2>
 800ed90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ed94:	2b08      	cmp	r3, #8
 800ed96:	f200 84d3 	bhi.w	800f740 <_strtod_l+0xba0>
 800ed9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed9e:	4681      	mov	r9, r0
 800eda0:	2000      	movs	r0, #0
 800eda2:	4605      	mov	r5, r0
 800eda4:	3a30      	subs	r2, #48	@ 0x30
 800eda6:	f100 0301 	add.w	r3, r0, #1
 800edaa:	d02a      	beq.n	800ee02 <_strtod_l+0x262>
 800edac:	4499      	add	r9, r3
 800edae:	eb00 0c05 	add.w	ip, r0, r5
 800edb2:	462b      	mov	r3, r5
 800edb4:	210a      	movs	r1, #10
 800edb6:	4563      	cmp	r3, ip
 800edb8:	d10d      	bne.n	800edd6 <_strtod_l+0x236>
 800edba:	1c69      	adds	r1, r5, #1
 800edbc:	4401      	add	r1, r0
 800edbe:	4428      	add	r0, r5
 800edc0:	2808      	cmp	r0, #8
 800edc2:	dc16      	bgt.n	800edf2 <_strtod_l+0x252>
 800edc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800edc6:	230a      	movs	r3, #10
 800edc8:	fb03 2300 	mla	r3, r3, r0, r2
 800edcc:	930a      	str	r3, [sp, #40]	@ 0x28
 800edce:	2300      	movs	r3, #0
 800edd0:	e018      	b.n	800ee04 <_strtod_l+0x264>
 800edd2:	4638      	mov	r0, r7
 800edd4:	e7da      	b.n	800ed8c <_strtod_l+0x1ec>
 800edd6:	2b08      	cmp	r3, #8
 800edd8:	f103 0301 	add.w	r3, r3, #1
 800eddc:	dc03      	bgt.n	800ede6 <_strtod_l+0x246>
 800edde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ede0:	434e      	muls	r6, r1
 800ede2:	960a      	str	r6, [sp, #40]	@ 0x28
 800ede4:	e7e7      	b.n	800edb6 <_strtod_l+0x216>
 800ede6:	2b10      	cmp	r3, #16
 800ede8:	bfde      	ittt	le
 800edea:	9e08      	ldrle	r6, [sp, #32]
 800edec:	434e      	mulle	r6, r1
 800edee:	9608      	strle	r6, [sp, #32]
 800edf0:	e7e1      	b.n	800edb6 <_strtod_l+0x216>
 800edf2:	280f      	cmp	r0, #15
 800edf4:	dceb      	bgt.n	800edce <_strtod_l+0x22e>
 800edf6:	9808      	ldr	r0, [sp, #32]
 800edf8:	230a      	movs	r3, #10
 800edfa:	fb03 2300 	mla	r3, r3, r0, r2
 800edfe:	9308      	str	r3, [sp, #32]
 800ee00:	e7e5      	b.n	800edce <_strtod_l+0x22e>
 800ee02:	4629      	mov	r1, r5
 800ee04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee06:	1c50      	adds	r0, r2, #1
 800ee08:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee0a:	7852      	ldrb	r2, [r2, #1]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	460d      	mov	r5, r1
 800ee10:	e7b1      	b.n	800ed76 <_strtod_l+0x1d6>
 800ee12:	f04f 0900 	mov.w	r9, #0
 800ee16:	2301      	movs	r3, #1
 800ee18:	e77d      	b.n	800ed16 <_strtod_l+0x176>
 800ee1a:	f04f 0c00 	mov.w	ip, #0
 800ee1e:	1ca2      	adds	r2, r4, #2
 800ee20:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee22:	78a2      	ldrb	r2, [r4, #2]
 800ee24:	e785      	b.n	800ed32 <_strtod_l+0x192>
 800ee26:	f04f 0c01 	mov.w	ip, #1
 800ee2a:	e7f8      	b.n	800ee1e <_strtod_l+0x27e>
 800ee2c:	08014ea0 	.word	0x08014ea0
 800ee30:	08014e88 	.word	0x08014e88
 800ee34:	7ff00000 	.word	0x7ff00000
 800ee38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee3a:	1c51      	adds	r1, r2, #1
 800ee3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee3e:	7852      	ldrb	r2, [r2, #1]
 800ee40:	2a30      	cmp	r2, #48	@ 0x30
 800ee42:	d0f9      	beq.n	800ee38 <_strtod_l+0x298>
 800ee44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ee48:	2908      	cmp	r1, #8
 800ee4a:	f63f af78 	bhi.w	800ed3e <_strtod_l+0x19e>
 800ee4e:	3a30      	subs	r2, #48	@ 0x30
 800ee50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee54:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ee56:	f04f 080a 	mov.w	r8, #10
 800ee5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee5c:	1c56      	adds	r6, r2, #1
 800ee5e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ee60:	7852      	ldrb	r2, [r2, #1]
 800ee62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ee66:	f1be 0f09 	cmp.w	lr, #9
 800ee6a:	d939      	bls.n	800eee0 <_strtod_l+0x340>
 800ee6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee6e:	1a76      	subs	r6, r6, r1
 800ee70:	2e08      	cmp	r6, #8
 800ee72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ee76:	dc03      	bgt.n	800ee80 <_strtod_l+0x2e0>
 800ee78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee7a:	4588      	cmp	r8, r1
 800ee7c:	bfa8      	it	ge
 800ee7e:	4688      	movge	r8, r1
 800ee80:	f1bc 0f00 	cmp.w	ip, #0
 800ee84:	d001      	beq.n	800ee8a <_strtod_l+0x2ea>
 800ee86:	f1c8 0800 	rsb	r8, r8, #0
 800ee8a:	2d00      	cmp	r5, #0
 800ee8c:	d14e      	bne.n	800ef2c <_strtod_l+0x38c>
 800ee8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee90:	4308      	orrs	r0, r1
 800ee92:	f47f aebe 	bne.w	800ec12 <_strtod_l+0x72>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f47f aed6 	bne.w	800ec48 <_strtod_l+0xa8>
 800ee9c:	2a69      	cmp	r2, #105	@ 0x69
 800ee9e:	d028      	beq.n	800eef2 <_strtod_l+0x352>
 800eea0:	dc25      	bgt.n	800eeee <_strtod_l+0x34e>
 800eea2:	2a49      	cmp	r2, #73	@ 0x49
 800eea4:	d025      	beq.n	800eef2 <_strtod_l+0x352>
 800eea6:	2a4e      	cmp	r2, #78	@ 0x4e
 800eea8:	f47f aece 	bne.w	800ec48 <_strtod_l+0xa8>
 800eeac:	499b      	ldr	r1, [pc, #620]	@ (800f11c <_strtod_l+0x57c>)
 800eeae:	a819      	add	r0, sp, #100	@ 0x64
 800eeb0:	f001 fb8e 	bl	80105d0 <__match>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f43f aec7 	beq.w	800ec48 <_strtod_l+0xa8>
 800eeba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	2b28      	cmp	r3, #40	@ 0x28
 800eec0:	d12e      	bne.n	800ef20 <_strtod_l+0x380>
 800eec2:	4997      	ldr	r1, [pc, #604]	@ (800f120 <_strtod_l+0x580>)
 800eec4:	aa1c      	add	r2, sp, #112	@ 0x70
 800eec6:	a819      	add	r0, sp, #100	@ 0x64
 800eec8:	f001 fb96 	bl	80105f8 <__hexnan>
 800eecc:	2805      	cmp	r0, #5
 800eece:	d127      	bne.n	800ef20 <_strtod_l+0x380>
 800eed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eed2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eed6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eeda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eede:	e698      	b.n	800ec12 <_strtod_l+0x72>
 800eee0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eee2:	fb08 2101 	mla	r1, r8, r1, r2
 800eee6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eeea:	920e      	str	r2, [sp, #56]	@ 0x38
 800eeec:	e7b5      	b.n	800ee5a <_strtod_l+0x2ba>
 800eeee:	2a6e      	cmp	r2, #110	@ 0x6e
 800eef0:	e7da      	b.n	800eea8 <_strtod_l+0x308>
 800eef2:	498c      	ldr	r1, [pc, #560]	@ (800f124 <_strtod_l+0x584>)
 800eef4:	a819      	add	r0, sp, #100	@ 0x64
 800eef6:	f001 fb6b 	bl	80105d0 <__match>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	f43f aea4 	beq.w	800ec48 <_strtod_l+0xa8>
 800ef00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef02:	4989      	ldr	r1, [pc, #548]	@ (800f128 <_strtod_l+0x588>)
 800ef04:	3b01      	subs	r3, #1
 800ef06:	a819      	add	r0, sp, #100	@ 0x64
 800ef08:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef0a:	f001 fb61 	bl	80105d0 <__match>
 800ef0e:	b910      	cbnz	r0, 800ef16 <_strtod_l+0x376>
 800ef10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef12:	3301      	adds	r3, #1
 800ef14:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f138 <_strtod_l+0x598>
 800ef1a:	f04f 0a00 	mov.w	sl, #0
 800ef1e:	e678      	b.n	800ec12 <_strtod_l+0x72>
 800ef20:	4882      	ldr	r0, [pc, #520]	@ (800f12c <_strtod_l+0x58c>)
 800ef22:	f001 f891 	bl	8010048 <nan>
 800ef26:	ec5b ab10 	vmov	sl, fp, d0
 800ef2a:	e672      	b.n	800ec12 <_strtod_l+0x72>
 800ef2c:	eba8 0309 	sub.w	r3, r8, r9
 800ef30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef34:	2f00      	cmp	r7, #0
 800ef36:	bf08      	it	eq
 800ef38:	462f      	moveq	r7, r5
 800ef3a:	2d10      	cmp	r5, #16
 800ef3c:	462c      	mov	r4, r5
 800ef3e:	bfa8      	it	ge
 800ef40:	2410      	movge	r4, #16
 800ef42:	f7f6 fe07 	bl	8005b54 <__aeabi_ui2d>
 800ef46:	2d09      	cmp	r5, #9
 800ef48:	4682      	mov	sl, r0
 800ef4a:	468b      	mov	fp, r1
 800ef4c:	dc13      	bgt.n	800ef76 <_strtod_l+0x3d6>
 800ef4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f43f ae5e 	beq.w	800ec12 <_strtod_l+0x72>
 800ef56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef58:	dd78      	ble.n	800f04c <_strtod_l+0x4ac>
 800ef5a:	2b16      	cmp	r3, #22
 800ef5c:	dc5f      	bgt.n	800f01e <_strtod_l+0x47e>
 800ef5e:	4974      	ldr	r1, [pc, #464]	@ (800f130 <_strtod_l+0x590>)
 800ef60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef68:	4652      	mov	r2, sl
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	f7f6 fe6c 	bl	8005c48 <__aeabi_dmul>
 800ef70:	4682      	mov	sl, r0
 800ef72:	468b      	mov	fp, r1
 800ef74:	e64d      	b.n	800ec12 <_strtod_l+0x72>
 800ef76:	4b6e      	ldr	r3, [pc, #440]	@ (800f130 <_strtod_l+0x590>)
 800ef78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ef80:	f7f6 fe62 	bl	8005c48 <__aeabi_dmul>
 800ef84:	4682      	mov	sl, r0
 800ef86:	9808      	ldr	r0, [sp, #32]
 800ef88:	468b      	mov	fp, r1
 800ef8a:	f7f6 fde3 	bl	8005b54 <__aeabi_ui2d>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	4650      	mov	r0, sl
 800ef94:	4659      	mov	r1, fp
 800ef96:	f7f6 fca1 	bl	80058dc <__adddf3>
 800ef9a:	2d0f      	cmp	r5, #15
 800ef9c:	4682      	mov	sl, r0
 800ef9e:	468b      	mov	fp, r1
 800efa0:	ddd5      	ble.n	800ef4e <_strtod_l+0x3ae>
 800efa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa4:	1b2c      	subs	r4, r5, r4
 800efa6:	441c      	add	r4, r3
 800efa8:	2c00      	cmp	r4, #0
 800efaa:	f340 8096 	ble.w	800f0da <_strtod_l+0x53a>
 800efae:	f014 030f 	ands.w	r3, r4, #15
 800efb2:	d00a      	beq.n	800efca <_strtod_l+0x42a>
 800efb4:	495e      	ldr	r1, [pc, #376]	@ (800f130 <_strtod_l+0x590>)
 800efb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efba:	4652      	mov	r2, sl
 800efbc:	465b      	mov	r3, fp
 800efbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efc2:	f7f6 fe41 	bl	8005c48 <__aeabi_dmul>
 800efc6:	4682      	mov	sl, r0
 800efc8:	468b      	mov	fp, r1
 800efca:	f034 040f 	bics.w	r4, r4, #15
 800efce:	d073      	beq.n	800f0b8 <_strtod_l+0x518>
 800efd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800efd4:	dd48      	ble.n	800f068 <_strtod_l+0x4c8>
 800efd6:	2400      	movs	r4, #0
 800efd8:	46a0      	mov	r8, r4
 800efda:	940a      	str	r4, [sp, #40]	@ 0x28
 800efdc:	46a1      	mov	r9, r4
 800efde:	9a05      	ldr	r2, [sp, #20]
 800efe0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f138 <_strtod_l+0x598>
 800efe4:	2322      	movs	r3, #34	@ 0x22
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	f04f 0a00 	mov.w	sl, #0
 800efec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efee:	2b00      	cmp	r3, #0
 800eff0:	f43f ae0f 	beq.w	800ec12 <_strtod_l+0x72>
 800eff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eff6:	9805      	ldr	r0, [sp, #20]
 800eff8:	f7ff f942 	bl	800e280 <_Bfree>
 800effc:	9805      	ldr	r0, [sp, #20]
 800effe:	4649      	mov	r1, r9
 800f000:	f7ff f93e 	bl	800e280 <_Bfree>
 800f004:	9805      	ldr	r0, [sp, #20]
 800f006:	4641      	mov	r1, r8
 800f008:	f7ff f93a 	bl	800e280 <_Bfree>
 800f00c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f00e:	9805      	ldr	r0, [sp, #20]
 800f010:	f7ff f936 	bl	800e280 <_Bfree>
 800f014:	9805      	ldr	r0, [sp, #20]
 800f016:	4621      	mov	r1, r4
 800f018:	f7ff f932 	bl	800e280 <_Bfree>
 800f01c:	e5f9      	b.n	800ec12 <_strtod_l+0x72>
 800f01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f024:	4293      	cmp	r3, r2
 800f026:	dbbc      	blt.n	800efa2 <_strtod_l+0x402>
 800f028:	4c41      	ldr	r4, [pc, #260]	@ (800f130 <_strtod_l+0x590>)
 800f02a:	f1c5 050f 	rsb	r5, r5, #15
 800f02e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f032:	4652      	mov	r2, sl
 800f034:	465b      	mov	r3, fp
 800f036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f03a:	f7f6 fe05 	bl	8005c48 <__aeabi_dmul>
 800f03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f040:	1b5d      	subs	r5, r3, r5
 800f042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f04a:	e78f      	b.n	800ef6c <_strtod_l+0x3cc>
 800f04c:	3316      	adds	r3, #22
 800f04e:	dba8      	blt.n	800efa2 <_strtod_l+0x402>
 800f050:	4b37      	ldr	r3, [pc, #220]	@ (800f130 <_strtod_l+0x590>)
 800f052:	eba9 0808 	sub.w	r8, r9, r8
 800f056:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f05a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f05e:	4650      	mov	r0, sl
 800f060:	4659      	mov	r1, fp
 800f062:	f7f6 ff1b 	bl	8005e9c <__aeabi_ddiv>
 800f066:	e783      	b.n	800ef70 <_strtod_l+0x3d0>
 800f068:	4b32      	ldr	r3, [pc, #200]	@ (800f134 <_strtod_l+0x594>)
 800f06a:	9308      	str	r3, [sp, #32]
 800f06c:	2300      	movs	r3, #0
 800f06e:	1124      	asrs	r4, r4, #4
 800f070:	4650      	mov	r0, sl
 800f072:	4659      	mov	r1, fp
 800f074:	461e      	mov	r6, r3
 800f076:	2c01      	cmp	r4, #1
 800f078:	dc21      	bgt.n	800f0be <_strtod_l+0x51e>
 800f07a:	b10b      	cbz	r3, 800f080 <_strtod_l+0x4e0>
 800f07c:	4682      	mov	sl, r0
 800f07e:	468b      	mov	fp, r1
 800f080:	492c      	ldr	r1, [pc, #176]	@ (800f134 <_strtod_l+0x594>)
 800f082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f08a:	4652      	mov	r2, sl
 800f08c:	465b      	mov	r3, fp
 800f08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f092:	f7f6 fdd9 	bl	8005c48 <__aeabi_dmul>
 800f096:	4b28      	ldr	r3, [pc, #160]	@ (800f138 <_strtod_l+0x598>)
 800f098:	460a      	mov	r2, r1
 800f09a:	400b      	ands	r3, r1
 800f09c:	4927      	ldr	r1, [pc, #156]	@ (800f13c <_strtod_l+0x59c>)
 800f09e:	428b      	cmp	r3, r1
 800f0a0:	4682      	mov	sl, r0
 800f0a2:	d898      	bhi.n	800efd6 <_strtod_l+0x436>
 800f0a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	bf86      	itte	hi
 800f0ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f140 <_strtod_l+0x5a0>
 800f0b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800f0b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	9308      	str	r3, [sp, #32]
 800f0bc:	e07a      	b.n	800f1b4 <_strtod_l+0x614>
 800f0be:	07e2      	lsls	r2, r4, #31
 800f0c0:	d505      	bpl.n	800f0ce <_strtod_l+0x52e>
 800f0c2:	9b08      	ldr	r3, [sp, #32]
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f6 fdbe 	bl	8005c48 <__aeabi_dmul>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	9a08      	ldr	r2, [sp, #32]
 800f0d0:	3208      	adds	r2, #8
 800f0d2:	3601      	adds	r6, #1
 800f0d4:	1064      	asrs	r4, r4, #1
 800f0d6:	9208      	str	r2, [sp, #32]
 800f0d8:	e7cd      	b.n	800f076 <_strtod_l+0x4d6>
 800f0da:	d0ed      	beq.n	800f0b8 <_strtod_l+0x518>
 800f0dc:	4264      	negs	r4, r4
 800f0de:	f014 020f 	ands.w	r2, r4, #15
 800f0e2:	d00a      	beq.n	800f0fa <_strtod_l+0x55a>
 800f0e4:	4b12      	ldr	r3, [pc, #72]	@ (800f130 <_strtod_l+0x590>)
 800f0e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	4659      	mov	r1, fp
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	f7f6 fed3 	bl	8005e9c <__aeabi_ddiv>
 800f0f6:	4682      	mov	sl, r0
 800f0f8:	468b      	mov	fp, r1
 800f0fa:	1124      	asrs	r4, r4, #4
 800f0fc:	d0dc      	beq.n	800f0b8 <_strtod_l+0x518>
 800f0fe:	2c1f      	cmp	r4, #31
 800f100:	dd20      	ble.n	800f144 <_strtod_l+0x5a4>
 800f102:	2400      	movs	r4, #0
 800f104:	46a0      	mov	r8, r4
 800f106:	940a      	str	r4, [sp, #40]	@ 0x28
 800f108:	46a1      	mov	r9, r4
 800f10a:	9a05      	ldr	r2, [sp, #20]
 800f10c:	2322      	movs	r3, #34	@ 0x22
 800f10e:	f04f 0a00 	mov.w	sl, #0
 800f112:	f04f 0b00 	mov.w	fp, #0
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	e768      	b.n	800efec <_strtod_l+0x44c>
 800f11a:	bf00      	nop
 800f11c:	08014c73 	.word	0x08014c73
 800f120:	08014e8c 	.word	0x08014e8c
 800f124:	08014c6b 	.word	0x08014c6b
 800f128:	08014ca2 	.word	0x08014ca2
 800f12c:	08013980 	.word	0x08013980
 800f130:	08014dc0 	.word	0x08014dc0
 800f134:	08014d98 	.word	0x08014d98
 800f138:	7ff00000 	.word	0x7ff00000
 800f13c:	7ca00000 	.word	0x7ca00000
 800f140:	7fefffff 	.word	0x7fefffff
 800f144:	f014 0310 	ands.w	r3, r4, #16
 800f148:	bf18      	it	ne
 800f14a:	236a      	movne	r3, #106	@ 0x6a
 800f14c:	4ea9      	ldr	r6, [pc, #676]	@ (800f3f4 <_strtod_l+0x854>)
 800f14e:	9308      	str	r3, [sp, #32]
 800f150:	4650      	mov	r0, sl
 800f152:	4659      	mov	r1, fp
 800f154:	2300      	movs	r3, #0
 800f156:	07e2      	lsls	r2, r4, #31
 800f158:	d504      	bpl.n	800f164 <_strtod_l+0x5c4>
 800f15a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f15e:	f7f6 fd73 	bl	8005c48 <__aeabi_dmul>
 800f162:	2301      	movs	r3, #1
 800f164:	1064      	asrs	r4, r4, #1
 800f166:	f106 0608 	add.w	r6, r6, #8
 800f16a:	d1f4      	bne.n	800f156 <_strtod_l+0x5b6>
 800f16c:	b10b      	cbz	r3, 800f172 <_strtod_l+0x5d2>
 800f16e:	4682      	mov	sl, r0
 800f170:	468b      	mov	fp, r1
 800f172:	9b08      	ldr	r3, [sp, #32]
 800f174:	b1b3      	cbz	r3, 800f1a4 <_strtod_l+0x604>
 800f176:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f17a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f17e:	2b00      	cmp	r3, #0
 800f180:	4659      	mov	r1, fp
 800f182:	dd0f      	ble.n	800f1a4 <_strtod_l+0x604>
 800f184:	2b1f      	cmp	r3, #31
 800f186:	dd55      	ble.n	800f234 <_strtod_l+0x694>
 800f188:	2b34      	cmp	r3, #52	@ 0x34
 800f18a:	bfde      	ittt	le
 800f18c:	f04f 33ff 	movle.w	r3, #4294967295
 800f190:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f194:	4093      	lslle	r3, r2
 800f196:	f04f 0a00 	mov.w	sl, #0
 800f19a:	bfcc      	ite	gt
 800f19c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f1a0:	ea03 0b01 	andle.w	fp, r3, r1
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	4650      	mov	r0, sl
 800f1aa:	4659      	mov	r1, fp
 800f1ac:	f7f6 ffb4 	bl	8006118 <__aeabi_dcmpeq>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d1a6      	bne.n	800f102 <_strtod_l+0x562>
 800f1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f1ba:	9805      	ldr	r0, [sp, #20]
 800f1bc:	462b      	mov	r3, r5
 800f1be:	463a      	mov	r2, r7
 800f1c0:	f7ff f8c6 	bl	800e350 <__s2b>
 800f1c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f43f af05 	beq.w	800efd6 <_strtod_l+0x436>
 800f1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1ce:	2a00      	cmp	r2, #0
 800f1d0:	eba9 0308 	sub.w	r3, r9, r8
 800f1d4:	bfa8      	it	ge
 800f1d6:	2300      	movge	r3, #0
 800f1d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1da:	2400      	movs	r4, #0
 800f1dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f1e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800f1e2:	46a0      	mov	r8, r4
 800f1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1e6:	9805      	ldr	r0, [sp, #20]
 800f1e8:	6859      	ldr	r1, [r3, #4]
 800f1ea:	f7ff f809 	bl	800e200 <_Balloc>
 800f1ee:	4681      	mov	r9, r0
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	f43f aef4 	beq.w	800efde <_strtod_l+0x43e>
 800f1f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f8:	691a      	ldr	r2, [r3, #16]
 800f1fa:	3202      	adds	r2, #2
 800f1fc:	f103 010c 	add.w	r1, r3, #12
 800f200:	0092      	lsls	r2, r2, #2
 800f202:	300c      	adds	r0, #12
 800f204:	f7fe f89a 	bl	800d33c <memcpy>
 800f208:	ec4b ab10 	vmov	d0, sl, fp
 800f20c:	9805      	ldr	r0, [sp, #20]
 800f20e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f210:	a91b      	add	r1, sp, #108	@ 0x6c
 800f212:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f216:	f7ff fbd7 	bl	800e9c8 <__d2b>
 800f21a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f21c:	2800      	cmp	r0, #0
 800f21e:	f43f aede 	beq.w	800efde <_strtod_l+0x43e>
 800f222:	9805      	ldr	r0, [sp, #20]
 800f224:	2101      	movs	r1, #1
 800f226:	f7ff f929 	bl	800e47c <__i2b>
 800f22a:	4680      	mov	r8, r0
 800f22c:	b948      	cbnz	r0, 800f242 <_strtod_l+0x6a2>
 800f22e:	f04f 0800 	mov.w	r8, #0
 800f232:	e6d4      	b.n	800efde <_strtod_l+0x43e>
 800f234:	f04f 32ff 	mov.w	r2, #4294967295
 800f238:	fa02 f303 	lsl.w	r3, r2, r3
 800f23c:	ea03 0a0a 	and.w	sl, r3, sl
 800f240:	e7b0      	b.n	800f1a4 <_strtod_l+0x604>
 800f242:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f244:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f246:	2d00      	cmp	r5, #0
 800f248:	bfab      	itete	ge
 800f24a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f24c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f24e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f250:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f252:	bfac      	ite	ge
 800f254:	18ef      	addge	r7, r5, r3
 800f256:	1b5e      	sublt	r6, r3, r5
 800f258:	9b08      	ldr	r3, [sp, #32]
 800f25a:	1aed      	subs	r5, r5, r3
 800f25c:	4415      	add	r5, r2
 800f25e:	4b66      	ldr	r3, [pc, #408]	@ (800f3f8 <_strtod_l+0x858>)
 800f260:	3d01      	subs	r5, #1
 800f262:	429d      	cmp	r5, r3
 800f264:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f268:	da50      	bge.n	800f30c <_strtod_l+0x76c>
 800f26a:	1b5b      	subs	r3, r3, r5
 800f26c:	2b1f      	cmp	r3, #31
 800f26e:	eba2 0203 	sub.w	r2, r2, r3
 800f272:	f04f 0101 	mov.w	r1, #1
 800f276:	dc3d      	bgt.n	800f2f4 <_strtod_l+0x754>
 800f278:	fa01 f303 	lsl.w	r3, r1, r3
 800f27c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f27e:	2300      	movs	r3, #0
 800f280:	9310      	str	r3, [sp, #64]	@ 0x40
 800f282:	18bd      	adds	r5, r7, r2
 800f284:	9b08      	ldr	r3, [sp, #32]
 800f286:	42af      	cmp	r7, r5
 800f288:	4416      	add	r6, r2
 800f28a:	441e      	add	r6, r3
 800f28c:	463b      	mov	r3, r7
 800f28e:	bfa8      	it	ge
 800f290:	462b      	movge	r3, r5
 800f292:	42b3      	cmp	r3, r6
 800f294:	bfa8      	it	ge
 800f296:	4633      	movge	r3, r6
 800f298:	2b00      	cmp	r3, #0
 800f29a:	bfc2      	ittt	gt
 800f29c:	1aed      	subgt	r5, r5, r3
 800f29e:	1af6      	subgt	r6, r6, r3
 800f2a0:	1aff      	subgt	r7, r7, r3
 800f2a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dd16      	ble.n	800f2d6 <_strtod_l+0x736>
 800f2a8:	4641      	mov	r1, r8
 800f2aa:	9805      	ldr	r0, [sp, #20]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	f7ff f9a5 	bl	800e5fc <__pow5mult>
 800f2b2:	4680      	mov	r8, r0
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d0ba      	beq.n	800f22e <_strtod_l+0x68e>
 800f2b8:	4601      	mov	r1, r0
 800f2ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f2bc:	9805      	ldr	r0, [sp, #20]
 800f2be:	f7ff f8f3 	bl	800e4a8 <__multiply>
 800f2c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	f43f ae8a 	beq.w	800efde <_strtod_l+0x43e>
 800f2ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2cc:	9805      	ldr	r0, [sp, #20]
 800f2ce:	f7fe ffd7 	bl	800e280 <_Bfree>
 800f2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2d6:	2d00      	cmp	r5, #0
 800f2d8:	dc1d      	bgt.n	800f316 <_strtod_l+0x776>
 800f2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	dd23      	ble.n	800f328 <_strtod_l+0x788>
 800f2e0:	4649      	mov	r1, r9
 800f2e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f2e4:	9805      	ldr	r0, [sp, #20]
 800f2e6:	f7ff f989 	bl	800e5fc <__pow5mult>
 800f2ea:	4681      	mov	r9, r0
 800f2ec:	b9e0      	cbnz	r0, 800f328 <_strtod_l+0x788>
 800f2ee:	f04f 0900 	mov.w	r9, #0
 800f2f2:	e674      	b.n	800efde <_strtod_l+0x43e>
 800f2f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f2f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f2fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f300:	35e2      	adds	r5, #226	@ 0xe2
 800f302:	fa01 f305 	lsl.w	r3, r1, r5
 800f306:	9310      	str	r3, [sp, #64]	@ 0x40
 800f308:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f30a:	e7ba      	b.n	800f282 <_strtod_l+0x6e2>
 800f30c:	2300      	movs	r3, #0
 800f30e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f310:	2301      	movs	r3, #1
 800f312:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f314:	e7b5      	b.n	800f282 <_strtod_l+0x6e2>
 800f316:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f318:	9805      	ldr	r0, [sp, #20]
 800f31a:	462a      	mov	r2, r5
 800f31c:	f7ff f9c8 	bl	800e6b0 <__lshift>
 800f320:	901a      	str	r0, [sp, #104]	@ 0x68
 800f322:	2800      	cmp	r0, #0
 800f324:	d1d9      	bne.n	800f2da <_strtod_l+0x73a>
 800f326:	e65a      	b.n	800efde <_strtod_l+0x43e>
 800f328:	2e00      	cmp	r6, #0
 800f32a:	dd07      	ble.n	800f33c <_strtod_l+0x79c>
 800f32c:	4649      	mov	r1, r9
 800f32e:	9805      	ldr	r0, [sp, #20]
 800f330:	4632      	mov	r2, r6
 800f332:	f7ff f9bd 	bl	800e6b0 <__lshift>
 800f336:	4681      	mov	r9, r0
 800f338:	2800      	cmp	r0, #0
 800f33a:	d0d8      	beq.n	800f2ee <_strtod_l+0x74e>
 800f33c:	2f00      	cmp	r7, #0
 800f33e:	dd08      	ble.n	800f352 <_strtod_l+0x7b2>
 800f340:	4641      	mov	r1, r8
 800f342:	9805      	ldr	r0, [sp, #20]
 800f344:	463a      	mov	r2, r7
 800f346:	f7ff f9b3 	bl	800e6b0 <__lshift>
 800f34a:	4680      	mov	r8, r0
 800f34c:	2800      	cmp	r0, #0
 800f34e:	f43f ae46 	beq.w	800efde <_strtod_l+0x43e>
 800f352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f354:	9805      	ldr	r0, [sp, #20]
 800f356:	464a      	mov	r2, r9
 800f358:	f7ff fa32 	bl	800e7c0 <__mdiff>
 800f35c:	4604      	mov	r4, r0
 800f35e:	2800      	cmp	r0, #0
 800f360:	f43f ae3d 	beq.w	800efde <_strtod_l+0x43e>
 800f364:	68c3      	ldr	r3, [r0, #12]
 800f366:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f368:	2300      	movs	r3, #0
 800f36a:	60c3      	str	r3, [r0, #12]
 800f36c:	4641      	mov	r1, r8
 800f36e:	f7ff fa0b 	bl	800e788 <__mcmp>
 800f372:	2800      	cmp	r0, #0
 800f374:	da46      	bge.n	800f404 <_strtod_l+0x864>
 800f376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f378:	ea53 030a 	orrs.w	r3, r3, sl
 800f37c:	d16c      	bne.n	800f458 <_strtod_l+0x8b8>
 800f37e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f382:	2b00      	cmp	r3, #0
 800f384:	d168      	bne.n	800f458 <_strtod_l+0x8b8>
 800f386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f38a:	0d1b      	lsrs	r3, r3, #20
 800f38c:	051b      	lsls	r3, r3, #20
 800f38e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f392:	d961      	bls.n	800f458 <_strtod_l+0x8b8>
 800f394:	6963      	ldr	r3, [r4, #20]
 800f396:	b913      	cbnz	r3, 800f39e <_strtod_l+0x7fe>
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	dd5c      	ble.n	800f458 <_strtod_l+0x8b8>
 800f39e:	4621      	mov	r1, r4
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	9805      	ldr	r0, [sp, #20]
 800f3a4:	f7ff f984 	bl	800e6b0 <__lshift>
 800f3a8:	4641      	mov	r1, r8
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	f7ff f9ec 	bl	800e788 <__mcmp>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	dd51      	ble.n	800f458 <_strtod_l+0x8b8>
 800f3b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3b8:	9a08      	ldr	r2, [sp, #32]
 800f3ba:	0d1b      	lsrs	r3, r3, #20
 800f3bc:	051b      	lsls	r3, r3, #20
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	d06b      	beq.n	800f49a <_strtod_l+0x8fa>
 800f3c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f3c6:	d868      	bhi.n	800f49a <_strtod_l+0x8fa>
 800f3c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f3cc:	f67f ae9d 	bls.w	800f10a <_strtod_l+0x56a>
 800f3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3fc <_strtod_l+0x85c>)
 800f3d2:	4650      	mov	r0, sl
 800f3d4:	4659      	mov	r1, fp
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f7f6 fc36 	bl	8005c48 <__aeabi_dmul>
 800f3dc:	4b08      	ldr	r3, [pc, #32]	@ (800f400 <_strtod_l+0x860>)
 800f3de:	400b      	ands	r3, r1
 800f3e0:	4682      	mov	sl, r0
 800f3e2:	468b      	mov	fp, r1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f47f ae05 	bne.w	800eff4 <_strtod_l+0x454>
 800f3ea:	9a05      	ldr	r2, [sp, #20]
 800f3ec:	2322      	movs	r3, #34	@ 0x22
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	e600      	b.n	800eff4 <_strtod_l+0x454>
 800f3f2:	bf00      	nop
 800f3f4:	08014eb8 	.word	0x08014eb8
 800f3f8:	fffffc02 	.word	0xfffffc02
 800f3fc:	39500000 	.word	0x39500000
 800f400:	7ff00000 	.word	0x7ff00000
 800f404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f408:	d165      	bne.n	800f4d6 <_strtod_l+0x936>
 800f40a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f410:	b35a      	cbz	r2, 800f46a <_strtod_l+0x8ca>
 800f412:	4a9f      	ldr	r2, [pc, #636]	@ (800f690 <_strtod_l+0xaf0>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d12b      	bne.n	800f470 <_strtod_l+0x8d0>
 800f418:	9b08      	ldr	r3, [sp, #32]
 800f41a:	4651      	mov	r1, sl
 800f41c:	b303      	cbz	r3, 800f460 <_strtod_l+0x8c0>
 800f41e:	4b9d      	ldr	r3, [pc, #628]	@ (800f694 <_strtod_l+0xaf4>)
 800f420:	465a      	mov	r2, fp
 800f422:	4013      	ands	r3, r2
 800f424:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f428:	f04f 32ff 	mov.w	r2, #4294967295
 800f42c:	d81b      	bhi.n	800f466 <_strtod_l+0x8c6>
 800f42e:	0d1b      	lsrs	r3, r3, #20
 800f430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f434:	fa02 f303 	lsl.w	r3, r2, r3
 800f438:	4299      	cmp	r1, r3
 800f43a:	d119      	bne.n	800f470 <_strtod_l+0x8d0>
 800f43c:	4b96      	ldr	r3, [pc, #600]	@ (800f698 <_strtod_l+0xaf8>)
 800f43e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f440:	429a      	cmp	r2, r3
 800f442:	d102      	bne.n	800f44a <_strtod_l+0x8aa>
 800f444:	3101      	adds	r1, #1
 800f446:	f43f adca 	beq.w	800efde <_strtod_l+0x43e>
 800f44a:	4b92      	ldr	r3, [pc, #584]	@ (800f694 <_strtod_l+0xaf4>)
 800f44c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f44e:	401a      	ands	r2, r3
 800f450:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f454:	f04f 0a00 	mov.w	sl, #0
 800f458:	9b08      	ldr	r3, [sp, #32]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1b8      	bne.n	800f3d0 <_strtod_l+0x830>
 800f45e:	e5c9      	b.n	800eff4 <_strtod_l+0x454>
 800f460:	f04f 33ff 	mov.w	r3, #4294967295
 800f464:	e7e8      	b.n	800f438 <_strtod_l+0x898>
 800f466:	4613      	mov	r3, r2
 800f468:	e7e6      	b.n	800f438 <_strtod_l+0x898>
 800f46a:	ea53 030a 	orrs.w	r3, r3, sl
 800f46e:	d0a1      	beq.n	800f3b4 <_strtod_l+0x814>
 800f470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f472:	b1db      	cbz	r3, 800f4ac <_strtod_l+0x90c>
 800f474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f476:	4213      	tst	r3, r2
 800f478:	d0ee      	beq.n	800f458 <_strtod_l+0x8b8>
 800f47a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f47c:	9a08      	ldr	r2, [sp, #32]
 800f47e:	4650      	mov	r0, sl
 800f480:	4659      	mov	r1, fp
 800f482:	b1bb      	cbz	r3, 800f4b4 <_strtod_l+0x914>
 800f484:	f7ff fb6e 	bl	800eb64 <sulp>
 800f488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f48c:	ec53 2b10 	vmov	r2, r3, d0
 800f490:	f7f6 fa24 	bl	80058dc <__adddf3>
 800f494:	4682      	mov	sl, r0
 800f496:	468b      	mov	fp, r1
 800f498:	e7de      	b.n	800f458 <_strtod_l+0x8b8>
 800f49a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f49e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4a6:	f04f 3aff 	mov.w	sl, #4294967295
 800f4aa:	e7d5      	b.n	800f458 <_strtod_l+0x8b8>
 800f4ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4ae:	ea13 0f0a 	tst.w	r3, sl
 800f4b2:	e7e1      	b.n	800f478 <_strtod_l+0x8d8>
 800f4b4:	f7ff fb56 	bl	800eb64 <sulp>
 800f4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4bc:	ec53 2b10 	vmov	r2, r3, d0
 800f4c0:	f7f6 fa0a 	bl	80058d8 <__aeabi_dsub>
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	4682      	mov	sl, r0
 800f4ca:	468b      	mov	fp, r1
 800f4cc:	f7f6 fe24 	bl	8006118 <__aeabi_dcmpeq>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d0c1      	beq.n	800f458 <_strtod_l+0x8b8>
 800f4d4:	e619      	b.n	800f10a <_strtod_l+0x56a>
 800f4d6:	4641      	mov	r1, r8
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f7ff facd 	bl	800ea78 <__ratio>
 800f4de:	ec57 6b10 	vmov	r6, r7, d0
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7f6 fe28 	bl	8006140 <__aeabi_dcmple>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d06f      	beq.n	800f5d4 <_strtod_l+0xa34>
 800f4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d17a      	bne.n	800f5f0 <_strtod_l+0xa50>
 800f4fa:	f1ba 0f00 	cmp.w	sl, #0
 800f4fe:	d158      	bne.n	800f5b2 <_strtod_l+0xa12>
 800f500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f506:	2b00      	cmp	r3, #0
 800f508:	d15a      	bne.n	800f5c0 <_strtod_l+0xa20>
 800f50a:	4b64      	ldr	r3, [pc, #400]	@ (800f69c <_strtod_l+0xafc>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	4630      	mov	r0, r6
 800f510:	4639      	mov	r1, r7
 800f512:	f7f6 fe0b 	bl	800612c <__aeabi_dcmplt>
 800f516:	2800      	cmp	r0, #0
 800f518:	d159      	bne.n	800f5ce <_strtod_l+0xa2e>
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	4b60      	ldr	r3, [pc, #384]	@ (800f6a0 <_strtod_l+0xb00>)
 800f520:	2200      	movs	r2, #0
 800f522:	f7f6 fb91 	bl	8005c48 <__aeabi_dmul>
 800f526:	4606      	mov	r6, r0
 800f528:	460f      	mov	r7, r1
 800f52a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f52e:	9606      	str	r6, [sp, #24]
 800f530:	9307      	str	r3, [sp, #28]
 800f532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f536:	4d57      	ldr	r5, [pc, #348]	@ (800f694 <_strtod_l+0xaf4>)
 800f538:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f53e:	401d      	ands	r5, r3
 800f540:	4b58      	ldr	r3, [pc, #352]	@ (800f6a4 <_strtod_l+0xb04>)
 800f542:	429d      	cmp	r5, r3
 800f544:	f040 80b2 	bne.w	800f6ac <_strtod_l+0xb0c>
 800f548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f54a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f54e:	ec4b ab10 	vmov	d0, sl, fp
 800f552:	f7ff f9c9 	bl	800e8e8 <__ulp>
 800f556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f55a:	ec51 0b10 	vmov	r0, r1, d0
 800f55e:	f7f6 fb73 	bl	8005c48 <__aeabi_dmul>
 800f562:	4652      	mov	r2, sl
 800f564:	465b      	mov	r3, fp
 800f566:	f7f6 f9b9 	bl	80058dc <__adddf3>
 800f56a:	460b      	mov	r3, r1
 800f56c:	4949      	ldr	r1, [pc, #292]	@ (800f694 <_strtod_l+0xaf4>)
 800f56e:	4a4e      	ldr	r2, [pc, #312]	@ (800f6a8 <_strtod_l+0xb08>)
 800f570:	4019      	ands	r1, r3
 800f572:	4291      	cmp	r1, r2
 800f574:	4682      	mov	sl, r0
 800f576:	d942      	bls.n	800f5fe <_strtod_l+0xa5e>
 800f578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f57a:	4b47      	ldr	r3, [pc, #284]	@ (800f698 <_strtod_l+0xaf8>)
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d103      	bne.n	800f588 <_strtod_l+0x9e8>
 800f580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f582:	3301      	adds	r3, #1
 800f584:	f43f ad2b 	beq.w	800efde <_strtod_l+0x43e>
 800f588:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f698 <_strtod_l+0xaf8>
 800f58c:	f04f 3aff 	mov.w	sl, #4294967295
 800f590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f592:	9805      	ldr	r0, [sp, #20]
 800f594:	f7fe fe74 	bl	800e280 <_Bfree>
 800f598:	9805      	ldr	r0, [sp, #20]
 800f59a:	4649      	mov	r1, r9
 800f59c:	f7fe fe70 	bl	800e280 <_Bfree>
 800f5a0:	9805      	ldr	r0, [sp, #20]
 800f5a2:	4641      	mov	r1, r8
 800f5a4:	f7fe fe6c 	bl	800e280 <_Bfree>
 800f5a8:	9805      	ldr	r0, [sp, #20]
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	f7fe fe68 	bl	800e280 <_Bfree>
 800f5b0:	e618      	b.n	800f1e4 <_strtod_l+0x644>
 800f5b2:	f1ba 0f01 	cmp.w	sl, #1
 800f5b6:	d103      	bne.n	800f5c0 <_strtod_l+0xa20>
 800f5b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f43f ada5 	beq.w	800f10a <_strtod_l+0x56a>
 800f5c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f670 <_strtod_l+0xad0>
 800f5c4:	4f35      	ldr	r7, [pc, #212]	@ (800f69c <_strtod_l+0xafc>)
 800f5c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5ca:	2600      	movs	r6, #0
 800f5cc:	e7b1      	b.n	800f532 <_strtod_l+0x992>
 800f5ce:	4f34      	ldr	r7, [pc, #208]	@ (800f6a0 <_strtod_l+0xb00>)
 800f5d0:	2600      	movs	r6, #0
 800f5d2:	e7aa      	b.n	800f52a <_strtod_l+0x98a>
 800f5d4:	4b32      	ldr	r3, [pc, #200]	@ (800f6a0 <_strtod_l+0xb00>)
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	4639      	mov	r1, r7
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f7f6 fb34 	bl	8005c48 <__aeabi_dmul>
 800f5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	460f      	mov	r7, r1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d09f      	beq.n	800f52a <_strtod_l+0x98a>
 800f5ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f5ee:	e7a0      	b.n	800f532 <_strtod_l+0x992>
 800f5f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f678 <_strtod_l+0xad8>
 800f5f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5f8:	ec57 6b17 	vmov	r6, r7, d7
 800f5fc:	e799      	b.n	800f532 <_strtod_l+0x992>
 800f5fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f602:	9b08      	ldr	r3, [sp, #32]
 800f604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1c1      	bne.n	800f590 <_strtod_l+0x9f0>
 800f60c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f610:	0d1b      	lsrs	r3, r3, #20
 800f612:	051b      	lsls	r3, r3, #20
 800f614:	429d      	cmp	r5, r3
 800f616:	d1bb      	bne.n	800f590 <_strtod_l+0x9f0>
 800f618:	4630      	mov	r0, r6
 800f61a:	4639      	mov	r1, r7
 800f61c:	f7f7 f9d2 	bl	80069c4 <__aeabi_d2lz>
 800f620:	f7f6 fae4 	bl	8005bec <__aeabi_l2d>
 800f624:	4602      	mov	r2, r0
 800f626:	460b      	mov	r3, r1
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	f7f6 f954 	bl	80058d8 <__aeabi_dsub>
 800f630:	460b      	mov	r3, r1
 800f632:	4602      	mov	r2, r0
 800f634:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f638:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f63e:	ea46 060a 	orr.w	r6, r6, sl
 800f642:	431e      	orrs	r6, r3
 800f644:	d06f      	beq.n	800f726 <_strtod_l+0xb86>
 800f646:	a30e      	add	r3, pc, #56	@ (adr r3, 800f680 <_strtod_l+0xae0>)
 800f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64c:	f7f6 fd6e 	bl	800612c <__aeabi_dcmplt>
 800f650:	2800      	cmp	r0, #0
 800f652:	f47f accf 	bne.w	800eff4 <_strtod_l+0x454>
 800f656:	a30c      	add	r3, pc, #48	@ (adr r3, 800f688 <_strtod_l+0xae8>)
 800f658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f660:	f7f6 fd82 	bl	8006168 <__aeabi_dcmpgt>
 800f664:	2800      	cmp	r0, #0
 800f666:	d093      	beq.n	800f590 <_strtod_l+0x9f0>
 800f668:	e4c4      	b.n	800eff4 <_strtod_l+0x454>
 800f66a:	bf00      	nop
 800f66c:	f3af 8000 	nop.w
 800f670:	00000000 	.word	0x00000000
 800f674:	bff00000 	.word	0xbff00000
 800f678:	00000000 	.word	0x00000000
 800f67c:	3ff00000 	.word	0x3ff00000
 800f680:	94a03595 	.word	0x94a03595
 800f684:	3fdfffff 	.word	0x3fdfffff
 800f688:	35afe535 	.word	0x35afe535
 800f68c:	3fe00000 	.word	0x3fe00000
 800f690:	000fffff 	.word	0x000fffff
 800f694:	7ff00000 	.word	0x7ff00000
 800f698:	7fefffff 	.word	0x7fefffff
 800f69c:	3ff00000 	.word	0x3ff00000
 800f6a0:	3fe00000 	.word	0x3fe00000
 800f6a4:	7fe00000 	.word	0x7fe00000
 800f6a8:	7c9fffff 	.word	0x7c9fffff
 800f6ac:	9b08      	ldr	r3, [sp, #32]
 800f6ae:	b323      	cbz	r3, 800f6fa <_strtod_l+0xb5a>
 800f6b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f6b4:	d821      	bhi.n	800f6fa <_strtod_l+0xb5a>
 800f6b6:	a328      	add	r3, pc, #160	@ (adr r3, 800f758 <_strtod_l+0xbb8>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	4630      	mov	r0, r6
 800f6be:	4639      	mov	r1, r7
 800f6c0:	f7f6 fd3e 	bl	8006140 <__aeabi_dcmple>
 800f6c4:	b1a0      	cbz	r0, 800f6f0 <_strtod_l+0xb50>
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7f6 fd95 	bl	80061f8 <__aeabi_d2uiz>
 800f6ce:	2801      	cmp	r0, #1
 800f6d0:	bf38      	it	cc
 800f6d2:	2001      	movcc	r0, #1
 800f6d4:	f7f6 fa3e 	bl	8005b54 <__aeabi_ui2d>
 800f6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6da:	4606      	mov	r6, r0
 800f6dc:	460f      	mov	r7, r1
 800f6de:	b9fb      	cbnz	r3, 800f720 <_strtod_l+0xb80>
 800f6e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f6e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f6e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f6ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f6f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f6f6:	1b5b      	subs	r3, r3, r5
 800f6f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f6fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f702:	f7ff f8f1 	bl	800e8e8 <__ulp>
 800f706:	4650      	mov	r0, sl
 800f708:	ec53 2b10 	vmov	r2, r3, d0
 800f70c:	4659      	mov	r1, fp
 800f70e:	f7f6 fa9b 	bl	8005c48 <__aeabi_dmul>
 800f712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f716:	f7f6 f8e1 	bl	80058dc <__adddf3>
 800f71a:	4682      	mov	sl, r0
 800f71c:	468b      	mov	fp, r1
 800f71e:	e770      	b.n	800f602 <_strtod_l+0xa62>
 800f720:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f724:	e7e0      	b.n	800f6e8 <_strtod_l+0xb48>
 800f726:	a30e      	add	r3, pc, #56	@ (adr r3, 800f760 <_strtod_l+0xbc0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f6 fcfe 	bl	800612c <__aeabi_dcmplt>
 800f730:	e798      	b.n	800f664 <_strtod_l+0xac4>
 800f732:	2300      	movs	r3, #0
 800f734:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f736:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f73a:	6013      	str	r3, [r2, #0]
 800f73c:	f7ff ba6d 	b.w	800ec1a <_strtod_l+0x7a>
 800f740:	2a65      	cmp	r2, #101	@ 0x65
 800f742:	f43f ab66 	beq.w	800ee12 <_strtod_l+0x272>
 800f746:	2a45      	cmp	r2, #69	@ 0x45
 800f748:	f43f ab63 	beq.w	800ee12 <_strtod_l+0x272>
 800f74c:	2301      	movs	r3, #1
 800f74e:	f7ff bb9e 	b.w	800ee8e <_strtod_l+0x2ee>
 800f752:	bf00      	nop
 800f754:	f3af 8000 	nop.w
 800f758:	ffc00000 	.word	0xffc00000
 800f75c:	41dfffff 	.word	0x41dfffff
 800f760:	94a03595 	.word	0x94a03595
 800f764:	3fcfffff 	.word	0x3fcfffff

0800f768 <_strtod_r>:
 800f768:	4b01      	ldr	r3, [pc, #4]	@ (800f770 <_strtod_r+0x8>)
 800f76a:	f7ff ba19 	b.w	800eba0 <_strtod_l>
 800f76e:	bf00      	nop
 800f770:	200000c8 	.word	0x200000c8

0800f774 <_strtol_l.constprop.0>:
 800f774:	2b24      	cmp	r3, #36	@ 0x24
 800f776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f77a:	4686      	mov	lr, r0
 800f77c:	4690      	mov	r8, r2
 800f77e:	d801      	bhi.n	800f784 <_strtol_l.constprop.0+0x10>
 800f780:	2b01      	cmp	r3, #1
 800f782:	d106      	bne.n	800f792 <_strtol_l.constprop.0+0x1e>
 800f784:	f7fd fda8 	bl	800d2d8 <__errno>
 800f788:	2316      	movs	r3, #22
 800f78a:	6003      	str	r3, [r0, #0]
 800f78c:	2000      	movs	r0, #0
 800f78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f792:	4834      	ldr	r0, [pc, #208]	@ (800f864 <_strtol_l.constprop.0+0xf0>)
 800f794:	460d      	mov	r5, r1
 800f796:	462a      	mov	r2, r5
 800f798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f79c:	5d06      	ldrb	r6, [r0, r4]
 800f79e:	f016 0608 	ands.w	r6, r6, #8
 800f7a2:	d1f8      	bne.n	800f796 <_strtol_l.constprop.0+0x22>
 800f7a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7a6:	d12d      	bne.n	800f804 <_strtol_l.constprop.0+0x90>
 800f7a8:	782c      	ldrb	r4, [r5, #0]
 800f7aa:	2601      	movs	r6, #1
 800f7ac:	1c95      	adds	r5, r2, #2
 800f7ae:	f033 0210 	bics.w	r2, r3, #16
 800f7b2:	d109      	bne.n	800f7c8 <_strtol_l.constprop.0+0x54>
 800f7b4:	2c30      	cmp	r4, #48	@ 0x30
 800f7b6:	d12a      	bne.n	800f80e <_strtol_l.constprop.0+0x9a>
 800f7b8:	782a      	ldrb	r2, [r5, #0]
 800f7ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f7be:	2a58      	cmp	r2, #88	@ 0x58
 800f7c0:	d125      	bne.n	800f80e <_strtol_l.constprop.0+0x9a>
 800f7c2:	786c      	ldrb	r4, [r5, #1]
 800f7c4:	2310      	movs	r3, #16
 800f7c6:	3502      	adds	r5, #2
 800f7c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f7cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	fbbc f9f3 	udiv	r9, ip, r3
 800f7d6:	4610      	mov	r0, r2
 800f7d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f7dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f7e0:	2f09      	cmp	r7, #9
 800f7e2:	d81b      	bhi.n	800f81c <_strtol_l.constprop.0+0xa8>
 800f7e4:	463c      	mov	r4, r7
 800f7e6:	42a3      	cmp	r3, r4
 800f7e8:	dd27      	ble.n	800f83a <_strtol_l.constprop.0+0xc6>
 800f7ea:	1c57      	adds	r7, r2, #1
 800f7ec:	d007      	beq.n	800f7fe <_strtol_l.constprop.0+0x8a>
 800f7ee:	4581      	cmp	r9, r0
 800f7f0:	d320      	bcc.n	800f834 <_strtol_l.constprop.0+0xc0>
 800f7f2:	d101      	bne.n	800f7f8 <_strtol_l.constprop.0+0x84>
 800f7f4:	45a2      	cmp	sl, r4
 800f7f6:	db1d      	blt.n	800f834 <_strtol_l.constprop.0+0xc0>
 800f7f8:	fb00 4003 	mla	r0, r0, r3, r4
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f802:	e7eb      	b.n	800f7dc <_strtol_l.constprop.0+0x68>
 800f804:	2c2b      	cmp	r4, #43	@ 0x2b
 800f806:	bf04      	itt	eq
 800f808:	782c      	ldrbeq	r4, [r5, #0]
 800f80a:	1c95      	addeq	r5, r2, #2
 800f80c:	e7cf      	b.n	800f7ae <_strtol_l.constprop.0+0x3a>
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1da      	bne.n	800f7c8 <_strtol_l.constprop.0+0x54>
 800f812:	2c30      	cmp	r4, #48	@ 0x30
 800f814:	bf0c      	ite	eq
 800f816:	2308      	moveq	r3, #8
 800f818:	230a      	movne	r3, #10
 800f81a:	e7d5      	b.n	800f7c8 <_strtol_l.constprop.0+0x54>
 800f81c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f820:	2f19      	cmp	r7, #25
 800f822:	d801      	bhi.n	800f828 <_strtol_l.constprop.0+0xb4>
 800f824:	3c37      	subs	r4, #55	@ 0x37
 800f826:	e7de      	b.n	800f7e6 <_strtol_l.constprop.0+0x72>
 800f828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f82c:	2f19      	cmp	r7, #25
 800f82e:	d804      	bhi.n	800f83a <_strtol_l.constprop.0+0xc6>
 800f830:	3c57      	subs	r4, #87	@ 0x57
 800f832:	e7d8      	b.n	800f7e6 <_strtol_l.constprop.0+0x72>
 800f834:	f04f 32ff 	mov.w	r2, #4294967295
 800f838:	e7e1      	b.n	800f7fe <_strtol_l.constprop.0+0x8a>
 800f83a:	1c53      	adds	r3, r2, #1
 800f83c:	d108      	bne.n	800f850 <_strtol_l.constprop.0+0xdc>
 800f83e:	2322      	movs	r3, #34	@ 0x22
 800f840:	f8ce 3000 	str.w	r3, [lr]
 800f844:	4660      	mov	r0, ip
 800f846:	f1b8 0f00 	cmp.w	r8, #0
 800f84a:	d0a0      	beq.n	800f78e <_strtol_l.constprop.0+0x1a>
 800f84c:	1e69      	subs	r1, r5, #1
 800f84e:	e006      	b.n	800f85e <_strtol_l.constprop.0+0xea>
 800f850:	b106      	cbz	r6, 800f854 <_strtol_l.constprop.0+0xe0>
 800f852:	4240      	negs	r0, r0
 800f854:	f1b8 0f00 	cmp.w	r8, #0
 800f858:	d099      	beq.n	800f78e <_strtol_l.constprop.0+0x1a>
 800f85a:	2a00      	cmp	r2, #0
 800f85c:	d1f6      	bne.n	800f84c <_strtol_l.constprop.0+0xd8>
 800f85e:	f8c8 1000 	str.w	r1, [r8]
 800f862:	e794      	b.n	800f78e <_strtol_l.constprop.0+0x1a>
 800f864:	08014ee1 	.word	0x08014ee1

0800f868 <_strtol_r>:
 800f868:	f7ff bf84 	b.w	800f774 <_strtol_l.constprop.0>

0800f86c <__ssputs_r>:
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	688e      	ldr	r6, [r1, #8]
 800f872:	461f      	mov	r7, r3
 800f874:	42be      	cmp	r6, r7
 800f876:	680b      	ldr	r3, [r1, #0]
 800f878:	4682      	mov	sl, r0
 800f87a:	460c      	mov	r4, r1
 800f87c:	4690      	mov	r8, r2
 800f87e:	d82d      	bhi.n	800f8dc <__ssputs_r+0x70>
 800f880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f888:	d026      	beq.n	800f8d8 <__ssputs_r+0x6c>
 800f88a:	6965      	ldr	r5, [r4, #20]
 800f88c:	6909      	ldr	r1, [r1, #16]
 800f88e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f892:	eba3 0901 	sub.w	r9, r3, r1
 800f896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f89a:	1c7b      	adds	r3, r7, #1
 800f89c:	444b      	add	r3, r9
 800f89e:	106d      	asrs	r5, r5, #1
 800f8a0:	429d      	cmp	r5, r3
 800f8a2:	bf38      	it	cc
 800f8a4:	461d      	movcc	r5, r3
 800f8a6:	0553      	lsls	r3, r2, #21
 800f8a8:	d527      	bpl.n	800f8fa <__ssputs_r+0x8e>
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	f7fe fc1c 	bl	800e0e8 <_malloc_r>
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	b360      	cbz	r0, 800f90e <__ssputs_r+0xa2>
 800f8b4:	6921      	ldr	r1, [r4, #16]
 800f8b6:	464a      	mov	r2, r9
 800f8b8:	f7fd fd40 	bl	800d33c <memcpy>
 800f8bc:	89a3      	ldrh	r3, [r4, #12]
 800f8be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8c6:	81a3      	strh	r3, [r4, #12]
 800f8c8:	6126      	str	r6, [r4, #16]
 800f8ca:	6165      	str	r5, [r4, #20]
 800f8cc:	444e      	add	r6, r9
 800f8ce:	eba5 0509 	sub.w	r5, r5, r9
 800f8d2:	6026      	str	r6, [r4, #0]
 800f8d4:	60a5      	str	r5, [r4, #8]
 800f8d6:	463e      	mov	r6, r7
 800f8d8:	42be      	cmp	r6, r7
 800f8da:	d900      	bls.n	800f8de <__ssputs_r+0x72>
 800f8dc:	463e      	mov	r6, r7
 800f8de:	6820      	ldr	r0, [r4, #0]
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	4641      	mov	r1, r8
 800f8e4:	f7fd fc8c 	bl	800d200 <memmove>
 800f8e8:	68a3      	ldr	r3, [r4, #8]
 800f8ea:	1b9b      	subs	r3, r3, r6
 800f8ec:	60a3      	str	r3, [r4, #8]
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	4433      	add	r3, r6
 800f8f2:	6023      	str	r3, [r4, #0]
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fa:	462a      	mov	r2, r5
 800f8fc:	f000 ff29 	bl	8010752 <_realloc_r>
 800f900:	4606      	mov	r6, r0
 800f902:	2800      	cmp	r0, #0
 800f904:	d1e0      	bne.n	800f8c8 <__ssputs_r+0x5c>
 800f906:	6921      	ldr	r1, [r4, #16]
 800f908:	4650      	mov	r0, sl
 800f90a:	f7fe fb79 	bl	800e000 <_free_r>
 800f90e:	230c      	movs	r3, #12
 800f910:	f8ca 3000 	str.w	r3, [sl]
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f91a:	81a3      	strh	r3, [r4, #12]
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295
 800f920:	e7e9      	b.n	800f8f6 <__ssputs_r+0x8a>
	...

0800f924 <_svfiprintf_r>:
 800f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f928:	4698      	mov	r8, r3
 800f92a:	898b      	ldrh	r3, [r1, #12]
 800f92c:	061b      	lsls	r3, r3, #24
 800f92e:	b09d      	sub	sp, #116	@ 0x74
 800f930:	4607      	mov	r7, r0
 800f932:	460d      	mov	r5, r1
 800f934:	4614      	mov	r4, r2
 800f936:	d510      	bpl.n	800f95a <_svfiprintf_r+0x36>
 800f938:	690b      	ldr	r3, [r1, #16]
 800f93a:	b973      	cbnz	r3, 800f95a <_svfiprintf_r+0x36>
 800f93c:	2140      	movs	r1, #64	@ 0x40
 800f93e:	f7fe fbd3 	bl	800e0e8 <_malloc_r>
 800f942:	6028      	str	r0, [r5, #0]
 800f944:	6128      	str	r0, [r5, #16]
 800f946:	b930      	cbnz	r0, 800f956 <_svfiprintf_r+0x32>
 800f948:	230c      	movs	r3, #12
 800f94a:	603b      	str	r3, [r7, #0]
 800f94c:	f04f 30ff 	mov.w	r0, #4294967295
 800f950:	b01d      	add	sp, #116	@ 0x74
 800f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f956:	2340      	movs	r3, #64	@ 0x40
 800f958:	616b      	str	r3, [r5, #20]
 800f95a:	2300      	movs	r3, #0
 800f95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f95e:	2320      	movs	r3, #32
 800f960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f964:	f8cd 800c 	str.w	r8, [sp, #12]
 800f968:	2330      	movs	r3, #48	@ 0x30
 800f96a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb08 <_svfiprintf_r+0x1e4>
 800f96e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f972:	f04f 0901 	mov.w	r9, #1
 800f976:	4623      	mov	r3, r4
 800f978:	469a      	mov	sl, r3
 800f97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f97e:	b10a      	cbz	r2, 800f984 <_svfiprintf_r+0x60>
 800f980:	2a25      	cmp	r2, #37	@ 0x25
 800f982:	d1f9      	bne.n	800f978 <_svfiprintf_r+0x54>
 800f984:	ebba 0b04 	subs.w	fp, sl, r4
 800f988:	d00b      	beq.n	800f9a2 <_svfiprintf_r+0x7e>
 800f98a:	465b      	mov	r3, fp
 800f98c:	4622      	mov	r2, r4
 800f98e:	4629      	mov	r1, r5
 800f990:	4638      	mov	r0, r7
 800f992:	f7ff ff6b 	bl	800f86c <__ssputs_r>
 800f996:	3001      	adds	r0, #1
 800f998:	f000 80a7 	beq.w	800faea <_svfiprintf_r+0x1c6>
 800f99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f99e:	445a      	add	r2, fp
 800f9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 809f 	beq.w	800faea <_svfiprintf_r+0x1c6>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9b6:	f10a 0a01 	add.w	sl, sl, #1
 800f9ba:	9304      	str	r3, [sp, #16]
 800f9bc:	9307      	str	r3, [sp, #28]
 800f9be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9c4:	4654      	mov	r4, sl
 800f9c6:	2205      	movs	r2, #5
 800f9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9cc:	484e      	ldr	r0, [pc, #312]	@ (800fb08 <_svfiprintf_r+0x1e4>)
 800f9ce:	f7f5 febf 	bl	8005750 <memchr>
 800f9d2:	9a04      	ldr	r2, [sp, #16]
 800f9d4:	b9d8      	cbnz	r0, 800fa0e <_svfiprintf_r+0xea>
 800f9d6:	06d0      	lsls	r0, r2, #27
 800f9d8:	bf44      	itt	mi
 800f9da:	2320      	movmi	r3, #32
 800f9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9e0:	0711      	lsls	r1, r2, #28
 800f9e2:	bf44      	itt	mi
 800f9e4:	232b      	movmi	r3, #43	@ 0x2b
 800f9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9f0:	d015      	beq.n	800fa1e <_svfiprintf_r+0xfa>
 800f9f2:	9a07      	ldr	r2, [sp, #28]
 800f9f4:	4654      	mov	r4, sl
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	f04f 0c0a 	mov.w	ip, #10
 800f9fc:	4621      	mov	r1, r4
 800f9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa02:	3b30      	subs	r3, #48	@ 0x30
 800fa04:	2b09      	cmp	r3, #9
 800fa06:	d94b      	bls.n	800faa0 <_svfiprintf_r+0x17c>
 800fa08:	b1b0      	cbz	r0, 800fa38 <_svfiprintf_r+0x114>
 800fa0a:	9207      	str	r2, [sp, #28]
 800fa0c:	e014      	b.n	800fa38 <_svfiprintf_r+0x114>
 800fa0e:	eba0 0308 	sub.w	r3, r0, r8
 800fa12:	fa09 f303 	lsl.w	r3, r9, r3
 800fa16:	4313      	orrs	r3, r2
 800fa18:	9304      	str	r3, [sp, #16]
 800fa1a:	46a2      	mov	sl, r4
 800fa1c:	e7d2      	b.n	800f9c4 <_svfiprintf_r+0xa0>
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	1d19      	adds	r1, r3, #4
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	9103      	str	r1, [sp, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	bfbb      	ittet	lt
 800fa2a:	425b      	neglt	r3, r3
 800fa2c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa30:	9307      	strge	r3, [sp, #28]
 800fa32:	9307      	strlt	r3, [sp, #28]
 800fa34:	bfb8      	it	lt
 800fa36:	9204      	strlt	r2, [sp, #16]
 800fa38:	7823      	ldrb	r3, [r4, #0]
 800fa3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa3c:	d10a      	bne.n	800fa54 <_svfiprintf_r+0x130>
 800fa3e:	7863      	ldrb	r3, [r4, #1]
 800fa40:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa42:	d132      	bne.n	800faaa <_svfiprintf_r+0x186>
 800fa44:	9b03      	ldr	r3, [sp, #12]
 800fa46:	1d1a      	adds	r2, r3, #4
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	9203      	str	r2, [sp, #12]
 800fa4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa50:	3402      	adds	r4, #2
 800fa52:	9305      	str	r3, [sp, #20]
 800fa54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb18 <_svfiprintf_r+0x1f4>
 800fa58:	7821      	ldrb	r1, [r4, #0]
 800fa5a:	2203      	movs	r2, #3
 800fa5c:	4650      	mov	r0, sl
 800fa5e:	f7f5 fe77 	bl	8005750 <memchr>
 800fa62:	b138      	cbz	r0, 800fa74 <_svfiprintf_r+0x150>
 800fa64:	9b04      	ldr	r3, [sp, #16]
 800fa66:	eba0 000a 	sub.w	r0, r0, sl
 800fa6a:	2240      	movs	r2, #64	@ 0x40
 800fa6c:	4082      	lsls	r2, r0
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	3401      	adds	r4, #1
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa78:	4824      	ldr	r0, [pc, #144]	@ (800fb0c <_svfiprintf_r+0x1e8>)
 800fa7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa7e:	2206      	movs	r2, #6
 800fa80:	f7f5 fe66 	bl	8005750 <memchr>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d036      	beq.n	800faf6 <_svfiprintf_r+0x1d2>
 800fa88:	4b21      	ldr	r3, [pc, #132]	@ (800fb10 <_svfiprintf_r+0x1ec>)
 800fa8a:	bb1b      	cbnz	r3, 800fad4 <_svfiprintf_r+0x1b0>
 800fa8c:	9b03      	ldr	r3, [sp, #12]
 800fa8e:	3307      	adds	r3, #7
 800fa90:	f023 0307 	bic.w	r3, r3, #7
 800fa94:	3308      	adds	r3, #8
 800fa96:	9303      	str	r3, [sp, #12]
 800fa98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa9a:	4433      	add	r3, r6
 800fa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa9e:	e76a      	b.n	800f976 <_svfiprintf_r+0x52>
 800faa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa4:	460c      	mov	r4, r1
 800faa6:	2001      	movs	r0, #1
 800faa8:	e7a8      	b.n	800f9fc <_svfiprintf_r+0xd8>
 800faaa:	2300      	movs	r3, #0
 800faac:	3401      	adds	r4, #1
 800faae:	9305      	str	r3, [sp, #20]
 800fab0:	4619      	mov	r1, r3
 800fab2:	f04f 0c0a 	mov.w	ip, #10
 800fab6:	4620      	mov	r0, r4
 800fab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fabc:	3a30      	subs	r2, #48	@ 0x30
 800fabe:	2a09      	cmp	r2, #9
 800fac0:	d903      	bls.n	800faca <_svfiprintf_r+0x1a6>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d0c6      	beq.n	800fa54 <_svfiprintf_r+0x130>
 800fac6:	9105      	str	r1, [sp, #20]
 800fac8:	e7c4      	b.n	800fa54 <_svfiprintf_r+0x130>
 800faca:	fb0c 2101 	mla	r1, ip, r1, r2
 800face:	4604      	mov	r4, r0
 800fad0:	2301      	movs	r3, #1
 800fad2:	e7f0      	b.n	800fab6 <_svfiprintf_r+0x192>
 800fad4:	ab03      	add	r3, sp, #12
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	462a      	mov	r2, r5
 800fada:	4b0e      	ldr	r3, [pc, #56]	@ (800fb14 <_svfiprintf_r+0x1f0>)
 800fadc:	a904      	add	r1, sp, #16
 800fade:	4638      	mov	r0, r7
 800fae0:	f7fc fb68 	bl	800c1b4 <_printf_float>
 800fae4:	1c42      	adds	r2, r0, #1
 800fae6:	4606      	mov	r6, r0
 800fae8:	d1d6      	bne.n	800fa98 <_svfiprintf_r+0x174>
 800faea:	89ab      	ldrh	r3, [r5, #12]
 800faec:	065b      	lsls	r3, r3, #25
 800faee:	f53f af2d 	bmi.w	800f94c <_svfiprintf_r+0x28>
 800faf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faf4:	e72c      	b.n	800f950 <_svfiprintf_r+0x2c>
 800faf6:	ab03      	add	r3, sp, #12
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	462a      	mov	r2, r5
 800fafc:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <_svfiprintf_r+0x1f0>)
 800fafe:	a904      	add	r1, sp, #16
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7fc fdef 	bl	800c6e4 <_printf_i>
 800fb06:	e7ed      	b.n	800fae4 <_svfiprintf_r+0x1c0>
 800fb08:	08014fe1 	.word	0x08014fe1
 800fb0c:	08014feb 	.word	0x08014feb
 800fb10:	0800c1b5 	.word	0x0800c1b5
 800fb14:	0800f86d 	.word	0x0800f86d
 800fb18:	08014fe7 	.word	0x08014fe7

0800fb1c <__sfputc_r>:
 800fb1c:	6893      	ldr	r3, [r2, #8]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	b410      	push	{r4}
 800fb24:	6093      	str	r3, [r2, #8]
 800fb26:	da08      	bge.n	800fb3a <__sfputc_r+0x1e>
 800fb28:	6994      	ldr	r4, [r2, #24]
 800fb2a:	42a3      	cmp	r3, r4
 800fb2c:	db01      	blt.n	800fb32 <__sfputc_r+0x16>
 800fb2e:	290a      	cmp	r1, #10
 800fb30:	d103      	bne.n	800fb3a <__sfputc_r+0x1e>
 800fb32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb36:	f7fd babf 	b.w	800d0b8 <__swbuf_r>
 800fb3a:	6813      	ldr	r3, [r2, #0]
 800fb3c:	1c58      	adds	r0, r3, #1
 800fb3e:	6010      	str	r0, [r2, #0]
 800fb40:	7019      	strb	r1, [r3, #0]
 800fb42:	4608      	mov	r0, r1
 800fb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <__sfputs_r>:
 800fb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	4614      	mov	r4, r2
 800fb52:	18d5      	adds	r5, r2, r3
 800fb54:	42ac      	cmp	r4, r5
 800fb56:	d101      	bne.n	800fb5c <__sfputs_r+0x12>
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e007      	b.n	800fb6c <__sfputs_r+0x22>
 800fb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb60:	463a      	mov	r2, r7
 800fb62:	4630      	mov	r0, r6
 800fb64:	f7ff ffda 	bl	800fb1c <__sfputc_r>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d1f3      	bne.n	800fb54 <__sfputs_r+0xa>
 800fb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb70 <_vfiprintf_r>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	460d      	mov	r5, r1
 800fb76:	b09d      	sub	sp, #116	@ 0x74
 800fb78:	4614      	mov	r4, r2
 800fb7a:	4698      	mov	r8, r3
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	b118      	cbz	r0, 800fb88 <_vfiprintf_r+0x18>
 800fb80:	6a03      	ldr	r3, [r0, #32]
 800fb82:	b90b      	cbnz	r3, 800fb88 <_vfiprintf_r+0x18>
 800fb84:	f7fd f96e 	bl	800ce64 <__sinit>
 800fb88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb8a:	07d9      	lsls	r1, r3, #31
 800fb8c:	d405      	bmi.n	800fb9a <_vfiprintf_r+0x2a>
 800fb8e:	89ab      	ldrh	r3, [r5, #12]
 800fb90:	059a      	lsls	r2, r3, #22
 800fb92:	d402      	bmi.n	800fb9a <_vfiprintf_r+0x2a>
 800fb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb96:	f7fd fbca 	bl	800d32e <__retarget_lock_acquire_recursive>
 800fb9a:	89ab      	ldrh	r3, [r5, #12]
 800fb9c:	071b      	lsls	r3, r3, #28
 800fb9e:	d501      	bpl.n	800fba4 <_vfiprintf_r+0x34>
 800fba0:	692b      	ldr	r3, [r5, #16]
 800fba2:	b99b      	cbnz	r3, 800fbcc <_vfiprintf_r+0x5c>
 800fba4:	4629      	mov	r1, r5
 800fba6:	4630      	mov	r0, r6
 800fba8:	f7fd fac4 	bl	800d134 <__swsetup_r>
 800fbac:	b170      	cbz	r0, 800fbcc <_vfiprintf_r+0x5c>
 800fbae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbb0:	07dc      	lsls	r4, r3, #31
 800fbb2:	d504      	bpl.n	800fbbe <_vfiprintf_r+0x4e>
 800fbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb8:	b01d      	add	sp, #116	@ 0x74
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	89ab      	ldrh	r3, [r5, #12]
 800fbc0:	0598      	lsls	r0, r3, #22
 800fbc2:	d4f7      	bmi.n	800fbb4 <_vfiprintf_r+0x44>
 800fbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbc6:	f7fd fbb3 	bl	800d330 <__retarget_lock_release_recursive>
 800fbca:	e7f3      	b.n	800fbb4 <_vfiprintf_r+0x44>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbd0:	2320      	movs	r3, #32
 800fbd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbda:	2330      	movs	r3, #48	@ 0x30
 800fbdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd8c <_vfiprintf_r+0x21c>
 800fbe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbe4:	f04f 0901 	mov.w	r9, #1
 800fbe8:	4623      	mov	r3, r4
 800fbea:	469a      	mov	sl, r3
 800fbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbf0:	b10a      	cbz	r2, 800fbf6 <_vfiprintf_r+0x86>
 800fbf2:	2a25      	cmp	r2, #37	@ 0x25
 800fbf4:	d1f9      	bne.n	800fbea <_vfiprintf_r+0x7a>
 800fbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbfa:	d00b      	beq.n	800fc14 <_vfiprintf_r+0xa4>
 800fbfc:	465b      	mov	r3, fp
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4629      	mov	r1, r5
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7ff ffa1 	bl	800fb4a <__sfputs_r>
 800fc08:	3001      	adds	r0, #1
 800fc0a:	f000 80a7 	beq.w	800fd5c <_vfiprintf_r+0x1ec>
 800fc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc10:	445a      	add	r2, fp
 800fc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc14:	f89a 3000 	ldrb.w	r3, [sl]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f000 809f 	beq.w	800fd5c <_vfiprintf_r+0x1ec>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f04f 32ff 	mov.w	r2, #4294967295
 800fc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc28:	f10a 0a01 	add.w	sl, sl, #1
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc34:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc36:	4654      	mov	r4, sl
 800fc38:	2205      	movs	r2, #5
 800fc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc3e:	4853      	ldr	r0, [pc, #332]	@ (800fd8c <_vfiprintf_r+0x21c>)
 800fc40:	f7f5 fd86 	bl	8005750 <memchr>
 800fc44:	9a04      	ldr	r2, [sp, #16]
 800fc46:	b9d8      	cbnz	r0, 800fc80 <_vfiprintf_r+0x110>
 800fc48:	06d1      	lsls	r1, r2, #27
 800fc4a:	bf44      	itt	mi
 800fc4c:	2320      	movmi	r3, #32
 800fc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc52:	0713      	lsls	r3, r2, #28
 800fc54:	bf44      	itt	mi
 800fc56:	232b      	movmi	r3, #43	@ 0x2b
 800fc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc60:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc62:	d015      	beq.n	800fc90 <_vfiprintf_r+0x120>
 800fc64:	9a07      	ldr	r2, [sp, #28]
 800fc66:	4654      	mov	r4, sl
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f04f 0c0a 	mov.w	ip, #10
 800fc6e:	4621      	mov	r1, r4
 800fc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc74:	3b30      	subs	r3, #48	@ 0x30
 800fc76:	2b09      	cmp	r3, #9
 800fc78:	d94b      	bls.n	800fd12 <_vfiprintf_r+0x1a2>
 800fc7a:	b1b0      	cbz	r0, 800fcaa <_vfiprintf_r+0x13a>
 800fc7c:	9207      	str	r2, [sp, #28]
 800fc7e:	e014      	b.n	800fcaa <_vfiprintf_r+0x13a>
 800fc80:	eba0 0308 	sub.w	r3, r0, r8
 800fc84:	fa09 f303 	lsl.w	r3, r9, r3
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	46a2      	mov	sl, r4
 800fc8e:	e7d2      	b.n	800fc36 <_vfiprintf_r+0xc6>
 800fc90:	9b03      	ldr	r3, [sp, #12]
 800fc92:	1d19      	adds	r1, r3, #4
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	9103      	str	r1, [sp, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bfbb      	ittet	lt
 800fc9c:	425b      	neglt	r3, r3
 800fc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fca2:	9307      	strge	r3, [sp, #28]
 800fca4:	9307      	strlt	r3, [sp, #28]
 800fca6:	bfb8      	it	lt
 800fca8:	9204      	strlt	r2, [sp, #16]
 800fcaa:	7823      	ldrb	r3, [r4, #0]
 800fcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800fcae:	d10a      	bne.n	800fcc6 <_vfiprintf_r+0x156>
 800fcb0:	7863      	ldrb	r3, [r4, #1]
 800fcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcb4:	d132      	bne.n	800fd1c <_vfiprintf_r+0x1ac>
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	1d1a      	adds	r2, r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	9203      	str	r2, [sp, #12]
 800fcbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fcc2:	3402      	adds	r4, #2
 800fcc4:	9305      	str	r3, [sp, #20]
 800fcc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd9c <_vfiprintf_r+0x22c>
 800fcca:	7821      	ldrb	r1, [r4, #0]
 800fccc:	2203      	movs	r2, #3
 800fcce:	4650      	mov	r0, sl
 800fcd0:	f7f5 fd3e 	bl	8005750 <memchr>
 800fcd4:	b138      	cbz	r0, 800fce6 <_vfiprintf_r+0x176>
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	eba0 000a 	sub.w	r0, r0, sl
 800fcdc:	2240      	movs	r2, #64	@ 0x40
 800fcde:	4082      	lsls	r2, r0
 800fce0:	4313      	orrs	r3, r2
 800fce2:	3401      	adds	r4, #1
 800fce4:	9304      	str	r3, [sp, #16]
 800fce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcea:	4829      	ldr	r0, [pc, #164]	@ (800fd90 <_vfiprintf_r+0x220>)
 800fcec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcf0:	2206      	movs	r2, #6
 800fcf2:	f7f5 fd2d 	bl	8005750 <memchr>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d03f      	beq.n	800fd7a <_vfiprintf_r+0x20a>
 800fcfa:	4b26      	ldr	r3, [pc, #152]	@ (800fd94 <_vfiprintf_r+0x224>)
 800fcfc:	bb1b      	cbnz	r3, 800fd46 <_vfiprintf_r+0x1d6>
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	3307      	adds	r3, #7
 800fd02:	f023 0307 	bic.w	r3, r3, #7
 800fd06:	3308      	adds	r3, #8
 800fd08:	9303      	str	r3, [sp, #12]
 800fd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd0c:	443b      	add	r3, r7
 800fd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd10:	e76a      	b.n	800fbe8 <_vfiprintf_r+0x78>
 800fd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd16:	460c      	mov	r4, r1
 800fd18:	2001      	movs	r0, #1
 800fd1a:	e7a8      	b.n	800fc6e <_vfiprintf_r+0xfe>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	3401      	adds	r4, #1
 800fd20:	9305      	str	r3, [sp, #20]
 800fd22:	4619      	mov	r1, r3
 800fd24:	f04f 0c0a 	mov.w	ip, #10
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd2e:	3a30      	subs	r2, #48	@ 0x30
 800fd30:	2a09      	cmp	r2, #9
 800fd32:	d903      	bls.n	800fd3c <_vfiprintf_r+0x1cc>
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d0c6      	beq.n	800fcc6 <_vfiprintf_r+0x156>
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	e7c4      	b.n	800fcc6 <_vfiprintf_r+0x156>
 800fd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd40:	4604      	mov	r4, r0
 800fd42:	2301      	movs	r3, #1
 800fd44:	e7f0      	b.n	800fd28 <_vfiprintf_r+0x1b8>
 800fd46:	ab03      	add	r3, sp, #12
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	462a      	mov	r2, r5
 800fd4c:	4b12      	ldr	r3, [pc, #72]	@ (800fd98 <_vfiprintf_r+0x228>)
 800fd4e:	a904      	add	r1, sp, #16
 800fd50:	4630      	mov	r0, r6
 800fd52:	f7fc fa2f 	bl	800c1b4 <_printf_float>
 800fd56:	4607      	mov	r7, r0
 800fd58:	1c78      	adds	r0, r7, #1
 800fd5a:	d1d6      	bne.n	800fd0a <_vfiprintf_r+0x19a>
 800fd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd5e:	07d9      	lsls	r1, r3, #31
 800fd60:	d405      	bmi.n	800fd6e <_vfiprintf_r+0x1fe>
 800fd62:	89ab      	ldrh	r3, [r5, #12]
 800fd64:	059a      	lsls	r2, r3, #22
 800fd66:	d402      	bmi.n	800fd6e <_vfiprintf_r+0x1fe>
 800fd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd6a:	f7fd fae1 	bl	800d330 <__retarget_lock_release_recursive>
 800fd6e:	89ab      	ldrh	r3, [r5, #12]
 800fd70:	065b      	lsls	r3, r3, #25
 800fd72:	f53f af1f 	bmi.w	800fbb4 <_vfiprintf_r+0x44>
 800fd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd78:	e71e      	b.n	800fbb8 <_vfiprintf_r+0x48>
 800fd7a:	ab03      	add	r3, sp, #12
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	462a      	mov	r2, r5
 800fd80:	4b05      	ldr	r3, [pc, #20]	@ (800fd98 <_vfiprintf_r+0x228>)
 800fd82:	a904      	add	r1, sp, #16
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7fc fcad 	bl	800c6e4 <_printf_i>
 800fd8a:	e7e4      	b.n	800fd56 <_vfiprintf_r+0x1e6>
 800fd8c:	08014fe1 	.word	0x08014fe1
 800fd90:	08014feb 	.word	0x08014feb
 800fd94:	0800c1b5 	.word	0x0800c1b5
 800fd98:	0800fb4b 	.word	0x0800fb4b
 800fd9c:	08014fe7 	.word	0x08014fe7

0800fda0 <__sflush_r>:
 800fda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	0716      	lsls	r6, r2, #28
 800fdaa:	4605      	mov	r5, r0
 800fdac:	460c      	mov	r4, r1
 800fdae:	d454      	bmi.n	800fe5a <__sflush_r+0xba>
 800fdb0:	684b      	ldr	r3, [r1, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	dc02      	bgt.n	800fdbc <__sflush_r+0x1c>
 800fdb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dd48      	ble.n	800fe4e <__sflush_r+0xae>
 800fdbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdbe:	2e00      	cmp	r6, #0
 800fdc0:	d045      	beq.n	800fe4e <__sflush_r+0xae>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fdc8:	682f      	ldr	r7, [r5, #0]
 800fdca:	6a21      	ldr	r1, [r4, #32]
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	d030      	beq.n	800fe32 <__sflush_r+0x92>
 800fdd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fdd2:	89a3      	ldrh	r3, [r4, #12]
 800fdd4:	0759      	lsls	r1, r3, #29
 800fdd6:	d505      	bpl.n	800fde4 <__sflush_r+0x44>
 800fdd8:	6863      	ldr	r3, [r4, #4]
 800fdda:	1ad2      	subs	r2, r2, r3
 800fddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdde:	b10b      	cbz	r3, 800fde4 <__sflush_r+0x44>
 800fde0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fde2:	1ad2      	subs	r2, r2, r3
 800fde4:	2300      	movs	r3, #0
 800fde6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fde8:	6a21      	ldr	r1, [r4, #32]
 800fdea:	4628      	mov	r0, r5
 800fdec:	47b0      	blx	r6
 800fdee:	1c43      	adds	r3, r0, #1
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	d106      	bne.n	800fe02 <__sflush_r+0x62>
 800fdf4:	6829      	ldr	r1, [r5, #0]
 800fdf6:	291d      	cmp	r1, #29
 800fdf8:	d82b      	bhi.n	800fe52 <__sflush_r+0xb2>
 800fdfa:	4a2a      	ldr	r2, [pc, #168]	@ (800fea4 <__sflush_r+0x104>)
 800fdfc:	410a      	asrs	r2, r1
 800fdfe:	07d6      	lsls	r6, r2, #31
 800fe00:	d427      	bmi.n	800fe52 <__sflush_r+0xb2>
 800fe02:	2200      	movs	r2, #0
 800fe04:	6062      	str	r2, [r4, #4]
 800fe06:	04d9      	lsls	r1, r3, #19
 800fe08:	6922      	ldr	r2, [r4, #16]
 800fe0a:	6022      	str	r2, [r4, #0]
 800fe0c:	d504      	bpl.n	800fe18 <__sflush_r+0x78>
 800fe0e:	1c42      	adds	r2, r0, #1
 800fe10:	d101      	bne.n	800fe16 <__sflush_r+0x76>
 800fe12:	682b      	ldr	r3, [r5, #0]
 800fe14:	b903      	cbnz	r3, 800fe18 <__sflush_r+0x78>
 800fe16:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe1a:	602f      	str	r7, [r5, #0]
 800fe1c:	b1b9      	cbz	r1, 800fe4e <__sflush_r+0xae>
 800fe1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe22:	4299      	cmp	r1, r3
 800fe24:	d002      	beq.n	800fe2c <__sflush_r+0x8c>
 800fe26:	4628      	mov	r0, r5
 800fe28:	f7fe f8ea 	bl	800e000 <_free_r>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe30:	e00d      	b.n	800fe4e <__sflush_r+0xae>
 800fe32:	2301      	movs	r3, #1
 800fe34:	4628      	mov	r0, r5
 800fe36:	47b0      	blx	r6
 800fe38:	4602      	mov	r2, r0
 800fe3a:	1c50      	adds	r0, r2, #1
 800fe3c:	d1c9      	bne.n	800fdd2 <__sflush_r+0x32>
 800fe3e:	682b      	ldr	r3, [r5, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0c6      	beq.n	800fdd2 <__sflush_r+0x32>
 800fe44:	2b1d      	cmp	r3, #29
 800fe46:	d001      	beq.n	800fe4c <__sflush_r+0xac>
 800fe48:	2b16      	cmp	r3, #22
 800fe4a:	d11e      	bne.n	800fe8a <__sflush_r+0xea>
 800fe4c:	602f      	str	r7, [r5, #0]
 800fe4e:	2000      	movs	r0, #0
 800fe50:	e022      	b.n	800fe98 <__sflush_r+0xf8>
 800fe52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe56:	b21b      	sxth	r3, r3
 800fe58:	e01b      	b.n	800fe92 <__sflush_r+0xf2>
 800fe5a:	690f      	ldr	r7, [r1, #16]
 800fe5c:	2f00      	cmp	r7, #0
 800fe5e:	d0f6      	beq.n	800fe4e <__sflush_r+0xae>
 800fe60:	0793      	lsls	r3, r2, #30
 800fe62:	680e      	ldr	r6, [r1, #0]
 800fe64:	bf08      	it	eq
 800fe66:	694b      	ldreq	r3, [r1, #20]
 800fe68:	600f      	str	r7, [r1, #0]
 800fe6a:	bf18      	it	ne
 800fe6c:	2300      	movne	r3, #0
 800fe6e:	eba6 0807 	sub.w	r8, r6, r7
 800fe72:	608b      	str	r3, [r1, #8]
 800fe74:	f1b8 0f00 	cmp.w	r8, #0
 800fe78:	dde9      	ble.n	800fe4e <__sflush_r+0xae>
 800fe7a:	6a21      	ldr	r1, [r4, #32]
 800fe7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe7e:	4643      	mov	r3, r8
 800fe80:	463a      	mov	r2, r7
 800fe82:	4628      	mov	r0, r5
 800fe84:	47b0      	blx	r6
 800fe86:	2800      	cmp	r0, #0
 800fe88:	dc08      	bgt.n	800fe9c <__sflush_r+0xfc>
 800fe8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe92:	81a3      	strh	r3, [r4, #12]
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295
 800fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe9c:	4407      	add	r7, r0
 800fe9e:	eba8 0800 	sub.w	r8, r8, r0
 800fea2:	e7e7      	b.n	800fe74 <__sflush_r+0xd4>
 800fea4:	dfbffffe 	.word	0xdfbffffe

0800fea8 <_fflush_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	690b      	ldr	r3, [r1, #16]
 800feac:	4605      	mov	r5, r0
 800feae:	460c      	mov	r4, r1
 800feb0:	b913      	cbnz	r3, 800feb8 <_fflush_r+0x10>
 800feb2:	2500      	movs	r5, #0
 800feb4:	4628      	mov	r0, r5
 800feb6:	bd38      	pop	{r3, r4, r5, pc}
 800feb8:	b118      	cbz	r0, 800fec2 <_fflush_r+0x1a>
 800feba:	6a03      	ldr	r3, [r0, #32]
 800febc:	b90b      	cbnz	r3, 800fec2 <_fflush_r+0x1a>
 800febe:	f7fc ffd1 	bl	800ce64 <__sinit>
 800fec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d0f3      	beq.n	800feb2 <_fflush_r+0xa>
 800feca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fecc:	07d0      	lsls	r0, r2, #31
 800fece:	d404      	bmi.n	800feda <_fflush_r+0x32>
 800fed0:	0599      	lsls	r1, r3, #22
 800fed2:	d402      	bmi.n	800feda <_fflush_r+0x32>
 800fed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fed6:	f7fd fa2a 	bl	800d32e <__retarget_lock_acquire_recursive>
 800feda:	4628      	mov	r0, r5
 800fedc:	4621      	mov	r1, r4
 800fede:	f7ff ff5f 	bl	800fda0 <__sflush_r>
 800fee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fee4:	07da      	lsls	r2, r3, #31
 800fee6:	4605      	mov	r5, r0
 800fee8:	d4e4      	bmi.n	800feb4 <_fflush_r+0xc>
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	059b      	lsls	r3, r3, #22
 800feee:	d4e1      	bmi.n	800feb4 <_fflush_r+0xc>
 800fef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fef2:	f7fd fa1d 	bl	800d330 <__retarget_lock_release_recursive>
 800fef6:	e7dd      	b.n	800feb4 <_fflush_r+0xc>

0800fef8 <__swhatbuf_r>:
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	460c      	mov	r4, r1
 800fefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff00:	2900      	cmp	r1, #0
 800ff02:	b096      	sub	sp, #88	@ 0x58
 800ff04:	4615      	mov	r5, r2
 800ff06:	461e      	mov	r6, r3
 800ff08:	da0d      	bge.n	800ff26 <__swhatbuf_r+0x2e>
 800ff0a:	89a3      	ldrh	r3, [r4, #12]
 800ff0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff10:	f04f 0100 	mov.w	r1, #0
 800ff14:	bf14      	ite	ne
 800ff16:	2340      	movne	r3, #64	@ 0x40
 800ff18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	6031      	str	r1, [r6, #0]
 800ff20:	602b      	str	r3, [r5, #0]
 800ff22:	b016      	add	sp, #88	@ 0x58
 800ff24:	bd70      	pop	{r4, r5, r6, pc}
 800ff26:	466a      	mov	r2, sp
 800ff28:	f000 f85a 	bl	800ffe0 <_fstat_r>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	dbec      	blt.n	800ff0a <__swhatbuf_r+0x12>
 800ff30:	9901      	ldr	r1, [sp, #4]
 800ff32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff3a:	4259      	negs	r1, r3
 800ff3c:	4159      	adcs	r1, r3
 800ff3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff42:	e7eb      	b.n	800ff1c <__swhatbuf_r+0x24>

0800ff44 <__smakebuf_r>:
 800ff44:	898b      	ldrh	r3, [r1, #12]
 800ff46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff48:	079d      	lsls	r5, r3, #30
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	460c      	mov	r4, r1
 800ff4e:	d507      	bpl.n	800ff60 <__smakebuf_r+0x1c>
 800ff50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	6123      	str	r3, [r4, #16]
 800ff58:	2301      	movs	r3, #1
 800ff5a:	6163      	str	r3, [r4, #20]
 800ff5c:	b003      	add	sp, #12
 800ff5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff60:	ab01      	add	r3, sp, #4
 800ff62:	466a      	mov	r2, sp
 800ff64:	f7ff ffc8 	bl	800fef8 <__swhatbuf_r>
 800ff68:	9f00      	ldr	r7, [sp, #0]
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f7fe f8ba 	bl	800e0e8 <_malloc_r>
 800ff74:	b948      	cbnz	r0, 800ff8a <__smakebuf_r+0x46>
 800ff76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff7a:	059a      	lsls	r2, r3, #22
 800ff7c:	d4ee      	bmi.n	800ff5c <__smakebuf_r+0x18>
 800ff7e:	f023 0303 	bic.w	r3, r3, #3
 800ff82:	f043 0302 	orr.w	r3, r3, #2
 800ff86:	81a3      	strh	r3, [r4, #12]
 800ff88:	e7e2      	b.n	800ff50 <__smakebuf_r+0xc>
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	6020      	str	r0, [r4, #0]
 800ff8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff92:	81a3      	strh	r3, [r4, #12]
 800ff94:	9b01      	ldr	r3, [sp, #4]
 800ff96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff9a:	b15b      	cbz	r3, 800ffb4 <__smakebuf_r+0x70>
 800ff9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f000 f82f 	bl	8010004 <_isatty_r>
 800ffa6:	b128      	cbz	r0, 800ffb4 <__smakebuf_r+0x70>
 800ffa8:	89a3      	ldrh	r3, [r4, #12]
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	f043 0301 	orr.w	r3, r3, #1
 800ffb2:	81a3      	strh	r3, [r4, #12]
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	431d      	orrs	r5, r3
 800ffb8:	81a5      	strh	r5, [r4, #12]
 800ffba:	e7cf      	b.n	800ff5c <__smakebuf_r+0x18>

0800ffbc <strncmp>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	b16a      	cbz	r2, 800ffdc <strncmp+0x20>
 800ffc0:	3901      	subs	r1, #1
 800ffc2:	1884      	adds	r4, r0, r2
 800ffc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffc8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d103      	bne.n	800ffd8 <strncmp+0x1c>
 800ffd0:	42a0      	cmp	r0, r4
 800ffd2:	d001      	beq.n	800ffd8 <strncmp+0x1c>
 800ffd4:	2a00      	cmp	r2, #0
 800ffd6:	d1f5      	bne.n	800ffc4 <strncmp+0x8>
 800ffd8:	1ad0      	subs	r0, r2, r3
 800ffda:	bd10      	pop	{r4, pc}
 800ffdc:	4610      	mov	r0, r2
 800ffde:	e7fc      	b.n	800ffda <strncmp+0x1e>

0800ffe0 <_fstat_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4d07      	ldr	r5, [pc, #28]	@ (8010000 <_fstat_r+0x20>)
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	4608      	mov	r0, r1
 800ffea:	4611      	mov	r1, r2
 800ffec:	602b      	str	r3, [r5, #0]
 800ffee:	f7f6 fff8 	bl	8006fe2 <_fstat>
 800fff2:	1c43      	adds	r3, r0, #1
 800fff4:	d102      	bne.n	800fffc <_fstat_r+0x1c>
 800fff6:	682b      	ldr	r3, [r5, #0]
 800fff8:	b103      	cbz	r3, 800fffc <_fstat_r+0x1c>
 800fffa:	6023      	str	r3, [r4, #0]
 800fffc:	bd38      	pop	{r3, r4, r5, pc}
 800fffe:	bf00      	nop
 8010000:	20001a80 	.word	0x20001a80

08010004 <_isatty_r>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4d06      	ldr	r5, [pc, #24]	@ (8010020 <_isatty_r+0x1c>)
 8010008:	2300      	movs	r3, #0
 801000a:	4604      	mov	r4, r0
 801000c:	4608      	mov	r0, r1
 801000e:	602b      	str	r3, [r5, #0]
 8010010:	f7f6 ffec 	bl	8006fec <_isatty>
 8010014:	1c43      	adds	r3, r0, #1
 8010016:	d102      	bne.n	801001e <_isatty_r+0x1a>
 8010018:	682b      	ldr	r3, [r5, #0]
 801001a:	b103      	cbz	r3, 801001e <_isatty_r+0x1a>
 801001c:	6023      	str	r3, [r4, #0]
 801001e:	bd38      	pop	{r3, r4, r5, pc}
 8010020:	20001a80 	.word	0x20001a80

08010024 <_sbrk_r>:
 8010024:	b538      	push	{r3, r4, r5, lr}
 8010026:	4d06      	ldr	r5, [pc, #24]	@ (8010040 <_sbrk_r+0x1c>)
 8010028:	2300      	movs	r3, #0
 801002a:	4604      	mov	r4, r0
 801002c:	4608      	mov	r0, r1
 801002e:	602b      	str	r3, [r5, #0]
 8010030:	f7f6 ffe0 	bl	8006ff4 <_sbrk>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	d102      	bne.n	801003e <_sbrk_r+0x1a>
 8010038:	682b      	ldr	r3, [r5, #0]
 801003a:	b103      	cbz	r3, 801003e <_sbrk_r+0x1a>
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	bd38      	pop	{r3, r4, r5, pc}
 8010040:	20001a80 	.word	0x20001a80
 8010044:	00000000 	.word	0x00000000

08010048 <nan>:
 8010048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010050 <nan+0x8>
 801004c:	4770      	bx	lr
 801004e:	bf00      	nop
 8010050:	00000000 	.word	0x00000000
 8010054:	7ff80000 	.word	0x7ff80000

08010058 <__assert_func>:
 8010058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801005a:	4614      	mov	r4, r2
 801005c:	461a      	mov	r2, r3
 801005e:	4b09      	ldr	r3, [pc, #36]	@ (8010084 <__assert_func+0x2c>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4605      	mov	r5, r0
 8010064:	68d8      	ldr	r0, [r3, #12]
 8010066:	b954      	cbnz	r4, 801007e <__assert_func+0x26>
 8010068:	4b07      	ldr	r3, [pc, #28]	@ (8010088 <__assert_func+0x30>)
 801006a:	461c      	mov	r4, r3
 801006c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010070:	9100      	str	r1, [sp, #0]
 8010072:	462b      	mov	r3, r5
 8010074:	4905      	ldr	r1, [pc, #20]	@ (801008c <__assert_func+0x34>)
 8010076:	f000 fba7 	bl	80107c8 <fiprintf>
 801007a:	f000 fbb7 	bl	80107ec <abort>
 801007e:	4b04      	ldr	r3, [pc, #16]	@ (8010090 <__assert_func+0x38>)
 8010080:	e7f4      	b.n	801006c <__assert_func+0x14>
 8010082:	bf00      	nop
 8010084:	20000078 	.word	0x20000078
 8010088:	08013980 	.word	0x08013980
 801008c:	08015007 	.word	0x08015007
 8010090:	08014ffa 	.word	0x08014ffa

08010094 <_calloc_r>:
 8010094:	b570      	push	{r4, r5, r6, lr}
 8010096:	fba1 5402 	umull	r5, r4, r1, r2
 801009a:	b93c      	cbnz	r4, 80100ac <_calloc_r+0x18>
 801009c:	4629      	mov	r1, r5
 801009e:	f7fe f823 	bl	800e0e8 <_malloc_r>
 80100a2:	4606      	mov	r6, r0
 80100a4:	b928      	cbnz	r0, 80100b2 <_calloc_r+0x1e>
 80100a6:	2600      	movs	r6, #0
 80100a8:	4630      	mov	r0, r6
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	220c      	movs	r2, #12
 80100ae:	6002      	str	r2, [r0, #0]
 80100b0:	e7f9      	b.n	80100a6 <_calloc_r+0x12>
 80100b2:	462a      	mov	r2, r5
 80100b4:	4621      	mov	r1, r4
 80100b6:	f7fd f8bd 	bl	800d234 <memset>
 80100ba:	e7f5      	b.n	80100a8 <_calloc_r+0x14>

080100bc <rshift>:
 80100bc:	6903      	ldr	r3, [r0, #16]
 80100be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100ca:	f100 0414 	add.w	r4, r0, #20
 80100ce:	dd45      	ble.n	801015c <rshift+0xa0>
 80100d0:	f011 011f 	ands.w	r1, r1, #31
 80100d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80100d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80100dc:	d10c      	bne.n	80100f8 <rshift+0x3c>
 80100de:	f100 0710 	add.w	r7, r0, #16
 80100e2:	4629      	mov	r1, r5
 80100e4:	42b1      	cmp	r1, r6
 80100e6:	d334      	bcc.n	8010152 <rshift+0x96>
 80100e8:	1a9b      	subs	r3, r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	1eea      	subs	r2, r5, #3
 80100ee:	4296      	cmp	r6, r2
 80100f0:	bf38      	it	cc
 80100f2:	2300      	movcc	r3, #0
 80100f4:	4423      	add	r3, r4
 80100f6:	e015      	b.n	8010124 <rshift+0x68>
 80100f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80100fc:	f1c1 0820 	rsb	r8, r1, #32
 8010100:	40cf      	lsrs	r7, r1
 8010102:	f105 0e04 	add.w	lr, r5, #4
 8010106:	46a1      	mov	r9, r4
 8010108:	4576      	cmp	r6, lr
 801010a:	46f4      	mov	ip, lr
 801010c:	d815      	bhi.n	801013a <rshift+0x7e>
 801010e:	1a9a      	subs	r2, r3, r2
 8010110:	0092      	lsls	r2, r2, #2
 8010112:	3a04      	subs	r2, #4
 8010114:	3501      	adds	r5, #1
 8010116:	42ae      	cmp	r6, r5
 8010118:	bf38      	it	cc
 801011a:	2200      	movcc	r2, #0
 801011c:	18a3      	adds	r3, r4, r2
 801011e:	50a7      	str	r7, [r4, r2]
 8010120:	b107      	cbz	r7, 8010124 <rshift+0x68>
 8010122:	3304      	adds	r3, #4
 8010124:	1b1a      	subs	r2, r3, r4
 8010126:	42a3      	cmp	r3, r4
 8010128:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801012c:	bf08      	it	eq
 801012e:	2300      	moveq	r3, #0
 8010130:	6102      	str	r2, [r0, #16]
 8010132:	bf08      	it	eq
 8010134:	6143      	streq	r3, [r0, #20]
 8010136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801013a:	f8dc c000 	ldr.w	ip, [ip]
 801013e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010142:	ea4c 0707 	orr.w	r7, ip, r7
 8010146:	f849 7b04 	str.w	r7, [r9], #4
 801014a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801014e:	40cf      	lsrs	r7, r1
 8010150:	e7da      	b.n	8010108 <rshift+0x4c>
 8010152:	f851 cb04 	ldr.w	ip, [r1], #4
 8010156:	f847 cf04 	str.w	ip, [r7, #4]!
 801015a:	e7c3      	b.n	80100e4 <rshift+0x28>
 801015c:	4623      	mov	r3, r4
 801015e:	e7e1      	b.n	8010124 <rshift+0x68>

08010160 <__hexdig_fun>:
 8010160:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010164:	2b09      	cmp	r3, #9
 8010166:	d802      	bhi.n	801016e <__hexdig_fun+0xe>
 8010168:	3820      	subs	r0, #32
 801016a:	b2c0      	uxtb	r0, r0
 801016c:	4770      	bx	lr
 801016e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010172:	2b05      	cmp	r3, #5
 8010174:	d801      	bhi.n	801017a <__hexdig_fun+0x1a>
 8010176:	3847      	subs	r0, #71	@ 0x47
 8010178:	e7f7      	b.n	801016a <__hexdig_fun+0xa>
 801017a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801017e:	2b05      	cmp	r3, #5
 8010180:	d801      	bhi.n	8010186 <__hexdig_fun+0x26>
 8010182:	3827      	subs	r0, #39	@ 0x27
 8010184:	e7f1      	b.n	801016a <__hexdig_fun+0xa>
 8010186:	2000      	movs	r0, #0
 8010188:	4770      	bx	lr
	...

0801018c <__gethex>:
 801018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010190:	b085      	sub	sp, #20
 8010192:	468a      	mov	sl, r1
 8010194:	9302      	str	r3, [sp, #8]
 8010196:	680b      	ldr	r3, [r1, #0]
 8010198:	9001      	str	r0, [sp, #4]
 801019a:	4690      	mov	r8, r2
 801019c:	1c9c      	adds	r4, r3, #2
 801019e:	46a1      	mov	r9, r4
 80101a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80101a4:	2830      	cmp	r0, #48	@ 0x30
 80101a6:	d0fa      	beq.n	801019e <__gethex+0x12>
 80101a8:	eba9 0303 	sub.w	r3, r9, r3
 80101ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80101b0:	f7ff ffd6 	bl	8010160 <__hexdig_fun>
 80101b4:	4605      	mov	r5, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d168      	bne.n	801028c <__gethex+0x100>
 80101ba:	49a0      	ldr	r1, [pc, #640]	@ (801043c <__gethex+0x2b0>)
 80101bc:	2201      	movs	r2, #1
 80101be:	4648      	mov	r0, r9
 80101c0:	f7ff fefc 	bl	800ffbc <strncmp>
 80101c4:	4607      	mov	r7, r0
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d167      	bne.n	801029a <__gethex+0x10e>
 80101ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80101ce:	4626      	mov	r6, r4
 80101d0:	f7ff ffc6 	bl	8010160 <__hexdig_fun>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d062      	beq.n	801029e <__gethex+0x112>
 80101d8:	4623      	mov	r3, r4
 80101da:	7818      	ldrb	r0, [r3, #0]
 80101dc:	2830      	cmp	r0, #48	@ 0x30
 80101de:	4699      	mov	r9, r3
 80101e0:	f103 0301 	add.w	r3, r3, #1
 80101e4:	d0f9      	beq.n	80101da <__gethex+0x4e>
 80101e6:	f7ff ffbb 	bl	8010160 <__hexdig_fun>
 80101ea:	fab0 f580 	clz	r5, r0
 80101ee:	096d      	lsrs	r5, r5, #5
 80101f0:	f04f 0b01 	mov.w	fp, #1
 80101f4:	464a      	mov	r2, r9
 80101f6:	4616      	mov	r6, r2
 80101f8:	3201      	adds	r2, #1
 80101fa:	7830      	ldrb	r0, [r6, #0]
 80101fc:	f7ff ffb0 	bl	8010160 <__hexdig_fun>
 8010200:	2800      	cmp	r0, #0
 8010202:	d1f8      	bne.n	80101f6 <__gethex+0x6a>
 8010204:	498d      	ldr	r1, [pc, #564]	@ (801043c <__gethex+0x2b0>)
 8010206:	2201      	movs	r2, #1
 8010208:	4630      	mov	r0, r6
 801020a:	f7ff fed7 	bl	800ffbc <strncmp>
 801020e:	2800      	cmp	r0, #0
 8010210:	d13f      	bne.n	8010292 <__gethex+0x106>
 8010212:	b944      	cbnz	r4, 8010226 <__gethex+0x9a>
 8010214:	1c74      	adds	r4, r6, #1
 8010216:	4622      	mov	r2, r4
 8010218:	4616      	mov	r6, r2
 801021a:	3201      	adds	r2, #1
 801021c:	7830      	ldrb	r0, [r6, #0]
 801021e:	f7ff ff9f 	bl	8010160 <__hexdig_fun>
 8010222:	2800      	cmp	r0, #0
 8010224:	d1f8      	bne.n	8010218 <__gethex+0x8c>
 8010226:	1ba4      	subs	r4, r4, r6
 8010228:	00a7      	lsls	r7, r4, #2
 801022a:	7833      	ldrb	r3, [r6, #0]
 801022c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010230:	2b50      	cmp	r3, #80	@ 0x50
 8010232:	d13e      	bne.n	80102b2 <__gethex+0x126>
 8010234:	7873      	ldrb	r3, [r6, #1]
 8010236:	2b2b      	cmp	r3, #43	@ 0x2b
 8010238:	d033      	beq.n	80102a2 <__gethex+0x116>
 801023a:	2b2d      	cmp	r3, #45	@ 0x2d
 801023c:	d034      	beq.n	80102a8 <__gethex+0x11c>
 801023e:	1c71      	adds	r1, r6, #1
 8010240:	2400      	movs	r4, #0
 8010242:	7808      	ldrb	r0, [r1, #0]
 8010244:	f7ff ff8c 	bl	8010160 <__hexdig_fun>
 8010248:	1e43      	subs	r3, r0, #1
 801024a:	b2db      	uxtb	r3, r3
 801024c:	2b18      	cmp	r3, #24
 801024e:	d830      	bhi.n	80102b2 <__gethex+0x126>
 8010250:	f1a0 0210 	sub.w	r2, r0, #16
 8010254:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010258:	f7ff ff82 	bl	8010160 <__hexdig_fun>
 801025c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010260:	fa5f fc8c 	uxtb.w	ip, ip
 8010264:	f1bc 0f18 	cmp.w	ip, #24
 8010268:	f04f 030a 	mov.w	r3, #10
 801026c:	d91e      	bls.n	80102ac <__gethex+0x120>
 801026e:	b104      	cbz	r4, 8010272 <__gethex+0xe6>
 8010270:	4252      	negs	r2, r2
 8010272:	4417      	add	r7, r2
 8010274:	f8ca 1000 	str.w	r1, [sl]
 8010278:	b1ed      	cbz	r5, 80102b6 <__gethex+0x12a>
 801027a:	f1bb 0f00 	cmp.w	fp, #0
 801027e:	bf0c      	ite	eq
 8010280:	2506      	moveq	r5, #6
 8010282:	2500      	movne	r5, #0
 8010284:	4628      	mov	r0, r5
 8010286:	b005      	add	sp, #20
 8010288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028c:	2500      	movs	r5, #0
 801028e:	462c      	mov	r4, r5
 8010290:	e7b0      	b.n	80101f4 <__gethex+0x68>
 8010292:	2c00      	cmp	r4, #0
 8010294:	d1c7      	bne.n	8010226 <__gethex+0x9a>
 8010296:	4627      	mov	r7, r4
 8010298:	e7c7      	b.n	801022a <__gethex+0x9e>
 801029a:	464e      	mov	r6, r9
 801029c:	462f      	mov	r7, r5
 801029e:	2501      	movs	r5, #1
 80102a0:	e7c3      	b.n	801022a <__gethex+0x9e>
 80102a2:	2400      	movs	r4, #0
 80102a4:	1cb1      	adds	r1, r6, #2
 80102a6:	e7cc      	b.n	8010242 <__gethex+0xb6>
 80102a8:	2401      	movs	r4, #1
 80102aa:	e7fb      	b.n	80102a4 <__gethex+0x118>
 80102ac:	fb03 0002 	mla	r0, r3, r2, r0
 80102b0:	e7ce      	b.n	8010250 <__gethex+0xc4>
 80102b2:	4631      	mov	r1, r6
 80102b4:	e7de      	b.n	8010274 <__gethex+0xe8>
 80102b6:	eba6 0309 	sub.w	r3, r6, r9
 80102ba:	3b01      	subs	r3, #1
 80102bc:	4629      	mov	r1, r5
 80102be:	2b07      	cmp	r3, #7
 80102c0:	dc0a      	bgt.n	80102d8 <__gethex+0x14c>
 80102c2:	9801      	ldr	r0, [sp, #4]
 80102c4:	f7fd ff9c 	bl	800e200 <_Balloc>
 80102c8:	4604      	mov	r4, r0
 80102ca:	b940      	cbnz	r0, 80102de <__gethex+0x152>
 80102cc:	4b5c      	ldr	r3, [pc, #368]	@ (8010440 <__gethex+0x2b4>)
 80102ce:	4602      	mov	r2, r0
 80102d0:	21e4      	movs	r1, #228	@ 0xe4
 80102d2:	485c      	ldr	r0, [pc, #368]	@ (8010444 <__gethex+0x2b8>)
 80102d4:	f7ff fec0 	bl	8010058 <__assert_func>
 80102d8:	3101      	adds	r1, #1
 80102da:	105b      	asrs	r3, r3, #1
 80102dc:	e7ef      	b.n	80102be <__gethex+0x132>
 80102de:	f100 0a14 	add.w	sl, r0, #20
 80102e2:	2300      	movs	r3, #0
 80102e4:	4655      	mov	r5, sl
 80102e6:	469b      	mov	fp, r3
 80102e8:	45b1      	cmp	r9, r6
 80102ea:	d337      	bcc.n	801035c <__gethex+0x1d0>
 80102ec:	f845 bb04 	str.w	fp, [r5], #4
 80102f0:	eba5 050a 	sub.w	r5, r5, sl
 80102f4:	10ad      	asrs	r5, r5, #2
 80102f6:	6125      	str	r5, [r4, #16]
 80102f8:	4658      	mov	r0, fp
 80102fa:	f7fe f873 	bl	800e3e4 <__hi0bits>
 80102fe:	016d      	lsls	r5, r5, #5
 8010300:	f8d8 6000 	ldr.w	r6, [r8]
 8010304:	1a2d      	subs	r5, r5, r0
 8010306:	42b5      	cmp	r5, r6
 8010308:	dd54      	ble.n	80103b4 <__gethex+0x228>
 801030a:	1bad      	subs	r5, r5, r6
 801030c:	4629      	mov	r1, r5
 801030e:	4620      	mov	r0, r4
 8010310:	f7fe fc07 	bl	800eb22 <__any_on>
 8010314:	4681      	mov	r9, r0
 8010316:	b178      	cbz	r0, 8010338 <__gethex+0x1ac>
 8010318:	1e6b      	subs	r3, r5, #1
 801031a:	1159      	asrs	r1, r3, #5
 801031c:	f003 021f 	and.w	r2, r3, #31
 8010320:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010324:	f04f 0901 	mov.w	r9, #1
 8010328:	fa09 f202 	lsl.w	r2, r9, r2
 801032c:	420a      	tst	r2, r1
 801032e:	d003      	beq.n	8010338 <__gethex+0x1ac>
 8010330:	454b      	cmp	r3, r9
 8010332:	dc36      	bgt.n	80103a2 <__gethex+0x216>
 8010334:	f04f 0902 	mov.w	r9, #2
 8010338:	4629      	mov	r1, r5
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff febe 	bl	80100bc <rshift>
 8010340:	442f      	add	r7, r5
 8010342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010346:	42bb      	cmp	r3, r7
 8010348:	da42      	bge.n	80103d0 <__gethex+0x244>
 801034a:	9801      	ldr	r0, [sp, #4]
 801034c:	4621      	mov	r1, r4
 801034e:	f7fd ff97 	bl	800e280 <_Bfree>
 8010352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010354:	2300      	movs	r3, #0
 8010356:	6013      	str	r3, [r2, #0]
 8010358:	25a3      	movs	r5, #163	@ 0xa3
 801035a:	e793      	b.n	8010284 <__gethex+0xf8>
 801035c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010360:	2a2e      	cmp	r2, #46	@ 0x2e
 8010362:	d012      	beq.n	801038a <__gethex+0x1fe>
 8010364:	2b20      	cmp	r3, #32
 8010366:	d104      	bne.n	8010372 <__gethex+0x1e6>
 8010368:	f845 bb04 	str.w	fp, [r5], #4
 801036c:	f04f 0b00 	mov.w	fp, #0
 8010370:	465b      	mov	r3, fp
 8010372:	7830      	ldrb	r0, [r6, #0]
 8010374:	9303      	str	r3, [sp, #12]
 8010376:	f7ff fef3 	bl	8010160 <__hexdig_fun>
 801037a:	9b03      	ldr	r3, [sp, #12]
 801037c:	f000 000f 	and.w	r0, r0, #15
 8010380:	4098      	lsls	r0, r3
 8010382:	ea4b 0b00 	orr.w	fp, fp, r0
 8010386:	3304      	adds	r3, #4
 8010388:	e7ae      	b.n	80102e8 <__gethex+0x15c>
 801038a:	45b1      	cmp	r9, r6
 801038c:	d8ea      	bhi.n	8010364 <__gethex+0x1d8>
 801038e:	492b      	ldr	r1, [pc, #172]	@ (801043c <__gethex+0x2b0>)
 8010390:	9303      	str	r3, [sp, #12]
 8010392:	2201      	movs	r2, #1
 8010394:	4630      	mov	r0, r6
 8010396:	f7ff fe11 	bl	800ffbc <strncmp>
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	2800      	cmp	r0, #0
 801039e:	d1e1      	bne.n	8010364 <__gethex+0x1d8>
 80103a0:	e7a2      	b.n	80102e8 <__gethex+0x15c>
 80103a2:	1ea9      	subs	r1, r5, #2
 80103a4:	4620      	mov	r0, r4
 80103a6:	f7fe fbbc 	bl	800eb22 <__any_on>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d0c2      	beq.n	8010334 <__gethex+0x1a8>
 80103ae:	f04f 0903 	mov.w	r9, #3
 80103b2:	e7c1      	b.n	8010338 <__gethex+0x1ac>
 80103b4:	da09      	bge.n	80103ca <__gethex+0x23e>
 80103b6:	1b75      	subs	r5, r6, r5
 80103b8:	4621      	mov	r1, r4
 80103ba:	9801      	ldr	r0, [sp, #4]
 80103bc:	462a      	mov	r2, r5
 80103be:	f7fe f977 	bl	800e6b0 <__lshift>
 80103c2:	1b7f      	subs	r7, r7, r5
 80103c4:	4604      	mov	r4, r0
 80103c6:	f100 0a14 	add.w	sl, r0, #20
 80103ca:	f04f 0900 	mov.w	r9, #0
 80103ce:	e7b8      	b.n	8010342 <__gethex+0x1b6>
 80103d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80103d4:	42bd      	cmp	r5, r7
 80103d6:	dd6f      	ble.n	80104b8 <__gethex+0x32c>
 80103d8:	1bed      	subs	r5, r5, r7
 80103da:	42ae      	cmp	r6, r5
 80103dc:	dc34      	bgt.n	8010448 <__gethex+0x2bc>
 80103de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103e2:	2b02      	cmp	r3, #2
 80103e4:	d022      	beq.n	801042c <__gethex+0x2a0>
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d024      	beq.n	8010434 <__gethex+0x2a8>
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d115      	bne.n	801041a <__gethex+0x28e>
 80103ee:	42ae      	cmp	r6, r5
 80103f0:	d113      	bne.n	801041a <__gethex+0x28e>
 80103f2:	2e01      	cmp	r6, #1
 80103f4:	d10b      	bne.n	801040e <__gethex+0x282>
 80103f6:	9a02      	ldr	r2, [sp, #8]
 80103f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	2301      	movs	r3, #1
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	f8ca 3000 	str.w	r3, [sl]
 8010406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010408:	2562      	movs	r5, #98	@ 0x62
 801040a:	601c      	str	r4, [r3, #0]
 801040c:	e73a      	b.n	8010284 <__gethex+0xf8>
 801040e:	1e71      	subs	r1, r6, #1
 8010410:	4620      	mov	r0, r4
 8010412:	f7fe fb86 	bl	800eb22 <__any_on>
 8010416:	2800      	cmp	r0, #0
 8010418:	d1ed      	bne.n	80103f6 <__gethex+0x26a>
 801041a:	9801      	ldr	r0, [sp, #4]
 801041c:	4621      	mov	r1, r4
 801041e:	f7fd ff2f 	bl	800e280 <_Bfree>
 8010422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010424:	2300      	movs	r3, #0
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	2550      	movs	r5, #80	@ 0x50
 801042a:	e72b      	b.n	8010284 <__gethex+0xf8>
 801042c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1f3      	bne.n	801041a <__gethex+0x28e>
 8010432:	e7e0      	b.n	80103f6 <__gethex+0x26a>
 8010434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1dd      	bne.n	80103f6 <__gethex+0x26a>
 801043a:	e7ee      	b.n	801041a <__gethex+0x28e>
 801043c:	08014e88 	.word	0x08014e88
 8010440:	08014d1b 	.word	0x08014d1b
 8010444:	08015036 	.word	0x08015036
 8010448:	1e6f      	subs	r7, r5, #1
 801044a:	f1b9 0f00 	cmp.w	r9, #0
 801044e:	d130      	bne.n	80104b2 <__gethex+0x326>
 8010450:	b127      	cbz	r7, 801045c <__gethex+0x2d0>
 8010452:	4639      	mov	r1, r7
 8010454:	4620      	mov	r0, r4
 8010456:	f7fe fb64 	bl	800eb22 <__any_on>
 801045a:	4681      	mov	r9, r0
 801045c:	117a      	asrs	r2, r7, #5
 801045e:	2301      	movs	r3, #1
 8010460:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010464:	f007 071f 	and.w	r7, r7, #31
 8010468:	40bb      	lsls	r3, r7
 801046a:	4213      	tst	r3, r2
 801046c:	4629      	mov	r1, r5
 801046e:	4620      	mov	r0, r4
 8010470:	bf18      	it	ne
 8010472:	f049 0902 	orrne.w	r9, r9, #2
 8010476:	f7ff fe21 	bl	80100bc <rshift>
 801047a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801047e:	1b76      	subs	r6, r6, r5
 8010480:	2502      	movs	r5, #2
 8010482:	f1b9 0f00 	cmp.w	r9, #0
 8010486:	d047      	beq.n	8010518 <__gethex+0x38c>
 8010488:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801048c:	2b02      	cmp	r3, #2
 801048e:	d015      	beq.n	80104bc <__gethex+0x330>
 8010490:	2b03      	cmp	r3, #3
 8010492:	d017      	beq.n	80104c4 <__gethex+0x338>
 8010494:	2b01      	cmp	r3, #1
 8010496:	d109      	bne.n	80104ac <__gethex+0x320>
 8010498:	f019 0f02 	tst.w	r9, #2
 801049c:	d006      	beq.n	80104ac <__gethex+0x320>
 801049e:	f8da 3000 	ldr.w	r3, [sl]
 80104a2:	ea49 0903 	orr.w	r9, r9, r3
 80104a6:	f019 0f01 	tst.w	r9, #1
 80104aa:	d10e      	bne.n	80104ca <__gethex+0x33e>
 80104ac:	f045 0510 	orr.w	r5, r5, #16
 80104b0:	e032      	b.n	8010518 <__gethex+0x38c>
 80104b2:	f04f 0901 	mov.w	r9, #1
 80104b6:	e7d1      	b.n	801045c <__gethex+0x2d0>
 80104b8:	2501      	movs	r5, #1
 80104ba:	e7e2      	b.n	8010482 <__gethex+0x2f6>
 80104bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104be:	f1c3 0301 	rsb	r3, r3, #1
 80104c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d0f0      	beq.n	80104ac <__gethex+0x320>
 80104ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80104ce:	f104 0314 	add.w	r3, r4, #20
 80104d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80104d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80104da:	f04f 0c00 	mov.w	ip, #0
 80104de:	4618      	mov	r0, r3
 80104e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80104e8:	d01b      	beq.n	8010522 <__gethex+0x396>
 80104ea:	3201      	adds	r2, #1
 80104ec:	6002      	str	r2, [r0, #0]
 80104ee:	2d02      	cmp	r5, #2
 80104f0:	f104 0314 	add.w	r3, r4, #20
 80104f4:	d13c      	bne.n	8010570 <__gethex+0x3e4>
 80104f6:	f8d8 2000 	ldr.w	r2, [r8]
 80104fa:	3a01      	subs	r2, #1
 80104fc:	42b2      	cmp	r2, r6
 80104fe:	d109      	bne.n	8010514 <__gethex+0x388>
 8010500:	1171      	asrs	r1, r6, #5
 8010502:	2201      	movs	r2, #1
 8010504:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010508:	f006 061f 	and.w	r6, r6, #31
 801050c:	fa02 f606 	lsl.w	r6, r2, r6
 8010510:	421e      	tst	r6, r3
 8010512:	d13a      	bne.n	801058a <__gethex+0x3fe>
 8010514:	f045 0520 	orr.w	r5, r5, #32
 8010518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801051a:	601c      	str	r4, [r3, #0]
 801051c:	9b02      	ldr	r3, [sp, #8]
 801051e:	601f      	str	r7, [r3, #0]
 8010520:	e6b0      	b.n	8010284 <__gethex+0xf8>
 8010522:	4299      	cmp	r1, r3
 8010524:	f843 cc04 	str.w	ip, [r3, #-4]
 8010528:	d8d9      	bhi.n	80104de <__gethex+0x352>
 801052a:	68a3      	ldr	r3, [r4, #8]
 801052c:	459b      	cmp	fp, r3
 801052e:	db17      	blt.n	8010560 <__gethex+0x3d4>
 8010530:	6861      	ldr	r1, [r4, #4]
 8010532:	9801      	ldr	r0, [sp, #4]
 8010534:	3101      	adds	r1, #1
 8010536:	f7fd fe63 	bl	800e200 <_Balloc>
 801053a:	4681      	mov	r9, r0
 801053c:	b918      	cbnz	r0, 8010546 <__gethex+0x3ba>
 801053e:	4b1a      	ldr	r3, [pc, #104]	@ (80105a8 <__gethex+0x41c>)
 8010540:	4602      	mov	r2, r0
 8010542:	2184      	movs	r1, #132	@ 0x84
 8010544:	e6c5      	b.n	80102d2 <__gethex+0x146>
 8010546:	6922      	ldr	r2, [r4, #16]
 8010548:	3202      	adds	r2, #2
 801054a:	f104 010c 	add.w	r1, r4, #12
 801054e:	0092      	lsls	r2, r2, #2
 8010550:	300c      	adds	r0, #12
 8010552:	f7fc fef3 	bl	800d33c <memcpy>
 8010556:	4621      	mov	r1, r4
 8010558:	9801      	ldr	r0, [sp, #4]
 801055a:	f7fd fe91 	bl	800e280 <_Bfree>
 801055e:	464c      	mov	r4, r9
 8010560:	6923      	ldr	r3, [r4, #16]
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010568:	6122      	str	r2, [r4, #16]
 801056a:	2201      	movs	r2, #1
 801056c:	615a      	str	r2, [r3, #20]
 801056e:	e7be      	b.n	80104ee <__gethex+0x362>
 8010570:	6922      	ldr	r2, [r4, #16]
 8010572:	455a      	cmp	r2, fp
 8010574:	dd0b      	ble.n	801058e <__gethex+0x402>
 8010576:	2101      	movs	r1, #1
 8010578:	4620      	mov	r0, r4
 801057a:	f7ff fd9f 	bl	80100bc <rshift>
 801057e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010582:	3701      	adds	r7, #1
 8010584:	42bb      	cmp	r3, r7
 8010586:	f6ff aee0 	blt.w	801034a <__gethex+0x1be>
 801058a:	2501      	movs	r5, #1
 801058c:	e7c2      	b.n	8010514 <__gethex+0x388>
 801058e:	f016 061f 	ands.w	r6, r6, #31
 8010592:	d0fa      	beq.n	801058a <__gethex+0x3fe>
 8010594:	4453      	add	r3, sl
 8010596:	f1c6 0620 	rsb	r6, r6, #32
 801059a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801059e:	f7fd ff21 	bl	800e3e4 <__hi0bits>
 80105a2:	42b0      	cmp	r0, r6
 80105a4:	dbe7      	blt.n	8010576 <__gethex+0x3ea>
 80105a6:	e7f0      	b.n	801058a <__gethex+0x3fe>
 80105a8:	08014d1b 	.word	0x08014d1b

080105ac <L_shift>:
 80105ac:	f1c2 0208 	rsb	r2, r2, #8
 80105b0:	0092      	lsls	r2, r2, #2
 80105b2:	b570      	push	{r4, r5, r6, lr}
 80105b4:	f1c2 0620 	rsb	r6, r2, #32
 80105b8:	6843      	ldr	r3, [r0, #4]
 80105ba:	6804      	ldr	r4, [r0, #0]
 80105bc:	fa03 f506 	lsl.w	r5, r3, r6
 80105c0:	432c      	orrs	r4, r5
 80105c2:	40d3      	lsrs	r3, r2
 80105c4:	6004      	str	r4, [r0, #0]
 80105c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80105ca:	4288      	cmp	r0, r1
 80105cc:	d3f4      	bcc.n	80105b8 <L_shift+0xc>
 80105ce:	bd70      	pop	{r4, r5, r6, pc}

080105d0 <__match>:
 80105d0:	b530      	push	{r4, r5, lr}
 80105d2:	6803      	ldr	r3, [r0, #0]
 80105d4:	3301      	adds	r3, #1
 80105d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105da:	b914      	cbnz	r4, 80105e2 <__match+0x12>
 80105dc:	6003      	str	r3, [r0, #0]
 80105de:	2001      	movs	r0, #1
 80105e0:	bd30      	pop	{r4, r5, pc}
 80105e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80105ea:	2d19      	cmp	r5, #25
 80105ec:	bf98      	it	ls
 80105ee:	3220      	addls	r2, #32
 80105f0:	42a2      	cmp	r2, r4
 80105f2:	d0f0      	beq.n	80105d6 <__match+0x6>
 80105f4:	2000      	movs	r0, #0
 80105f6:	e7f3      	b.n	80105e0 <__match+0x10>

080105f8 <__hexnan>:
 80105f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fc:	680b      	ldr	r3, [r1, #0]
 80105fe:	6801      	ldr	r1, [r0, #0]
 8010600:	115e      	asrs	r6, r3, #5
 8010602:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010606:	f013 031f 	ands.w	r3, r3, #31
 801060a:	b087      	sub	sp, #28
 801060c:	bf18      	it	ne
 801060e:	3604      	addne	r6, #4
 8010610:	2500      	movs	r5, #0
 8010612:	1f37      	subs	r7, r6, #4
 8010614:	4682      	mov	sl, r0
 8010616:	4690      	mov	r8, r2
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	f846 5c04 	str.w	r5, [r6, #-4]
 801061e:	46b9      	mov	r9, r7
 8010620:	463c      	mov	r4, r7
 8010622:	9502      	str	r5, [sp, #8]
 8010624:	46ab      	mov	fp, r5
 8010626:	784a      	ldrb	r2, [r1, #1]
 8010628:	1c4b      	adds	r3, r1, #1
 801062a:	9303      	str	r3, [sp, #12]
 801062c:	b342      	cbz	r2, 8010680 <__hexnan+0x88>
 801062e:	4610      	mov	r0, r2
 8010630:	9105      	str	r1, [sp, #20]
 8010632:	9204      	str	r2, [sp, #16]
 8010634:	f7ff fd94 	bl	8010160 <__hexdig_fun>
 8010638:	2800      	cmp	r0, #0
 801063a:	d151      	bne.n	80106e0 <__hexnan+0xe8>
 801063c:	9a04      	ldr	r2, [sp, #16]
 801063e:	9905      	ldr	r1, [sp, #20]
 8010640:	2a20      	cmp	r2, #32
 8010642:	d818      	bhi.n	8010676 <__hexnan+0x7e>
 8010644:	9b02      	ldr	r3, [sp, #8]
 8010646:	459b      	cmp	fp, r3
 8010648:	dd13      	ble.n	8010672 <__hexnan+0x7a>
 801064a:	454c      	cmp	r4, r9
 801064c:	d206      	bcs.n	801065c <__hexnan+0x64>
 801064e:	2d07      	cmp	r5, #7
 8010650:	dc04      	bgt.n	801065c <__hexnan+0x64>
 8010652:	462a      	mov	r2, r5
 8010654:	4649      	mov	r1, r9
 8010656:	4620      	mov	r0, r4
 8010658:	f7ff ffa8 	bl	80105ac <L_shift>
 801065c:	4544      	cmp	r4, r8
 801065e:	d952      	bls.n	8010706 <__hexnan+0x10e>
 8010660:	2300      	movs	r3, #0
 8010662:	f1a4 0904 	sub.w	r9, r4, #4
 8010666:	f844 3c04 	str.w	r3, [r4, #-4]
 801066a:	f8cd b008 	str.w	fp, [sp, #8]
 801066e:	464c      	mov	r4, r9
 8010670:	461d      	mov	r5, r3
 8010672:	9903      	ldr	r1, [sp, #12]
 8010674:	e7d7      	b.n	8010626 <__hexnan+0x2e>
 8010676:	2a29      	cmp	r2, #41	@ 0x29
 8010678:	d157      	bne.n	801072a <__hexnan+0x132>
 801067a:	3102      	adds	r1, #2
 801067c:	f8ca 1000 	str.w	r1, [sl]
 8010680:	f1bb 0f00 	cmp.w	fp, #0
 8010684:	d051      	beq.n	801072a <__hexnan+0x132>
 8010686:	454c      	cmp	r4, r9
 8010688:	d206      	bcs.n	8010698 <__hexnan+0xa0>
 801068a:	2d07      	cmp	r5, #7
 801068c:	dc04      	bgt.n	8010698 <__hexnan+0xa0>
 801068e:	462a      	mov	r2, r5
 8010690:	4649      	mov	r1, r9
 8010692:	4620      	mov	r0, r4
 8010694:	f7ff ff8a 	bl	80105ac <L_shift>
 8010698:	4544      	cmp	r4, r8
 801069a:	d936      	bls.n	801070a <__hexnan+0x112>
 801069c:	f1a8 0204 	sub.w	r2, r8, #4
 80106a0:	4623      	mov	r3, r4
 80106a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80106a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80106aa:	429f      	cmp	r7, r3
 80106ac:	d2f9      	bcs.n	80106a2 <__hexnan+0xaa>
 80106ae:	1b3b      	subs	r3, r7, r4
 80106b0:	f023 0303 	bic.w	r3, r3, #3
 80106b4:	3304      	adds	r3, #4
 80106b6:	3401      	adds	r4, #1
 80106b8:	3e03      	subs	r6, #3
 80106ba:	42b4      	cmp	r4, r6
 80106bc:	bf88      	it	hi
 80106be:	2304      	movhi	r3, #4
 80106c0:	4443      	add	r3, r8
 80106c2:	2200      	movs	r2, #0
 80106c4:	f843 2b04 	str.w	r2, [r3], #4
 80106c8:	429f      	cmp	r7, r3
 80106ca:	d2fb      	bcs.n	80106c4 <__hexnan+0xcc>
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	b91b      	cbnz	r3, 80106d8 <__hexnan+0xe0>
 80106d0:	4547      	cmp	r7, r8
 80106d2:	d128      	bne.n	8010726 <__hexnan+0x12e>
 80106d4:	2301      	movs	r3, #1
 80106d6:	603b      	str	r3, [r7, #0]
 80106d8:	2005      	movs	r0, #5
 80106da:	b007      	add	sp, #28
 80106dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e0:	3501      	adds	r5, #1
 80106e2:	2d08      	cmp	r5, #8
 80106e4:	f10b 0b01 	add.w	fp, fp, #1
 80106e8:	dd06      	ble.n	80106f8 <__hexnan+0x100>
 80106ea:	4544      	cmp	r4, r8
 80106ec:	d9c1      	bls.n	8010672 <__hexnan+0x7a>
 80106ee:	2300      	movs	r3, #0
 80106f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80106f4:	2501      	movs	r5, #1
 80106f6:	3c04      	subs	r4, #4
 80106f8:	6822      	ldr	r2, [r4, #0]
 80106fa:	f000 000f 	and.w	r0, r0, #15
 80106fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010702:	6020      	str	r0, [r4, #0]
 8010704:	e7b5      	b.n	8010672 <__hexnan+0x7a>
 8010706:	2508      	movs	r5, #8
 8010708:	e7b3      	b.n	8010672 <__hexnan+0x7a>
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d0dd      	beq.n	80106cc <__hexnan+0xd4>
 8010710:	f1c3 0320 	rsb	r3, r3, #32
 8010714:	f04f 32ff 	mov.w	r2, #4294967295
 8010718:	40da      	lsrs	r2, r3
 801071a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801071e:	4013      	ands	r3, r2
 8010720:	f846 3c04 	str.w	r3, [r6, #-4]
 8010724:	e7d2      	b.n	80106cc <__hexnan+0xd4>
 8010726:	3f04      	subs	r7, #4
 8010728:	e7d0      	b.n	80106cc <__hexnan+0xd4>
 801072a:	2004      	movs	r0, #4
 801072c:	e7d5      	b.n	80106da <__hexnan+0xe2>

0801072e <__ascii_mbtowc>:
 801072e:	b082      	sub	sp, #8
 8010730:	b901      	cbnz	r1, 8010734 <__ascii_mbtowc+0x6>
 8010732:	a901      	add	r1, sp, #4
 8010734:	b142      	cbz	r2, 8010748 <__ascii_mbtowc+0x1a>
 8010736:	b14b      	cbz	r3, 801074c <__ascii_mbtowc+0x1e>
 8010738:	7813      	ldrb	r3, [r2, #0]
 801073a:	600b      	str	r3, [r1, #0]
 801073c:	7812      	ldrb	r2, [r2, #0]
 801073e:	1e10      	subs	r0, r2, #0
 8010740:	bf18      	it	ne
 8010742:	2001      	movne	r0, #1
 8010744:	b002      	add	sp, #8
 8010746:	4770      	bx	lr
 8010748:	4610      	mov	r0, r2
 801074a:	e7fb      	b.n	8010744 <__ascii_mbtowc+0x16>
 801074c:	f06f 0001 	mvn.w	r0, #1
 8010750:	e7f8      	b.n	8010744 <__ascii_mbtowc+0x16>

08010752 <_realloc_r>:
 8010752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010756:	4680      	mov	r8, r0
 8010758:	4615      	mov	r5, r2
 801075a:	460c      	mov	r4, r1
 801075c:	b921      	cbnz	r1, 8010768 <_realloc_r+0x16>
 801075e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010762:	4611      	mov	r1, r2
 8010764:	f7fd bcc0 	b.w	800e0e8 <_malloc_r>
 8010768:	b92a      	cbnz	r2, 8010776 <_realloc_r+0x24>
 801076a:	f7fd fc49 	bl	800e000 <_free_r>
 801076e:	2400      	movs	r4, #0
 8010770:	4620      	mov	r0, r4
 8010772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010776:	f000 f840 	bl	80107fa <_malloc_usable_size_r>
 801077a:	4285      	cmp	r5, r0
 801077c:	4606      	mov	r6, r0
 801077e:	d802      	bhi.n	8010786 <_realloc_r+0x34>
 8010780:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010784:	d8f4      	bhi.n	8010770 <_realloc_r+0x1e>
 8010786:	4629      	mov	r1, r5
 8010788:	4640      	mov	r0, r8
 801078a:	f7fd fcad 	bl	800e0e8 <_malloc_r>
 801078e:	4607      	mov	r7, r0
 8010790:	2800      	cmp	r0, #0
 8010792:	d0ec      	beq.n	801076e <_realloc_r+0x1c>
 8010794:	42b5      	cmp	r5, r6
 8010796:	462a      	mov	r2, r5
 8010798:	4621      	mov	r1, r4
 801079a:	bf28      	it	cs
 801079c:	4632      	movcs	r2, r6
 801079e:	f7fc fdcd 	bl	800d33c <memcpy>
 80107a2:	4621      	mov	r1, r4
 80107a4:	4640      	mov	r0, r8
 80107a6:	f7fd fc2b 	bl	800e000 <_free_r>
 80107aa:	463c      	mov	r4, r7
 80107ac:	e7e0      	b.n	8010770 <_realloc_r+0x1e>

080107ae <__ascii_wctomb>:
 80107ae:	4603      	mov	r3, r0
 80107b0:	4608      	mov	r0, r1
 80107b2:	b141      	cbz	r1, 80107c6 <__ascii_wctomb+0x18>
 80107b4:	2aff      	cmp	r2, #255	@ 0xff
 80107b6:	d904      	bls.n	80107c2 <__ascii_wctomb+0x14>
 80107b8:	228a      	movs	r2, #138	@ 0x8a
 80107ba:	601a      	str	r2, [r3, #0]
 80107bc:	f04f 30ff 	mov.w	r0, #4294967295
 80107c0:	4770      	bx	lr
 80107c2:	700a      	strb	r2, [r1, #0]
 80107c4:	2001      	movs	r0, #1
 80107c6:	4770      	bx	lr

080107c8 <fiprintf>:
 80107c8:	b40e      	push	{r1, r2, r3}
 80107ca:	b503      	push	{r0, r1, lr}
 80107cc:	4601      	mov	r1, r0
 80107ce:	ab03      	add	r3, sp, #12
 80107d0:	4805      	ldr	r0, [pc, #20]	@ (80107e8 <fiprintf+0x20>)
 80107d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d6:	6800      	ldr	r0, [r0, #0]
 80107d8:	9301      	str	r3, [sp, #4]
 80107da:	f7ff f9c9 	bl	800fb70 <_vfiprintf_r>
 80107de:	b002      	add	sp, #8
 80107e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80107e4:	b003      	add	sp, #12
 80107e6:	4770      	bx	lr
 80107e8:	20000078 	.word	0x20000078

080107ec <abort>:
 80107ec:	b508      	push	{r3, lr}
 80107ee:	2006      	movs	r0, #6
 80107f0:	f000 f834 	bl	801085c <raise>
 80107f4:	2001      	movs	r0, #1
 80107f6:	f7f6 fbcf 	bl	8006f98 <_exit>

080107fa <_malloc_usable_size_r>:
 80107fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107fe:	1f18      	subs	r0, r3, #4
 8010800:	2b00      	cmp	r3, #0
 8010802:	bfbc      	itt	lt
 8010804:	580b      	ldrlt	r3, [r1, r0]
 8010806:	18c0      	addlt	r0, r0, r3
 8010808:	4770      	bx	lr

0801080a <_raise_r>:
 801080a:	291f      	cmp	r1, #31
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4605      	mov	r5, r0
 8010810:	460c      	mov	r4, r1
 8010812:	d904      	bls.n	801081e <_raise_r+0x14>
 8010814:	2316      	movs	r3, #22
 8010816:	6003      	str	r3, [r0, #0]
 8010818:	f04f 30ff 	mov.w	r0, #4294967295
 801081c:	bd38      	pop	{r3, r4, r5, pc}
 801081e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010820:	b112      	cbz	r2, 8010828 <_raise_r+0x1e>
 8010822:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010826:	b94b      	cbnz	r3, 801083c <_raise_r+0x32>
 8010828:	4628      	mov	r0, r5
 801082a:	f000 f831 	bl	8010890 <_getpid_r>
 801082e:	4622      	mov	r2, r4
 8010830:	4601      	mov	r1, r0
 8010832:	4628      	mov	r0, r5
 8010834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010838:	f000 b818 	b.w	801086c <_kill_r>
 801083c:	2b01      	cmp	r3, #1
 801083e:	d00a      	beq.n	8010856 <_raise_r+0x4c>
 8010840:	1c59      	adds	r1, r3, #1
 8010842:	d103      	bne.n	801084c <_raise_r+0x42>
 8010844:	2316      	movs	r3, #22
 8010846:	6003      	str	r3, [r0, #0]
 8010848:	2001      	movs	r0, #1
 801084a:	e7e7      	b.n	801081c <_raise_r+0x12>
 801084c:	2100      	movs	r1, #0
 801084e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010852:	4620      	mov	r0, r4
 8010854:	4798      	blx	r3
 8010856:	2000      	movs	r0, #0
 8010858:	e7e0      	b.n	801081c <_raise_r+0x12>
	...

0801085c <raise>:
 801085c:	4b02      	ldr	r3, [pc, #8]	@ (8010868 <raise+0xc>)
 801085e:	4601      	mov	r1, r0
 8010860:	6818      	ldr	r0, [r3, #0]
 8010862:	f7ff bfd2 	b.w	801080a <_raise_r>
 8010866:	bf00      	nop
 8010868:	20000078 	.word	0x20000078

0801086c <_kill_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d07      	ldr	r5, [pc, #28]	@ (801088c <_kill_r+0x20>)
 8010870:	2300      	movs	r3, #0
 8010872:	4604      	mov	r4, r0
 8010874:	4608      	mov	r0, r1
 8010876:	4611      	mov	r1, r2
 8010878:	602b      	str	r3, [r5, #0]
 801087a:	f7f6 fb85 	bl	8006f88 <_kill>
 801087e:	1c43      	adds	r3, r0, #1
 8010880:	d102      	bne.n	8010888 <_kill_r+0x1c>
 8010882:	682b      	ldr	r3, [r5, #0]
 8010884:	b103      	cbz	r3, 8010888 <_kill_r+0x1c>
 8010886:	6023      	str	r3, [r4, #0]
 8010888:	bd38      	pop	{r3, r4, r5, pc}
 801088a:	bf00      	nop
 801088c:	20001a80 	.word	0x20001a80

08010890 <_getpid_r>:
 8010890:	f7f6 bb78 	b.w	8006f84 <_getpid>

08010894 <asin>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	ed2d 8b02 	vpush	{d8}
 801089a:	ec55 4b10 	vmov	r4, r5, d0
 801089e:	f000 fe4b 	bl	8011538 <__ieee754_asin>
 80108a2:	4622      	mov	r2, r4
 80108a4:	462b      	mov	r3, r5
 80108a6:	4620      	mov	r0, r4
 80108a8:	4629      	mov	r1, r5
 80108aa:	eeb0 8a40 	vmov.f32	s16, s0
 80108ae:	eef0 8a60 	vmov.f32	s17, s1
 80108b2:	f7f5 fc63 	bl	800617c <__aeabi_dcmpun>
 80108b6:	b9a8      	cbnz	r0, 80108e4 <asin+0x50>
 80108b8:	ec45 4b10 	vmov	d0, r4, r5
 80108bc:	f000 fa78 	bl	8010db0 <fabs>
 80108c0:	4b0c      	ldr	r3, [pc, #48]	@ (80108f4 <asin+0x60>)
 80108c2:	ec51 0b10 	vmov	r0, r1, d0
 80108c6:	2200      	movs	r2, #0
 80108c8:	f7f5 fc4e 	bl	8006168 <__aeabi_dcmpgt>
 80108cc:	b150      	cbz	r0, 80108e4 <asin+0x50>
 80108ce:	f7fc fd03 	bl	800d2d8 <__errno>
 80108d2:	ecbd 8b02 	vpop	{d8}
 80108d6:	2321      	movs	r3, #33	@ 0x21
 80108d8:	6003      	str	r3, [r0, #0]
 80108da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108de:	4806      	ldr	r0, [pc, #24]	@ (80108f8 <asin+0x64>)
 80108e0:	f7ff bbb2 	b.w	8010048 <nan>
 80108e4:	eeb0 0a48 	vmov.f32	s0, s16
 80108e8:	eef0 0a68 	vmov.f32	s1, s17
 80108ec:	ecbd 8b02 	vpop	{d8}
 80108f0:	bd38      	pop	{r3, r4, r5, pc}
 80108f2:	bf00      	nop
 80108f4:	3ff00000 	.word	0x3ff00000
 80108f8:	08013980 	.word	0x08013980

080108fc <atan2>:
 80108fc:	f001 b820 	b.w	8011940 <__ieee754_atan2>

08010900 <log>:
 8010900:	b538      	push	{r3, r4, r5, lr}
 8010902:	ed2d 8b02 	vpush	{d8}
 8010906:	ec55 4b10 	vmov	r4, r5, d0
 801090a:	f001 f8e1 	bl	8011ad0 <__ieee754_log>
 801090e:	4622      	mov	r2, r4
 8010910:	462b      	mov	r3, r5
 8010912:	4620      	mov	r0, r4
 8010914:	4629      	mov	r1, r5
 8010916:	eeb0 8a40 	vmov.f32	s16, s0
 801091a:	eef0 8a60 	vmov.f32	s17, s1
 801091e:	f7f5 fc2d 	bl	800617c <__aeabi_dcmpun>
 8010922:	b998      	cbnz	r0, 801094c <log+0x4c>
 8010924:	2200      	movs	r2, #0
 8010926:	2300      	movs	r3, #0
 8010928:	4620      	mov	r0, r4
 801092a:	4629      	mov	r1, r5
 801092c:	f7f5 fc1c 	bl	8006168 <__aeabi_dcmpgt>
 8010930:	b960      	cbnz	r0, 801094c <log+0x4c>
 8010932:	2200      	movs	r2, #0
 8010934:	2300      	movs	r3, #0
 8010936:	4620      	mov	r0, r4
 8010938:	4629      	mov	r1, r5
 801093a:	f7f5 fbed 	bl	8006118 <__aeabi_dcmpeq>
 801093e:	b160      	cbz	r0, 801095a <log+0x5a>
 8010940:	f7fc fcca 	bl	800d2d8 <__errno>
 8010944:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8010970 <log+0x70>
 8010948:	2322      	movs	r3, #34	@ 0x22
 801094a:	6003      	str	r3, [r0, #0]
 801094c:	eeb0 0a48 	vmov.f32	s0, s16
 8010950:	eef0 0a68 	vmov.f32	s1, s17
 8010954:	ecbd 8b02 	vpop	{d8}
 8010958:	bd38      	pop	{r3, r4, r5, pc}
 801095a:	f7fc fcbd 	bl	800d2d8 <__errno>
 801095e:	ecbd 8b02 	vpop	{d8}
 8010962:	2321      	movs	r3, #33	@ 0x21
 8010964:	6003      	str	r3, [r0, #0]
 8010966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801096a:	4803      	ldr	r0, [pc, #12]	@ (8010978 <log+0x78>)
 801096c:	f7ff bb6c 	b.w	8010048 <nan>
 8010970:	00000000 	.word	0x00000000
 8010974:	fff00000 	.word	0xfff00000
 8010978:	08013980 	.word	0x08013980

0801097c <sqrt>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	ed2d 8b02 	vpush	{d8}
 8010982:	ec55 4b10 	vmov	r4, r5, d0
 8010986:	f000 faf9 	bl	8010f7c <__ieee754_sqrt>
 801098a:	4622      	mov	r2, r4
 801098c:	462b      	mov	r3, r5
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	eeb0 8a40 	vmov.f32	s16, s0
 8010996:	eef0 8a60 	vmov.f32	s17, s1
 801099a:	f7f5 fbef 	bl	800617c <__aeabi_dcmpun>
 801099e:	b990      	cbnz	r0, 80109c6 <sqrt+0x4a>
 80109a0:	2200      	movs	r2, #0
 80109a2:	2300      	movs	r3, #0
 80109a4:	4620      	mov	r0, r4
 80109a6:	4629      	mov	r1, r5
 80109a8:	f7f5 fbc0 	bl	800612c <__aeabi_dcmplt>
 80109ac:	b158      	cbz	r0, 80109c6 <sqrt+0x4a>
 80109ae:	f7fc fc93 	bl	800d2d8 <__errno>
 80109b2:	2321      	movs	r3, #33	@ 0x21
 80109b4:	6003      	str	r3, [r0, #0]
 80109b6:	2200      	movs	r2, #0
 80109b8:	2300      	movs	r3, #0
 80109ba:	4610      	mov	r0, r2
 80109bc:	4619      	mov	r1, r3
 80109be:	f7f5 fa6d 	bl	8005e9c <__aeabi_ddiv>
 80109c2:	ec41 0b18 	vmov	d8, r0, r1
 80109c6:	eeb0 0a48 	vmov.f32	s0, s16
 80109ca:	eef0 0a68 	vmov.f32	s1, s17
 80109ce:	ecbd 8b02 	vpop	{d8}
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	0000      	movs	r0, r0
	...

080109d8 <atan>:
 80109d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109dc:	ec55 4b10 	vmov	r4, r5, d0
 80109e0:	4bbf      	ldr	r3, [pc, #764]	@ (8010ce0 <atan+0x308>)
 80109e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80109e6:	429e      	cmp	r6, r3
 80109e8:	46ab      	mov	fp, r5
 80109ea:	d918      	bls.n	8010a1e <atan+0x46>
 80109ec:	4bbd      	ldr	r3, [pc, #756]	@ (8010ce4 <atan+0x30c>)
 80109ee:	429e      	cmp	r6, r3
 80109f0:	d801      	bhi.n	80109f6 <atan+0x1e>
 80109f2:	d109      	bne.n	8010a08 <atan+0x30>
 80109f4:	b144      	cbz	r4, 8010a08 <atan+0x30>
 80109f6:	4622      	mov	r2, r4
 80109f8:	462b      	mov	r3, r5
 80109fa:	4620      	mov	r0, r4
 80109fc:	4629      	mov	r1, r5
 80109fe:	f7f4 ff6d 	bl	80058dc <__adddf3>
 8010a02:	4604      	mov	r4, r0
 8010a04:	460d      	mov	r5, r1
 8010a06:	e006      	b.n	8010a16 <atan+0x3e>
 8010a08:	f1bb 0f00 	cmp.w	fp, #0
 8010a0c:	f340 812b 	ble.w	8010c66 <atan+0x28e>
 8010a10:	a597      	add	r5, pc, #604	@ (adr r5, 8010c70 <atan+0x298>)
 8010a12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a16:	ec45 4b10 	vmov	d0, r4, r5
 8010a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1e:	4bb2      	ldr	r3, [pc, #712]	@ (8010ce8 <atan+0x310>)
 8010a20:	429e      	cmp	r6, r3
 8010a22:	d813      	bhi.n	8010a4c <atan+0x74>
 8010a24:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010a28:	429e      	cmp	r6, r3
 8010a2a:	d80c      	bhi.n	8010a46 <atan+0x6e>
 8010a2c:	a392      	add	r3, pc, #584	@ (adr r3, 8010c78 <atan+0x2a0>)
 8010a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a32:	4620      	mov	r0, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	f7f4 ff51 	bl	80058dc <__adddf3>
 8010a3a:	4bac      	ldr	r3, [pc, #688]	@ (8010cec <atan+0x314>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f7f5 fb93 	bl	8006168 <__aeabi_dcmpgt>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	d1e7      	bne.n	8010a16 <atan+0x3e>
 8010a46:	f04f 3aff 	mov.w	sl, #4294967295
 8010a4a:	e029      	b.n	8010aa0 <atan+0xc8>
 8010a4c:	f000 f9b0 	bl	8010db0 <fabs>
 8010a50:	4ba7      	ldr	r3, [pc, #668]	@ (8010cf0 <atan+0x318>)
 8010a52:	429e      	cmp	r6, r3
 8010a54:	ec55 4b10 	vmov	r4, r5, d0
 8010a58:	f200 80bc 	bhi.w	8010bd4 <atan+0x1fc>
 8010a5c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010a60:	429e      	cmp	r6, r3
 8010a62:	f200 809e 	bhi.w	8010ba2 <atan+0x1ca>
 8010a66:	4622      	mov	r2, r4
 8010a68:	462b      	mov	r3, r5
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	f7f4 ff35 	bl	80058dc <__adddf3>
 8010a72:	4b9e      	ldr	r3, [pc, #632]	@ (8010cec <atan+0x314>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	f7f4 ff2f 	bl	80058d8 <__aeabi_dsub>
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	4606      	mov	r6, r0
 8010a7e:	460f      	mov	r7, r1
 8010a80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010a84:	4620      	mov	r0, r4
 8010a86:	4629      	mov	r1, r5
 8010a88:	f7f4 ff28 	bl	80058dc <__adddf3>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4630      	mov	r0, r6
 8010a92:	4639      	mov	r1, r7
 8010a94:	f7f5 fa02 	bl	8005e9c <__aeabi_ddiv>
 8010a98:	f04f 0a00 	mov.w	sl, #0
 8010a9c:	4604      	mov	r4, r0
 8010a9e:	460d      	mov	r5, r1
 8010aa0:	4622      	mov	r2, r4
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	f7f5 f8ce 	bl	8005c48 <__aeabi_dmul>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	4680      	mov	r8, r0
 8010ab2:	4689      	mov	r9, r1
 8010ab4:	f7f5 f8c8 	bl	8005c48 <__aeabi_dmul>
 8010ab8:	a371      	add	r3, pc, #452	@ (adr r3, 8010c80 <atan+0x2a8>)
 8010aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abe:	4606      	mov	r6, r0
 8010ac0:	460f      	mov	r7, r1
 8010ac2:	f7f5 f8c1 	bl	8005c48 <__aeabi_dmul>
 8010ac6:	a370      	add	r3, pc, #448	@ (adr r3, 8010c88 <atan+0x2b0>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7f4 ff06 	bl	80058dc <__adddf3>
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	463b      	mov	r3, r7
 8010ad4:	f7f5 f8b8 	bl	8005c48 <__aeabi_dmul>
 8010ad8:	a36d      	add	r3, pc, #436	@ (adr r3, 8010c90 <atan+0x2b8>)
 8010ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ade:	f7f4 fefd 	bl	80058dc <__adddf3>
 8010ae2:	4632      	mov	r2, r6
 8010ae4:	463b      	mov	r3, r7
 8010ae6:	f7f5 f8af 	bl	8005c48 <__aeabi_dmul>
 8010aea:	a36b      	add	r3, pc, #428	@ (adr r3, 8010c98 <atan+0x2c0>)
 8010aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af0:	f7f4 fef4 	bl	80058dc <__adddf3>
 8010af4:	4632      	mov	r2, r6
 8010af6:	463b      	mov	r3, r7
 8010af8:	f7f5 f8a6 	bl	8005c48 <__aeabi_dmul>
 8010afc:	a368      	add	r3, pc, #416	@ (adr r3, 8010ca0 <atan+0x2c8>)
 8010afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b02:	f7f4 feeb 	bl	80058dc <__adddf3>
 8010b06:	4632      	mov	r2, r6
 8010b08:	463b      	mov	r3, r7
 8010b0a:	f7f5 f89d 	bl	8005c48 <__aeabi_dmul>
 8010b0e:	a366      	add	r3, pc, #408	@ (adr r3, 8010ca8 <atan+0x2d0>)
 8010b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b14:	f7f4 fee2 	bl	80058dc <__adddf3>
 8010b18:	4642      	mov	r2, r8
 8010b1a:	464b      	mov	r3, r9
 8010b1c:	f7f5 f894 	bl	8005c48 <__aeabi_dmul>
 8010b20:	a363      	add	r3, pc, #396	@ (adr r3, 8010cb0 <atan+0x2d8>)
 8010b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b26:	4680      	mov	r8, r0
 8010b28:	4689      	mov	r9, r1
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	4639      	mov	r1, r7
 8010b2e:	f7f5 f88b 	bl	8005c48 <__aeabi_dmul>
 8010b32:	a361      	add	r3, pc, #388	@ (adr r3, 8010cb8 <atan+0x2e0>)
 8010b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b38:	f7f4 fece 	bl	80058d8 <__aeabi_dsub>
 8010b3c:	4632      	mov	r2, r6
 8010b3e:	463b      	mov	r3, r7
 8010b40:	f7f5 f882 	bl	8005c48 <__aeabi_dmul>
 8010b44:	a35e      	add	r3, pc, #376	@ (adr r3, 8010cc0 <atan+0x2e8>)
 8010b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4a:	f7f4 fec5 	bl	80058d8 <__aeabi_dsub>
 8010b4e:	4632      	mov	r2, r6
 8010b50:	463b      	mov	r3, r7
 8010b52:	f7f5 f879 	bl	8005c48 <__aeabi_dmul>
 8010b56:	a35c      	add	r3, pc, #368	@ (adr r3, 8010cc8 <atan+0x2f0>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	f7f4 febc 	bl	80058d8 <__aeabi_dsub>
 8010b60:	4632      	mov	r2, r6
 8010b62:	463b      	mov	r3, r7
 8010b64:	f7f5 f870 	bl	8005c48 <__aeabi_dmul>
 8010b68:	a359      	add	r3, pc, #356	@ (adr r3, 8010cd0 <atan+0x2f8>)
 8010b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6e:	f7f4 feb3 	bl	80058d8 <__aeabi_dsub>
 8010b72:	4632      	mov	r2, r6
 8010b74:	463b      	mov	r3, r7
 8010b76:	f7f5 f867 	bl	8005c48 <__aeabi_dmul>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	4640      	mov	r0, r8
 8010b80:	4649      	mov	r1, r9
 8010b82:	f7f4 feab 	bl	80058dc <__adddf3>
 8010b86:	4622      	mov	r2, r4
 8010b88:	462b      	mov	r3, r5
 8010b8a:	f7f5 f85d 	bl	8005c48 <__aeabi_dmul>
 8010b8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	d148      	bne.n	8010c2a <atan+0x252>
 8010b98:	4620      	mov	r0, r4
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f7f4 fe9c 	bl	80058d8 <__aeabi_dsub>
 8010ba0:	e72f      	b.n	8010a02 <atan+0x2a>
 8010ba2:	4b52      	ldr	r3, [pc, #328]	@ (8010cec <atan+0x314>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7f4 fe95 	bl	80058d8 <__aeabi_dsub>
 8010bae:	4b4f      	ldr	r3, [pc, #316]	@ (8010cec <atan+0x314>)
 8010bb0:	4606      	mov	r6, r0
 8010bb2:	460f      	mov	r7, r1
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	4629      	mov	r1, r5
 8010bba:	f7f4 fe8f 	bl	80058dc <__adddf3>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	f7f5 f969 	bl	8005e9c <__aeabi_ddiv>
 8010bca:	f04f 0a01 	mov.w	sl, #1
 8010bce:	4604      	mov	r4, r0
 8010bd0:	460d      	mov	r5, r1
 8010bd2:	e765      	b.n	8010aa0 <atan+0xc8>
 8010bd4:	4b47      	ldr	r3, [pc, #284]	@ (8010cf4 <atan+0x31c>)
 8010bd6:	429e      	cmp	r6, r3
 8010bd8:	d21c      	bcs.n	8010c14 <atan+0x23c>
 8010bda:	4b47      	ldr	r3, [pc, #284]	@ (8010cf8 <atan+0x320>)
 8010bdc:	2200      	movs	r2, #0
 8010bde:	4620      	mov	r0, r4
 8010be0:	4629      	mov	r1, r5
 8010be2:	f7f4 fe79 	bl	80058d8 <__aeabi_dsub>
 8010be6:	4b44      	ldr	r3, [pc, #272]	@ (8010cf8 <atan+0x320>)
 8010be8:	4606      	mov	r6, r0
 8010bea:	460f      	mov	r7, r1
 8010bec:	2200      	movs	r2, #0
 8010bee:	4620      	mov	r0, r4
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	f7f5 f829 	bl	8005c48 <__aeabi_dmul>
 8010bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8010cec <atan+0x314>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f7f4 fe6f 	bl	80058dc <__adddf3>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	4630      	mov	r0, r6
 8010c04:	4639      	mov	r1, r7
 8010c06:	f7f5 f949 	bl	8005e9c <__aeabi_ddiv>
 8010c0a:	f04f 0a02 	mov.w	sl, #2
 8010c0e:	4604      	mov	r4, r0
 8010c10:	460d      	mov	r5, r1
 8010c12:	e745      	b.n	8010aa0 <atan+0xc8>
 8010c14:	4622      	mov	r2, r4
 8010c16:	462b      	mov	r3, r5
 8010c18:	4938      	ldr	r1, [pc, #224]	@ (8010cfc <atan+0x324>)
 8010c1a:	2000      	movs	r0, #0
 8010c1c:	f7f5 f93e 	bl	8005e9c <__aeabi_ddiv>
 8010c20:	f04f 0a03 	mov.w	sl, #3
 8010c24:	4604      	mov	r4, r0
 8010c26:	460d      	mov	r5, r1
 8010c28:	e73a      	b.n	8010aa0 <atan+0xc8>
 8010c2a:	4b35      	ldr	r3, [pc, #212]	@ (8010d00 <atan+0x328>)
 8010c2c:	4e35      	ldr	r6, [pc, #212]	@ (8010d04 <atan+0x32c>)
 8010c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	f7f4 fe4f 	bl	80058d8 <__aeabi_dsub>
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	462b      	mov	r3, r5
 8010c3e:	f7f4 fe4b 	bl	80058d8 <__aeabi_dsub>
 8010c42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010c4e:	f7f4 fe43 	bl	80058d8 <__aeabi_dsub>
 8010c52:	f1bb 0f00 	cmp.w	fp, #0
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	f6bf aedc 	bge.w	8010a16 <atan+0x3e>
 8010c5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c62:	461d      	mov	r5, r3
 8010c64:	e6d7      	b.n	8010a16 <atan+0x3e>
 8010c66:	a51c      	add	r5, pc, #112	@ (adr r5, 8010cd8 <atan+0x300>)
 8010c68:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c6c:	e6d3      	b.n	8010a16 <atan+0x3e>
 8010c6e:	bf00      	nop
 8010c70:	54442d18 	.word	0x54442d18
 8010c74:	3ff921fb 	.word	0x3ff921fb
 8010c78:	8800759c 	.word	0x8800759c
 8010c7c:	7e37e43c 	.word	0x7e37e43c
 8010c80:	e322da11 	.word	0xe322da11
 8010c84:	3f90ad3a 	.word	0x3f90ad3a
 8010c88:	24760deb 	.word	0x24760deb
 8010c8c:	3fa97b4b 	.word	0x3fa97b4b
 8010c90:	a0d03d51 	.word	0xa0d03d51
 8010c94:	3fb10d66 	.word	0x3fb10d66
 8010c98:	c54c206e 	.word	0xc54c206e
 8010c9c:	3fb745cd 	.word	0x3fb745cd
 8010ca0:	920083ff 	.word	0x920083ff
 8010ca4:	3fc24924 	.word	0x3fc24924
 8010ca8:	5555550d 	.word	0x5555550d
 8010cac:	3fd55555 	.word	0x3fd55555
 8010cb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010cb4:	bfa2b444 	.word	0xbfa2b444
 8010cb8:	52defd9a 	.word	0x52defd9a
 8010cbc:	3fadde2d 	.word	0x3fadde2d
 8010cc0:	af749a6d 	.word	0xaf749a6d
 8010cc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010cc8:	fe231671 	.word	0xfe231671
 8010ccc:	3fbc71c6 	.word	0x3fbc71c6
 8010cd0:	9998ebc4 	.word	0x9998ebc4
 8010cd4:	3fc99999 	.word	0x3fc99999
 8010cd8:	54442d18 	.word	0x54442d18
 8010cdc:	bff921fb 	.word	0xbff921fb
 8010ce0:	440fffff 	.word	0x440fffff
 8010ce4:	7ff00000 	.word	0x7ff00000
 8010ce8:	3fdbffff 	.word	0x3fdbffff
 8010cec:	3ff00000 	.word	0x3ff00000
 8010cf0:	3ff2ffff 	.word	0x3ff2ffff
 8010cf4:	40038000 	.word	0x40038000
 8010cf8:	3ff80000 	.word	0x3ff80000
 8010cfc:	bff00000 	.word	0xbff00000
 8010d00:	08015098 	.word	0x08015098
 8010d04:	080150b8 	.word	0x080150b8

08010d08 <cos>:
 8010d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d0a:	ec53 2b10 	vmov	r2, r3, d0
 8010d0e:	4826      	ldr	r0, [pc, #152]	@ (8010da8 <cos+0xa0>)
 8010d10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d14:	4281      	cmp	r1, r0
 8010d16:	d806      	bhi.n	8010d26 <cos+0x1e>
 8010d18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010da0 <cos+0x98>
 8010d1c:	b005      	add	sp, #20
 8010d1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d22:	f000 ba85 	b.w	8011230 <__kernel_cos>
 8010d26:	4821      	ldr	r0, [pc, #132]	@ (8010dac <cos+0xa4>)
 8010d28:	4281      	cmp	r1, r0
 8010d2a:	d908      	bls.n	8010d3e <cos+0x36>
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	4619      	mov	r1, r3
 8010d30:	f7f4 fdd2 	bl	80058d8 <__aeabi_dsub>
 8010d34:	ec41 0b10 	vmov	d0, r0, r1
 8010d38:	b005      	add	sp, #20
 8010d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d3e:	4668      	mov	r0, sp
 8010d40:	f001 f87e 	bl	8011e40 <__ieee754_rem_pio2>
 8010d44:	f000 0003 	and.w	r0, r0, #3
 8010d48:	2801      	cmp	r0, #1
 8010d4a:	d00b      	beq.n	8010d64 <cos+0x5c>
 8010d4c:	2802      	cmp	r0, #2
 8010d4e:	d015      	beq.n	8010d7c <cos+0x74>
 8010d50:	b9d8      	cbnz	r0, 8010d8a <cos+0x82>
 8010d52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d56:	ed9d 0b00 	vldr	d0, [sp]
 8010d5a:	f000 fa69 	bl	8011230 <__kernel_cos>
 8010d5e:	ec51 0b10 	vmov	r0, r1, d0
 8010d62:	e7e7      	b.n	8010d34 <cos+0x2c>
 8010d64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d68:	ed9d 0b00 	vldr	d0, [sp]
 8010d6c:	f000 fb28 	bl	80113c0 <__kernel_sin>
 8010d70:	ec53 2b10 	vmov	r2, r3, d0
 8010d74:	4610      	mov	r0, r2
 8010d76:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d7a:	e7db      	b.n	8010d34 <cos+0x2c>
 8010d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d80:	ed9d 0b00 	vldr	d0, [sp]
 8010d84:	f000 fa54 	bl	8011230 <__kernel_cos>
 8010d88:	e7f2      	b.n	8010d70 <cos+0x68>
 8010d8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d8e:	ed9d 0b00 	vldr	d0, [sp]
 8010d92:	2001      	movs	r0, #1
 8010d94:	f000 fb14 	bl	80113c0 <__kernel_sin>
 8010d98:	e7e1      	b.n	8010d5e <cos+0x56>
 8010d9a:	bf00      	nop
 8010d9c:	f3af 8000 	nop.w
	...
 8010da8:	3fe921fb 	.word	0x3fe921fb
 8010dac:	7fefffff 	.word	0x7fefffff

08010db0 <fabs>:
 8010db0:	ec51 0b10 	vmov	r0, r1, d0
 8010db4:	4602      	mov	r2, r0
 8010db6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010dba:	ec43 2b10 	vmov	d0, r2, r3
 8010dbe:	4770      	bx	lr

08010dc0 <acosf>:
 8010dc0:	b508      	push	{r3, lr}
 8010dc2:	ed2d 8b02 	vpush	{d8}
 8010dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8010dca:	f001 fad5 	bl	8012378 <__ieee754_acosf>
 8010dce:	eeb4 8a48 	vcmp.f32	s16, s16
 8010dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd6:	eef0 8a40 	vmov.f32	s17, s0
 8010dda:	d615      	bvs.n	8010e08 <acosf+0x48>
 8010ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8010de0:	f000 f87e 	bl	8010ee0 <fabsf>
 8010de4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010de8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df0:	dd0a      	ble.n	8010e08 <acosf+0x48>
 8010df2:	f7fc fa71 	bl	800d2d8 <__errno>
 8010df6:	ecbd 8b02 	vpop	{d8}
 8010dfa:	2321      	movs	r3, #33	@ 0x21
 8010dfc:	6003      	str	r3, [r0, #0]
 8010dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e02:	4804      	ldr	r0, [pc, #16]	@ (8010e14 <acosf+0x54>)
 8010e04:	f7fc baa8 	b.w	800d358 <nanf>
 8010e08:	eeb0 0a68 	vmov.f32	s0, s17
 8010e0c:	ecbd 8b02 	vpop	{d8}
 8010e10:	bd08      	pop	{r3, pc}
 8010e12:	bf00      	nop
 8010e14:	08013980 	.word	0x08013980

08010e18 <atan2f>:
 8010e18:	f001 bba6 	b.w	8012568 <__ieee754_atan2f>

08010e1c <sqrtf>:
 8010e1c:	b508      	push	{r3, lr}
 8010e1e:	ed2d 8b02 	vpush	{d8}
 8010e22:	eeb0 8a40 	vmov.f32	s16, s0
 8010e26:	f000 f983 	bl	8011130 <__ieee754_sqrtf>
 8010e2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	d60c      	bvs.n	8010e4e <sqrtf+0x32>
 8010e34:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010e54 <sqrtf+0x38>
 8010e38:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e40:	d505      	bpl.n	8010e4e <sqrtf+0x32>
 8010e42:	f7fc fa49 	bl	800d2d8 <__errno>
 8010e46:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010e4a:	2321      	movs	r3, #33	@ 0x21
 8010e4c:	6003      	str	r3, [r0, #0]
 8010e4e:	ecbd 8b02 	vpop	{d8}
 8010e52:	bd08      	pop	{r3, pc}
 8010e54:	00000000 	.word	0x00000000

08010e58 <cosf>:
 8010e58:	ee10 3a10 	vmov	r3, s0
 8010e5c:	b507      	push	{r0, r1, r2, lr}
 8010e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ed8 <cosf+0x80>)
 8010e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d806      	bhi.n	8010e76 <cosf+0x1e>
 8010e68:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010edc <cosf+0x84>
 8010e6c:	b003      	add	sp, #12
 8010e6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e72:	f001 b9e1 	b.w	8012238 <__kernel_cosf>
 8010e76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e7a:	d304      	bcc.n	8010e86 <cosf+0x2e>
 8010e7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e80:	b003      	add	sp, #12
 8010e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e86:	4668      	mov	r0, sp
 8010e88:	f001 fc0e 	bl	80126a8 <__ieee754_rem_pio2f>
 8010e8c:	f000 0003 	and.w	r0, r0, #3
 8010e90:	2801      	cmp	r0, #1
 8010e92:	d009      	beq.n	8010ea8 <cosf+0x50>
 8010e94:	2802      	cmp	r0, #2
 8010e96:	d010      	beq.n	8010eba <cosf+0x62>
 8010e98:	b9b0      	cbnz	r0, 8010ec8 <cosf+0x70>
 8010e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e9e:	ed9d 0a00 	vldr	s0, [sp]
 8010ea2:	f001 f9c9 	bl	8012238 <__kernel_cosf>
 8010ea6:	e7eb      	b.n	8010e80 <cosf+0x28>
 8010ea8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010eac:	ed9d 0a00 	vldr	s0, [sp]
 8010eb0:	f001 fa1a 	bl	80122e8 <__kernel_sinf>
 8010eb4:	eeb1 0a40 	vneg.f32	s0, s0
 8010eb8:	e7e2      	b.n	8010e80 <cosf+0x28>
 8010eba:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ebe:	ed9d 0a00 	vldr	s0, [sp]
 8010ec2:	f001 f9b9 	bl	8012238 <__kernel_cosf>
 8010ec6:	e7f5      	b.n	8010eb4 <cosf+0x5c>
 8010ec8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ecc:	ed9d 0a00 	vldr	s0, [sp]
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	f001 fa09 	bl	80122e8 <__kernel_sinf>
 8010ed6:	e7d3      	b.n	8010e80 <cosf+0x28>
 8010ed8:	3f490fd8 	.word	0x3f490fd8
 8010edc:	00000000 	.word	0x00000000

08010ee0 <fabsf>:
 8010ee0:	ee10 3a10 	vmov	r3, s0
 8010ee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ee8:	ee00 3a10 	vmov	s0, r3
 8010eec:	4770      	bx	lr
	...

08010ef0 <sinf>:
 8010ef0:	ee10 3a10 	vmov	r3, s0
 8010ef4:	b507      	push	{r0, r1, r2, lr}
 8010ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8010f74 <sinf+0x84>)
 8010ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d807      	bhi.n	8010f10 <sinf+0x20>
 8010f00:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010f78 <sinf+0x88>
 8010f04:	2000      	movs	r0, #0
 8010f06:	b003      	add	sp, #12
 8010f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f0c:	f001 b9ec 	b.w	80122e8 <__kernel_sinf>
 8010f10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010f14:	d304      	bcc.n	8010f20 <sinf+0x30>
 8010f16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010f1a:	b003      	add	sp, #12
 8010f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f20:	4668      	mov	r0, sp
 8010f22:	f001 fbc1 	bl	80126a8 <__ieee754_rem_pio2f>
 8010f26:	f000 0003 	and.w	r0, r0, #3
 8010f2a:	2801      	cmp	r0, #1
 8010f2c:	d00a      	beq.n	8010f44 <sinf+0x54>
 8010f2e:	2802      	cmp	r0, #2
 8010f30:	d00f      	beq.n	8010f52 <sinf+0x62>
 8010f32:	b9c0      	cbnz	r0, 8010f66 <sinf+0x76>
 8010f34:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f38:	ed9d 0a00 	vldr	s0, [sp]
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	f001 f9d3 	bl	80122e8 <__kernel_sinf>
 8010f42:	e7ea      	b.n	8010f1a <sinf+0x2a>
 8010f44:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f48:	ed9d 0a00 	vldr	s0, [sp]
 8010f4c:	f001 f974 	bl	8012238 <__kernel_cosf>
 8010f50:	e7e3      	b.n	8010f1a <sinf+0x2a>
 8010f52:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f56:	ed9d 0a00 	vldr	s0, [sp]
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	f001 f9c4 	bl	80122e8 <__kernel_sinf>
 8010f60:	eeb1 0a40 	vneg.f32	s0, s0
 8010f64:	e7d9      	b.n	8010f1a <sinf+0x2a>
 8010f66:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f6a:	ed9d 0a00 	vldr	s0, [sp]
 8010f6e:	f001 f963 	bl	8012238 <__kernel_cosf>
 8010f72:	e7f5      	b.n	8010f60 <sinf+0x70>
 8010f74:	3f490fd8 	.word	0x3f490fd8
 8010f78:	00000000 	.word	0x00000000

08010f7c <__ieee754_sqrt>:
 8010f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	4a68      	ldr	r2, [pc, #416]	@ (8011124 <__ieee754_sqrt+0x1a8>)
 8010f82:	ec55 4b10 	vmov	r4, r5, d0
 8010f86:	43aa      	bics	r2, r5
 8010f88:	462b      	mov	r3, r5
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	d110      	bne.n	8010fb0 <__ieee754_sqrt+0x34>
 8010f8e:	4622      	mov	r2, r4
 8010f90:	4620      	mov	r0, r4
 8010f92:	4629      	mov	r1, r5
 8010f94:	f7f4 fe58 	bl	8005c48 <__aeabi_dmul>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	f7f4 fc9c 	bl	80058dc <__adddf3>
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	ec45 4b10 	vmov	d0, r4, r5
 8010fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb0:	2d00      	cmp	r5, #0
 8010fb2:	dc0e      	bgt.n	8010fd2 <__ieee754_sqrt+0x56>
 8010fb4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010fb8:	4322      	orrs	r2, r4
 8010fba:	d0f5      	beq.n	8010fa8 <__ieee754_sqrt+0x2c>
 8010fbc:	b19d      	cbz	r5, 8010fe6 <__ieee754_sqrt+0x6a>
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	f7f4 fc88 	bl	80058d8 <__aeabi_dsub>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	f7f4 ff66 	bl	8005e9c <__aeabi_ddiv>
 8010fd0:	e7e8      	b.n	8010fa4 <__ieee754_sqrt+0x28>
 8010fd2:	152a      	asrs	r2, r5, #20
 8010fd4:	d115      	bne.n	8011002 <__ieee754_sqrt+0x86>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e009      	b.n	8010fee <__ieee754_sqrt+0x72>
 8010fda:	0acb      	lsrs	r3, r1, #11
 8010fdc:	3a15      	subs	r2, #21
 8010fde:	0549      	lsls	r1, r1, #21
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d0fa      	beq.n	8010fda <__ieee754_sqrt+0x5e>
 8010fe4:	e7f7      	b.n	8010fd6 <__ieee754_sqrt+0x5a>
 8010fe6:	462a      	mov	r2, r5
 8010fe8:	e7fa      	b.n	8010fe0 <__ieee754_sqrt+0x64>
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	3001      	adds	r0, #1
 8010fee:	02dc      	lsls	r4, r3, #11
 8010ff0:	d5fb      	bpl.n	8010fea <__ieee754_sqrt+0x6e>
 8010ff2:	1e44      	subs	r4, r0, #1
 8010ff4:	1b12      	subs	r2, r2, r4
 8010ff6:	f1c0 0420 	rsb	r4, r0, #32
 8010ffa:	fa21 f404 	lsr.w	r4, r1, r4
 8010ffe:	4323      	orrs	r3, r4
 8011000:	4081      	lsls	r1, r0
 8011002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011006:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801100a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801100e:	07d2      	lsls	r2, r2, #31
 8011010:	bf5c      	itt	pl
 8011012:	005b      	lslpl	r3, r3, #1
 8011014:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011018:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801101c:	bf58      	it	pl
 801101e:	0049      	lslpl	r1, r1, #1
 8011020:	2600      	movs	r6, #0
 8011022:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011026:	106d      	asrs	r5, r5, #1
 8011028:	0049      	lsls	r1, r1, #1
 801102a:	2016      	movs	r0, #22
 801102c:	4632      	mov	r2, r6
 801102e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011032:	1917      	adds	r7, r2, r4
 8011034:	429f      	cmp	r7, r3
 8011036:	bfde      	ittt	le
 8011038:	193a      	addle	r2, r7, r4
 801103a:	1bdb      	suble	r3, r3, r7
 801103c:	1936      	addle	r6, r6, r4
 801103e:	0fcf      	lsrs	r7, r1, #31
 8011040:	3801      	subs	r0, #1
 8011042:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011046:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801104a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801104e:	d1f0      	bne.n	8011032 <__ieee754_sqrt+0xb6>
 8011050:	4604      	mov	r4, r0
 8011052:	2720      	movs	r7, #32
 8011054:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011058:	429a      	cmp	r2, r3
 801105a:	eb00 0e0c 	add.w	lr, r0, ip
 801105e:	db02      	blt.n	8011066 <__ieee754_sqrt+0xea>
 8011060:	d113      	bne.n	801108a <__ieee754_sqrt+0x10e>
 8011062:	458e      	cmp	lr, r1
 8011064:	d811      	bhi.n	801108a <__ieee754_sqrt+0x10e>
 8011066:	f1be 0f00 	cmp.w	lr, #0
 801106a:	eb0e 000c 	add.w	r0, lr, ip
 801106e:	da42      	bge.n	80110f6 <__ieee754_sqrt+0x17a>
 8011070:	2800      	cmp	r0, #0
 8011072:	db40      	blt.n	80110f6 <__ieee754_sqrt+0x17a>
 8011074:	f102 0801 	add.w	r8, r2, #1
 8011078:	1a9b      	subs	r3, r3, r2
 801107a:	458e      	cmp	lr, r1
 801107c:	bf88      	it	hi
 801107e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011082:	eba1 010e 	sub.w	r1, r1, lr
 8011086:	4464      	add	r4, ip
 8011088:	4642      	mov	r2, r8
 801108a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801108e:	3f01      	subs	r7, #1
 8011090:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011094:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011098:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801109c:	d1dc      	bne.n	8011058 <__ieee754_sqrt+0xdc>
 801109e:	4319      	orrs	r1, r3
 80110a0:	d01b      	beq.n	80110da <__ieee754_sqrt+0x15e>
 80110a2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011128 <__ieee754_sqrt+0x1ac>
 80110a6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801112c <__ieee754_sqrt+0x1b0>
 80110aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80110ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80110b2:	f7f4 fc11 	bl	80058d8 <__aeabi_dsub>
 80110b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80110ba:	4602      	mov	r2, r0
 80110bc:	460b      	mov	r3, r1
 80110be:	4640      	mov	r0, r8
 80110c0:	4649      	mov	r1, r9
 80110c2:	f7f5 f83d 	bl	8006140 <__aeabi_dcmple>
 80110c6:	b140      	cbz	r0, 80110da <__ieee754_sqrt+0x15e>
 80110c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80110cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80110d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80110d4:	d111      	bne.n	80110fa <__ieee754_sqrt+0x17e>
 80110d6:	3601      	adds	r6, #1
 80110d8:	463c      	mov	r4, r7
 80110da:	1072      	asrs	r2, r6, #1
 80110dc:	0863      	lsrs	r3, r4, #1
 80110de:	07f1      	lsls	r1, r6, #31
 80110e0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80110e4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80110e8:	bf48      	it	mi
 80110ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80110ee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80110f2:	4618      	mov	r0, r3
 80110f4:	e756      	b.n	8010fa4 <__ieee754_sqrt+0x28>
 80110f6:	4690      	mov	r8, r2
 80110f8:	e7be      	b.n	8011078 <__ieee754_sqrt+0xfc>
 80110fa:	f7f4 fbef 	bl	80058dc <__adddf3>
 80110fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8011102:	4602      	mov	r2, r0
 8011104:	460b      	mov	r3, r1
 8011106:	4640      	mov	r0, r8
 8011108:	4649      	mov	r1, r9
 801110a:	f7f5 f80f 	bl	800612c <__aeabi_dcmplt>
 801110e:	b120      	cbz	r0, 801111a <__ieee754_sqrt+0x19e>
 8011110:	1ca0      	adds	r0, r4, #2
 8011112:	bf08      	it	eq
 8011114:	3601      	addeq	r6, #1
 8011116:	3402      	adds	r4, #2
 8011118:	e7df      	b.n	80110da <__ieee754_sqrt+0x15e>
 801111a:	1c63      	adds	r3, r4, #1
 801111c:	f023 0401 	bic.w	r4, r3, #1
 8011120:	e7db      	b.n	80110da <__ieee754_sqrt+0x15e>
 8011122:	bf00      	nop
 8011124:	7ff00000 	.word	0x7ff00000
 8011128:	20000240 	.word	0x20000240
 801112c:	20000238 	.word	0x20000238

08011130 <__ieee754_sqrtf>:
 8011130:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011134:	4770      	bx	lr
	...

08011138 <floor>:
 8011138:	ec51 0b10 	vmov	r0, r1, d0
 801113c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011144:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011148:	2e13      	cmp	r6, #19
 801114a:	460c      	mov	r4, r1
 801114c:	4605      	mov	r5, r0
 801114e:	4680      	mov	r8, r0
 8011150:	dc34      	bgt.n	80111bc <floor+0x84>
 8011152:	2e00      	cmp	r6, #0
 8011154:	da17      	bge.n	8011186 <floor+0x4e>
 8011156:	a332      	add	r3, pc, #200	@ (adr r3, 8011220 <floor+0xe8>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	f7f4 fbbe 	bl	80058dc <__adddf3>
 8011160:	2200      	movs	r2, #0
 8011162:	2300      	movs	r3, #0
 8011164:	f7f5 f800 	bl	8006168 <__aeabi_dcmpgt>
 8011168:	b150      	cbz	r0, 8011180 <floor+0x48>
 801116a:	2c00      	cmp	r4, #0
 801116c:	da55      	bge.n	801121a <floor+0xe2>
 801116e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011172:	432c      	orrs	r4, r5
 8011174:	2500      	movs	r5, #0
 8011176:	42ac      	cmp	r4, r5
 8011178:	4c2b      	ldr	r4, [pc, #172]	@ (8011228 <floor+0xf0>)
 801117a:	bf08      	it	eq
 801117c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011180:	4621      	mov	r1, r4
 8011182:	4628      	mov	r0, r5
 8011184:	e023      	b.n	80111ce <floor+0x96>
 8011186:	4f29      	ldr	r7, [pc, #164]	@ (801122c <floor+0xf4>)
 8011188:	4137      	asrs	r7, r6
 801118a:	ea01 0307 	and.w	r3, r1, r7
 801118e:	4303      	orrs	r3, r0
 8011190:	d01d      	beq.n	80111ce <floor+0x96>
 8011192:	a323      	add	r3, pc, #140	@ (adr r3, 8011220 <floor+0xe8>)
 8011194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011198:	f7f4 fba0 	bl	80058dc <__adddf3>
 801119c:	2200      	movs	r2, #0
 801119e:	2300      	movs	r3, #0
 80111a0:	f7f4 ffe2 	bl	8006168 <__aeabi_dcmpgt>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	d0eb      	beq.n	8011180 <floor+0x48>
 80111a8:	2c00      	cmp	r4, #0
 80111aa:	bfbe      	ittt	lt
 80111ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80111b0:	4133      	asrlt	r3, r6
 80111b2:	18e4      	addlt	r4, r4, r3
 80111b4:	ea24 0407 	bic.w	r4, r4, r7
 80111b8:	2500      	movs	r5, #0
 80111ba:	e7e1      	b.n	8011180 <floor+0x48>
 80111bc:	2e33      	cmp	r6, #51	@ 0x33
 80111be:	dd0a      	ble.n	80111d6 <floor+0x9e>
 80111c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80111c4:	d103      	bne.n	80111ce <floor+0x96>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	f7f4 fb87 	bl	80058dc <__adddf3>
 80111ce:	ec41 0b10 	vmov	d0, r0, r1
 80111d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80111da:	f04f 37ff 	mov.w	r7, #4294967295
 80111de:	40df      	lsrs	r7, r3
 80111e0:	4207      	tst	r7, r0
 80111e2:	d0f4      	beq.n	80111ce <floor+0x96>
 80111e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8011220 <floor+0xe8>)
 80111e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ea:	f7f4 fb77 	bl	80058dc <__adddf3>
 80111ee:	2200      	movs	r2, #0
 80111f0:	2300      	movs	r3, #0
 80111f2:	f7f4 ffb9 	bl	8006168 <__aeabi_dcmpgt>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d0c2      	beq.n	8011180 <floor+0x48>
 80111fa:	2c00      	cmp	r4, #0
 80111fc:	da0a      	bge.n	8011214 <floor+0xdc>
 80111fe:	2e14      	cmp	r6, #20
 8011200:	d101      	bne.n	8011206 <floor+0xce>
 8011202:	3401      	adds	r4, #1
 8011204:	e006      	b.n	8011214 <floor+0xdc>
 8011206:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801120a:	2301      	movs	r3, #1
 801120c:	40b3      	lsls	r3, r6
 801120e:	441d      	add	r5, r3
 8011210:	4545      	cmp	r5, r8
 8011212:	d3f6      	bcc.n	8011202 <floor+0xca>
 8011214:	ea25 0507 	bic.w	r5, r5, r7
 8011218:	e7b2      	b.n	8011180 <floor+0x48>
 801121a:	2500      	movs	r5, #0
 801121c:	462c      	mov	r4, r5
 801121e:	e7af      	b.n	8011180 <floor+0x48>
 8011220:	8800759c 	.word	0x8800759c
 8011224:	7e37e43c 	.word	0x7e37e43c
 8011228:	bff00000 	.word	0xbff00000
 801122c:	000fffff 	.word	0x000fffff

08011230 <__kernel_cos>:
 8011230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	ec57 6b10 	vmov	r6, r7, d0
 8011238:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801123c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011240:	ed8d 1b00 	vstr	d1, [sp]
 8011244:	d206      	bcs.n	8011254 <__kernel_cos+0x24>
 8011246:	4630      	mov	r0, r6
 8011248:	4639      	mov	r1, r7
 801124a:	f7f4 ffad 	bl	80061a8 <__aeabi_d2iz>
 801124e:	2800      	cmp	r0, #0
 8011250:	f000 8088 	beq.w	8011364 <__kernel_cos+0x134>
 8011254:	4632      	mov	r2, r6
 8011256:	463b      	mov	r3, r7
 8011258:	4630      	mov	r0, r6
 801125a:	4639      	mov	r1, r7
 801125c:	f7f4 fcf4 	bl	8005c48 <__aeabi_dmul>
 8011260:	4b51      	ldr	r3, [pc, #324]	@ (80113a8 <__kernel_cos+0x178>)
 8011262:	2200      	movs	r2, #0
 8011264:	4604      	mov	r4, r0
 8011266:	460d      	mov	r5, r1
 8011268:	f7f4 fcee 	bl	8005c48 <__aeabi_dmul>
 801126c:	a340      	add	r3, pc, #256	@ (adr r3, 8011370 <__kernel_cos+0x140>)
 801126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011272:	4682      	mov	sl, r0
 8011274:	468b      	mov	fp, r1
 8011276:	4620      	mov	r0, r4
 8011278:	4629      	mov	r1, r5
 801127a:	f7f4 fce5 	bl	8005c48 <__aeabi_dmul>
 801127e:	a33e      	add	r3, pc, #248	@ (adr r3, 8011378 <__kernel_cos+0x148>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	f7f4 fb2a 	bl	80058dc <__adddf3>
 8011288:	4622      	mov	r2, r4
 801128a:	462b      	mov	r3, r5
 801128c:	f7f4 fcdc 	bl	8005c48 <__aeabi_dmul>
 8011290:	a33b      	add	r3, pc, #236	@ (adr r3, 8011380 <__kernel_cos+0x150>)
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	f7f4 fb1f 	bl	80058d8 <__aeabi_dsub>
 801129a:	4622      	mov	r2, r4
 801129c:	462b      	mov	r3, r5
 801129e:	f7f4 fcd3 	bl	8005c48 <__aeabi_dmul>
 80112a2:	a339      	add	r3, pc, #228	@ (adr r3, 8011388 <__kernel_cos+0x158>)
 80112a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a8:	f7f4 fb18 	bl	80058dc <__adddf3>
 80112ac:	4622      	mov	r2, r4
 80112ae:	462b      	mov	r3, r5
 80112b0:	f7f4 fcca 	bl	8005c48 <__aeabi_dmul>
 80112b4:	a336      	add	r3, pc, #216	@ (adr r3, 8011390 <__kernel_cos+0x160>)
 80112b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ba:	f7f4 fb0d 	bl	80058d8 <__aeabi_dsub>
 80112be:	4622      	mov	r2, r4
 80112c0:	462b      	mov	r3, r5
 80112c2:	f7f4 fcc1 	bl	8005c48 <__aeabi_dmul>
 80112c6:	a334      	add	r3, pc, #208	@ (adr r3, 8011398 <__kernel_cos+0x168>)
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	f7f4 fb06 	bl	80058dc <__adddf3>
 80112d0:	4622      	mov	r2, r4
 80112d2:	462b      	mov	r3, r5
 80112d4:	f7f4 fcb8 	bl	8005c48 <__aeabi_dmul>
 80112d8:	4622      	mov	r2, r4
 80112da:	462b      	mov	r3, r5
 80112dc:	f7f4 fcb4 	bl	8005c48 <__aeabi_dmul>
 80112e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112e4:	4604      	mov	r4, r0
 80112e6:	460d      	mov	r5, r1
 80112e8:	4630      	mov	r0, r6
 80112ea:	4639      	mov	r1, r7
 80112ec:	f7f4 fcac 	bl	8005c48 <__aeabi_dmul>
 80112f0:	460b      	mov	r3, r1
 80112f2:	4602      	mov	r2, r0
 80112f4:	4629      	mov	r1, r5
 80112f6:	4620      	mov	r0, r4
 80112f8:	f7f4 faee 	bl	80058d8 <__aeabi_dsub>
 80112fc:	4b2b      	ldr	r3, [pc, #172]	@ (80113ac <__kernel_cos+0x17c>)
 80112fe:	4598      	cmp	r8, r3
 8011300:	4606      	mov	r6, r0
 8011302:	460f      	mov	r7, r1
 8011304:	d810      	bhi.n	8011328 <__kernel_cos+0xf8>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	4650      	mov	r0, sl
 801130c:	4659      	mov	r1, fp
 801130e:	f7f4 fae3 	bl	80058d8 <__aeabi_dsub>
 8011312:	460b      	mov	r3, r1
 8011314:	4926      	ldr	r1, [pc, #152]	@ (80113b0 <__kernel_cos+0x180>)
 8011316:	4602      	mov	r2, r0
 8011318:	2000      	movs	r0, #0
 801131a:	f7f4 fadd 	bl	80058d8 <__aeabi_dsub>
 801131e:	ec41 0b10 	vmov	d0, r0, r1
 8011322:	b003      	add	sp, #12
 8011324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011328:	4b22      	ldr	r3, [pc, #136]	@ (80113b4 <__kernel_cos+0x184>)
 801132a:	4921      	ldr	r1, [pc, #132]	@ (80113b0 <__kernel_cos+0x180>)
 801132c:	4598      	cmp	r8, r3
 801132e:	bf8c      	ite	hi
 8011330:	4d21      	ldrhi	r5, [pc, #132]	@ (80113b8 <__kernel_cos+0x188>)
 8011332:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011336:	2400      	movs	r4, #0
 8011338:	4622      	mov	r2, r4
 801133a:	462b      	mov	r3, r5
 801133c:	2000      	movs	r0, #0
 801133e:	f7f4 facb 	bl	80058d8 <__aeabi_dsub>
 8011342:	4622      	mov	r2, r4
 8011344:	4680      	mov	r8, r0
 8011346:	4689      	mov	r9, r1
 8011348:	462b      	mov	r3, r5
 801134a:	4650      	mov	r0, sl
 801134c:	4659      	mov	r1, fp
 801134e:	f7f4 fac3 	bl	80058d8 <__aeabi_dsub>
 8011352:	4632      	mov	r2, r6
 8011354:	463b      	mov	r3, r7
 8011356:	f7f4 fabf 	bl	80058d8 <__aeabi_dsub>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	4640      	mov	r0, r8
 8011360:	4649      	mov	r1, r9
 8011362:	e7da      	b.n	801131a <__kernel_cos+0xea>
 8011364:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80113a0 <__kernel_cos+0x170>
 8011368:	e7db      	b.n	8011322 <__kernel_cos+0xf2>
 801136a:	bf00      	nop
 801136c:	f3af 8000 	nop.w
 8011370:	be8838d4 	.word	0xbe8838d4
 8011374:	bda8fae9 	.word	0xbda8fae9
 8011378:	bdb4b1c4 	.word	0xbdb4b1c4
 801137c:	3e21ee9e 	.word	0x3e21ee9e
 8011380:	809c52ad 	.word	0x809c52ad
 8011384:	3e927e4f 	.word	0x3e927e4f
 8011388:	19cb1590 	.word	0x19cb1590
 801138c:	3efa01a0 	.word	0x3efa01a0
 8011390:	16c15177 	.word	0x16c15177
 8011394:	3f56c16c 	.word	0x3f56c16c
 8011398:	5555554c 	.word	0x5555554c
 801139c:	3fa55555 	.word	0x3fa55555
 80113a0:	00000000 	.word	0x00000000
 80113a4:	3ff00000 	.word	0x3ff00000
 80113a8:	3fe00000 	.word	0x3fe00000
 80113ac:	3fd33332 	.word	0x3fd33332
 80113b0:	3ff00000 	.word	0x3ff00000
 80113b4:	3fe90000 	.word	0x3fe90000
 80113b8:	3fd20000 	.word	0x3fd20000
 80113bc:	00000000 	.word	0x00000000

080113c0 <__kernel_sin>:
 80113c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c4:	ec55 4b10 	vmov	r4, r5, d0
 80113c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80113cc:	b085      	sub	sp, #20
 80113ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80113d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80113d6:	4680      	mov	r8, r0
 80113d8:	d205      	bcs.n	80113e6 <__kernel_sin+0x26>
 80113da:	4620      	mov	r0, r4
 80113dc:	4629      	mov	r1, r5
 80113de:	f7f4 fee3 	bl	80061a8 <__aeabi_d2iz>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d052      	beq.n	801148c <__kernel_sin+0xcc>
 80113e6:	4622      	mov	r2, r4
 80113e8:	462b      	mov	r3, r5
 80113ea:	4620      	mov	r0, r4
 80113ec:	4629      	mov	r1, r5
 80113ee:	f7f4 fc2b 	bl	8005c48 <__aeabi_dmul>
 80113f2:	4682      	mov	sl, r0
 80113f4:	468b      	mov	fp, r1
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	4620      	mov	r0, r4
 80113fc:	4629      	mov	r1, r5
 80113fe:	f7f4 fc23 	bl	8005c48 <__aeabi_dmul>
 8011402:	a342      	add	r3, pc, #264	@ (adr r3, 801150c <__kernel_sin+0x14c>)
 8011404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011408:	e9cd 0100 	strd	r0, r1, [sp]
 801140c:	4650      	mov	r0, sl
 801140e:	4659      	mov	r1, fp
 8011410:	f7f4 fc1a 	bl	8005c48 <__aeabi_dmul>
 8011414:	a33f      	add	r3, pc, #252	@ (adr r3, 8011514 <__kernel_sin+0x154>)
 8011416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141a:	f7f4 fa5d 	bl	80058d8 <__aeabi_dsub>
 801141e:	4652      	mov	r2, sl
 8011420:	465b      	mov	r3, fp
 8011422:	f7f4 fc11 	bl	8005c48 <__aeabi_dmul>
 8011426:	a33d      	add	r3, pc, #244	@ (adr r3, 801151c <__kernel_sin+0x15c>)
 8011428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142c:	f7f4 fa56 	bl	80058dc <__adddf3>
 8011430:	4652      	mov	r2, sl
 8011432:	465b      	mov	r3, fp
 8011434:	f7f4 fc08 	bl	8005c48 <__aeabi_dmul>
 8011438:	a33a      	add	r3, pc, #232	@ (adr r3, 8011524 <__kernel_sin+0x164>)
 801143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143e:	f7f4 fa4b 	bl	80058d8 <__aeabi_dsub>
 8011442:	4652      	mov	r2, sl
 8011444:	465b      	mov	r3, fp
 8011446:	f7f4 fbff 	bl	8005c48 <__aeabi_dmul>
 801144a:	a338      	add	r3, pc, #224	@ (adr r3, 801152c <__kernel_sin+0x16c>)
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	f7f4 fa44 	bl	80058dc <__adddf3>
 8011454:	4606      	mov	r6, r0
 8011456:	460f      	mov	r7, r1
 8011458:	f1b8 0f00 	cmp.w	r8, #0
 801145c:	d11b      	bne.n	8011496 <__kernel_sin+0xd6>
 801145e:	4602      	mov	r2, r0
 8011460:	460b      	mov	r3, r1
 8011462:	4650      	mov	r0, sl
 8011464:	4659      	mov	r1, fp
 8011466:	f7f4 fbef 	bl	8005c48 <__aeabi_dmul>
 801146a:	a325      	add	r3, pc, #148	@ (adr r3, 8011500 <__kernel_sin+0x140>)
 801146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011470:	f7f4 fa32 	bl	80058d8 <__aeabi_dsub>
 8011474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011478:	f7f4 fbe6 	bl	8005c48 <__aeabi_dmul>
 801147c:	4602      	mov	r2, r0
 801147e:	460b      	mov	r3, r1
 8011480:	4620      	mov	r0, r4
 8011482:	4629      	mov	r1, r5
 8011484:	f7f4 fa2a 	bl	80058dc <__adddf3>
 8011488:	4604      	mov	r4, r0
 801148a:	460d      	mov	r5, r1
 801148c:	ec45 4b10 	vmov	d0, r4, r5
 8011490:	b005      	add	sp, #20
 8011492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801149a:	4b1b      	ldr	r3, [pc, #108]	@ (8011508 <__kernel_sin+0x148>)
 801149c:	2200      	movs	r2, #0
 801149e:	f7f4 fbd3 	bl	8005c48 <__aeabi_dmul>
 80114a2:	4632      	mov	r2, r6
 80114a4:	4680      	mov	r8, r0
 80114a6:	4689      	mov	r9, r1
 80114a8:	463b      	mov	r3, r7
 80114aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114ae:	f7f4 fbcb 	bl	8005c48 <__aeabi_dmul>
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	4640      	mov	r0, r8
 80114b8:	4649      	mov	r1, r9
 80114ba:	f7f4 fa0d 	bl	80058d8 <__aeabi_dsub>
 80114be:	4652      	mov	r2, sl
 80114c0:	465b      	mov	r3, fp
 80114c2:	f7f4 fbc1 	bl	8005c48 <__aeabi_dmul>
 80114c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114ca:	f7f4 fa05 	bl	80058d8 <__aeabi_dsub>
 80114ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8011500 <__kernel_sin+0x140>)
 80114d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114dc:	f7f4 fbb4 	bl	8005c48 <__aeabi_dmul>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4630      	mov	r0, r6
 80114e6:	4639      	mov	r1, r7
 80114e8:	f7f4 f9f8 	bl	80058dc <__adddf3>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4620      	mov	r0, r4
 80114f2:	4629      	mov	r1, r5
 80114f4:	f7f4 f9f0 	bl	80058d8 <__aeabi_dsub>
 80114f8:	e7c6      	b.n	8011488 <__kernel_sin+0xc8>
 80114fa:	bf00      	nop
 80114fc:	f3af 8000 	nop.w
 8011500:	55555549 	.word	0x55555549
 8011504:	3fc55555 	.word	0x3fc55555
 8011508:	3fe00000 	.word	0x3fe00000
 801150c:	5acfd57c 	.word	0x5acfd57c
 8011510:	3de5d93a 	.word	0x3de5d93a
 8011514:	8a2b9ceb 	.word	0x8a2b9ceb
 8011518:	3e5ae5e6 	.word	0x3e5ae5e6
 801151c:	57b1fe7d 	.word	0x57b1fe7d
 8011520:	3ec71de3 	.word	0x3ec71de3
 8011524:	19c161d5 	.word	0x19c161d5
 8011528:	3f2a01a0 	.word	0x3f2a01a0
 801152c:	1110f8a6 	.word	0x1110f8a6
 8011530:	3f811111 	.word	0x3f811111
 8011534:	00000000 	.word	0x00000000

08011538 <__ieee754_asin>:
 8011538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	ec55 4b10 	vmov	r4, r5, d0
 8011540:	4bc7      	ldr	r3, [pc, #796]	@ (8011860 <__ieee754_asin+0x328>)
 8011542:	b087      	sub	sp, #28
 8011544:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011548:	429e      	cmp	r6, r3
 801154a:	9501      	str	r5, [sp, #4]
 801154c:	d92d      	bls.n	80115aa <__ieee754_asin+0x72>
 801154e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011552:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011556:	4326      	orrs	r6, r4
 8011558:	d116      	bne.n	8011588 <__ieee754_asin+0x50>
 801155a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80117f8 <__ieee754_asin+0x2c0>)
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	4620      	mov	r0, r4
 8011562:	4629      	mov	r1, r5
 8011564:	f7f4 fb70 	bl	8005c48 <__aeabi_dmul>
 8011568:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011800 <__ieee754_asin+0x2c8>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	4606      	mov	r6, r0
 8011570:	460f      	mov	r7, r1
 8011572:	4620      	mov	r0, r4
 8011574:	4629      	mov	r1, r5
 8011576:	f7f4 fb67 	bl	8005c48 <__aeabi_dmul>
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4630      	mov	r0, r6
 8011580:	4639      	mov	r1, r7
 8011582:	f7f4 f9ab 	bl	80058dc <__adddf3>
 8011586:	e009      	b.n	801159c <__ieee754_asin+0x64>
 8011588:	4622      	mov	r2, r4
 801158a:	462b      	mov	r3, r5
 801158c:	4620      	mov	r0, r4
 801158e:	4629      	mov	r1, r5
 8011590:	f7f4 f9a2 	bl	80058d8 <__aeabi_dsub>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	f7f4 fc80 	bl	8005e9c <__aeabi_ddiv>
 801159c:	4604      	mov	r4, r0
 801159e:	460d      	mov	r5, r1
 80115a0:	ec45 4b10 	vmov	d0, r4, r5
 80115a4:	b007      	add	sp, #28
 80115a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115aa:	4bae      	ldr	r3, [pc, #696]	@ (8011864 <__ieee754_asin+0x32c>)
 80115ac:	429e      	cmp	r6, r3
 80115ae:	d810      	bhi.n	80115d2 <__ieee754_asin+0x9a>
 80115b0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80115b4:	f080 80ad 	bcs.w	8011712 <__ieee754_asin+0x1da>
 80115b8:	a393      	add	r3, pc, #588	@ (adr r3, 8011808 <__ieee754_asin+0x2d0>)
 80115ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115be:	4620      	mov	r0, r4
 80115c0:	4629      	mov	r1, r5
 80115c2:	f7f4 f98b 	bl	80058dc <__adddf3>
 80115c6:	4ba8      	ldr	r3, [pc, #672]	@ (8011868 <__ieee754_asin+0x330>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	f7f4 fdcd 	bl	8006168 <__aeabi_dcmpgt>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d1e6      	bne.n	80115a0 <__ieee754_asin+0x68>
 80115d2:	ec45 4b10 	vmov	d0, r4, r5
 80115d6:	f7ff fbeb 	bl	8010db0 <fabs>
 80115da:	49a3      	ldr	r1, [pc, #652]	@ (8011868 <__ieee754_asin+0x330>)
 80115dc:	ec53 2b10 	vmov	r2, r3, d0
 80115e0:	2000      	movs	r0, #0
 80115e2:	f7f4 f979 	bl	80058d8 <__aeabi_dsub>
 80115e6:	4ba1      	ldr	r3, [pc, #644]	@ (801186c <__ieee754_asin+0x334>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	f7f4 fb2d 	bl	8005c48 <__aeabi_dmul>
 80115ee:	a388      	add	r3, pc, #544	@ (adr r3, 8011810 <__ieee754_asin+0x2d8>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	4604      	mov	r4, r0
 80115f6:	460d      	mov	r5, r1
 80115f8:	f7f4 fb26 	bl	8005c48 <__aeabi_dmul>
 80115fc:	a386      	add	r3, pc, #536	@ (adr r3, 8011818 <__ieee754_asin+0x2e0>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	f7f4 f96b 	bl	80058dc <__adddf3>
 8011606:	4622      	mov	r2, r4
 8011608:	462b      	mov	r3, r5
 801160a:	f7f4 fb1d 	bl	8005c48 <__aeabi_dmul>
 801160e:	a384      	add	r3, pc, #528	@ (adr r3, 8011820 <__ieee754_asin+0x2e8>)
 8011610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011614:	f7f4 f960 	bl	80058d8 <__aeabi_dsub>
 8011618:	4622      	mov	r2, r4
 801161a:	462b      	mov	r3, r5
 801161c:	f7f4 fb14 	bl	8005c48 <__aeabi_dmul>
 8011620:	a381      	add	r3, pc, #516	@ (adr r3, 8011828 <__ieee754_asin+0x2f0>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	f7f4 f959 	bl	80058dc <__adddf3>
 801162a:	4622      	mov	r2, r4
 801162c:	462b      	mov	r3, r5
 801162e:	f7f4 fb0b 	bl	8005c48 <__aeabi_dmul>
 8011632:	a37f      	add	r3, pc, #508	@ (adr r3, 8011830 <__ieee754_asin+0x2f8>)
 8011634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011638:	f7f4 f94e 	bl	80058d8 <__aeabi_dsub>
 801163c:	4622      	mov	r2, r4
 801163e:	462b      	mov	r3, r5
 8011640:	f7f4 fb02 	bl	8005c48 <__aeabi_dmul>
 8011644:	a37c      	add	r3, pc, #496	@ (adr r3, 8011838 <__ieee754_asin+0x300>)
 8011646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164a:	f7f4 f947 	bl	80058dc <__adddf3>
 801164e:	4622      	mov	r2, r4
 8011650:	462b      	mov	r3, r5
 8011652:	f7f4 faf9 	bl	8005c48 <__aeabi_dmul>
 8011656:	a37a      	add	r3, pc, #488	@ (adr r3, 8011840 <__ieee754_asin+0x308>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011660:	4620      	mov	r0, r4
 8011662:	4629      	mov	r1, r5
 8011664:	f7f4 faf0 	bl	8005c48 <__aeabi_dmul>
 8011668:	a377      	add	r3, pc, #476	@ (adr r3, 8011848 <__ieee754_asin+0x310>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7f4 f933 	bl	80058d8 <__aeabi_dsub>
 8011672:	4622      	mov	r2, r4
 8011674:	462b      	mov	r3, r5
 8011676:	f7f4 fae7 	bl	8005c48 <__aeabi_dmul>
 801167a:	a375      	add	r3, pc, #468	@ (adr r3, 8011850 <__ieee754_asin+0x318>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7f4 f92c 	bl	80058dc <__adddf3>
 8011684:	4622      	mov	r2, r4
 8011686:	462b      	mov	r3, r5
 8011688:	f7f4 fade 	bl	8005c48 <__aeabi_dmul>
 801168c:	a372      	add	r3, pc, #456	@ (adr r3, 8011858 <__ieee754_asin+0x320>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7f4 f921 	bl	80058d8 <__aeabi_dsub>
 8011696:	4622      	mov	r2, r4
 8011698:	462b      	mov	r3, r5
 801169a:	f7f4 fad5 	bl	8005c48 <__aeabi_dmul>
 801169e:	4b72      	ldr	r3, [pc, #456]	@ (8011868 <__ieee754_asin+0x330>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	f7f4 f91b 	bl	80058dc <__adddf3>
 80116a6:	ec45 4b10 	vmov	d0, r4, r5
 80116aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80116ae:	f7ff fc65 	bl	8010f7c <__ieee754_sqrt>
 80116b2:	4b6f      	ldr	r3, [pc, #444]	@ (8011870 <__ieee754_asin+0x338>)
 80116b4:	429e      	cmp	r6, r3
 80116b6:	ec5b ab10 	vmov	sl, fp, d0
 80116ba:	f240 80db 	bls.w	8011874 <__ieee754_asin+0x33c>
 80116be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116c6:	f7f4 fbe9 	bl	8005e9c <__aeabi_ddiv>
 80116ca:	4652      	mov	r2, sl
 80116cc:	465b      	mov	r3, fp
 80116ce:	f7f4 fabb 	bl	8005c48 <__aeabi_dmul>
 80116d2:	4652      	mov	r2, sl
 80116d4:	465b      	mov	r3, fp
 80116d6:	f7f4 f901 	bl	80058dc <__adddf3>
 80116da:	4602      	mov	r2, r0
 80116dc:	460b      	mov	r3, r1
 80116de:	f7f4 f8fd 	bl	80058dc <__adddf3>
 80116e2:	a347      	add	r3, pc, #284	@ (adr r3, 8011800 <__ieee754_asin+0x2c8>)
 80116e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e8:	f7f4 f8f6 	bl	80058d8 <__aeabi_dsub>
 80116ec:	4602      	mov	r2, r0
 80116ee:	460b      	mov	r3, r1
 80116f0:	a141      	add	r1, pc, #260	@ (adr r1, 80117f8 <__ieee754_asin+0x2c0>)
 80116f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f6:	f7f4 f8ef 	bl	80058d8 <__aeabi_dsub>
 80116fa:	9b01      	ldr	r3, [sp, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	bfdc      	itt	le
 8011700:	4602      	movle	r2, r0
 8011702:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8011706:	4604      	mov	r4, r0
 8011708:	460d      	mov	r5, r1
 801170a:	bfdc      	itt	le
 801170c:	4614      	movle	r4, r2
 801170e:	461d      	movle	r5, r3
 8011710:	e746      	b.n	80115a0 <__ieee754_asin+0x68>
 8011712:	4622      	mov	r2, r4
 8011714:	462b      	mov	r3, r5
 8011716:	4620      	mov	r0, r4
 8011718:	4629      	mov	r1, r5
 801171a:	f7f4 fa95 	bl	8005c48 <__aeabi_dmul>
 801171e:	a33c      	add	r3, pc, #240	@ (adr r3, 8011810 <__ieee754_asin+0x2d8>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	4606      	mov	r6, r0
 8011726:	460f      	mov	r7, r1
 8011728:	f7f4 fa8e 	bl	8005c48 <__aeabi_dmul>
 801172c:	a33a      	add	r3, pc, #232	@ (adr r3, 8011818 <__ieee754_asin+0x2e0>)
 801172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011732:	f7f4 f8d3 	bl	80058dc <__adddf3>
 8011736:	4632      	mov	r2, r6
 8011738:	463b      	mov	r3, r7
 801173a:	f7f4 fa85 	bl	8005c48 <__aeabi_dmul>
 801173e:	a338      	add	r3, pc, #224	@ (adr r3, 8011820 <__ieee754_asin+0x2e8>)
 8011740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011744:	f7f4 f8c8 	bl	80058d8 <__aeabi_dsub>
 8011748:	4632      	mov	r2, r6
 801174a:	463b      	mov	r3, r7
 801174c:	f7f4 fa7c 	bl	8005c48 <__aeabi_dmul>
 8011750:	a335      	add	r3, pc, #212	@ (adr r3, 8011828 <__ieee754_asin+0x2f0>)
 8011752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011756:	f7f4 f8c1 	bl	80058dc <__adddf3>
 801175a:	4632      	mov	r2, r6
 801175c:	463b      	mov	r3, r7
 801175e:	f7f4 fa73 	bl	8005c48 <__aeabi_dmul>
 8011762:	a333      	add	r3, pc, #204	@ (adr r3, 8011830 <__ieee754_asin+0x2f8>)
 8011764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011768:	f7f4 f8b6 	bl	80058d8 <__aeabi_dsub>
 801176c:	4632      	mov	r2, r6
 801176e:	463b      	mov	r3, r7
 8011770:	f7f4 fa6a 	bl	8005c48 <__aeabi_dmul>
 8011774:	a330      	add	r3, pc, #192	@ (adr r3, 8011838 <__ieee754_asin+0x300>)
 8011776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177a:	f7f4 f8af 	bl	80058dc <__adddf3>
 801177e:	4632      	mov	r2, r6
 8011780:	463b      	mov	r3, r7
 8011782:	f7f4 fa61 	bl	8005c48 <__aeabi_dmul>
 8011786:	a32e      	add	r3, pc, #184	@ (adr r3, 8011840 <__ieee754_asin+0x308>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	4680      	mov	r8, r0
 801178e:	4689      	mov	r9, r1
 8011790:	4630      	mov	r0, r6
 8011792:	4639      	mov	r1, r7
 8011794:	f7f4 fa58 	bl	8005c48 <__aeabi_dmul>
 8011798:	a32b      	add	r3, pc, #172	@ (adr r3, 8011848 <__ieee754_asin+0x310>)
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	f7f4 f89b 	bl	80058d8 <__aeabi_dsub>
 80117a2:	4632      	mov	r2, r6
 80117a4:	463b      	mov	r3, r7
 80117a6:	f7f4 fa4f 	bl	8005c48 <__aeabi_dmul>
 80117aa:	a329      	add	r3, pc, #164	@ (adr r3, 8011850 <__ieee754_asin+0x318>)
 80117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b0:	f7f4 f894 	bl	80058dc <__adddf3>
 80117b4:	4632      	mov	r2, r6
 80117b6:	463b      	mov	r3, r7
 80117b8:	f7f4 fa46 	bl	8005c48 <__aeabi_dmul>
 80117bc:	a326      	add	r3, pc, #152	@ (adr r3, 8011858 <__ieee754_asin+0x320>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	f7f4 f889 	bl	80058d8 <__aeabi_dsub>
 80117c6:	4632      	mov	r2, r6
 80117c8:	463b      	mov	r3, r7
 80117ca:	f7f4 fa3d 	bl	8005c48 <__aeabi_dmul>
 80117ce:	4b26      	ldr	r3, [pc, #152]	@ (8011868 <__ieee754_asin+0x330>)
 80117d0:	2200      	movs	r2, #0
 80117d2:	f7f4 f883 	bl	80058dc <__adddf3>
 80117d6:	4602      	mov	r2, r0
 80117d8:	460b      	mov	r3, r1
 80117da:	4640      	mov	r0, r8
 80117dc:	4649      	mov	r1, r9
 80117de:	f7f4 fb5d 	bl	8005e9c <__aeabi_ddiv>
 80117e2:	4622      	mov	r2, r4
 80117e4:	462b      	mov	r3, r5
 80117e6:	f7f4 fa2f 	bl	8005c48 <__aeabi_dmul>
 80117ea:	4602      	mov	r2, r0
 80117ec:	460b      	mov	r3, r1
 80117ee:	4620      	mov	r0, r4
 80117f0:	4629      	mov	r1, r5
 80117f2:	e6c6      	b.n	8011582 <__ieee754_asin+0x4a>
 80117f4:	f3af 8000 	nop.w
 80117f8:	54442d18 	.word	0x54442d18
 80117fc:	3ff921fb 	.word	0x3ff921fb
 8011800:	33145c07 	.word	0x33145c07
 8011804:	3c91a626 	.word	0x3c91a626
 8011808:	8800759c 	.word	0x8800759c
 801180c:	7e37e43c 	.word	0x7e37e43c
 8011810:	0dfdf709 	.word	0x0dfdf709
 8011814:	3f023de1 	.word	0x3f023de1
 8011818:	7501b288 	.word	0x7501b288
 801181c:	3f49efe0 	.word	0x3f49efe0
 8011820:	b5688f3b 	.word	0xb5688f3b
 8011824:	3fa48228 	.word	0x3fa48228
 8011828:	0e884455 	.word	0x0e884455
 801182c:	3fc9c155 	.word	0x3fc9c155
 8011830:	03eb6f7d 	.word	0x03eb6f7d
 8011834:	3fd4d612 	.word	0x3fd4d612
 8011838:	55555555 	.word	0x55555555
 801183c:	3fc55555 	.word	0x3fc55555
 8011840:	b12e9282 	.word	0xb12e9282
 8011844:	3fb3b8c5 	.word	0x3fb3b8c5
 8011848:	1b8d0159 	.word	0x1b8d0159
 801184c:	3fe6066c 	.word	0x3fe6066c
 8011850:	9c598ac8 	.word	0x9c598ac8
 8011854:	40002ae5 	.word	0x40002ae5
 8011858:	1c8a2d4b 	.word	0x1c8a2d4b
 801185c:	40033a27 	.word	0x40033a27
 8011860:	3fefffff 	.word	0x3fefffff
 8011864:	3fdfffff 	.word	0x3fdfffff
 8011868:	3ff00000 	.word	0x3ff00000
 801186c:	3fe00000 	.word	0x3fe00000
 8011870:	3fef3332 	.word	0x3fef3332
 8011874:	4652      	mov	r2, sl
 8011876:	465b      	mov	r3, fp
 8011878:	4650      	mov	r0, sl
 801187a:	4659      	mov	r1, fp
 801187c:	f7f4 f82e 	bl	80058dc <__adddf3>
 8011880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011884:	4606      	mov	r6, r0
 8011886:	460f      	mov	r7, r1
 8011888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801188c:	f7f4 fb06 	bl	8005e9c <__aeabi_ddiv>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4630      	mov	r0, r6
 8011896:	4639      	mov	r1, r7
 8011898:	f7f4 f9d6 	bl	8005c48 <__aeabi_dmul>
 801189c:	f04f 0800 	mov.w	r8, #0
 80118a0:	4606      	mov	r6, r0
 80118a2:	460f      	mov	r7, r1
 80118a4:	4642      	mov	r2, r8
 80118a6:	465b      	mov	r3, fp
 80118a8:	4640      	mov	r0, r8
 80118aa:	4659      	mov	r1, fp
 80118ac:	f7f4 f9cc 	bl	8005c48 <__aeabi_dmul>
 80118b0:	4602      	mov	r2, r0
 80118b2:	460b      	mov	r3, r1
 80118b4:	4620      	mov	r0, r4
 80118b6:	4629      	mov	r1, r5
 80118b8:	f7f4 f80e 	bl	80058d8 <__aeabi_dsub>
 80118bc:	4642      	mov	r2, r8
 80118be:	4604      	mov	r4, r0
 80118c0:	460d      	mov	r5, r1
 80118c2:	465b      	mov	r3, fp
 80118c4:	4650      	mov	r0, sl
 80118c6:	4659      	mov	r1, fp
 80118c8:	f7f4 f808 	bl	80058dc <__adddf3>
 80118cc:	4602      	mov	r2, r0
 80118ce:	460b      	mov	r3, r1
 80118d0:	4620      	mov	r0, r4
 80118d2:	4629      	mov	r1, r5
 80118d4:	f7f4 fae2 	bl	8005e9c <__aeabi_ddiv>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	f7f3 fffe 	bl	80058dc <__adddf3>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	a112      	add	r1, pc, #72	@ (adr r1, 8011930 <__ieee754_asin+0x3f8>)
 80118e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118ea:	f7f3 fff5 	bl	80058d8 <__aeabi_dsub>
 80118ee:	4602      	mov	r2, r0
 80118f0:	460b      	mov	r3, r1
 80118f2:	4630      	mov	r0, r6
 80118f4:	4639      	mov	r1, r7
 80118f6:	f7f3 ffef 	bl	80058d8 <__aeabi_dsub>
 80118fa:	4642      	mov	r2, r8
 80118fc:	4604      	mov	r4, r0
 80118fe:	460d      	mov	r5, r1
 8011900:	465b      	mov	r3, fp
 8011902:	4640      	mov	r0, r8
 8011904:	4659      	mov	r1, fp
 8011906:	f7f3 ffe9 	bl	80058dc <__adddf3>
 801190a:	4602      	mov	r2, r0
 801190c:	460b      	mov	r3, r1
 801190e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011938 <__ieee754_asin+0x400>)
 8011910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011914:	f7f3 ffe0 	bl	80058d8 <__aeabi_dsub>
 8011918:	4602      	mov	r2, r0
 801191a:	460b      	mov	r3, r1
 801191c:	4620      	mov	r0, r4
 801191e:	4629      	mov	r1, r5
 8011920:	f7f3 ffda 	bl	80058d8 <__aeabi_dsub>
 8011924:	4602      	mov	r2, r0
 8011926:	460b      	mov	r3, r1
 8011928:	a103      	add	r1, pc, #12	@ (adr r1, 8011938 <__ieee754_asin+0x400>)
 801192a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801192e:	e6e2      	b.n	80116f6 <__ieee754_asin+0x1be>
 8011930:	33145c07 	.word	0x33145c07
 8011934:	3c91a626 	.word	0x3c91a626
 8011938:	54442d18 	.word	0x54442d18
 801193c:	3fe921fb 	.word	0x3fe921fb

08011940 <__ieee754_atan2>:
 8011940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011944:	ec57 6b11 	vmov	r6, r7, d1
 8011948:	4273      	negs	r3, r6
 801194a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011ac8 <__ieee754_atan2+0x188>
 801194e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011952:	4333      	orrs	r3, r6
 8011954:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011958:	4543      	cmp	r3, r8
 801195a:	ec51 0b10 	vmov	r0, r1, d0
 801195e:	4635      	mov	r5, r6
 8011960:	d809      	bhi.n	8011976 <__ieee754_atan2+0x36>
 8011962:	4244      	negs	r4, r0
 8011964:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011968:	4304      	orrs	r4, r0
 801196a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801196e:	4544      	cmp	r4, r8
 8011970:	468e      	mov	lr, r1
 8011972:	4681      	mov	r9, r0
 8011974:	d907      	bls.n	8011986 <__ieee754_atan2+0x46>
 8011976:	4632      	mov	r2, r6
 8011978:	463b      	mov	r3, r7
 801197a:	f7f3 ffaf 	bl	80058dc <__adddf3>
 801197e:	ec41 0b10 	vmov	d0, r0, r1
 8011982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011986:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801198a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801198e:	4334      	orrs	r4, r6
 8011990:	d103      	bne.n	801199a <__ieee754_atan2+0x5a>
 8011992:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011996:	f7ff b81f 	b.w	80109d8 <atan>
 801199a:	17bc      	asrs	r4, r7, #30
 801199c:	f004 0402 	and.w	r4, r4, #2
 80119a0:	ea53 0909 	orrs.w	r9, r3, r9
 80119a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80119a8:	d107      	bne.n	80119ba <__ieee754_atan2+0x7a>
 80119aa:	2c02      	cmp	r4, #2
 80119ac:	d05f      	beq.n	8011a6e <__ieee754_atan2+0x12e>
 80119ae:	2c03      	cmp	r4, #3
 80119b0:	d1e5      	bne.n	801197e <__ieee754_atan2+0x3e>
 80119b2:	a141      	add	r1, pc, #260	@ (adr r1, 8011ab8 <__ieee754_atan2+0x178>)
 80119b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119b8:	e7e1      	b.n	801197e <__ieee754_atan2+0x3e>
 80119ba:	4315      	orrs	r5, r2
 80119bc:	d106      	bne.n	80119cc <__ieee754_atan2+0x8c>
 80119be:	f1be 0f00 	cmp.w	lr, #0
 80119c2:	da5f      	bge.n	8011a84 <__ieee754_atan2+0x144>
 80119c4:	a13e      	add	r1, pc, #248	@ (adr r1, 8011ac0 <__ieee754_atan2+0x180>)
 80119c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ca:	e7d8      	b.n	801197e <__ieee754_atan2+0x3e>
 80119cc:	4542      	cmp	r2, r8
 80119ce:	d10f      	bne.n	80119f0 <__ieee754_atan2+0xb0>
 80119d0:	4293      	cmp	r3, r2
 80119d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80119d6:	d107      	bne.n	80119e8 <__ieee754_atan2+0xa8>
 80119d8:	2c02      	cmp	r4, #2
 80119da:	d84c      	bhi.n	8011a76 <__ieee754_atan2+0x136>
 80119dc:	4b34      	ldr	r3, [pc, #208]	@ (8011ab0 <__ieee754_atan2+0x170>)
 80119de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119e6:	e7ca      	b.n	801197e <__ieee754_atan2+0x3e>
 80119e8:	2c02      	cmp	r4, #2
 80119ea:	d848      	bhi.n	8011a7e <__ieee754_atan2+0x13e>
 80119ec:	4b31      	ldr	r3, [pc, #196]	@ (8011ab4 <__ieee754_atan2+0x174>)
 80119ee:	e7f6      	b.n	80119de <__ieee754_atan2+0x9e>
 80119f0:	4543      	cmp	r3, r8
 80119f2:	d0e4      	beq.n	80119be <__ieee754_atan2+0x7e>
 80119f4:	1a9b      	subs	r3, r3, r2
 80119f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80119fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80119fe:	da1e      	bge.n	8011a3e <__ieee754_atan2+0xfe>
 8011a00:	2f00      	cmp	r7, #0
 8011a02:	da01      	bge.n	8011a08 <__ieee754_atan2+0xc8>
 8011a04:	323c      	adds	r2, #60	@ 0x3c
 8011a06:	db1e      	blt.n	8011a46 <__ieee754_atan2+0x106>
 8011a08:	4632      	mov	r2, r6
 8011a0a:	463b      	mov	r3, r7
 8011a0c:	f7f4 fa46 	bl	8005e9c <__aeabi_ddiv>
 8011a10:	ec41 0b10 	vmov	d0, r0, r1
 8011a14:	f7ff f9cc 	bl	8010db0 <fabs>
 8011a18:	f7fe ffde 	bl	80109d8 <atan>
 8011a1c:	ec51 0b10 	vmov	r0, r1, d0
 8011a20:	2c01      	cmp	r4, #1
 8011a22:	d013      	beq.n	8011a4c <__ieee754_atan2+0x10c>
 8011a24:	2c02      	cmp	r4, #2
 8011a26:	d015      	beq.n	8011a54 <__ieee754_atan2+0x114>
 8011a28:	2c00      	cmp	r4, #0
 8011a2a:	d0a8      	beq.n	801197e <__ieee754_atan2+0x3e>
 8011a2c:	a318      	add	r3, pc, #96	@ (adr r3, 8011a90 <__ieee754_atan2+0x150>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	f7f3 ff51 	bl	80058d8 <__aeabi_dsub>
 8011a36:	a318      	add	r3, pc, #96	@ (adr r3, 8011a98 <__ieee754_atan2+0x158>)
 8011a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3c:	e014      	b.n	8011a68 <__ieee754_atan2+0x128>
 8011a3e:	a118      	add	r1, pc, #96	@ (adr r1, 8011aa0 <__ieee754_atan2+0x160>)
 8011a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a44:	e7ec      	b.n	8011a20 <__ieee754_atan2+0xe0>
 8011a46:	2000      	movs	r0, #0
 8011a48:	2100      	movs	r1, #0
 8011a4a:	e7e9      	b.n	8011a20 <__ieee754_atan2+0xe0>
 8011a4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a50:	4619      	mov	r1, r3
 8011a52:	e794      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a54:	a30e      	add	r3, pc, #56	@ (adr r3, 8011a90 <__ieee754_atan2+0x150>)
 8011a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5a:	f7f3 ff3d 	bl	80058d8 <__aeabi_dsub>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	a10d      	add	r1, pc, #52	@ (adr r1, 8011a98 <__ieee754_atan2+0x158>)
 8011a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a68:	f7f3 ff36 	bl	80058d8 <__aeabi_dsub>
 8011a6c:	e787      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a6e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011a98 <__ieee754_atan2+0x158>)
 8011a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a74:	e783      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a76:	a10c      	add	r1, pc, #48	@ (adr r1, 8011aa8 <__ieee754_atan2+0x168>)
 8011a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a7c:	e77f      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a7e:	2000      	movs	r0, #0
 8011a80:	2100      	movs	r1, #0
 8011a82:	e77c      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a84:	a106      	add	r1, pc, #24	@ (adr r1, 8011aa0 <__ieee754_atan2+0x160>)
 8011a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a8a:	e778      	b.n	801197e <__ieee754_atan2+0x3e>
 8011a8c:	f3af 8000 	nop.w
 8011a90:	33145c07 	.word	0x33145c07
 8011a94:	3ca1a626 	.word	0x3ca1a626
 8011a98:	54442d18 	.word	0x54442d18
 8011a9c:	400921fb 	.word	0x400921fb
 8011aa0:	54442d18 	.word	0x54442d18
 8011aa4:	3ff921fb 	.word	0x3ff921fb
 8011aa8:	54442d18 	.word	0x54442d18
 8011aac:	3fe921fb 	.word	0x3fe921fb
 8011ab0:	080150f0 	.word	0x080150f0
 8011ab4:	080150d8 	.word	0x080150d8
 8011ab8:	54442d18 	.word	0x54442d18
 8011abc:	c00921fb 	.word	0xc00921fb
 8011ac0:	54442d18 	.word	0x54442d18
 8011ac4:	bff921fb 	.word	0xbff921fb
 8011ac8:	7ff00000 	.word	0x7ff00000
 8011acc:	00000000 	.word	0x00000000

08011ad0 <__ieee754_log>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	ec51 0b10 	vmov	r0, r1, d0
 8011ad8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8011adc:	b087      	sub	sp, #28
 8011ade:	460d      	mov	r5, r1
 8011ae0:	da26      	bge.n	8011b30 <__ieee754_log+0x60>
 8011ae2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011ae6:	4303      	orrs	r3, r0
 8011ae8:	4602      	mov	r2, r0
 8011aea:	d10a      	bne.n	8011b02 <__ieee754_log+0x32>
 8011aec:	49ce      	ldr	r1, [pc, #824]	@ (8011e28 <__ieee754_log+0x358>)
 8011aee:	2200      	movs	r2, #0
 8011af0:	2300      	movs	r3, #0
 8011af2:	2000      	movs	r0, #0
 8011af4:	f7f4 f9d2 	bl	8005e9c <__aeabi_ddiv>
 8011af8:	ec41 0b10 	vmov	d0, r0, r1
 8011afc:	b007      	add	sp, #28
 8011afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b02:	2900      	cmp	r1, #0
 8011b04:	da05      	bge.n	8011b12 <__ieee754_log+0x42>
 8011b06:	460b      	mov	r3, r1
 8011b08:	f7f3 fee6 	bl	80058d8 <__aeabi_dsub>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e7f0      	b.n	8011af4 <__ieee754_log+0x24>
 8011b12:	4bc6      	ldr	r3, [pc, #792]	@ (8011e2c <__ieee754_log+0x35c>)
 8011b14:	2200      	movs	r2, #0
 8011b16:	f7f4 f897 	bl	8005c48 <__aeabi_dmul>
 8011b1a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8011b1e:	460d      	mov	r5, r1
 8011b20:	4ac3      	ldr	r2, [pc, #780]	@ (8011e30 <__ieee754_log+0x360>)
 8011b22:	4295      	cmp	r5, r2
 8011b24:	dd06      	ble.n	8011b34 <__ieee754_log+0x64>
 8011b26:	4602      	mov	r2, r0
 8011b28:	460b      	mov	r3, r1
 8011b2a:	f7f3 fed7 	bl	80058dc <__adddf3>
 8011b2e:	e7e3      	b.n	8011af8 <__ieee754_log+0x28>
 8011b30:	2300      	movs	r3, #0
 8011b32:	e7f5      	b.n	8011b20 <__ieee754_log+0x50>
 8011b34:	152c      	asrs	r4, r5, #20
 8011b36:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8011b3a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011b3e:	441c      	add	r4, r3
 8011b40:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8011b44:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8011b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011b4c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8011b50:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8011b54:	ea42 0105 	orr.w	r1, r2, r5
 8011b58:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	4bb5      	ldr	r3, [pc, #724]	@ (8011e34 <__ieee754_log+0x364>)
 8011b60:	f7f3 feba 	bl	80058d8 <__aeabi_dsub>
 8011b64:	1cab      	adds	r3, r5, #2
 8011b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b6a:	2b02      	cmp	r3, #2
 8011b6c:	4682      	mov	sl, r0
 8011b6e:	468b      	mov	fp, r1
 8011b70:	f04f 0200 	mov.w	r2, #0
 8011b74:	dc53      	bgt.n	8011c1e <__ieee754_log+0x14e>
 8011b76:	2300      	movs	r3, #0
 8011b78:	f7f4 face 	bl	8006118 <__aeabi_dcmpeq>
 8011b7c:	b1d0      	cbz	r0, 8011bb4 <__ieee754_log+0xe4>
 8011b7e:	2c00      	cmp	r4, #0
 8011b80:	f000 8120 	beq.w	8011dc4 <__ieee754_log+0x2f4>
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7f3 fff5 	bl	8005b74 <__aeabi_i2d>
 8011b8a:	a391      	add	r3, pc, #580	@ (adr r3, 8011dd0 <__ieee754_log+0x300>)
 8011b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b90:	4606      	mov	r6, r0
 8011b92:	460f      	mov	r7, r1
 8011b94:	f7f4 f858 	bl	8005c48 <__aeabi_dmul>
 8011b98:	a38f      	add	r3, pc, #572	@ (adr r3, 8011dd8 <__ieee754_log+0x308>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	460d      	mov	r5, r1
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	4639      	mov	r1, r7
 8011ba6:	f7f4 f84f 	bl	8005c48 <__aeabi_dmul>
 8011baa:	4602      	mov	r2, r0
 8011bac:	460b      	mov	r3, r1
 8011bae:	4620      	mov	r0, r4
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	e7ba      	b.n	8011b2a <__ieee754_log+0x5a>
 8011bb4:	a38a      	add	r3, pc, #552	@ (adr r3, 8011de0 <__ieee754_log+0x310>)
 8011bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bba:	4650      	mov	r0, sl
 8011bbc:	4659      	mov	r1, fp
 8011bbe:	f7f4 f843 	bl	8005c48 <__aeabi_dmul>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	499b      	ldr	r1, [pc, #620]	@ (8011e38 <__ieee754_log+0x368>)
 8011bca:	f7f3 fe85 	bl	80058d8 <__aeabi_dsub>
 8011bce:	4652      	mov	r2, sl
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	460f      	mov	r7, r1
 8011bd4:	465b      	mov	r3, fp
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	4659      	mov	r1, fp
 8011bda:	f7f4 f835 	bl	8005c48 <__aeabi_dmul>
 8011bde:	4602      	mov	r2, r0
 8011be0:	460b      	mov	r3, r1
 8011be2:	4630      	mov	r0, r6
 8011be4:	4639      	mov	r1, r7
 8011be6:	f7f4 f82f 	bl	8005c48 <__aeabi_dmul>
 8011bea:	4606      	mov	r6, r0
 8011bec:	460f      	mov	r7, r1
 8011bee:	b914      	cbnz	r4, 8011bf6 <__ieee754_log+0x126>
 8011bf0:	4632      	mov	r2, r6
 8011bf2:	463b      	mov	r3, r7
 8011bf4:	e0a0      	b.n	8011d38 <__ieee754_log+0x268>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7f3 ffbc 	bl	8005b74 <__aeabi_i2d>
 8011bfc:	a374      	add	r3, pc, #464	@ (adr r3, 8011dd0 <__ieee754_log+0x300>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	4680      	mov	r8, r0
 8011c04:	4689      	mov	r9, r1
 8011c06:	f7f4 f81f 	bl	8005c48 <__aeabi_dmul>
 8011c0a:	a373      	add	r3, pc, #460	@ (adr r3, 8011dd8 <__ieee754_log+0x308>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	4604      	mov	r4, r0
 8011c12:	460d      	mov	r5, r1
 8011c14:	4640      	mov	r0, r8
 8011c16:	4649      	mov	r1, r9
 8011c18:	f7f4 f816 	bl	8005c48 <__aeabi_dmul>
 8011c1c:	e0a5      	b.n	8011d6a <__ieee754_log+0x29a>
 8011c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011c22:	f7f3 fe5b 	bl	80058dc <__adddf3>
 8011c26:	4602      	mov	r2, r0
 8011c28:	460b      	mov	r3, r1
 8011c2a:	4650      	mov	r0, sl
 8011c2c:	4659      	mov	r1, fp
 8011c2e:	f7f4 f935 	bl	8005e9c <__aeabi_ddiv>
 8011c32:	e9cd 0100 	strd	r0, r1, [sp]
 8011c36:	4620      	mov	r0, r4
 8011c38:	f7f3 ff9c 	bl	8005b74 <__aeabi_i2d>
 8011c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c44:	4610      	mov	r0, r2
 8011c46:	4619      	mov	r1, r3
 8011c48:	f7f3 fffe 	bl	8005c48 <__aeabi_dmul>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	460b      	mov	r3, r1
 8011c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c54:	f7f3 fff8 	bl	8005c48 <__aeabi_dmul>
 8011c58:	a363      	add	r3, pc, #396	@ (adr r3, 8011de8 <__ieee754_log+0x318>)
 8011c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5e:	4680      	mov	r8, r0
 8011c60:	4689      	mov	r9, r1
 8011c62:	f7f3 fff1 	bl	8005c48 <__aeabi_dmul>
 8011c66:	a362      	add	r3, pc, #392	@ (adr r3, 8011df0 <__ieee754_log+0x320>)
 8011c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6c:	f7f3 fe36 	bl	80058dc <__adddf3>
 8011c70:	4642      	mov	r2, r8
 8011c72:	464b      	mov	r3, r9
 8011c74:	f7f3 ffe8 	bl	8005c48 <__aeabi_dmul>
 8011c78:	a35f      	add	r3, pc, #380	@ (adr r3, 8011df8 <__ieee754_log+0x328>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	f7f3 fe2d 	bl	80058dc <__adddf3>
 8011c82:	4642      	mov	r2, r8
 8011c84:	464b      	mov	r3, r9
 8011c86:	f7f3 ffdf 	bl	8005c48 <__aeabi_dmul>
 8011c8a:	a35d      	add	r3, pc, #372	@ (adr r3, 8011e00 <__ieee754_log+0x330>)
 8011c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c90:	f7f3 fe24 	bl	80058dc <__adddf3>
 8011c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c98:	f7f3 ffd6 	bl	8005c48 <__aeabi_dmul>
 8011c9c:	a35a      	add	r3, pc, #360	@ (adr r3, 8011e08 <__ieee754_log+0x338>)
 8011c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	4649      	mov	r1, r9
 8011caa:	f7f3 ffcd 	bl	8005c48 <__aeabi_dmul>
 8011cae:	a358      	add	r3, pc, #352	@ (adr r3, 8011e10 <__ieee754_log+0x340>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	f7f3 fe12 	bl	80058dc <__adddf3>
 8011cb8:	4642      	mov	r2, r8
 8011cba:	464b      	mov	r3, r9
 8011cbc:	f7f3 ffc4 	bl	8005c48 <__aeabi_dmul>
 8011cc0:	a355      	add	r3, pc, #340	@ (adr r3, 8011e18 <__ieee754_log+0x348>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	f7f3 fe09 	bl	80058dc <__adddf3>
 8011cca:	4642      	mov	r2, r8
 8011ccc:	464b      	mov	r3, r9
 8011cce:	f7f3 ffbb 	bl	8005c48 <__aeabi_dmul>
 8011cd2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8011cd6:	4602      	mov	r2, r0
 8011cd8:	460b      	mov	r3, r1
 8011cda:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8011cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ce2:	f7f3 fdfb 	bl	80058dc <__adddf3>
 8011ce6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8011cea:	3551      	adds	r5, #81	@ 0x51
 8011cec:	4335      	orrs	r5, r6
 8011cee:	2d00      	cmp	r5, #0
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	4689      	mov	r9, r1
 8011cf4:	dd48      	ble.n	8011d88 <__ieee754_log+0x2b8>
 8011cf6:	4b50      	ldr	r3, [pc, #320]	@ (8011e38 <__ieee754_log+0x368>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	4659      	mov	r1, fp
 8011cfe:	f7f3 ffa3 	bl	8005c48 <__aeabi_dmul>
 8011d02:	4652      	mov	r2, sl
 8011d04:	465b      	mov	r3, fp
 8011d06:	f7f3 ff9f 	bl	8005c48 <__aeabi_dmul>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	4606      	mov	r6, r0
 8011d10:	460f      	mov	r7, r1
 8011d12:	4640      	mov	r0, r8
 8011d14:	4649      	mov	r1, r9
 8011d16:	f7f3 fde1 	bl	80058dc <__adddf3>
 8011d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d1e:	f7f3 ff93 	bl	8005c48 <__aeabi_dmul>
 8011d22:	4680      	mov	r8, r0
 8011d24:	4689      	mov	r9, r1
 8011d26:	b964      	cbnz	r4, 8011d42 <__ieee754_log+0x272>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	4639      	mov	r1, r7
 8011d30:	f7f3 fdd2 	bl	80058d8 <__aeabi_dsub>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4650      	mov	r0, sl
 8011d3a:	4659      	mov	r1, fp
 8011d3c:	f7f3 fdcc 	bl	80058d8 <__aeabi_dsub>
 8011d40:	e6da      	b.n	8011af8 <__ieee754_log+0x28>
 8011d42:	a323      	add	r3, pc, #140	@ (adr r3, 8011dd0 <__ieee754_log+0x300>)
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d4c:	f7f3 ff7c 	bl	8005c48 <__aeabi_dmul>
 8011d50:	a321      	add	r3, pc, #132	@ (adr r3, 8011dd8 <__ieee754_log+0x308>)
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	4604      	mov	r4, r0
 8011d58:	460d      	mov	r5, r1
 8011d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d5e:	f7f3 ff73 	bl	8005c48 <__aeabi_dmul>
 8011d62:	4642      	mov	r2, r8
 8011d64:	464b      	mov	r3, r9
 8011d66:	f7f3 fdb9 	bl	80058dc <__adddf3>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	4630      	mov	r0, r6
 8011d70:	4639      	mov	r1, r7
 8011d72:	f7f3 fdb1 	bl	80058d8 <__aeabi_dsub>
 8011d76:	4652      	mov	r2, sl
 8011d78:	465b      	mov	r3, fp
 8011d7a:	f7f3 fdad 	bl	80058d8 <__aeabi_dsub>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	4620      	mov	r0, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	e7d9      	b.n	8011d3c <__ieee754_log+0x26c>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	4650      	mov	r0, sl
 8011d8e:	4659      	mov	r1, fp
 8011d90:	f7f3 fda2 	bl	80058d8 <__aeabi_dsub>
 8011d94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d98:	f7f3 ff56 	bl	8005c48 <__aeabi_dmul>
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	460f      	mov	r7, r1
 8011da0:	2c00      	cmp	r4, #0
 8011da2:	f43f af25 	beq.w	8011bf0 <__ieee754_log+0x120>
 8011da6:	a30a      	add	r3, pc, #40	@ (adr r3, 8011dd0 <__ieee754_log+0x300>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011db0:	f7f3 ff4a 	bl	8005c48 <__aeabi_dmul>
 8011db4:	a308      	add	r3, pc, #32	@ (adr r3, 8011dd8 <__ieee754_log+0x308>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	4604      	mov	r4, r0
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dc2:	e729      	b.n	8011c18 <__ieee754_log+0x148>
 8011dc4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8011e20 <__ieee754_log+0x350>
 8011dc8:	e698      	b.n	8011afc <__ieee754_log+0x2c>
 8011dca:	bf00      	nop
 8011dcc:	f3af 8000 	nop.w
 8011dd0:	fee00000 	.word	0xfee00000
 8011dd4:	3fe62e42 	.word	0x3fe62e42
 8011dd8:	35793c76 	.word	0x35793c76
 8011ddc:	3dea39ef 	.word	0x3dea39ef
 8011de0:	55555555 	.word	0x55555555
 8011de4:	3fd55555 	.word	0x3fd55555
 8011de8:	df3e5244 	.word	0xdf3e5244
 8011dec:	3fc2f112 	.word	0x3fc2f112
 8011df0:	96cb03de 	.word	0x96cb03de
 8011df4:	3fc74664 	.word	0x3fc74664
 8011df8:	94229359 	.word	0x94229359
 8011dfc:	3fd24924 	.word	0x3fd24924
 8011e00:	55555593 	.word	0x55555593
 8011e04:	3fe55555 	.word	0x3fe55555
 8011e08:	d078c69f 	.word	0xd078c69f
 8011e0c:	3fc39a09 	.word	0x3fc39a09
 8011e10:	1d8e78af 	.word	0x1d8e78af
 8011e14:	3fcc71c5 	.word	0x3fcc71c5
 8011e18:	9997fa04 	.word	0x9997fa04
 8011e1c:	3fd99999 	.word	0x3fd99999
	...
 8011e28:	c3500000 	.word	0xc3500000
 8011e2c:	43500000 	.word	0x43500000
 8011e30:	7fefffff 	.word	0x7fefffff
 8011e34:	3ff00000 	.word	0x3ff00000
 8011e38:	3fe00000 	.word	0x3fe00000
 8011e3c:	00000000 	.word	0x00000000

08011e40 <__ieee754_rem_pio2>:
 8011e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	ec57 6b10 	vmov	r6, r7, d0
 8011e48:	4bc5      	ldr	r3, [pc, #788]	@ (8012160 <__ieee754_rem_pio2+0x320>)
 8011e4a:	b08d      	sub	sp, #52	@ 0x34
 8011e4c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011e50:	4598      	cmp	r8, r3
 8011e52:	4604      	mov	r4, r0
 8011e54:	9704      	str	r7, [sp, #16]
 8011e56:	d807      	bhi.n	8011e68 <__ieee754_rem_pio2+0x28>
 8011e58:	2200      	movs	r2, #0
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	ed80 0b00 	vstr	d0, [r0]
 8011e60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e64:	2500      	movs	r5, #0
 8011e66:	e028      	b.n	8011eba <__ieee754_rem_pio2+0x7a>
 8011e68:	4bbe      	ldr	r3, [pc, #760]	@ (8012164 <__ieee754_rem_pio2+0x324>)
 8011e6a:	4598      	cmp	r8, r3
 8011e6c:	d878      	bhi.n	8011f60 <__ieee754_rem_pio2+0x120>
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	4dbd      	ldr	r5, [pc, #756]	@ (8012168 <__ieee754_rem_pio2+0x328>)
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	4630      	mov	r0, r6
 8011e76:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012128 <__ieee754_rem_pio2+0x2e8>)
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	4639      	mov	r1, r7
 8011e7e:	dd38      	ble.n	8011ef2 <__ieee754_rem_pio2+0xb2>
 8011e80:	f7f3 fd2a 	bl	80058d8 <__aeabi_dsub>
 8011e84:	45a8      	cmp	r8, r5
 8011e86:	4606      	mov	r6, r0
 8011e88:	460f      	mov	r7, r1
 8011e8a:	d01a      	beq.n	8011ec2 <__ieee754_rem_pio2+0x82>
 8011e8c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012130 <__ieee754_rem_pio2+0x2f0>)
 8011e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e92:	f7f3 fd21 	bl	80058d8 <__aeabi_dsub>
 8011e96:	4602      	mov	r2, r0
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4680      	mov	r8, r0
 8011e9c:	4689      	mov	r9, r1
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f7f3 fd19 	bl	80058d8 <__aeabi_dsub>
 8011ea6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012130 <__ieee754_rem_pio2+0x2f0>)
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	f7f3 fd14 	bl	80058d8 <__aeabi_dsub>
 8011eb0:	e9c4 8900 	strd	r8, r9, [r4]
 8011eb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011eb8:	2501      	movs	r5, #1
 8011eba:	4628      	mov	r0, r5
 8011ebc:	b00d      	add	sp, #52	@ 0x34
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec2:	a39d      	add	r3, pc, #628	@ (adr r3, 8012138 <__ieee754_rem_pio2+0x2f8>)
 8011ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec8:	f7f3 fd06 	bl	80058d8 <__aeabi_dsub>
 8011ecc:	a39c      	add	r3, pc, #624	@ (adr r3, 8012140 <__ieee754_rem_pio2+0x300>)
 8011ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	460f      	mov	r7, r1
 8011ed6:	f7f3 fcff 	bl	80058d8 <__aeabi_dsub>
 8011eda:	4602      	mov	r2, r0
 8011edc:	460b      	mov	r3, r1
 8011ede:	4680      	mov	r8, r0
 8011ee0:	4689      	mov	r9, r1
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	f7f3 fcf7 	bl	80058d8 <__aeabi_dsub>
 8011eea:	a395      	add	r3, pc, #596	@ (adr r3, 8012140 <__ieee754_rem_pio2+0x300>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	e7dc      	b.n	8011eac <__ieee754_rem_pio2+0x6c>
 8011ef2:	f7f3 fcf3 	bl	80058dc <__adddf3>
 8011ef6:	45a8      	cmp	r8, r5
 8011ef8:	4606      	mov	r6, r0
 8011efa:	460f      	mov	r7, r1
 8011efc:	d018      	beq.n	8011f30 <__ieee754_rem_pio2+0xf0>
 8011efe:	a38c      	add	r3, pc, #560	@ (adr r3, 8012130 <__ieee754_rem_pio2+0x2f0>)
 8011f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f04:	f7f3 fcea 	bl	80058dc <__adddf3>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	4689      	mov	r9, r1
 8011f10:	4630      	mov	r0, r6
 8011f12:	4639      	mov	r1, r7
 8011f14:	f7f3 fce0 	bl	80058d8 <__aeabi_dsub>
 8011f18:	a385      	add	r3, pc, #532	@ (adr r3, 8012130 <__ieee754_rem_pio2+0x2f0>)
 8011f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1e:	f7f3 fcdd 	bl	80058dc <__adddf3>
 8011f22:	f04f 35ff 	mov.w	r5, #4294967295
 8011f26:	e9c4 8900 	strd	r8, r9, [r4]
 8011f2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f2e:	e7c4      	b.n	8011eba <__ieee754_rem_pio2+0x7a>
 8011f30:	a381      	add	r3, pc, #516	@ (adr r3, 8012138 <__ieee754_rem_pio2+0x2f8>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	f7f3 fcd1 	bl	80058dc <__adddf3>
 8011f3a:	a381      	add	r3, pc, #516	@ (adr r3, 8012140 <__ieee754_rem_pio2+0x300>)
 8011f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f40:	4606      	mov	r6, r0
 8011f42:	460f      	mov	r7, r1
 8011f44:	f7f3 fcca 	bl	80058dc <__adddf3>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	4680      	mov	r8, r0
 8011f4e:	4689      	mov	r9, r1
 8011f50:	4630      	mov	r0, r6
 8011f52:	4639      	mov	r1, r7
 8011f54:	f7f3 fcc0 	bl	80058d8 <__aeabi_dsub>
 8011f58:	a379      	add	r3, pc, #484	@ (adr r3, 8012140 <__ieee754_rem_pio2+0x300>)
 8011f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5e:	e7de      	b.n	8011f1e <__ieee754_rem_pio2+0xde>
 8011f60:	4b82      	ldr	r3, [pc, #520]	@ (801216c <__ieee754_rem_pio2+0x32c>)
 8011f62:	4598      	cmp	r8, r3
 8011f64:	f200 80d1 	bhi.w	801210a <__ieee754_rem_pio2+0x2ca>
 8011f68:	f7fe ff22 	bl	8010db0 <fabs>
 8011f6c:	ec57 6b10 	vmov	r6, r7, d0
 8011f70:	a375      	add	r3, pc, #468	@ (adr r3, 8012148 <__ieee754_rem_pio2+0x308>)
 8011f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f76:	4630      	mov	r0, r6
 8011f78:	4639      	mov	r1, r7
 8011f7a:	f7f3 fe65 	bl	8005c48 <__aeabi_dmul>
 8011f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8012170 <__ieee754_rem_pio2+0x330>)
 8011f80:	2200      	movs	r2, #0
 8011f82:	f7f3 fcab 	bl	80058dc <__adddf3>
 8011f86:	f7f4 f90f 	bl	80061a8 <__aeabi_d2iz>
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	f7f3 fdf2 	bl	8005b74 <__aeabi_i2d>
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f98:	a363      	add	r3, pc, #396	@ (adr r3, 8012128 <__ieee754_rem_pio2+0x2e8>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f7f3 fe53 	bl	8005c48 <__aeabi_dmul>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	4639      	mov	r1, r7
 8011faa:	f7f3 fc95 	bl	80058d8 <__aeabi_dsub>
 8011fae:	a360      	add	r3, pc, #384	@ (adr r3, 8012130 <__ieee754_rem_pio2+0x2f0>)
 8011fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb4:	4682      	mov	sl, r0
 8011fb6:	468b      	mov	fp, r1
 8011fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fbc:	f7f3 fe44 	bl	8005c48 <__aeabi_dmul>
 8011fc0:	2d1f      	cmp	r5, #31
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	460f      	mov	r7, r1
 8011fc6:	dc0c      	bgt.n	8011fe2 <__ieee754_rem_pio2+0x1a2>
 8011fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8012174 <__ieee754_rem_pio2+0x334>)
 8011fca:	1e6a      	subs	r2, r5, #1
 8011fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fd0:	4543      	cmp	r3, r8
 8011fd2:	d006      	beq.n	8011fe2 <__ieee754_rem_pio2+0x1a2>
 8011fd4:	4632      	mov	r2, r6
 8011fd6:	463b      	mov	r3, r7
 8011fd8:	4650      	mov	r0, sl
 8011fda:	4659      	mov	r1, fp
 8011fdc:	f7f3 fc7c 	bl	80058d8 <__aeabi_dsub>
 8011fe0:	e00e      	b.n	8012000 <__ieee754_rem_pio2+0x1c0>
 8011fe2:	463b      	mov	r3, r7
 8011fe4:	4632      	mov	r2, r6
 8011fe6:	4650      	mov	r0, sl
 8011fe8:	4659      	mov	r1, fp
 8011fea:	f7f3 fc75 	bl	80058d8 <__aeabi_dsub>
 8011fee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011ff2:	9305      	str	r3, [sp, #20]
 8011ff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011ff8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011ffc:	2b10      	cmp	r3, #16
 8011ffe:	dc02      	bgt.n	8012006 <__ieee754_rem_pio2+0x1c6>
 8012000:	e9c4 0100 	strd	r0, r1, [r4]
 8012004:	e039      	b.n	801207a <__ieee754_rem_pio2+0x23a>
 8012006:	a34c      	add	r3, pc, #304	@ (adr r3, 8012138 <__ieee754_rem_pio2+0x2f8>)
 8012008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012010:	f7f3 fe1a 	bl	8005c48 <__aeabi_dmul>
 8012014:	4606      	mov	r6, r0
 8012016:	460f      	mov	r7, r1
 8012018:	4602      	mov	r2, r0
 801201a:	460b      	mov	r3, r1
 801201c:	4650      	mov	r0, sl
 801201e:	4659      	mov	r1, fp
 8012020:	f7f3 fc5a 	bl	80058d8 <__aeabi_dsub>
 8012024:	4602      	mov	r2, r0
 8012026:	460b      	mov	r3, r1
 8012028:	4680      	mov	r8, r0
 801202a:	4689      	mov	r9, r1
 801202c:	4650      	mov	r0, sl
 801202e:	4659      	mov	r1, fp
 8012030:	f7f3 fc52 	bl	80058d8 <__aeabi_dsub>
 8012034:	4632      	mov	r2, r6
 8012036:	463b      	mov	r3, r7
 8012038:	f7f3 fc4e 	bl	80058d8 <__aeabi_dsub>
 801203c:	a340      	add	r3, pc, #256	@ (adr r3, 8012140 <__ieee754_rem_pio2+0x300>)
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	4606      	mov	r6, r0
 8012044:	460f      	mov	r7, r1
 8012046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801204a:	f7f3 fdfd 	bl	8005c48 <__aeabi_dmul>
 801204e:	4632      	mov	r2, r6
 8012050:	463b      	mov	r3, r7
 8012052:	f7f3 fc41 	bl	80058d8 <__aeabi_dsub>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	4606      	mov	r6, r0
 801205c:	460f      	mov	r7, r1
 801205e:	4640      	mov	r0, r8
 8012060:	4649      	mov	r1, r9
 8012062:	f7f3 fc39 	bl	80058d8 <__aeabi_dsub>
 8012066:	9a05      	ldr	r2, [sp, #20]
 8012068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	2b31      	cmp	r3, #49	@ 0x31
 8012070:	dc20      	bgt.n	80120b4 <__ieee754_rem_pio2+0x274>
 8012072:	e9c4 0100 	strd	r0, r1, [r4]
 8012076:	46c2      	mov	sl, r8
 8012078:	46cb      	mov	fp, r9
 801207a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801207e:	4650      	mov	r0, sl
 8012080:	4642      	mov	r2, r8
 8012082:	464b      	mov	r3, r9
 8012084:	4659      	mov	r1, fp
 8012086:	f7f3 fc27 	bl	80058d8 <__aeabi_dsub>
 801208a:	463b      	mov	r3, r7
 801208c:	4632      	mov	r2, r6
 801208e:	f7f3 fc23 	bl	80058d8 <__aeabi_dsub>
 8012092:	9b04      	ldr	r3, [sp, #16]
 8012094:	2b00      	cmp	r3, #0
 8012096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801209a:	f6bf af0e 	bge.w	8011eba <__ieee754_rem_pio2+0x7a>
 801209e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80120a2:	6063      	str	r3, [r4, #4]
 80120a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80120a8:	f8c4 8000 	str.w	r8, [r4]
 80120ac:	60a0      	str	r0, [r4, #8]
 80120ae:	60e3      	str	r3, [r4, #12]
 80120b0:	426d      	negs	r5, r5
 80120b2:	e702      	b.n	8011eba <__ieee754_rem_pio2+0x7a>
 80120b4:	a326      	add	r3, pc, #152	@ (adr r3, 8012150 <__ieee754_rem_pio2+0x310>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120be:	f7f3 fdc3 	bl	8005c48 <__aeabi_dmul>
 80120c2:	4606      	mov	r6, r0
 80120c4:	460f      	mov	r7, r1
 80120c6:	4602      	mov	r2, r0
 80120c8:	460b      	mov	r3, r1
 80120ca:	4640      	mov	r0, r8
 80120cc:	4649      	mov	r1, r9
 80120ce:	f7f3 fc03 	bl	80058d8 <__aeabi_dsub>
 80120d2:	4602      	mov	r2, r0
 80120d4:	460b      	mov	r3, r1
 80120d6:	4682      	mov	sl, r0
 80120d8:	468b      	mov	fp, r1
 80120da:	4640      	mov	r0, r8
 80120dc:	4649      	mov	r1, r9
 80120de:	f7f3 fbfb 	bl	80058d8 <__aeabi_dsub>
 80120e2:	4632      	mov	r2, r6
 80120e4:	463b      	mov	r3, r7
 80120e6:	f7f3 fbf7 	bl	80058d8 <__aeabi_dsub>
 80120ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8012158 <__ieee754_rem_pio2+0x318>)
 80120ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f0:	4606      	mov	r6, r0
 80120f2:	460f      	mov	r7, r1
 80120f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120f8:	f7f3 fda6 	bl	8005c48 <__aeabi_dmul>
 80120fc:	4632      	mov	r2, r6
 80120fe:	463b      	mov	r3, r7
 8012100:	f7f3 fbea 	bl	80058d8 <__aeabi_dsub>
 8012104:	4606      	mov	r6, r0
 8012106:	460f      	mov	r7, r1
 8012108:	e764      	b.n	8011fd4 <__ieee754_rem_pio2+0x194>
 801210a:	4b1b      	ldr	r3, [pc, #108]	@ (8012178 <__ieee754_rem_pio2+0x338>)
 801210c:	4598      	cmp	r8, r3
 801210e:	d935      	bls.n	801217c <__ieee754_rem_pio2+0x33c>
 8012110:	4632      	mov	r2, r6
 8012112:	463b      	mov	r3, r7
 8012114:	4630      	mov	r0, r6
 8012116:	4639      	mov	r1, r7
 8012118:	f7f3 fbde 	bl	80058d8 <__aeabi_dsub>
 801211c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012120:	e9c4 0100 	strd	r0, r1, [r4]
 8012124:	e69e      	b.n	8011e64 <__ieee754_rem_pio2+0x24>
 8012126:	bf00      	nop
 8012128:	54400000 	.word	0x54400000
 801212c:	3ff921fb 	.word	0x3ff921fb
 8012130:	1a626331 	.word	0x1a626331
 8012134:	3dd0b461 	.word	0x3dd0b461
 8012138:	1a600000 	.word	0x1a600000
 801213c:	3dd0b461 	.word	0x3dd0b461
 8012140:	2e037073 	.word	0x2e037073
 8012144:	3ba3198a 	.word	0x3ba3198a
 8012148:	6dc9c883 	.word	0x6dc9c883
 801214c:	3fe45f30 	.word	0x3fe45f30
 8012150:	2e000000 	.word	0x2e000000
 8012154:	3ba3198a 	.word	0x3ba3198a
 8012158:	252049c1 	.word	0x252049c1
 801215c:	397b839a 	.word	0x397b839a
 8012160:	3fe921fb 	.word	0x3fe921fb
 8012164:	4002d97b 	.word	0x4002d97b
 8012168:	3ff921fb 	.word	0x3ff921fb
 801216c:	413921fb 	.word	0x413921fb
 8012170:	3fe00000 	.word	0x3fe00000
 8012174:	08015108 	.word	0x08015108
 8012178:	7fefffff 	.word	0x7fefffff
 801217c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012180:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012184:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012188:	4630      	mov	r0, r6
 801218a:	460f      	mov	r7, r1
 801218c:	f7f4 f80c 	bl	80061a8 <__aeabi_d2iz>
 8012190:	f7f3 fcf0 	bl	8005b74 <__aeabi_i2d>
 8012194:	4602      	mov	r2, r0
 8012196:	460b      	mov	r3, r1
 8012198:	4630      	mov	r0, r6
 801219a:	4639      	mov	r1, r7
 801219c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80121a0:	f7f3 fb9a 	bl	80058d8 <__aeabi_dsub>
 80121a4:	4b22      	ldr	r3, [pc, #136]	@ (8012230 <__ieee754_rem_pio2+0x3f0>)
 80121a6:	2200      	movs	r2, #0
 80121a8:	f7f3 fd4e 	bl	8005c48 <__aeabi_dmul>
 80121ac:	460f      	mov	r7, r1
 80121ae:	4606      	mov	r6, r0
 80121b0:	f7f3 fffa 	bl	80061a8 <__aeabi_d2iz>
 80121b4:	f7f3 fcde 	bl	8005b74 <__aeabi_i2d>
 80121b8:	4602      	mov	r2, r0
 80121ba:	460b      	mov	r3, r1
 80121bc:	4630      	mov	r0, r6
 80121be:	4639      	mov	r1, r7
 80121c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80121c4:	f7f3 fb88 	bl	80058d8 <__aeabi_dsub>
 80121c8:	4b19      	ldr	r3, [pc, #100]	@ (8012230 <__ieee754_rem_pio2+0x3f0>)
 80121ca:	2200      	movs	r2, #0
 80121cc:	f7f3 fd3c 	bl	8005c48 <__aeabi_dmul>
 80121d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80121d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80121d8:	f04f 0803 	mov.w	r8, #3
 80121dc:	2600      	movs	r6, #0
 80121de:	2700      	movs	r7, #0
 80121e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80121e4:	4632      	mov	r2, r6
 80121e6:	463b      	mov	r3, r7
 80121e8:	46c2      	mov	sl, r8
 80121ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80121ee:	f7f3 ff93 	bl	8006118 <__aeabi_dcmpeq>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d1f4      	bne.n	80121e0 <__ieee754_rem_pio2+0x3a0>
 80121f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012234 <__ieee754_rem_pio2+0x3f4>)
 80121f8:	9301      	str	r3, [sp, #4]
 80121fa:	2302      	movs	r3, #2
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	462a      	mov	r2, r5
 8012200:	4653      	mov	r3, sl
 8012202:	4621      	mov	r1, r4
 8012204:	a806      	add	r0, sp, #24
 8012206:	f000 fcd3 	bl	8012bb0 <__kernel_rem_pio2>
 801220a:	9b04      	ldr	r3, [sp, #16]
 801220c:	2b00      	cmp	r3, #0
 801220e:	4605      	mov	r5, r0
 8012210:	f6bf ae53 	bge.w	8011eba <__ieee754_rem_pio2+0x7a>
 8012214:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012218:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801221c:	e9c4 2300 	strd	r2, r3, [r4]
 8012220:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012228:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801222c:	e740      	b.n	80120b0 <__ieee754_rem_pio2+0x270>
 801222e:	bf00      	nop
 8012230:	41700000 	.word	0x41700000
 8012234:	08015188 	.word	0x08015188

08012238 <__kernel_cosf>:
 8012238:	ee10 3a10 	vmov	r3, s0
 801223c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012240:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012244:	eef0 6a40 	vmov.f32	s13, s0
 8012248:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801224c:	d204      	bcs.n	8012258 <__kernel_cosf+0x20>
 801224e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012252:	ee17 2a90 	vmov	r2, s15
 8012256:	b342      	cbz	r2, 80122aa <__kernel_cosf+0x72>
 8012258:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801225c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80122c8 <__kernel_cosf+0x90>
 8012260:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80122cc <__kernel_cosf+0x94>
 8012264:	4a1a      	ldr	r2, [pc, #104]	@ (80122d0 <__kernel_cosf+0x98>)
 8012266:	eea7 6a27 	vfma.f32	s12, s14, s15
 801226a:	4293      	cmp	r3, r2
 801226c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80122d4 <__kernel_cosf+0x9c>
 8012270:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012274:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80122d8 <__kernel_cosf+0xa0>
 8012278:	eea7 6a87 	vfma.f32	s12, s15, s14
 801227c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80122dc <__kernel_cosf+0xa4>
 8012280:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012284:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80122e0 <__kernel_cosf+0xa8>
 8012288:	eea7 6a87 	vfma.f32	s12, s15, s14
 801228c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012290:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012294:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012298:	eee7 0a06 	vfma.f32	s1, s14, s12
 801229c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122a0:	d804      	bhi.n	80122ac <__kernel_cosf+0x74>
 80122a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80122a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80122aa:	4770      	bx	lr
 80122ac:	4a0d      	ldr	r2, [pc, #52]	@ (80122e4 <__kernel_cosf+0xac>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	bf9a      	itte	ls
 80122b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80122b6:	ee07 3a10 	vmovls	s14, r3
 80122ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80122be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80122c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122c6:	e7ec      	b.n	80122a2 <__kernel_cosf+0x6a>
 80122c8:	ad47d74e 	.word	0xad47d74e
 80122cc:	310f74f6 	.word	0x310f74f6
 80122d0:	3e999999 	.word	0x3e999999
 80122d4:	b493f27c 	.word	0xb493f27c
 80122d8:	37d00d01 	.word	0x37d00d01
 80122dc:	bab60b61 	.word	0xbab60b61
 80122e0:	3d2aaaab 	.word	0x3d2aaaab
 80122e4:	3f480000 	.word	0x3f480000

080122e8 <__kernel_sinf>:
 80122e8:	ee10 3a10 	vmov	r3, s0
 80122ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80122f4:	d204      	bcs.n	8012300 <__kernel_sinf+0x18>
 80122f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80122fa:	ee17 3a90 	vmov	r3, s15
 80122fe:	b35b      	cbz	r3, 8012358 <__kernel_sinf+0x70>
 8012300:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012304:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801235c <__kernel_sinf+0x74>
 8012308:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012360 <__kernel_sinf+0x78>
 801230c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012310:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012364 <__kernel_sinf+0x7c>
 8012314:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012318:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012368 <__kernel_sinf+0x80>
 801231c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012320:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801236c <__kernel_sinf+0x84>
 8012324:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012328:	eee6 7a07 	vfma.f32	s15, s12, s14
 801232c:	b930      	cbnz	r0, 801233c <__kernel_sinf+0x54>
 801232e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012370 <__kernel_sinf+0x88>
 8012332:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012336:	eea6 0a26 	vfma.f32	s0, s12, s13
 801233a:	4770      	bx	lr
 801233c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012340:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012344:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012348:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801234c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012374 <__kernel_sinf+0x8c>
 8012350:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012354:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012360:	b2d72f34 	.word	0xb2d72f34
 8012364:	3638ef1b 	.word	0x3638ef1b
 8012368:	b9500d01 	.word	0xb9500d01
 801236c:	3c088889 	.word	0x3c088889
 8012370:	be2aaaab 	.word	0xbe2aaaab
 8012374:	3e2aaaab 	.word	0x3e2aaaab

08012378 <__ieee754_acosf>:
 8012378:	b508      	push	{r3, lr}
 801237a:	ee10 3a10 	vmov	r3, s0
 801237e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012382:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012386:	ed2d 8b0c 	vpush	{d8-d13}
 801238a:	d10a      	bne.n	80123a2 <__ieee754_acosf+0x2a>
 801238c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8012524 <__ieee754_acosf+0x1ac>
 8012390:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8012528 <__ieee754_acosf+0x1b0>
 8012394:	2b00      	cmp	r3, #0
 8012396:	bfc8      	it	gt
 8012398:	eeb0 0a67 	vmovgt.f32	s0, s15
 801239c:	ecbd 8b0c 	vpop	{d8-d13}
 80123a0:	bd08      	pop	{r3, pc}
 80123a2:	d904      	bls.n	80123ae <__ieee754_acosf+0x36>
 80123a4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80123a8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80123ac:	e7f6      	b.n	801239c <__ieee754_acosf+0x24>
 80123ae:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80123b2:	d23c      	bcs.n	801242e <__ieee754_acosf+0xb6>
 80123b4:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80123b8:	f240 80b1 	bls.w	801251e <__ieee754_acosf+0x1a6>
 80123bc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80123c0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801252c <__ieee754_acosf+0x1b4>
 80123c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8012530 <__ieee754_acosf+0x1b8>
 80123c8:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8012534 <__ieee754_acosf+0x1bc>
 80123cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80123d0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8012538 <__ieee754_acosf+0x1c0>
 80123d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801253c <__ieee754_acosf+0x1c4>
 80123dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123e0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8012540 <__ieee754_acosf+0x1c8>
 80123e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123e8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8012544 <__ieee754_acosf+0x1cc>
 80123ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123f0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8012548 <__ieee754_acosf+0x1d0>
 80123f4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80123f8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801254c <__ieee754_acosf+0x1d4>
 80123fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012400:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8012550 <__ieee754_acosf+0x1d8>
 8012404:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801240c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012414:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8012554 <__ieee754_acosf+0x1dc>
 8012418:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801241c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8012420:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012424:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8012558 <__ieee754_acosf+0x1e0>
 8012428:	ee30 0a67 	vsub.f32	s0, s0, s15
 801242c:	e7b6      	b.n	801239c <__ieee754_acosf+0x24>
 801242e:	2b00      	cmp	r3, #0
 8012430:	eddf da3e 	vldr	s27, [pc, #248]	@ 801252c <__ieee754_acosf+0x1b4>
 8012434:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8012530 <__ieee754_acosf+0x1b8>
 8012438:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8012538 <__ieee754_acosf+0x1c0>
 801243c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801253c <__ieee754_acosf+0x1c4>
 8012440:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8012540 <__ieee754_acosf+0x1c8>
 8012444:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8012544 <__ieee754_acosf+0x1cc>
 8012448:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8012548 <__ieee754_acosf+0x1d0>
 801244c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8012534 <__ieee754_acosf+0x1bc>
 8012450:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801254c <__ieee754_acosf+0x1d4>
 8012454:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8012550 <__ieee754_acosf+0x1d8>
 8012458:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801245c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012460:	da28      	bge.n	80124b4 <__ieee754_acosf+0x13c>
 8012462:	ee30 8a09 	vadd.f32	s16, s0, s18
 8012466:	ee28 0a27 	vmul.f32	s0, s16, s15
 801246a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801246e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8012472:	eeac ca80 	vfma.f32	s24, s25, s0
 8012476:	eeaa aa80 	vfma.f32	s20, s21, s0
 801247a:	eeec ba00 	vfma.f32	s23, s24, s0
 801247e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8012482:	eeab ba80 	vfma.f32	s22, s23, s0
 8012486:	eea9 9a80 	vfma.f32	s18, s19, s0
 801248a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801248e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8012492:	f7fe fe4d 	bl	8011130 <__ieee754_sqrtf>
 8012496:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801249a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801255c <__ieee754_acosf+0x1e4>
 801249e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80124a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80124a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80124aa:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8012560 <__ieee754_acosf+0x1e8>
 80124ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80124b2:	e773      	b.n	801239c <__ieee754_acosf+0x24>
 80124b4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80124b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80124bc:	eeb0 0a48 	vmov.f32	s0, s16
 80124c0:	f7fe fe36 	bl	8011130 <__ieee754_sqrtf>
 80124c4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80124c8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80124cc:	eeac ca88 	vfma.f32	s24, s25, s16
 80124d0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80124d4:	eeec ba08 	vfma.f32	s23, s24, s16
 80124d8:	ee10 3a10 	vmov	r3, s0
 80124dc:	eeab ba88 	vfma.f32	s22, s23, s16
 80124e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80124e4:	f023 030f 	bic.w	r3, r3, #15
 80124e8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80124ec:	ee07 3a90 	vmov	s15, r3
 80124f0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80124f4:	eeb0 6a48 	vmov.f32	s12, s16
 80124f8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80124fc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8012500:	ee70 6a27 	vadd.f32	s13, s0, s15
 8012504:	ee68 8a88 	vmul.f32	s17, s17, s16
 8012508:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801250c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8012510:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012514:	ee37 0a87 	vadd.f32	s0, s15, s14
 8012518:	ee30 0a00 	vadd.f32	s0, s0, s0
 801251c:	e73e      	b.n	801239c <__ieee754_acosf+0x24>
 801251e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8012564 <__ieee754_acosf+0x1ec>
 8012522:	e73b      	b.n	801239c <__ieee754_acosf+0x24>
 8012524:	40490fdb 	.word	0x40490fdb
 8012528:	00000000 	.word	0x00000000
 801252c:	3811ef08 	.word	0x3811ef08
 8012530:	3a4f7f04 	.word	0x3a4f7f04
 8012534:	bf303361 	.word	0xbf303361
 8012538:	bd241146 	.word	0xbd241146
 801253c:	3e4e0aa8 	.word	0x3e4e0aa8
 8012540:	bea6b090 	.word	0xbea6b090
 8012544:	3e2aaaab 	.word	0x3e2aaaab
 8012548:	3d9dc62e 	.word	0x3d9dc62e
 801254c:	4001572d 	.word	0x4001572d
 8012550:	c019d139 	.word	0xc019d139
 8012554:	33a22168 	.word	0x33a22168
 8012558:	3fc90fda 	.word	0x3fc90fda
 801255c:	b3a22168 	.word	0xb3a22168
 8012560:	40490fda 	.word	0x40490fda
 8012564:	3fc90fdb 	.word	0x3fc90fdb

08012568 <__ieee754_atan2f>:
 8012568:	ee10 2a90 	vmov	r2, s1
 801256c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012570:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012574:	b510      	push	{r4, lr}
 8012576:	eef0 7a40 	vmov.f32	s15, s0
 801257a:	d806      	bhi.n	801258a <__ieee754_atan2f+0x22>
 801257c:	ee10 0a10 	vmov	r0, s0
 8012580:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012584:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012588:	d904      	bls.n	8012594 <__ieee754_atan2f+0x2c>
 801258a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801258e:	eeb0 0a67 	vmov.f32	s0, s15
 8012592:	bd10      	pop	{r4, pc}
 8012594:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012598:	d103      	bne.n	80125a2 <__ieee754_atan2f+0x3a>
 801259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801259e:	f000 b9b3 	b.w	8012908 <atanf>
 80125a2:	1794      	asrs	r4, r2, #30
 80125a4:	f004 0402 	and.w	r4, r4, #2
 80125a8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80125ac:	b943      	cbnz	r3, 80125c0 <__ieee754_atan2f+0x58>
 80125ae:	2c02      	cmp	r4, #2
 80125b0:	d05e      	beq.n	8012670 <__ieee754_atan2f+0x108>
 80125b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012684 <__ieee754_atan2f+0x11c>
 80125b6:	2c03      	cmp	r4, #3
 80125b8:	bf08      	it	eq
 80125ba:	eef0 7a47 	vmoveq.f32	s15, s14
 80125be:	e7e6      	b.n	801258e <__ieee754_atan2f+0x26>
 80125c0:	b941      	cbnz	r1, 80125d4 <__ieee754_atan2f+0x6c>
 80125c2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012688 <__ieee754_atan2f+0x120>
 80125c6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801268c <__ieee754_atan2f+0x124>
 80125ca:	2800      	cmp	r0, #0
 80125cc:	bfb8      	it	lt
 80125ce:	eef0 7a47 	vmovlt.f32	s15, s14
 80125d2:	e7dc      	b.n	801258e <__ieee754_atan2f+0x26>
 80125d4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80125d8:	d110      	bne.n	80125fc <__ieee754_atan2f+0x94>
 80125da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80125de:	f104 34ff 	add.w	r4, r4, #4294967295
 80125e2:	d107      	bne.n	80125f4 <__ieee754_atan2f+0x8c>
 80125e4:	2c02      	cmp	r4, #2
 80125e6:	d846      	bhi.n	8012676 <__ieee754_atan2f+0x10e>
 80125e8:	4b29      	ldr	r3, [pc, #164]	@ (8012690 <__ieee754_atan2f+0x128>)
 80125ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125ee:	edd3 7a00 	vldr	s15, [r3]
 80125f2:	e7cc      	b.n	801258e <__ieee754_atan2f+0x26>
 80125f4:	2c02      	cmp	r4, #2
 80125f6:	d841      	bhi.n	801267c <__ieee754_atan2f+0x114>
 80125f8:	4b26      	ldr	r3, [pc, #152]	@ (8012694 <__ieee754_atan2f+0x12c>)
 80125fa:	e7f6      	b.n	80125ea <__ieee754_atan2f+0x82>
 80125fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012600:	d0df      	beq.n	80125c2 <__ieee754_atan2f+0x5a>
 8012602:	1a5b      	subs	r3, r3, r1
 8012604:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012608:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801260c:	da1a      	bge.n	8012644 <__ieee754_atan2f+0xdc>
 801260e:	2a00      	cmp	r2, #0
 8012610:	da01      	bge.n	8012616 <__ieee754_atan2f+0xae>
 8012612:	313c      	adds	r1, #60	@ 0x3c
 8012614:	db19      	blt.n	801264a <__ieee754_atan2f+0xe2>
 8012616:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801261a:	f7fe fc61 	bl	8010ee0 <fabsf>
 801261e:	f000 f973 	bl	8012908 <atanf>
 8012622:	eef0 7a40 	vmov.f32	s15, s0
 8012626:	2c01      	cmp	r4, #1
 8012628:	d012      	beq.n	8012650 <__ieee754_atan2f+0xe8>
 801262a:	2c02      	cmp	r4, #2
 801262c:	d017      	beq.n	801265e <__ieee754_atan2f+0xf6>
 801262e:	2c00      	cmp	r4, #0
 8012630:	d0ad      	beq.n	801258e <__ieee754_atan2f+0x26>
 8012632:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012698 <__ieee754_atan2f+0x130>
 8012636:	ee77 7a87 	vadd.f32	s15, s15, s14
 801263a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801269c <__ieee754_atan2f+0x134>
 801263e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012642:	e7a4      	b.n	801258e <__ieee754_atan2f+0x26>
 8012644:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8012688 <__ieee754_atan2f+0x120>
 8012648:	e7ed      	b.n	8012626 <__ieee754_atan2f+0xbe>
 801264a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80126a0 <__ieee754_atan2f+0x138>
 801264e:	e7ea      	b.n	8012626 <__ieee754_atan2f+0xbe>
 8012650:	ee17 3a90 	vmov	r3, s15
 8012654:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012658:	ee07 3a90 	vmov	s15, r3
 801265c:	e797      	b.n	801258e <__ieee754_atan2f+0x26>
 801265e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012698 <__ieee754_atan2f+0x130>
 8012662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012666:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801269c <__ieee754_atan2f+0x134>
 801266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801266e:	e78e      	b.n	801258e <__ieee754_atan2f+0x26>
 8012670:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801269c <__ieee754_atan2f+0x134>
 8012674:	e78b      	b.n	801258e <__ieee754_atan2f+0x26>
 8012676:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80126a4 <__ieee754_atan2f+0x13c>
 801267a:	e788      	b.n	801258e <__ieee754_atan2f+0x26>
 801267c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80126a0 <__ieee754_atan2f+0x138>
 8012680:	e785      	b.n	801258e <__ieee754_atan2f+0x26>
 8012682:	bf00      	nop
 8012684:	c0490fdb 	.word	0xc0490fdb
 8012688:	3fc90fdb 	.word	0x3fc90fdb
 801268c:	bfc90fdb 	.word	0xbfc90fdb
 8012690:	0801529c 	.word	0x0801529c
 8012694:	08015290 	.word	0x08015290
 8012698:	33bbbd2e 	.word	0x33bbbd2e
 801269c:	40490fdb 	.word	0x40490fdb
 80126a0:	00000000 	.word	0x00000000
 80126a4:	3f490fdb 	.word	0x3f490fdb

080126a8 <__ieee754_rem_pio2f>:
 80126a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126aa:	ee10 6a10 	vmov	r6, s0
 80126ae:	4b88      	ldr	r3, [pc, #544]	@ (80128d0 <__ieee754_rem_pio2f+0x228>)
 80126b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80126b4:	429d      	cmp	r5, r3
 80126b6:	b087      	sub	sp, #28
 80126b8:	4604      	mov	r4, r0
 80126ba:	d805      	bhi.n	80126c8 <__ieee754_rem_pio2f+0x20>
 80126bc:	2300      	movs	r3, #0
 80126be:	ed80 0a00 	vstr	s0, [r0]
 80126c2:	6043      	str	r3, [r0, #4]
 80126c4:	2000      	movs	r0, #0
 80126c6:	e022      	b.n	801270e <__ieee754_rem_pio2f+0x66>
 80126c8:	4b82      	ldr	r3, [pc, #520]	@ (80128d4 <__ieee754_rem_pio2f+0x22c>)
 80126ca:	429d      	cmp	r5, r3
 80126cc:	d83a      	bhi.n	8012744 <__ieee754_rem_pio2f+0x9c>
 80126ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80126d2:	2e00      	cmp	r6, #0
 80126d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80128d8 <__ieee754_rem_pio2f+0x230>
 80126d8:	4a80      	ldr	r2, [pc, #512]	@ (80128dc <__ieee754_rem_pio2f+0x234>)
 80126da:	f023 030f 	bic.w	r3, r3, #15
 80126de:	dd18      	ble.n	8012712 <__ieee754_rem_pio2f+0x6a>
 80126e0:	4293      	cmp	r3, r2
 80126e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80126e6:	bf09      	itett	eq
 80126e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80128e0 <__ieee754_rem_pio2f+0x238>
 80126ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80128e4 <__ieee754_rem_pio2f+0x23c>
 80126f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80128e8 <__ieee754_rem_pio2f+0x240>
 80126f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80126f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80126fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012700:	ed80 7a00 	vstr	s14, [r0]
 8012704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012708:	edc0 7a01 	vstr	s15, [r0, #4]
 801270c:	2001      	movs	r0, #1
 801270e:	b007      	add	sp, #28
 8012710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012712:	4293      	cmp	r3, r2
 8012714:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012718:	bf09      	itett	eq
 801271a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80128e0 <__ieee754_rem_pio2f+0x238>
 801271e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80128e4 <__ieee754_rem_pio2f+0x23c>
 8012722:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80128e8 <__ieee754_rem_pio2f+0x240>
 8012726:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801272a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801272e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012732:	ed80 7a00 	vstr	s14, [r0]
 8012736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801273a:	edc0 7a01 	vstr	s15, [r0, #4]
 801273e:	f04f 30ff 	mov.w	r0, #4294967295
 8012742:	e7e4      	b.n	801270e <__ieee754_rem_pio2f+0x66>
 8012744:	4b69      	ldr	r3, [pc, #420]	@ (80128ec <__ieee754_rem_pio2f+0x244>)
 8012746:	429d      	cmp	r5, r3
 8012748:	d873      	bhi.n	8012832 <__ieee754_rem_pio2f+0x18a>
 801274a:	f7fe fbc9 	bl	8010ee0 <fabsf>
 801274e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80128f0 <__ieee754_rem_pio2f+0x248>
 8012752:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012756:	eee0 7a07 	vfma.f32	s15, s0, s14
 801275a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801275e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012762:	ee17 0a90 	vmov	r0, s15
 8012766:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80128d8 <__ieee754_rem_pio2f+0x230>
 801276a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801276e:	281f      	cmp	r0, #31
 8012770:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80128e4 <__ieee754_rem_pio2f+0x23c>
 8012774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012778:	eeb1 6a47 	vneg.f32	s12, s14
 801277c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012780:	ee16 1a90 	vmov	r1, s13
 8012784:	dc09      	bgt.n	801279a <__ieee754_rem_pio2f+0xf2>
 8012786:	4a5b      	ldr	r2, [pc, #364]	@ (80128f4 <__ieee754_rem_pio2f+0x24c>)
 8012788:	1e47      	subs	r7, r0, #1
 801278a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801278e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012796:	4293      	cmp	r3, r2
 8012798:	d107      	bne.n	80127aa <__ieee754_rem_pio2f+0x102>
 801279a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801279e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80127a2:	2a08      	cmp	r2, #8
 80127a4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80127a8:	dc14      	bgt.n	80127d4 <__ieee754_rem_pio2f+0x12c>
 80127aa:	6021      	str	r1, [r4, #0]
 80127ac:	ed94 7a00 	vldr	s14, [r4]
 80127b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80127b4:	2e00      	cmp	r6, #0
 80127b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80127ba:	ed84 0a01 	vstr	s0, [r4, #4]
 80127be:	daa6      	bge.n	801270e <__ieee754_rem_pio2f+0x66>
 80127c0:	eeb1 7a47 	vneg.f32	s14, s14
 80127c4:	eeb1 0a40 	vneg.f32	s0, s0
 80127c8:	ed84 7a00 	vstr	s14, [r4]
 80127cc:	ed84 0a01 	vstr	s0, [r4, #4]
 80127d0:	4240      	negs	r0, r0
 80127d2:	e79c      	b.n	801270e <__ieee754_rem_pio2f+0x66>
 80127d4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80128e0 <__ieee754_rem_pio2f+0x238>
 80127d8:	eef0 6a40 	vmov.f32	s13, s0
 80127dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80127e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80127e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80127e8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80128e8 <__ieee754_rem_pio2f+0x240>
 80127ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80127f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80127f4:	ee15 2a90 	vmov	r2, s11
 80127f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80127fc:	1a5b      	subs	r3, r3, r1
 80127fe:	2b19      	cmp	r3, #25
 8012800:	dc04      	bgt.n	801280c <__ieee754_rem_pio2f+0x164>
 8012802:	edc4 5a00 	vstr	s11, [r4]
 8012806:	eeb0 0a66 	vmov.f32	s0, s13
 801280a:	e7cf      	b.n	80127ac <__ieee754_rem_pio2f+0x104>
 801280c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80128f8 <__ieee754_rem_pio2f+0x250>
 8012810:	eeb0 0a66 	vmov.f32	s0, s13
 8012814:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012818:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801281c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80128fc <__ieee754_rem_pio2f+0x254>
 8012820:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012824:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012828:	ee30 7a67 	vsub.f32	s14, s0, s15
 801282c:	ed84 7a00 	vstr	s14, [r4]
 8012830:	e7bc      	b.n	80127ac <__ieee754_rem_pio2f+0x104>
 8012832:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012836:	d306      	bcc.n	8012846 <__ieee754_rem_pio2f+0x19e>
 8012838:	ee70 7a40 	vsub.f32	s15, s0, s0
 801283c:	edc0 7a01 	vstr	s15, [r0, #4]
 8012840:	edc0 7a00 	vstr	s15, [r0]
 8012844:	e73e      	b.n	80126c4 <__ieee754_rem_pio2f+0x1c>
 8012846:	15ea      	asrs	r2, r5, #23
 8012848:	3a86      	subs	r2, #134	@ 0x86
 801284a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801284e:	ee07 3a90 	vmov	s15, r3
 8012852:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012856:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012900 <__ieee754_rem_pio2f+0x258>
 801285a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801285e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012862:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801286a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801286e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012876:	ed8d 7a04 	vstr	s14, [sp, #16]
 801287a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801287e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012886:	edcd 7a05 	vstr	s15, [sp, #20]
 801288a:	d11e      	bne.n	80128ca <__ieee754_rem_pio2f+0x222>
 801288c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012894:	bf0c      	ite	eq
 8012896:	2301      	moveq	r3, #1
 8012898:	2302      	movne	r3, #2
 801289a:	491a      	ldr	r1, [pc, #104]	@ (8012904 <__ieee754_rem_pio2f+0x25c>)
 801289c:	9101      	str	r1, [sp, #4]
 801289e:	2102      	movs	r1, #2
 80128a0:	9100      	str	r1, [sp, #0]
 80128a2:	a803      	add	r0, sp, #12
 80128a4:	4621      	mov	r1, r4
 80128a6:	f000 fcdb 	bl	8013260 <__kernel_rem_pio2f>
 80128aa:	2e00      	cmp	r6, #0
 80128ac:	f6bf af2f 	bge.w	801270e <__ieee754_rem_pio2f+0x66>
 80128b0:	edd4 7a00 	vldr	s15, [r4]
 80128b4:	eef1 7a67 	vneg.f32	s15, s15
 80128b8:	edc4 7a00 	vstr	s15, [r4]
 80128bc:	edd4 7a01 	vldr	s15, [r4, #4]
 80128c0:	eef1 7a67 	vneg.f32	s15, s15
 80128c4:	edc4 7a01 	vstr	s15, [r4, #4]
 80128c8:	e782      	b.n	80127d0 <__ieee754_rem_pio2f+0x128>
 80128ca:	2303      	movs	r3, #3
 80128cc:	e7e5      	b.n	801289a <__ieee754_rem_pio2f+0x1f2>
 80128ce:	bf00      	nop
 80128d0:	3f490fd8 	.word	0x3f490fd8
 80128d4:	4016cbe3 	.word	0x4016cbe3
 80128d8:	3fc90f80 	.word	0x3fc90f80
 80128dc:	3fc90fd0 	.word	0x3fc90fd0
 80128e0:	37354400 	.word	0x37354400
 80128e4:	37354443 	.word	0x37354443
 80128e8:	2e85a308 	.word	0x2e85a308
 80128ec:	43490f80 	.word	0x43490f80
 80128f0:	3f22f984 	.word	0x3f22f984
 80128f4:	080152a8 	.word	0x080152a8
 80128f8:	2e85a300 	.word	0x2e85a300
 80128fc:	248d3132 	.word	0x248d3132
 8012900:	43800000 	.word	0x43800000
 8012904:	08015328 	.word	0x08015328

08012908 <atanf>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	ee10 5a10 	vmov	r5, s0
 801290e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012912:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012916:	eef0 7a40 	vmov.f32	s15, s0
 801291a:	d310      	bcc.n	801293e <atanf+0x36>
 801291c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012920:	d904      	bls.n	801292c <atanf+0x24>
 8012922:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012926:	eeb0 0a67 	vmov.f32	s0, s15
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012a64 <atanf+0x15c>
 8012930:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012a68 <atanf+0x160>
 8012934:	2d00      	cmp	r5, #0
 8012936:	bfc8      	it	gt
 8012938:	eef0 7a47 	vmovgt.f32	s15, s14
 801293c:	e7f3      	b.n	8012926 <atanf+0x1e>
 801293e:	4b4b      	ldr	r3, [pc, #300]	@ (8012a6c <atanf+0x164>)
 8012940:	429c      	cmp	r4, r3
 8012942:	d810      	bhi.n	8012966 <atanf+0x5e>
 8012944:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012948:	d20a      	bcs.n	8012960 <atanf+0x58>
 801294a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012a70 <atanf+0x168>
 801294e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012956:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	dce2      	bgt.n	8012926 <atanf+0x1e>
 8012960:	f04f 33ff 	mov.w	r3, #4294967295
 8012964:	e013      	b.n	801298e <atanf+0x86>
 8012966:	f7fe fabb 	bl	8010ee0 <fabsf>
 801296a:	4b42      	ldr	r3, [pc, #264]	@ (8012a74 <atanf+0x16c>)
 801296c:	429c      	cmp	r4, r3
 801296e:	d84f      	bhi.n	8012a10 <atanf+0x108>
 8012970:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012974:	429c      	cmp	r4, r3
 8012976:	d841      	bhi.n	80129fc <atanf+0xf4>
 8012978:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801297c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012980:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012984:	2300      	movs	r3, #0
 8012986:	ee30 0a27 	vadd.f32	s0, s0, s15
 801298a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012994:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012a78 <atanf+0x170>
 8012998:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012a7c <atanf+0x174>
 801299c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012a80 <atanf+0x178>
 80129a0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80129a4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80129a8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012a84 <atanf+0x17c>
 80129ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80129b0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012a88 <atanf+0x180>
 80129b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80129b8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012a8c <atanf+0x184>
 80129bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80129c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012a90 <atanf+0x188>
 80129c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80129c8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012a94 <atanf+0x18c>
 80129cc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80129d0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012a98 <atanf+0x190>
 80129d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80129d8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012a9c <atanf+0x194>
 80129dc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80129e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012aa0 <atanf+0x198>
 80129e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80129e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80129ec:	eea5 7a86 	vfma.f32	s14, s11, s12
 80129f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80129f4:	d121      	bne.n	8012a3a <atanf+0x132>
 80129f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129fa:	e794      	b.n	8012926 <atanf+0x1e>
 80129fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012a00:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a08:	2301      	movs	r3, #1
 8012a0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012a0e:	e7be      	b.n	801298e <atanf+0x86>
 8012a10:	4b24      	ldr	r3, [pc, #144]	@ (8012aa4 <atanf+0x19c>)
 8012a12:	429c      	cmp	r4, r3
 8012a14:	d80b      	bhi.n	8012a2e <atanf+0x126>
 8012a16:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012a1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012a22:	2302      	movs	r3, #2
 8012a24:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a2c:	e7af      	b.n	801298e <atanf+0x86>
 8012a2e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012a32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012a36:	2303      	movs	r3, #3
 8012a38:	e7a9      	b.n	801298e <atanf+0x86>
 8012a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8012aa8 <atanf+0x1a0>)
 8012a3c:	491b      	ldr	r1, [pc, #108]	@ (8012aac <atanf+0x1a4>)
 8012a3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012a42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012a46:	edd3 6a00 	vldr	s13, [r3]
 8012a4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012a4e:	2d00      	cmp	r5, #0
 8012a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a54:	edd2 7a00 	vldr	s15, [r2]
 8012a58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a5c:	bfb8      	it	lt
 8012a5e:	eef1 7a67 	vneglt.f32	s15, s15
 8012a62:	e760      	b.n	8012926 <atanf+0x1e>
 8012a64:	bfc90fdb 	.word	0xbfc90fdb
 8012a68:	3fc90fdb 	.word	0x3fc90fdb
 8012a6c:	3edfffff 	.word	0x3edfffff
 8012a70:	7149f2ca 	.word	0x7149f2ca
 8012a74:	3f97ffff 	.word	0x3f97ffff
 8012a78:	3c8569d7 	.word	0x3c8569d7
 8012a7c:	3d4bda59 	.word	0x3d4bda59
 8012a80:	bd6ef16b 	.word	0xbd6ef16b
 8012a84:	3d886b35 	.word	0x3d886b35
 8012a88:	3dba2e6e 	.word	0x3dba2e6e
 8012a8c:	3e124925 	.word	0x3e124925
 8012a90:	3eaaaaab 	.word	0x3eaaaaab
 8012a94:	bd15a221 	.word	0xbd15a221
 8012a98:	bd9d8795 	.word	0xbd9d8795
 8012a9c:	bde38e38 	.word	0xbde38e38
 8012aa0:	be4ccccd 	.word	0xbe4ccccd
 8012aa4:	401bffff 	.word	0x401bffff
 8012aa8:	08015650 	.word	0x08015650
 8012aac:	08015640 	.word	0x08015640

08012ab0 <scalbn>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	ec55 4b10 	vmov	r4, r5, d0
 8012ab6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012aba:	4606      	mov	r6, r0
 8012abc:	462b      	mov	r3, r5
 8012abe:	b991      	cbnz	r1, 8012ae6 <scalbn+0x36>
 8012ac0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012ac4:	4323      	orrs	r3, r4
 8012ac6:	d03d      	beq.n	8012b44 <scalbn+0x94>
 8012ac8:	4b35      	ldr	r3, [pc, #212]	@ (8012ba0 <scalbn+0xf0>)
 8012aca:	4620      	mov	r0, r4
 8012acc:	4629      	mov	r1, r5
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f7f3 f8ba 	bl	8005c48 <__aeabi_dmul>
 8012ad4:	4b33      	ldr	r3, [pc, #204]	@ (8012ba4 <scalbn+0xf4>)
 8012ad6:	429e      	cmp	r6, r3
 8012ad8:	4604      	mov	r4, r0
 8012ada:	460d      	mov	r5, r1
 8012adc:	da0f      	bge.n	8012afe <scalbn+0x4e>
 8012ade:	a328      	add	r3, pc, #160	@ (adr r3, 8012b80 <scalbn+0xd0>)
 8012ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae4:	e01e      	b.n	8012b24 <scalbn+0x74>
 8012ae6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012aea:	4291      	cmp	r1, r2
 8012aec:	d10b      	bne.n	8012b06 <scalbn+0x56>
 8012aee:	4622      	mov	r2, r4
 8012af0:	4620      	mov	r0, r4
 8012af2:	4629      	mov	r1, r5
 8012af4:	f7f2 fef2 	bl	80058dc <__adddf3>
 8012af8:	4604      	mov	r4, r0
 8012afa:	460d      	mov	r5, r1
 8012afc:	e022      	b.n	8012b44 <scalbn+0x94>
 8012afe:	460b      	mov	r3, r1
 8012b00:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012b04:	3936      	subs	r1, #54	@ 0x36
 8012b06:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012b0a:	4296      	cmp	r6, r2
 8012b0c:	dd0d      	ble.n	8012b2a <scalbn+0x7a>
 8012b0e:	2d00      	cmp	r5, #0
 8012b10:	a11d      	add	r1, pc, #116	@ (adr r1, 8012b88 <scalbn+0xd8>)
 8012b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b16:	da02      	bge.n	8012b1e <scalbn+0x6e>
 8012b18:	a11d      	add	r1, pc, #116	@ (adr r1, 8012b90 <scalbn+0xe0>)
 8012b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8012b88 <scalbn+0xd8>)
 8012b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b24:	f7f3 f890 	bl	8005c48 <__aeabi_dmul>
 8012b28:	e7e6      	b.n	8012af8 <scalbn+0x48>
 8012b2a:	1872      	adds	r2, r6, r1
 8012b2c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012b30:	428a      	cmp	r2, r1
 8012b32:	dcec      	bgt.n	8012b0e <scalbn+0x5e>
 8012b34:	2a00      	cmp	r2, #0
 8012b36:	dd08      	ble.n	8012b4a <scalbn+0x9a>
 8012b38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012b3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012b40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b44:	ec45 4b10 	vmov	d0, r4, r5
 8012b48:	bd70      	pop	{r4, r5, r6, pc}
 8012b4a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012b4e:	da08      	bge.n	8012b62 <scalbn+0xb2>
 8012b50:	2d00      	cmp	r5, #0
 8012b52:	a10b      	add	r1, pc, #44	@ (adr r1, 8012b80 <scalbn+0xd0>)
 8012b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b58:	dac1      	bge.n	8012ade <scalbn+0x2e>
 8012b5a:	a10f      	add	r1, pc, #60	@ (adr r1, 8012b98 <scalbn+0xe8>)
 8012b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b60:	e7bd      	b.n	8012ade <scalbn+0x2e>
 8012b62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012b66:	3236      	adds	r2, #54	@ 0x36
 8012b68:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b70:	4620      	mov	r0, r4
 8012b72:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba8 <scalbn+0xf8>)
 8012b74:	4629      	mov	r1, r5
 8012b76:	2200      	movs	r2, #0
 8012b78:	e7d4      	b.n	8012b24 <scalbn+0x74>
 8012b7a:	bf00      	nop
 8012b7c:	f3af 8000 	nop.w
 8012b80:	c2f8f359 	.word	0xc2f8f359
 8012b84:	01a56e1f 	.word	0x01a56e1f
 8012b88:	8800759c 	.word	0x8800759c
 8012b8c:	7e37e43c 	.word	0x7e37e43c
 8012b90:	8800759c 	.word	0x8800759c
 8012b94:	fe37e43c 	.word	0xfe37e43c
 8012b98:	c2f8f359 	.word	0xc2f8f359
 8012b9c:	81a56e1f 	.word	0x81a56e1f
 8012ba0:	43500000 	.word	0x43500000
 8012ba4:	ffff3cb0 	.word	0xffff3cb0
 8012ba8:	3c900000 	.word	0x3c900000
 8012bac:	00000000 	.word	0x00000000

08012bb0 <__kernel_rem_pio2>:
 8012bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb4:	ed2d 8b02 	vpush	{d8}
 8012bb8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012bbc:	f112 0f14 	cmn.w	r2, #20
 8012bc0:	9306      	str	r3, [sp, #24]
 8012bc2:	9104      	str	r1, [sp, #16]
 8012bc4:	4bbe      	ldr	r3, [pc, #760]	@ (8012ec0 <__kernel_rem_pio2+0x310>)
 8012bc6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012bc8:	9008      	str	r0, [sp, #32]
 8012bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	9b06      	ldr	r3, [sp, #24]
 8012bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012bd6:	bfa8      	it	ge
 8012bd8:	1ed4      	subge	r4, r2, #3
 8012bda:	9305      	str	r3, [sp, #20]
 8012bdc:	bfb2      	itee	lt
 8012bde:	2400      	movlt	r4, #0
 8012be0:	2318      	movge	r3, #24
 8012be2:	fb94 f4f3 	sdivge	r4, r4, r3
 8012be6:	f06f 0317 	mvn.w	r3, #23
 8012bea:	fb04 3303 	mla	r3, r4, r3, r3
 8012bee:	eb03 0b02 	add.w	fp, r3, r2
 8012bf2:	9b00      	ldr	r3, [sp, #0]
 8012bf4:	9a05      	ldr	r2, [sp, #20]
 8012bf6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012eb0 <__kernel_rem_pio2+0x300>
 8012bfa:	eb03 0802 	add.w	r8, r3, r2
 8012bfe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012c00:	1aa7      	subs	r7, r4, r2
 8012c02:	ae20      	add	r6, sp, #128	@ 0x80
 8012c04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012c08:	2500      	movs	r5, #0
 8012c0a:	4545      	cmp	r5, r8
 8012c0c:	dd13      	ble.n	8012c36 <__kernel_rem_pio2+0x86>
 8012c0e:	9b06      	ldr	r3, [sp, #24]
 8012c10:	aa20      	add	r2, sp, #128	@ 0x80
 8012c12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012c16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012c1a:	f04f 0800 	mov.w	r8, #0
 8012c1e:	9b00      	ldr	r3, [sp, #0]
 8012c20:	4598      	cmp	r8, r3
 8012c22:	dc31      	bgt.n	8012c88 <__kernel_rem_pio2+0xd8>
 8012c24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012eb0 <__kernel_rem_pio2+0x300>
 8012c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c30:	462f      	mov	r7, r5
 8012c32:	2600      	movs	r6, #0
 8012c34:	e01b      	b.n	8012c6e <__kernel_rem_pio2+0xbe>
 8012c36:	42ef      	cmn	r7, r5
 8012c38:	d407      	bmi.n	8012c4a <__kernel_rem_pio2+0x9a>
 8012c3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012c3e:	f7f2 ff99 	bl	8005b74 <__aeabi_i2d>
 8012c42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c46:	3501      	adds	r5, #1
 8012c48:	e7df      	b.n	8012c0a <__kernel_rem_pio2+0x5a>
 8012c4a:	ec51 0b18 	vmov	r0, r1, d8
 8012c4e:	e7f8      	b.n	8012c42 <__kernel_rem_pio2+0x92>
 8012c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012c58:	f7f2 fff6 	bl	8005c48 <__aeabi_dmul>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c64:	f7f2 fe3a 	bl	80058dc <__adddf3>
 8012c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c6c:	3601      	adds	r6, #1
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	429e      	cmp	r6, r3
 8012c72:	f1a7 0708 	sub.w	r7, r7, #8
 8012c76:	ddeb      	ble.n	8012c50 <__kernel_rem_pio2+0xa0>
 8012c78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c7c:	f108 0801 	add.w	r8, r8, #1
 8012c80:	ecaa 7b02 	vstmia	sl!, {d7}
 8012c84:	3508      	adds	r5, #8
 8012c86:	e7ca      	b.n	8012c1e <__kernel_rem_pio2+0x6e>
 8012c88:	9b00      	ldr	r3, [sp, #0]
 8012c8a:	f8dd 8000 	ldr.w	r8, [sp]
 8012c8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012c90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c94:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012c98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ca4:	ab98      	add	r3, sp, #608	@ 0x260
 8012ca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012caa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012cae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cb2:	ac0c      	add	r4, sp, #48	@ 0x30
 8012cb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012cb6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012cba:	46a1      	mov	r9, r4
 8012cbc:	46c2      	mov	sl, r8
 8012cbe:	f1ba 0f00 	cmp.w	sl, #0
 8012cc2:	f1a5 0508 	sub.w	r5, r5, #8
 8012cc6:	dc77      	bgt.n	8012db8 <__kernel_rem_pio2+0x208>
 8012cc8:	4658      	mov	r0, fp
 8012cca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012cce:	f7ff feef 	bl	8012ab0 <scalbn>
 8012cd2:	ec57 6b10 	vmov	r6, r7, d0
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012cdc:	4630      	mov	r0, r6
 8012cde:	4639      	mov	r1, r7
 8012ce0:	f7f2 ffb2 	bl	8005c48 <__aeabi_dmul>
 8012ce4:	ec41 0b10 	vmov	d0, r0, r1
 8012ce8:	f7fe fa26 	bl	8011138 <floor>
 8012cec:	4b75      	ldr	r3, [pc, #468]	@ (8012ec4 <__kernel_rem_pio2+0x314>)
 8012cee:	ec51 0b10 	vmov	r0, r1, d0
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f7f2 ffa8 	bl	8005c48 <__aeabi_dmul>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	460b      	mov	r3, r1
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	4639      	mov	r1, r7
 8012d00:	f7f2 fdea 	bl	80058d8 <__aeabi_dsub>
 8012d04:	460f      	mov	r7, r1
 8012d06:	4606      	mov	r6, r0
 8012d08:	f7f3 fa4e 	bl	80061a8 <__aeabi_d2iz>
 8012d0c:	9002      	str	r0, [sp, #8]
 8012d0e:	f7f2 ff31 	bl	8005b74 <__aeabi_i2d>
 8012d12:	4602      	mov	r2, r0
 8012d14:	460b      	mov	r3, r1
 8012d16:	4630      	mov	r0, r6
 8012d18:	4639      	mov	r1, r7
 8012d1a:	f7f2 fddd 	bl	80058d8 <__aeabi_dsub>
 8012d1e:	f1bb 0f00 	cmp.w	fp, #0
 8012d22:	4606      	mov	r6, r0
 8012d24:	460f      	mov	r7, r1
 8012d26:	dd6c      	ble.n	8012e02 <__kernel_rem_pio2+0x252>
 8012d28:	f108 31ff 	add.w	r1, r8, #4294967295
 8012d2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8012d2e:	9d02      	ldr	r5, [sp, #8]
 8012d30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d34:	f1cb 0018 	rsb	r0, fp, #24
 8012d38:	fa43 f200 	asr.w	r2, r3, r0
 8012d3c:	4415      	add	r5, r2
 8012d3e:	4082      	lsls	r2, r0
 8012d40:	1a9b      	subs	r3, r3, r2
 8012d42:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d44:	9502      	str	r5, [sp, #8]
 8012d46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012d4a:	f1cb 0217 	rsb	r2, fp, #23
 8012d4e:	fa43 f902 	asr.w	r9, r3, r2
 8012d52:	f1b9 0f00 	cmp.w	r9, #0
 8012d56:	dd64      	ble.n	8012e22 <__kernel_rem_pio2+0x272>
 8012d58:	9b02      	ldr	r3, [sp, #8]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	9302      	str	r3, [sp, #8]
 8012d60:	4615      	mov	r5, r2
 8012d62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012d66:	4590      	cmp	r8, r2
 8012d68:	f300 80b8 	bgt.w	8012edc <__kernel_rem_pio2+0x32c>
 8012d6c:	f1bb 0f00 	cmp.w	fp, #0
 8012d70:	dd07      	ble.n	8012d82 <__kernel_rem_pio2+0x1d2>
 8012d72:	f1bb 0f01 	cmp.w	fp, #1
 8012d76:	f000 80bf 	beq.w	8012ef8 <__kernel_rem_pio2+0x348>
 8012d7a:	f1bb 0f02 	cmp.w	fp, #2
 8012d7e:	f000 80c6 	beq.w	8012f0e <__kernel_rem_pio2+0x35e>
 8012d82:	f1b9 0f02 	cmp.w	r9, #2
 8012d86:	d14c      	bne.n	8012e22 <__kernel_rem_pio2+0x272>
 8012d88:	4632      	mov	r2, r6
 8012d8a:	463b      	mov	r3, r7
 8012d8c:	494e      	ldr	r1, [pc, #312]	@ (8012ec8 <__kernel_rem_pio2+0x318>)
 8012d8e:	2000      	movs	r0, #0
 8012d90:	f7f2 fda2 	bl	80058d8 <__aeabi_dsub>
 8012d94:	4606      	mov	r6, r0
 8012d96:	460f      	mov	r7, r1
 8012d98:	2d00      	cmp	r5, #0
 8012d9a:	d042      	beq.n	8012e22 <__kernel_rem_pio2+0x272>
 8012d9c:	4658      	mov	r0, fp
 8012d9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012eb8 <__kernel_rem_pio2+0x308>
 8012da2:	f7ff fe85 	bl	8012ab0 <scalbn>
 8012da6:	4630      	mov	r0, r6
 8012da8:	4639      	mov	r1, r7
 8012daa:	ec53 2b10 	vmov	r2, r3, d0
 8012dae:	f7f2 fd93 	bl	80058d8 <__aeabi_dsub>
 8012db2:	4606      	mov	r6, r0
 8012db4:	460f      	mov	r7, r1
 8012db6:	e034      	b.n	8012e22 <__kernel_rem_pio2+0x272>
 8012db8:	4b44      	ldr	r3, [pc, #272]	@ (8012ecc <__kernel_rem_pio2+0x31c>)
 8012dba:	2200      	movs	r2, #0
 8012dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dc0:	f7f2 ff42 	bl	8005c48 <__aeabi_dmul>
 8012dc4:	f7f3 f9f0 	bl	80061a8 <__aeabi_d2iz>
 8012dc8:	f7f2 fed4 	bl	8005b74 <__aeabi_i2d>
 8012dcc:	4b40      	ldr	r3, [pc, #256]	@ (8012ed0 <__kernel_rem_pio2+0x320>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	460f      	mov	r7, r1
 8012dd4:	f7f2 ff38 	bl	8005c48 <__aeabi_dmul>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	460b      	mov	r3, r1
 8012ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012de0:	f7f2 fd7a 	bl	80058d8 <__aeabi_dsub>
 8012de4:	f7f3 f9e0 	bl	80061a8 <__aeabi_d2iz>
 8012de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dec:	f849 0b04 	str.w	r0, [r9], #4
 8012df0:	4639      	mov	r1, r7
 8012df2:	4630      	mov	r0, r6
 8012df4:	f7f2 fd72 	bl	80058dc <__adddf3>
 8012df8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e00:	e75d      	b.n	8012cbe <__kernel_rem_pio2+0x10e>
 8012e02:	d107      	bne.n	8012e14 <__kernel_rem_pio2+0x264>
 8012e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e08:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012e12:	e79e      	b.n	8012d52 <__kernel_rem_pio2+0x1a2>
 8012e14:	4b2f      	ldr	r3, [pc, #188]	@ (8012ed4 <__kernel_rem_pio2+0x324>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	f7f3 f99c 	bl	8006154 <__aeabi_dcmpge>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d143      	bne.n	8012ea8 <__kernel_rem_pio2+0x2f8>
 8012e20:	4681      	mov	r9, r0
 8012e22:	2200      	movs	r2, #0
 8012e24:	2300      	movs	r3, #0
 8012e26:	4630      	mov	r0, r6
 8012e28:	4639      	mov	r1, r7
 8012e2a:	f7f3 f975 	bl	8006118 <__aeabi_dcmpeq>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	f000 80bf 	beq.w	8012fb2 <__kernel_rem_pio2+0x402>
 8012e34:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e38:	2200      	movs	r2, #0
 8012e3a:	9900      	ldr	r1, [sp, #0]
 8012e3c:	428b      	cmp	r3, r1
 8012e3e:	da6e      	bge.n	8012f1e <__kernel_rem_pio2+0x36e>
 8012e40:	2a00      	cmp	r2, #0
 8012e42:	f000 8089 	beq.w	8012f58 <__kernel_rem_pio2+0x3a8>
 8012e46:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012e4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8012e50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d0f6      	beq.n	8012e46 <__kernel_rem_pio2+0x296>
 8012e58:	4658      	mov	r0, fp
 8012e5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012eb8 <__kernel_rem_pio2+0x308>
 8012e5e:	f7ff fe27 	bl	8012ab0 <scalbn>
 8012e62:	f108 0301 	add.w	r3, r8, #1
 8012e66:	00da      	lsls	r2, r3, #3
 8012e68:	9205      	str	r2, [sp, #20]
 8012e6a:	ec55 4b10 	vmov	r4, r5, d0
 8012e6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012e70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8012ecc <__kernel_rem_pio2+0x31c>
 8012e74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012e78:	4646      	mov	r6, r8
 8012e7a:	f04f 0a00 	mov.w	sl, #0
 8012e7e:	2e00      	cmp	r6, #0
 8012e80:	f280 80cf 	bge.w	8013022 <__kernel_rem_pio2+0x472>
 8012e84:	4644      	mov	r4, r8
 8012e86:	2c00      	cmp	r4, #0
 8012e88:	f2c0 80fd 	blt.w	8013086 <__kernel_rem_pio2+0x4d6>
 8012e8c:	4b12      	ldr	r3, [pc, #72]	@ (8012ed8 <__kernel_rem_pio2+0x328>)
 8012e8e:	461f      	mov	r7, r3
 8012e90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012e92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e96:	9306      	str	r3, [sp, #24]
 8012e98:	f04f 0a00 	mov.w	sl, #0
 8012e9c:	f04f 0b00 	mov.w	fp, #0
 8012ea0:	2600      	movs	r6, #0
 8012ea2:	eba8 0504 	sub.w	r5, r8, r4
 8012ea6:	e0e2      	b.n	801306e <__kernel_rem_pio2+0x4be>
 8012ea8:	f04f 0902 	mov.w	r9, #2
 8012eac:	e754      	b.n	8012d58 <__kernel_rem_pio2+0x1a8>
 8012eae:	bf00      	nop
	...
 8012ebc:	3ff00000 	.word	0x3ff00000
 8012ec0:	080156a0 	.word	0x080156a0
 8012ec4:	40200000 	.word	0x40200000
 8012ec8:	3ff00000 	.word	0x3ff00000
 8012ecc:	3e700000 	.word	0x3e700000
 8012ed0:	41700000 	.word	0x41700000
 8012ed4:	3fe00000 	.word	0x3fe00000
 8012ed8:	08015660 	.word	0x08015660
 8012edc:	f854 3b04 	ldr.w	r3, [r4], #4
 8012ee0:	b945      	cbnz	r5, 8012ef4 <__kernel_rem_pio2+0x344>
 8012ee2:	b123      	cbz	r3, 8012eee <__kernel_rem_pio2+0x33e>
 8012ee4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012ee8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012eec:	2301      	movs	r3, #1
 8012eee:	3201      	adds	r2, #1
 8012ef0:	461d      	mov	r5, r3
 8012ef2:	e738      	b.n	8012d66 <__kernel_rem_pio2+0x1b6>
 8012ef4:	1acb      	subs	r3, r1, r3
 8012ef6:	e7f7      	b.n	8012ee8 <__kernel_rem_pio2+0x338>
 8012ef8:	f108 32ff 	add.w	r2, r8, #4294967295
 8012efc:	ab0c      	add	r3, sp, #48	@ 0x30
 8012efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012f06:	a90c      	add	r1, sp, #48	@ 0x30
 8012f08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012f0c:	e739      	b.n	8012d82 <__kernel_rem_pio2+0x1d2>
 8012f0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8012f12:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f1c:	e7f3      	b.n	8012f06 <__kernel_rem_pio2+0x356>
 8012f1e:	a90c      	add	r1, sp, #48	@ 0x30
 8012f20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	430a      	orrs	r2, r1
 8012f28:	e787      	b.n	8012e3a <__kernel_rem_pio2+0x28a>
 8012f2a:	3401      	adds	r4, #1
 8012f2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012f30:	2a00      	cmp	r2, #0
 8012f32:	d0fa      	beq.n	8012f2a <__kernel_rem_pio2+0x37a>
 8012f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012f3a:	eb0d 0503 	add.w	r5, sp, r3
 8012f3e:	9b06      	ldr	r3, [sp, #24]
 8012f40:	aa20      	add	r2, sp, #128	@ 0x80
 8012f42:	4443      	add	r3, r8
 8012f44:	f108 0701 	add.w	r7, r8, #1
 8012f48:	3d98      	subs	r5, #152	@ 0x98
 8012f4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012f4e:	4444      	add	r4, r8
 8012f50:	42bc      	cmp	r4, r7
 8012f52:	da04      	bge.n	8012f5e <__kernel_rem_pio2+0x3ae>
 8012f54:	46a0      	mov	r8, r4
 8012f56:	e6a2      	b.n	8012c9e <__kernel_rem_pio2+0xee>
 8012f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f5a:	2401      	movs	r4, #1
 8012f5c:	e7e6      	b.n	8012f2c <__kernel_rem_pio2+0x37c>
 8012f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012f64:	f7f2 fe06 	bl	8005b74 <__aeabi_i2d>
 8012f68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013230 <__kernel_rem_pio2+0x680>
 8012f6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f78:	46b2      	mov	sl, r6
 8012f7a:	f04f 0800 	mov.w	r8, #0
 8012f7e:	9b05      	ldr	r3, [sp, #20]
 8012f80:	4598      	cmp	r8, r3
 8012f82:	dd05      	ble.n	8012f90 <__kernel_rem_pio2+0x3e0>
 8012f84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f88:	3701      	adds	r7, #1
 8012f8a:	eca5 7b02 	vstmia	r5!, {d7}
 8012f8e:	e7df      	b.n	8012f50 <__kernel_rem_pio2+0x3a0>
 8012f90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012f94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012f98:	f7f2 fe56 	bl	8005c48 <__aeabi_dmul>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fa4:	f7f2 fc9a 	bl	80058dc <__adddf3>
 8012fa8:	f108 0801 	add.w	r8, r8, #1
 8012fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fb0:	e7e5      	b.n	8012f7e <__kernel_rem_pio2+0x3ce>
 8012fb2:	f1cb 0000 	rsb	r0, fp, #0
 8012fb6:	ec47 6b10 	vmov	d0, r6, r7
 8012fba:	f7ff fd79 	bl	8012ab0 <scalbn>
 8012fbe:	ec55 4b10 	vmov	r4, r5, d0
 8012fc2:	4b9d      	ldr	r3, [pc, #628]	@ (8013238 <__kernel_rem_pio2+0x688>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	4629      	mov	r1, r5
 8012fca:	f7f3 f8c3 	bl	8006154 <__aeabi_dcmpge>
 8012fce:	b300      	cbz	r0, 8013012 <__kernel_rem_pio2+0x462>
 8012fd0:	4b9a      	ldr	r3, [pc, #616]	@ (801323c <__kernel_rem_pio2+0x68c>)
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	f7f2 fe36 	bl	8005c48 <__aeabi_dmul>
 8012fdc:	f7f3 f8e4 	bl	80061a8 <__aeabi_d2iz>
 8012fe0:	4606      	mov	r6, r0
 8012fe2:	f7f2 fdc7 	bl	8005b74 <__aeabi_i2d>
 8012fe6:	4b94      	ldr	r3, [pc, #592]	@ (8013238 <__kernel_rem_pio2+0x688>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	f7f2 fe2d 	bl	8005c48 <__aeabi_dmul>
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	f7f2 fc6f 	bl	80058d8 <__aeabi_dsub>
 8012ffa:	f7f3 f8d5 	bl	80061a8 <__aeabi_d2iz>
 8012ffe:	ab0c      	add	r3, sp, #48	@ 0x30
 8013000:	f10b 0b18 	add.w	fp, fp, #24
 8013004:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013008:	f108 0801 	add.w	r8, r8, #1
 801300c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013010:	e722      	b.n	8012e58 <__kernel_rem_pio2+0x2a8>
 8013012:	4620      	mov	r0, r4
 8013014:	4629      	mov	r1, r5
 8013016:	f7f3 f8c7 	bl	80061a8 <__aeabi_d2iz>
 801301a:	ab0c      	add	r3, sp, #48	@ 0x30
 801301c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013020:	e71a      	b.n	8012e58 <__kernel_rem_pio2+0x2a8>
 8013022:	ab0c      	add	r3, sp, #48	@ 0x30
 8013024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013028:	f7f2 fda4 	bl	8005b74 <__aeabi_i2d>
 801302c:	4622      	mov	r2, r4
 801302e:	462b      	mov	r3, r5
 8013030:	f7f2 fe0a 	bl	8005c48 <__aeabi_dmul>
 8013034:	4652      	mov	r2, sl
 8013036:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801303a:	465b      	mov	r3, fp
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7f2 fe02 	bl	8005c48 <__aeabi_dmul>
 8013044:	3e01      	subs	r6, #1
 8013046:	4604      	mov	r4, r0
 8013048:	460d      	mov	r5, r1
 801304a:	e718      	b.n	8012e7e <__kernel_rem_pio2+0x2ce>
 801304c:	9906      	ldr	r1, [sp, #24]
 801304e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013052:	9106      	str	r1, [sp, #24]
 8013054:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013058:	f7f2 fdf6 	bl	8005c48 <__aeabi_dmul>
 801305c:	4602      	mov	r2, r0
 801305e:	460b      	mov	r3, r1
 8013060:	4650      	mov	r0, sl
 8013062:	4659      	mov	r1, fp
 8013064:	f7f2 fc3a 	bl	80058dc <__adddf3>
 8013068:	3601      	adds	r6, #1
 801306a:	4682      	mov	sl, r0
 801306c:	468b      	mov	fp, r1
 801306e:	9b00      	ldr	r3, [sp, #0]
 8013070:	429e      	cmp	r6, r3
 8013072:	dc01      	bgt.n	8013078 <__kernel_rem_pio2+0x4c8>
 8013074:	42b5      	cmp	r5, r6
 8013076:	dae9      	bge.n	801304c <__kernel_rem_pio2+0x49c>
 8013078:	ab48      	add	r3, sp, #288	@ 0x120
 801307a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801307e:	e9c5 ab00 	strd	sl, fp, [r5]
 8013082:	3c01      	subs	r4, #1
 8013084:	e6ff      	b.n	8012e86 <__kernel_rem_pio2+0x2d6>
 8013086:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013088:	2b02      	cmp	r3, #2
 801308a:	dc0b      	bgt.n	80130a4 <__kernel_rem_pio2+0x4f4>
 801308c:	2b00      	cmp	r3, #0
 801308e:	dc39      	bgt.n	8013104 <__kernel_rem_pio2+0x554>
 8013090:	d05d      	beq.n	801314e <__kernel_rem_pio2+0x59e>
 8013092:	9b02      	ldr	r3, [sp, #8]
 8013094:	f003 0007 	and.w	r0, r3, #7
 8013098:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801309c:	ecbd 8b02 	vpop	{d8}
 80130a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80130a6:	2b03      	cmp	r3, #3
 80130a8:	d1f3      	bne.n	8013092 <__kernel_rem_pio2+0x4e2>
 80130aa:	9b05      	ldr	r3, [sp, #20]
 80130ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80130b0:	eb0d 0403 	add.w	r4, sp, r3
 80130b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80130b8:	4625      	mov	r5, r4
 80130ba:	46c2      	mov	sl, r8
 80130bc:	f1ba 0f00 	cmp.w	sl, #0
 80130c0:	f1a5 0508 	sub.w	r5, r5, #8
 80130c4:	dc6b      	bgt.n	801319e <__kernel_rem_pio2+0x5ee>
 80130c6:	4645      	mov	r5, r8
 80130c8:	2d01      	cmp	r5, #1
 80130ca:	f1a4 0408 	sub.w	r4, r4, #8
 80130ce:	f300 8087 	bgt.w	80131e0 <__kernel_rem_pio2+0x630>
 80130d2:	9c05      	ldr	r4, [sp, #20]
 80130d4:	ab48      	add	r3, sp, #288	@ 0x120
 80130d6:	441c      	add	r4, r3
 80130d8:	2000      	movs	r0, #0
 80130da:	2100      	movs	r1, #0
 80130dc:	f1b8 0f01 	cmp.w	r8, #1
 80130e0:	f300 809c 	bgt.w	801321c <__kernel_rem_pio2+0x66c>
 80130e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80130e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80130ec:	f1b9 0f00 	cmp.w	r9, #0
 80130f0:	f040 80a6 	bne.w	8013240 <__kernel_rem_pio2+0x690>
 80130f4:	9b04      	ldr	r3, [sp, #16]
 80130f6:	e9c3 7800 	strd	r7, r8, [r3]
 80130fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80130fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013102:	e7c6      	b.n	8013092 <__kernel_rem_pio2+0x4e2>
 8013104:	9d05      	ldr	r5, [sp, #20]
 8013106:	ab48      	add	r3, sp, #288	@ 0x120
 8013108:	441d      	add	r5, r3
 801310a:	4644      	mov	r4, r8
 801310c:	2000      	movs	r0, #0
 801310e:	2100      	movs	r1, #0
 8013110:	2c00      	cmp	r4, #0
 8013112:	da35      	bge.n	8013180 <__kernel_rem_pio2+0x5d0>
 8013114:	f1b9 0f00 	cmp.w	r9, #0
 8013118:	d038      	beq.n	801318c <__kernel_rem_pio2+0x5dc>
 801311a:	4602      	mov	r2, r0
 801311c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013120:	9c04      	ldr	r4, [sp, #16]
 8013122:	e9c4 2300 	strd	r2, r3, [r4]
 8013126:	4602      	mov	r2, r0
 8013128:	460b      	mov	r3, r1
 801312a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801312e:	f7f2 fbd3 	bl	80058d8 <__aeabi_dsub>
 8013132:	ad4a      	add	r5, sp, #296	@ 0x128
 8013134:	2401      	movs	r4, #1
 8013136:	45a0      	cmp	r8, r4
 8013138:	da2b      	bge.n	8013192 <__kernel_rem_pio2+0x5e2>
 801313a:	f1b9 0f00 	cmp.w	r9, #0
 801313e:	d002      	beq.n	8013146 <__kernel_rem_pio2+0x596>
 8013140:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013144:	4619      	mov	r1, r3
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801314c:	e7a1      	b.n	8013092 <__kernel_rem_pio2+0x4e2>
 801314e:	9c05      	ldr	r4, [sp, #20]
 8013150:	ab48      	add	r3, sp, #288	@ 0x120
 8013152:	441c      	add	r4, r3
 8013154:	2000      	movs	r0, #0
 8013156:	2100      	movs	r1, #0
 8013158:	f1b8 0f00 	cmp.w	r8, #0
 801315c:	da09      	bge.n	8013172 <__kernel_rem_pio2+0x5c2>
 801315e:	f1b9 0f00 	cmp.w	r9, #0
 8013162:	d002      	beq.n	801316a <__kernel_rem_pio2+0x5ba>
 8013164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013168:	4619      	mov	r1, r3
 801316a:	9b04      	ldr	r3, [sp, #16]
 801316c:	e9c3 0100 	strd	r0, r1, [r3]
 8013170:	e78f      	b.n	8013092 <__kernel_rem_pio2+0x4e2>
 8013172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013176:	f7f2 fbb1 	bl	80058dc <__adddf3>
 801317a:	f108 38ff 	add.w	r8, r8, #4294967295
 801317e:	e7eb      	b.n	8013158 <__kernel_rem_pio2+0x5a8>
 8013180:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013184:	f7f2 fbaa 	bl	80058dc <__adddf3>
 8013188:	3c01      	subs	r4, #1
 801318a:	e7c1      	b.n	8013110 <__kernel_rem_pio2+0x560>
 801318c:	4602      	mov	r2, r0
 801318e:	460b      	mov	r3, r1
 8013190:	e7c6      	b.n	8013120 <__kernel_rem_pio2+0x570>
 8013192:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013196:	f7f2 fba1 	bl	80058dc <__adddf3>
 801319a:	3401      	adds	r4, #1
 801319c:	e7cb      	b.n	8013136 <__kernel_rem_pio2+0x586>
 801319e:	ed95 7b00 	vldr	d7, [r5]
 80131a2:	ed8d 7b00 	vstr	d7, [sp]
 80131a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80131aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ae:	ec53 2b17 	vmov	r2, r3, d7
 80131b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80131b6:	f7f2 fb91 	bl	80058dc <__adddf3>
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	4606      	mov	r6, r0
 80131c0:	460f      	mov	r7, r1
 80131c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131c6:	f7f2 fb87 	bl	80058d8 <__aeabi_dsub>
 80131ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80131ce:	f7f2 fb85 	bl	80058dc <__adddf3>
 80131d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80131da:	e9c5 6700 	strd	r6, r7, [r5]
 80131de:	e76d      	b.n	80130bc <__kernel_rem_pio2+0x50c>
 80131e0:	ed94 7b00 	vldr	d7, [r4]
 80131e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80131e8:	ec51 0b17 	vmov	r0, r1, d7
 80131ec:	4652      	mov	r2, sl
 80131ee:	465b      	mov	r3, fp
 80131f0:	ed8d 7b00 	vstr	d7, [sp]
 80131f4:	f7f2 fb72 	bl	80058dc <__adddf3>
 80131f8:	4602      	mov	r2, r0
 80131fa:	460b      	mov	r3, r1
 80131fc:	4606      	mov	r6, r0
 80131fe:	460f      	mov	r7, r1
 8013200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013204:	f7f2 fb68 	bl	80058d8 <__aeabi_dsub>
 8013208:	4652      	mov	r2, sl
 801320a:	465b      	mov	r3, fp
 801320c:	f7f2 fb66 	bl	80058dc <__adddf3>
 8013210:	3d01      	subs	r5, #1
 8013212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013216:	e9c4 6700 	strd	r6, r7, [r4]
 801321a:	e755      	b.n	80130c8 <__kernel_rem_pio2+0x518>
 801321c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013220:	f7f2 fb5c 	bl	80058dc <__adddf3>
 8013224:	f108 38ff 	add.w	r8, r8, #4294967295
 8013228:	e758      	b.n	80130dc <__kernel_rem_pio2+0x52c>
 801322a:	bf00      	nop
 801322c:	f3af 8000 	nop.w
	...
 8013238:	41700000 	.word	0x41700000
 801323c:	3e700000 	.word	0x3e700000
 8013240:	9b04      	ldr	r3, [sp, #16]
 8013242:	9a04      	ldr	r2, [sp, #16]
 8013244:	601f      	str	r7, [r3, #0]
 8013246:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801324a:	605c      	str	r4, [r3, #4]
 801324c:	609d      	str	r5, [r3, #8]
 801324e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013252:	60d3      	str	r3, [r2, #12]
 8013254:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013258:	6110      	str	r0, [r2, #16]
 801325a:	6153      	str	r3, [r2, #20]
 801325c:	e719      	b.n	8013092 <__kernel_rem_pio2+0x4e2>
 801325e:	bf00      	nop

08013260 <__kernel_rem_pio2f>:
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	ed2d 8b04 	vpush	{d8-d9}
 8013268:	b0d9      	sub	sp, #356	@ 0x164
 801326a:	4690      	mov	r8, r2
 801326c:	9001      	str	r0, [sp, #4]
 801326e:	4ab9      	ldr	r2, [pc, #740]	@ (8013554 <__kernel_rem_pio2f+0x2f4>)
 8013270:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013272:	f118 0f04 	cmn.w	r8, #4
 8013276:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801327a:	460f      	mov	r7, r1
 801327c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013280:	db27      	blt.n	80132d2 <__kernel_rem_pio2f+0x72>
 8013282:	f1b8 0203 	subs.w	r2, r8, #3
 8013286:	bf48      	it	mi
 8013288:	f108 0204 	addmi.w	r2, r8, #4
 801328c:	10d2      	asrs	r2, r2, #3
 801328e:	1c55      	adds	r5, r2, #1
 8013290:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013292:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8013564 <__kernel_rem_pio2f+0x304>
 8013296:	00e8      	lsls	r0, r5, #3
 8013298:	eba2 060b 	sub.w	r6, r2, fp
 801329c:	9002      	str	r0, [sp, #8]
 801329e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80132a2:	eb0a 0c0b 	add.w	ip, sl, fp
 80132a6:	ac1c      	add	r4, sp, #112	@ 0x70
 80132a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80132ac:	2000      	movs	r0, #0
 80132ae:	4560      	cmp	r0, ip
 80132b0:	dd11      	ble.n	80132d6 <__kernel_rem_pio2f+0x76>
 80132b2:	a91c      	add	r1, sp, #112	@ 0x70
 80132b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80132b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80132bc:	f04f 0c00 	mov.w	ip, #0
 80132c0:	45d4      	cmp	ip, sl
 80132c2:	dc27      	bgt.n	8013314 <__kernel_rem_pio2f+0xb4>
 80132c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80132c8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8013564 <__kernel_rem_pio2f+0x304>
 80132cc:	4606      	mov	r6, r0
 80132ce:	2400      	movs	r4, #0
 80132d0:	e016      	b.n	8013300 <__kernel_rem_pio2f+0xa0>
 80132d2:	2200      	movs	r2, #0
 80132d4:	e7db      	b.n	801328e <__kernel_rem_pio2f+0x2e>
 80132d6:	42c6      	cmn	r6, r0
 80132d8:	bf5d      	ittte	pl
 80132da:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80132de:	ee07 1a90 	vmovpl	s15, r1
 80132e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80132e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80132ea:	ece4 7a01 	vstmia	r4!, {s15}
 80132ee:	3001      	adds	r0, #1
 80132f0:	e7dd      	b.n	80132ae <__kernel_rem_pio2f+0x4e>
 80132f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80132f6:	ed96 7a00 	vldr	s14, [r6]
 80132fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132fe:	3401      	adds	r4, #1
 8013300:	455c      	cmp	r4, fp
 8013302:	f1a6 0604 	sub.w	r6, r6, #4
 8013306:	ddf4      	ble.n	80132f2 <__kernel_rem_pio2f+0x92>
 8013308:	ece9 7a01 	vstmia	r9!, {s15}
 801330c:	f10c 0c01 	add.w	ip, ip, #1
 8013310:	3004      	adds	r0, #4
 8013312:	e7d5      	b.n	80132c0 <__kernel_rem_pio2f+0x60>
 8013314:	a908      	add	r1, sp, #32
 8013316:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801331a:	9104      	str	r1, [sp, #16]
 801331c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801331e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8013560 <__kernel_rem_pio2f+0x300>
 8013322:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801355c <__kernel_rem_pio2f+0x2fc>
 8013326:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801332a:	9203      	str	r2, [sp, #12]
 801332c:	4654      	mov	r4, sl
 801332e:	00a2      	lsls	r2, r4, #2
 8013330:	9205      	str	r2, [sp, #20]
 8013332:	aa58      	add	r2, sp, #352	@ 0x160
 8013334:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013338:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801333c:	a944      	add	r1, sp, #272	@ 0x110
 801333e:	aa08      	add	r2, sp, #32
 8013340:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013344:	4694      	mov	ip, r2
 8013346:	4626      	mov	r6, r4
 8013348:	2e00      	cmp	r6, #0
 801334a:	f1a0 0004 	sub.w	r0, r0, #4
 801334e:	dc4c      	bgt.n	80133ea <__kernel_rem_pio2f+0x18a>
 8013350:	4628      	mov	r0, r5
 8013352:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013356:	f000 f9f5 	bl	8013744 <scalbnf>
 801335a:	eeb0 8a40 	vmov.f32	s16, s0
 801335e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013362:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013366:	f000 fa53 	bl	8013810 <floorf>
 801336a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801336e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013372:	2d00      	cmp	r5, #0
 8013374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013378:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801337c:	ee17 9a90 	vmov	r9, s15
 8013380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013384:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013388:	dd41      	ble.n	801340e <__kernel_rem_pio2f+0x1ae>
 801338a:	f104 3cff 	add.w	ip, r4, #4294967295
 801338e:	a908      	add	r1, sp, #32
 8013390:	f1c5 0e08 	rsb	lr, r5, #8
 8013394:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013398:	fa46 f00e 	asr.w	r0, r6, lr
 801339c:	4481      	add	r9, r0
 801339e:	fa00 f00e 	lsl.w	r0, r0, lr
 80133a2:	1a36      	subs	r6, r6, r0
 80133a4:	f1c5 0007 	rsb	r0, r5, #7
 80133a8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80133ac:	4106      	asrs	r6, r0
 80133ae:	2e00      	cmp	r6, #0
 80133b0:	dd3c      	ble.n	801342c <__kernel_rem_pio2f+0x1cc>
 80133b2:	f04f 0e00 	mov.w	lr, #0
 80133b6:	f109 0901 	add.w	r9, r9, #1
 80133ba:	4670      	mov	r0, lr
 80133bc:	4574      	cmp	r4, lr
 80133be:	dc68      	bgt.n	8013492 <__kernel_rem_pio2f+0x232>
 80133c0:	2d00      	cmp	r5, #0
 80133c2:	dd03      	ble.n	80133cc <__kernel_rem_pio2f+0x16c>
 80133c4:	2d01      	cmp	r5, #1
 80133c6:	d074      	beq.n	80134b2 <__kernel_rem_pio2f+0x252>
 80133c8:	2d02      	cmp	r5, #2
 80133ca:	d07d      	beq.n	80134c8 <__kernel_rem_pio2f+0x268>
 80133cc:	2e02      	cmp	r6, #2
 80133ce:	d12d      	bne.n	801342c <__kernel_rem_pio2f+0x1cc>
 80133d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80133d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80133d8:	b340      	cbz	r0, 801342c <__kernel_rem_pio2f+0x1cc>
 80133da:	4628      	mov	r0, r5
 80133dc:	9306      	str	r3, [sp, #24]
 80133de:	f000 f9b1 	bl	8013744 <scalbnf>
 80133e2:	9b06      	ldr	r3, [sp, #24]
 80133e4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80133e8:	e020      	b.n	801342c <__kernel_rem_pio2f+0x1cc>
 80133ea:	ee60 7a28 	vmul.f32	s15, s0, s17
 80133ee:	3e01      	subs	r6, #1
 80133f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80133fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013400:	ecac 0a01 	vstmia	ip!, {s0}
 8013404:	ed90 0a00 	vldr	s0, [r0]
 8013408:	ee37 0a80 	vadd.f32	s0, s15, s0
 801340c:	e79c      	b.n	8013348 <__kernel_rem_pio2f+0xe8>
 801340e:	d105      	bne.n	801341c <__kernel_rem_pio2f+0x1bc>
 8013410:	1e60      	subs	r0, r4, #1
 8013412:	a908      	add	r1, sp, #32
 8013414:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013418:	11f6      	asrs	r6, r6, #7
 801341a:	e7c8      	b.n	80133ae <__kernel_rem_pio2f+0x14e>
 801341c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013420:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013428:	da31      	bge.n	801348e <__kernel_rem_pio2f+0x22e>
 801342a:	2600      	movs	r6, #0
 801342c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013434:	f040 8098 	bne.w	8013568 <__kernel_rem_pio2f+0x308>
 8013438:	1e60      	subs	r0, r4, #1
 801343a:	2200      	movs	r2, #0
 801343c:	4550      	cmp	r0, sl
 801343e:	da4b      	bge.n	80134d8 <__kernel_rem_pio2f+0x278>
 8013440:	2a00      	cmp	r2, #0
 8013442:	d065      	beq.n	8013510 <__kernel_rem_pio2f+0x2b0>
 8013444:	3c01      	subs	r4, #1
 8013446:	ab08      	add	r3, sp, #32
 8013448:	3d08      	subs	r5, #8
 801344a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d0f8      	beq.n	8013444 <__kernel_rem_pio2f+0x1e4>
 8013452:	4628      	mov	r0, r5
 8013454:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013458:	f000 f974 	bl	8013744 <scalbnf>
 801345c:	1c63      	adds	r3, r4, #1
 801345e:	aa44      	add	r2, sp, #272	@ 0x110
 8013460:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013560 <__kernel_rem_pio2f+0x300>
 8013464:	0099      	lsls	r1, r3, #2
 8013466:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801346a:	4623      	mov	r3, r4
 801346c:	2b00      	cmp	r3, #0
 801346e:	f280 80a9 	bge.w	80135c4 <__kernel_rem_pio2f+0x364>
 8013472:	4623      	mov	r3, r4
 8013474:	2b00      	cmp	r3, #0
 8013476:	f2c0 80c7 	blt.w	8013608 <__kernel_rem_pio2f+0x3a8>
 801347a:	aa44      	add	r2, sp, #272	@ 0x110
 801347c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013480:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013558 <__kernel_rem_pio2f+0x2f8>
 8013484:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013564 <__kernel_rem_pio2f+0x304>
 8013488:	2000      	movs	r0, #0
 801348a:	1ae2      	subs	r2, r4, r3
 801348c:	e0b1      	b.n	80135f2 <__kernel_rem_pio2f+0x392>
 801348e:	2602      	movs	r6, #2
 8013490:	e78f      	b.n	80133b2 <__kernel_rem_pio2f+0x152>
 8013492:	f852 1b04 	ldr.w	r1, [r2], #4
 8013496:	b948      	cbnz	r0, 80134ac <__kernel_rem_pio2f+0x24c>
 8013498:	b121      	cbz	r1, 80134a4 <__kernel_rem_pio2f+0x244>
 801349a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801349e:	f842 1c04 	str.w	r1, [r2, #-4]
 80134a2:	2101      	movs	r1, #1
 80134a4:	f10e 0e01 	add.w	lr, lr, #1
 80134a8:	4608      	mov	r0, r1
 80134aa:	e787      	b.n	80133bc <__kernel_rem_pio2f+0x15c>
 80134ac:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80134b0:	e7f5      	b.n	801349e <__kernel_rem_pio2f+0x23e>
 80134b2:	f104 3cff 	add.w	ip, r4, #4294967295
 80134b6:	aa08      	add	r2, sp, #32
 80134b8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80134bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80134c0:	a908      	add	r1, sp, #32
 80134c2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80134c6:	e781      	b.n	80133cc <__kernel_rem_pio2f+0x16c>
 80134c8:	f104 3cff 	add.w	ip, r4, #4294967295
 80134cc:	aa08      	add	r2, sp, #32
 80134ce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80134d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80134d6:	e7f3      	b.n	80134c0 <__kernel_rem_pio2f+0x260>
 80134d8:	a908      	add	r1, sp, #32
 80134da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80134de:	3801      	subs	r0, #1
 80134e0:	430a      	orrs	r2, r1
 80134e2:	e7ab      	b.n	801343c <__kernel_rem_pio2f+0x1dc>
 80134e4:	3201      	adds	r2, #1
 80134e6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80134ea:	2e00      	cmp	r6, #0
 80134ec:	d0fa      	beq.n	80134e4 <__kernel_rem_pio2f+0x284>
 80134ee:	9905      	ldr	r1, [sp, #20]
 80134f0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80134f4:	eb0d 0001 	add.w	r0, sp, r1
 80134f8:	18e6      	adds	r6, r4, r3
 80134fa:	a91c      	add	r1, sp, #112	@ 0x70
 80134fc:	f104 0c01 	add.w	ip, r4, #1
 8013500:	384c      	subs	r0, #76	@ 0x4c
 8013502:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013506:	4422      	add	r2, r4
 8013508:	4562      	cmp	r2, ip
 801350a:	da04      	bge.n	8013516 <__kernel_rem_pio2f+0x2b6>
 801350c:	4614      	mov	r4, r2
 801350e:	e70e      	b.n	801332e <__kernel_rem_pio2f+0xce>
 8013510:	9804      	ldr	r0, [sp, #16]
 8013512:	2201      	movs	r2, #1
 8013514:	e7e7      	b.n	80134e6 <__kernel_rem_pio2f+0x286>
 8013516:	9903      	ldr	r1, [sp, #12]
 8013518:	f8dd e004 	ldr.w	lr, [sp, #4]
 801351c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013520:	9105      	str	r1, [sp, #20]
 8013522:	ee07 1a90 	vmov	s15, r1
 8013526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801352a:	2400      	movs	r4, #0
 801352c:	ece6 7a01 	vstmia	r6!, {s15}
 8013530:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013564 <__kernel_rem_pio2f+0x304>
 8013534:	46b1      	mov	r9, r6
 8013536:	455c      	cmp	r4, fp
 8013538:	dd04      	ble.n	8013544 <__kernel_rem_pio2f+0x2e4>
 801353a:	ece0 7a01 	vstmia	r0!, {s15}
 801353e:	f10c 0c01 	add.w	ip, ip, #1
 8013542:	e7e1      	b.n	8013508 <__kernel_rem_pio2f+0x2a8>
 8013544:	ecfe 6a01 	vldmia	lr!, {s13}
 8013548:	ed39 7a01 	vldmdb	r9!, {s14}
 801354c:	3401      	adds	r4, #1
 801354e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013552:	e7f0      	b.n	8013536 <__kernel_rem_pio2f+0x2d6>
 8013554:	080156dc 	.word	0x080156dc
 8013558:	080156b0 	.word	0x080156b0
 801355c:	43800000 	.word	0x43800000
 8013560:	3b800000 	.word	0x3b800000
 8013564:	00000000 	.word	0x00000000
 8013568:	9b02      	ldr	r3, [sp, #8]
 801356a:	eeb0 0a48 	vmov.f32	s0, s16
 801356e:	eba3 0008 	sub.w	r0, r3, r8
 8013572:	f000 f8e7 	bl	8013744 <scalbnf>
 8013576:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801355c <__kernel_rem_pio2f+0x2fc>
 801357a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013582:	db19      	blt.n	80135b8 <__kernel_rem_pio2f+0x358>
 8013584:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013560 <__kernel_rem_pio2f+0x300>
 8013588:	ee60 7a27 	vmul.f32	s15, s0, s15
 801358c:	aa08      	add	r2, sp, #32
 801358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013592:	3508      	adds	r5, #8
 8013594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013598:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801359c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80135a4:	ee10 3a10 	vmov	r3, s0
 80135a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80135ac:	ee17 3a90 	vmov	r3, s15
 80135b0:	3401      	adds	r4, #1
 80135b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80135b6:	e74c      	b.n	8013452 <__kernel_rem_pio2f+0x1f2>
 80135b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80135bc:	aa08      	add	r2, sp, #32
 80135be:	ee10 3a10 	vmov	r3, s0
 80135c2:	e7f6      	b.n	80135b2 <__kernel_rem_pio2f+0x352>
 80135c4:	a808      	add	r0, sp, #32
 80135c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80135ca:	9001      	str	r0, [sp, #4]
 80135cc:	ee07 0a90 	vmov	s15, r0
 80135d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135d4:	3b01      	subs	r3, #1
 80135d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80135da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80135de:	ed62 7a01 	vstmdb	r2!, {s15}
 80135e2:	e743      	b.n	801346c <__kernel_rem_pio2f+0x20c>
 80135e4:	ecfc 6a01 	vldmia	ip!, {s13}
 80135e8:	ecb5 7a01 	vldmia	r5!, {s14}
 80135ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135f0:	3001      	adds	r0, #1
 80135f2:	4550      	cmp	r0, sl
 80135f4:	dc01      	bgt.n	80135fa <__kernel_rem_pio2f+0x39a>
 80135f6:	4282      	cmp	r2, r0
 80135f8:	daf4      	bge.n	80135e4 <__kernel_rem_pio2f+0x384>
 80135fa:	a858      	add	r0, sp, #352	@ 0x160
 80135fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013600:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013604:	3b01      	subs	r3, #1
 8013606:	e735      	b.n	8013474 <__kernel_rem_pio2f+0x214>
 8013608:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801360a:	2b02      	cmp	r3, #2
 801360c:	dc09      	bgt.n	8013622 <__kernel_rem_pio2f+0x3c2>
 801360e:	2b00      	cmp	r3, #0
 8013610:	dc2b      	bgt.n	801366a <__kernel_rem_pio2f+0x40a>
 8013612:	d044      	beq.n	801369e <__kernel_rem_pio2f+0x43e>
 8013614:	f009 0007 	and.w	r0, r9, #7
 8013618:	b059      	add	sp, #356	@ 0x164
 801361a:	ecbd 8b04 	vpop	{d8-d9}
 801361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013622:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013624:	2b03      	cmp	r3, #3
 8013626:	d1f5      	bne.n	8013614 <__kernel_rem_pio2f+0x3b4>
 8013628:	aa30      	add	r2, sp, #192	@ 0xc0
 801362a:	1f0b      	subs	r3, r1, #4
 801362c:	4413      	add	r3, r2
 801362e:	461a      	mov	r2, r3
 8013630:	4620      	mov	r0, r4
 8013632:	2800      	cmp	r0, #0
 8013634:	f1a2 0204 	sub.w	r2, r2, #4
 8013638:	dc52      	bgt.n	80136e0 <__kernel_rem_pio2f+0x480>
 801363a:	4622      	mov	r2, r4
 801363c:	2a01      	cmp	r2, #1
 801363e:	f1a3 0304 	sub.w	r3, r3, #4
 8013642:	dc5d      	bgt.n	8013700 <__kernel_rem_pio2f+0x4a0>
 8013644:	ab30      	add	r3, sp, #192	@ 0xc0
 8013646:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8013564 <__kernel_rem_pio2f+0x304>
 801364a:	440b      	add	r3, r1
 801364c:	2c01      	cmp	r4, #1
 801364e:	dc67      	bgt.n	8013720 <__kernel_rem_pio2f+0x4c0>
 8013650:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013654:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013658:	2e00      	cmp	r6, #0
 801365a:	d167      	bne.n	801372c <__kernel_rem_pio2f+0x4cc>
 801365c:	edc7 6a00 	vstr	s13, [r7]
 8013660:	ed87 7a01 	vstr	s14, [r7, #4]
 8013664:	edc7 7a02 	vstr	s15, [r7, #8]
 8013668:	e7d4      	b.n	8013614 <__kernel_rem_pio2f+0x3b4>
 801366a:	ab30      	add	r3, sp, #192	@ 0xc0
 801366c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8013564 <__kernel_rem_pio2f+0x304>
 8013670:	440b      	add	r3, r1
 8013672:	4622      	mov	r2, r4
 8013674:	2a00      	cmp	r2, #0
 8013676:	da24      	bge.n	80136c2 <__kernel_rem_pio2f+0x462>
 8013678:	b34e      	cbz	r6, 80136ce <__kernel_rem_pio2f+0x46e>
 801367a:	eef1 7a47 	vneg.f32	s15, s14
 801367e:	edc7 7a00 	vstr	s15, [r7]
 8013682:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801368a:	aa31      	add	r2, sp, #196	@ 0xc4
 801368c:	2301      	movs	r3, #1
 801368e:	429c      	cmp	r4, r3
 8013690:	da20      	bge.n	80136d4 <__kernel_rem_pio2f+0x474>
 8013692:	b10e      	cbz	r6, 8013698 <__kernel_rem_pio2f+0x438>
 8013694:	eef1 7a67 	vneg.f32	s15, s15
 8013698:	edc7 7a01 	vstr	s15, [r7, #4]
 801369c:	e7ba      	b.n	8013614 <__kernel_rem_pio2f+0x3b4>
 801369e:	ab30      	add	r3, sp, #192	@ 0xc0
 80136a0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8013564 <__kernel_rem_pio2f+0x304>
 80136a4:	440b      	add	r3, r1
 80136a6:	2c00      	cmp	r4, #0
 80136a8:	da05      	bge.n	80136b6 <__kernel_rem_pio2f+0x456>
 80136aa:	b10e      	cbz	r6, 80136b0 <__kernel_rem_pio2f+0x450>
 80136ac:	eef1 7a67 	vneg.f32	s15, s15
 80136b0:	edc7 7a00 	vstr	s15, [r7]
 80136b4:	e7ae      	b.n	8013614 <__kernel_rem_pio2f+0x3b4>
 80136b6:	ed33 7a01 	vldmdb	r3!, {s14}
 80136ba:	3c01      	subs	r4, #1
 80136bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136c0:	e7f1      	b.n	80136a6 <__kernel_rem_pio2f+0x446>
 80136c2:	ed73 7a01 	vldmdb	r3!, {s15}
 80136c6:	3a01      	subs	r2, #1
 80136c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136cc:	e7d2      	b.n	8013674 <__kernel_rem_pio2f+0x414>
 80136ce:	eef0 7a47 	vmov.f32	s15, s14
 80136d2:	e7d4      	b.n	801367e <__kernel_rem_pio2f+0x41e>
 80136d4:	ecb2 7a01 	vldmia	r2!, {s14}
 80136d8:	3301      	adds	r3, #1
 80136da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136de:	e7d6      	b.n	801368e <__kernel_rem_pio2f+0x42e>
 80136e0:	edd2 7a00 	vldr	s15, [r2]
 80136e4:	edd2 6a01 	vldr	s13, [r2, #4]
 80136e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80136ec:	3801      	subs	r0, #1
 80136ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136f2:	ed82 7a00 	vstr	s14, [r2]
 80136f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136fa:	edc2 7a01 	vstr	s15, [r2, #4]
 80136fe:	e798      	b.n	8013632 <__kernel_rem_pio2f+0x3d2>
 8013700:	edd3 7a00 	vldr	s15, [r3]
 8013704:	edd3 6a01 	vldr	s13, [r3, #4]
 8013708:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801370c:	3a01      	subs	r2, #1
 801370e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013712:	ed83 7a00 	vstr	s14, [r3]
 8013716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801371a:	edc3 7a01 	vstr	s15, [r3, #4]
 801371e:	e78d      	b.n	801363c <__kernel_rem_pio2f+0x3dc>
 8013720:	ed33 7a01 	vldmdb	r3!, {s14}
 8013724:	3c01      	subs	r4, #1
 8013726:	ee77 7a87 	vadd.f32	s15, s15, s14
 801372a:	e78f      	b.n	801364c <__kernel_rem_pio2f+0x3ec>
 801372c:	eef1 6a66 	vneg.f32	s13, s13
 8013730:	eeb1 7a47 	vneg.f32	s14, s14
 8013734:	edc7 6a00 	vstr	s13, [r7]
 8013738:	ed87 7a01 	vstr	s14, [r7, #4]
 801373c:	eef1 7a67 	vneg.f32	s15, s15
 8013740:	e790      	b.n	8013664 <__kernel_rem_pio2f+0x404>
 8013742:	bf00      	nop

08013744 <scalbnf>:
 8013744:	ee10 3a10 	vmov	r3, s0
 8013748:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801374c:	d02b      	beq.n	80137a6 <scalbnf+0x62>
 801374e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013752:	d302      	bcc.n	801375a <scalbnf+0x16>
 8013754:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013758:	4770      	bx	lr
 801375a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801375e:	d123      	bne.n	80137a8 <scalbnf+0x64>
 8013760:	4b24      	ldr	r3, [pc, #144]	@ (80137f4 <scalbnf+0xb0>)
 8013762:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80137f8 <scalbnf+0xb4>
 8013766:	4298      	cmp	r0, r3
 8013768:	ee20 0a27 	vmul.f32	s0, s0, s15
 801376c:	db17      	blt.n	801379e <scalbnf+0x5a>
 801376e:	ee10 3a10 	vmov	r3, s0
 8013772:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013776:	3a19      	subs	r2, #25
 8013778:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801377c:	4288      	cmp	r0, r1
 801377e:	dd15      	ble.n	80137ac <scalbnf+0x68>
 8013780:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80137fc <scalbnf+0xb8>
 8013784:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013800 <scalbnf+0xbc>
 8013788:	ee10 3a10 	vmov	r3, s0
 801378c:	eeb0 7a67 	vmov.f32	s14, s15
 8013790:	2b00      	cmp	r3, #0
 8013792:	bfb8      	it	lt
 8013794:	eef0 7a66 	vmovlt.f32	s15, s13
 8013798:	ee27 0a87 	vmul.f32	s0, s15, s14
 801379c:	4770      	bx	lr
 801379e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013804 <scalbnf+0xc0>
 80137a2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80137a6:	4770      	bx	lr
 80137a8:	0dd2      	lsrs	r2, r2, #23
 80137aa:	e7e5      	b.n	8013778 <scalbnf+0x34>
 80137ac:	4410      	add	r0, r2
 80137ae:	28fe      	cmp	r0, #254	@ 0xfe
 80137b0:	dce6      	bgt.n	8013780 <scalbnf+0x3c>
 80137b2:	2800      	cmp	r0, #0
 80137b4:	dd06      	ble.n	80137c4 <scalbnf+0x80>
 80137b6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137ba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137be:	ee00 3a10 	vmov	s0, r3
 80137c2:	4770      	bx	lr
 80137c4:	f110 0f16 	cmn.w	r0, #22
 80137c8:	da09      	bge.n	80137de <scalbnf+0x9a>
 80137ca:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013804 <scalbnf+0xc0>
 80137ce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013808 <scalbnf+0xc4>
 80137d2:	ee10 3a10 	vmov	r3, s0
 80137d6:	eeb0 7a67 	vmov.f32	s14, s15
 80137da:	2b00      	cmp	r3, #0
 80137dc:	e7d9      	b.n	8013792 <scalbnf+0x4e>
 80137de:	3019      	adds	r0, #25
 80137e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137e4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137e8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801380c <scalbnf+0xc8>
 80137ec:	ee07 3a90 	vmov	s15, r3
 80137f0:	e7d7      	b.n	80137a2 <scalbnf+0x5e>
 80137f2:	bf00      	nop
 80137f4:	ffff3cb0 	.word	0xffff3cb0
 80137f8:	4c000000 	.word	0x4c000000
 80137fc:	7149f2ca 	.word	0x7149f2ca
 8013800:	f149f2ca 	.word	0xf149f2ca
 8013804:	0da24260 	.word	0x0da24260
 8013808:	8da24260 	.word	0x8da24260
 801380c:	33000000 	.word	0x33000000

08013810 <floorf>:
 8013810:	ee10 3a10 	vmov	r3, s0
 8013814:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013818:	3a7f      	subs	r2, #127	@ 0x7f
 801381a:	2a16      	cmp	r2, #22
 801381c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013820:	dc2b      	bgt.n	801387a <floorf+0x6a>
 8013822:	2a00      	cmp	r2, #0
 8013824:	da12      	bge.n	801384c <floorf+0x3c>
 8013826:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801388c <floorf+0x7c>
 801382a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801382e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	dd06      	ble.n	8013846 <floorf+0x36>
 8013838:	2b00      	cmp	r3, #0
 801383a:	da24      	bge.n	8013886 <floorf+0x76>
 801383c:	2900      	cmp	r1, #0
 801383e:	4b14      	ldr	r3, [pc, #80]	@ (8013890 <floorf+0x80>)
 8013840:	bf08      	it	eq
 8013842:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013846:	ee00 3a10 	vmov	s0, r3
 801384a:	4770      	bx	lr
 801384c:	4911      	ldr	r1, [pc, #68]	@ (8013894 <floorf+0x84>)
 801384e:	4111      	asrs	r1, r2
 8013850:	420b      	tst	r3, r1
 8013852:	d0fa      	beq.n	801384a <floorf+0x3a>
 8013854:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801388c <floorf+0x7c>
 8013858:	ee30 0a27 	vadd.f32	s0, s0, s15
 801385c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013864:	ddef      	ble.n	8013846 <floorf+0x36>
 8013866:	2b00      	cmp	r3, #0
 8013868:	bfbe      	ittt	lt
 801386a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801386e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013872:	189b      	addlt	r3, r3, r2
 8013874:	ea23 0301 	bic.w	r3, r3, r1
 8013878:	e7e5      	b.n	8013846 <floorf+0x36>
 801387a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801387e:	d3e4      	bcc.n	801384a <floorf+0x3a>
 8013880:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013884:	4770      	bx	lr
 8013886:	2300      	movs	r3, #0
 8013888:	e7dd      	b.n	8013846 <floorf+0x36>
 801388a:	bf00      	nop
 801388c:	7149f2ca 	.word	0x7149f2ca
 8013890:	bf800000 	.word	0xbf800000
 8013894:	007fffff 	.word	0x007fffff

08013898 <_init>:
 8013898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801389a:	bf00      	nop
 801389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801389e:	bc08      	pop	{r3}
 80138a0:	469e      	mov	lr, r3
 80138a2:	4770      	bx	lr

080138a4 <_fini>:
 80138a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a6:	bf00      	nop
 80138a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138aa:	bc08      	pop	{r3}
 80138ac:	469e      	mov	lr, r3
 80138ae:	4770      	bx	lr
